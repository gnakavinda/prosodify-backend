"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-proxy-agent";
exports.ids = ["vendor-chunks/http-proxy-agent"];
exports.modules = {

/***/ "(rsc)/./node_modules/http-proxy-agent/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/http-proxy-agent/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HttpProxyAgent = void 0;\nconst net = __importStar(__webpack_require__(/*! net */ \"net\"));\nconst tls = __importStar(__webpack_require__(/*! tls */ \"tls\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\"));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst agent_base_1 = __webpack_require__(/*! agent-base */ \"(rsc)/./node_modules/agent-base/dist/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst debug = (0, debug_1.default)(\"http-proxy-agent\");\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects\n * to the specified \"HTTP proxy server\" in order to proxy HTTP requests.\n */ class HttpProxyAgent extends agent_base_1.Agent {\n    constructor(proxy, opts){\n        super(opts);\n        this.proxy = typeof proxy === \"string\" ? new url_1.URL(proxy) : proxy;\n        this.proxyHeaders = opts?.headers ?? {};\n        debug(\"Creating new HttpProxyAgent instance: %o\", this.proxy.href);\n        // Trim off the brackets from IPv6 addresses\n        const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, \"\");\n        const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === \"https:\" ? 443 : 80;\n        this.connectOpts = {\n            ...opts ? omit(opts, \"headers\") : null,\n            host,\n            port\n        };\n    }\n    addRequest(req, opts) {\n        req._header = null;\n        this.setRequestProps(req, opts);\n        // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n        super.addRequest(req, opts);\n    }\n    setRequestProps(req, opts) {\n        const { proxy } = this;\n        const protocol = opts.secureEndpoint ? \"https:\" : \"http:\";\n        const hostname = req.getHeader(\"host\") || \"localhost\";\n        const base = `${protocol}//${hostname}`;\n        const url = new url_1.URL(req.path, base);\n        if (opts.port !== 80) {\n            url.port = String(opts.port);\n        }\n        // Change the `http.ClientRequest` instance's \"path\" field\n        // to the absolute path of the URL that will be requested.\n        req.path = String(url);\n        // Inject the `Proxy-Authorization` header if necessary.\n        const headers = typeof this.proxyHeaders === \"function\" ? this.proxyHeaders() : {\n            ...this.proxyHeaders\n        };\n        if (proxy.username || proxy.password) {\n            const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n            headers[\"Proxy-Authorization\"] = `Basic ${Buffer.from(auth).toString(\"base64\")}`;\n        }\n        if (!headers[\"Proxy-Connection\"]) {\n            headers[\"Proxy-Connection\"] = this.keepAlive ? \"Keep-Alive\" : \"close\";\n        }\n        for (const name of Object.keys(headers)){\n            const value = headers[name];\n            if (value) {\n                req.setHeader(name, value);\n            }\n        }\n    }\n    async connect(req, opts) {\n        req._header = null;\n        if (!req.path.includes(\"://\")) {\n            this.setRequestProps(req, opts);\n        }\n        // At this point, the http ClientRequest's internal `_header` field\n        // might have already been set. If this is the case then we'll need\n        // to re-generate the string since we just changed the `req.path`.\n        let first;\n        let endOfHeaders;\n        debug(\"Regenerating stored HTTP header string for request\");\n        req._implicitHeader();\n        if (req.outputData && req.outputData.length > 0) {\n            debug(\"Patching connection write() output buffer with updated header\");\n            first = req.outputData[0].data;\n            endOfHeaders = first.indexOf(\"\\r\\n\\r\\n\") + 4;\n            req.outputData[0].data = req._header + first.substring(endOfHeaders);\n            debug(\"Output buffer: %o\", req.outputData[0].data);\n        }\n        // Create a socket connection to the proxy server.\n        let socket;\n        if (this.proxy.protocol === \"https:\") {\n            debug(\"Creating `tls.Socket`: %o\", this.connectOpts);\n            socket = tls.connect(this.connectOpts);\n        } else {\n            debug(\"Creating `net.Socket`: %o\", this.connectOpts);\n            socket = net.connect(this.connectOpts);\n        }\n        // Wait for the socket's `connect` event, so that this `callback()`\n        // function throws instead of the `http` request machinery. This is\n        // important for i.e. `PacProxyAgent` which determines a failed proxy\n        // connection via the `callback()` function throwing.\n        await (0, events_1.once)(socket, \"connect\");\n        return socket;\n    }\n}\nHttpProxyAgent.protocols = [\n    \"http\",\n    \"https\"\n];\nexports.HttpProxyAgent = HttpProxyAgent;\nfunction omit(obj, ...keys) {\n    const ret = {};\n    let key;\n    for(key in obj){\n        if (!keys.includes(key)) {\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/http-proxy-agent/dist/index.js\n");

/***/ })

};
;