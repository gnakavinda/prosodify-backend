"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/open";
exports.ids = ["vendor-chunks/open"];
exports.modules = {

/***/ "(rsc)/./node_modules/open/index.js":
/*!************************************!*\
  !*** ./node_modules/open/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst { promises: fs, constants: fsConstants } = __webpack_require__(/*! fs */ \"fs\");\nconst isWsl = __webpack_require__(/*! is-wsl */ \"(rsc)/./node_modules/is-wsl/index.js\");\nconst isDocker = __webpack_require__(/*! is-docker */ \"(rsc)/./node_modules/is-docker/index.js\");\nconst defineLazyProperty = __webpack_require__(/*! define-lazy-prop */ \"(rsc)/./node_modules/define-lazy-prop/index.js\");\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, \"xdg-open\");\nconst { platform, arch } = process;\n// Podman detection\nconst hasContainerEnv = ()=>{\n    try {\n        fs.statSync(\"/run/.containerenv\");\n        return true;\n    } catch  {\n        return false;\n    }\n};\nlet cachedResult;\nfunction isInsideContainer() {\n    if (cachedResult === undefined) {\n        cachedResult = hasContainerEnv() || isDocker();\n    }\n    return cachedResult;\n}\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/ const getWslDrivesMountPoint = (()=>{\n    // Default value for \"root\" param\n    // according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n    const defaultMountPoint = \"/mnt/\";\n    let mountPoint;\n    return async function() {\n        if (mountPoint) {\n            // Return memoized mount point value\n            return mountPoint;\n        }\n        const configFilePath = \"/etc/wsl.conf\";\n        let isConfigFileExists = false;\n        try {\n            await fs.access(configFilePath, fsConstants.F_OK);\n            isConfigFileExists = true;\n        } catch  {}\n        if (!isConfigFileExists) {\n            return defaultMountPoint;\n        }\n        const configContent = await fs.readFile(configFilePath, {\n            encoding: \"utf8\"\n        });\n        const configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n        if (!configMountPoint) {\n            return defaultMountPoint;\n        }\n        mountPoint = configMountPoint.groups.mountPoint.trim();\n        mountPoint = mountPoint.endsWith(\"/\") ? mountPoint : `${mountPoint}/`;\n        return mountPoint;\n    };\n})();\nconst pTryEach = async (array, mapper)=>{\n    let latestError;\n    for (const item of array){\n        try {\n            return await mapper(item); // eslint-disable-line no-await-in-loop\n        } catch (error) {\n            latestError = error;\n        }\n    }\n    throw latestError;\n};\nconst baseOpen = async (options)=>{\n    options = {\n        wait: false,\n        background: false,\n        newInstance: false,\n        allowNonzeroExitCode: false,\n        ...options\n    };\n    if (Array.isArray(options.app)) {\n        return pTryEach(options.app, (singleApp)=>baseOpen({\n                ...options,\n                app: singleApp\n            }));\n    }\n    let { name: app, arguments: appArguments = [] } = options.app || {};\n    appArguments = [\n        ...appArguments\n    ];\n    if (Array.isArray(app)) {\n        return pTryEach(app, (appName)=>baseOpen({\n                ...options,\n                app: {\n                    name: appName,\n                    arguments: appArguments\n                }\n            }));\n    }\n    let command;\n    const cliArguments = [];\n    const childProcessOptions = {};\n    if (platform === \"darwin\") {\n        command = \"open\";\n        if (options.wait) {\n            cliArguments.push(\"--wait-apps\");\n        }\n        if (options.background) {\n            cliArguments.push(\"--background\");\n        }\n        if (options.newInstance) {\n            cliArguments.push(\"--new\");\n        }\n        if (app) {\n            cliArguments.push(\"-a\", app);\n        }\n    } else if (platform === \"win32\" || isWsl && !isInsideContainer() && !app) {\n        const mountPoint = await getWslDrivesMountPoint();\n        command = isWsl ? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n        cliArguments.push(\"-NoProfile\", \"-NonInteractive\", \"â€“ExecutionPolicy\", \"Bypass\", \"-EncodedCommand\");\n        if (!isWsl) {\n            childProcessOptions.windowsVerbatimArguments = true;\n        }\n        const encodedArguments = [\n            \"Start\"\n        ];\n        if (options.wait) {\n            encodedArguments.push(\"-Wait\");\n        }\n        if (app) {\n            // Double quote with double quotes to ensure the inner quotes are passed through.\n            // Inner quotes are delimited for PowerShell interpretation with backticks.\n            encodedArguments.push(`\"\\`\"${app}\\`\"\"`, \"-ArgumentList\");\n            if (options.target) {\n                appArguments.unshift(options.target);\n            }\n        } else if (options.target) {\n            encodedArguments.push(`\"${options.target}\"`);\n        }\n        if (appArguments.length > 0) {\n            appArguments = appArguments.map((arg)=>`\"\\`\"${arg}\\`\"\"`);\n            encodedArguments.push(appArguments.join(\",\"));\n        }\n        // Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n        options.target = Buffer.from(encodedArguments.join(\" \"), \"utf16le\").toString(\"base64\");\n    } else {\n        if (app) {\n            command = app;\n        } else {\n            // When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n            const isBundled =  false || __dirname === \"/\";\n            // Check if local `xdg-open` exists and is executable.\n            let exeLocalXdgOpen = false;\n            try {\n                await fs.access(localXdgOpenPath, fsConstants.X_OK);\n                exeLocalXdgOpen = true;\n            } catch  {}\n            const useSystemXdgOpen = process.versions.electron || platform === \"android\" || isBundled || !exeLocalXdgOpen;\n            command = useSystemXdgOpen ? \"xdg-open\" : localXdgOpenPath;\n        }\n        if (appArguments.length > 0) {\n            cliArguments.push(...appArguments);\n        }\n        if (!options.wait) {\n            // `xdg-open` will block the process unless stdio is ignored\n            // and it's detached from the parent even if it's unref'd.\n            childProcessOptions.stdio = \"ignore\";\n            childProcessOptions.detached = true;\n        }\n    }\n    if (options.target) {\n        cliArguments.push(options.target);\n    }\n    if (platform === \"darwin\" && appArguments.length > 0) {\n        cliArguments.push(\"--args\", ...appArguments);\n    }\n    const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n    if (options.wait) {\n        return new Promise((resolve, reject)=>{\n            subprocess.once(\"error\", reject);\n            subprocess.once(\"close\", (exitCode)=>{\n                if (!options.allowNonzeroExitCode && exitCode > 0) {\n                    reject(new Error(`Exited with code ${exitCode}`));\n                    return;\n                }\n                resolve(subprocess);\n            });\n        });\n    }\n    subprocess.unref();\n    return subprocess;\n};\nconst open = (target, options)=>{\n    if (typeof target !== \"string\") {\n        throw new TypeError(\"Expected a `target`\");\n    }\n    return baseOpen({\n        ...options,\n        target\n    });\n};\nconst openApp = (name, options)=>{\n    if (typeof name !== \"string\") {\n        throw new TypeError(\"Expected a `name`\");\n    }\n    const { arguments: appArguments = [] } = options || {};\n    if (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n        throw new TypeError(\"Expected `appArguments` as Array type\");\n    }\n    return baseOpen({\n        ...options,\n        app: {\n            name,\n            arguments: appArguments\n        }\n    });\n};\nfunction detectArchBinary(binary) {\n    if (typeof binary === \"string\" || Array.isArray(binary)) {\n        return binary;\n    }\n    const { [arch]: archBinary } = binary;\n    if (!archBinary) {\n        throw new Error(`${arch} is not supported`);\n    }\n    return archBinary;\n}\nfunction detectPlatformBinary({ [platform]: platformBinary }, { wsl }) {\n    if (wsl && isWsl) {\n        return detectArchBinary(wsl);\n    }\n    if (!platformBinary) {\n        throw new Error(`${platform} is not supported`);\n    }\n    return detectArchBinary(platformBinary);\n}\nconst apps = {};\ndefineLazyProperty(apps, \"chrome\", ()=>detectPlatformBinary({\n        darwin: \"google chrome\",\n        win32: \"chrome\",\n        linux: [\n            \"google-chrome\",\n            \"google-chrome-stable\",\n            \"chromium\"\n        ]\n    }, {\n        wsl: {\n            ia32: \"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe\",\n            x64: [\n                \"/mnt/c/Program Files/Google/Chrome/Application/chrome.exe\",\n                \"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe\"\n            ]\n        }\n    }));\ndefineLazyProperty(apps, \"firefox\", ()=>detectPlatformBinary({\n        darwin: \"firefox\",\n        win32: \"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\",\n        linux: \"firefox\"\n    }, {\n        wsl: \"/mnt/c/Program Files/Mozilla Firefox/firefox.exe\"\n    }));\ndefineLazyProperty(apps, \"edge\", ()=>detectPlatformBinary({\n        darwin: \"microsoft edge\",\n        win32: \"msedge\",\n        linux: [\n            \"microsoft-edge\",\n            \"microsoft-edge-dev\"\n        ]\n    }, {\n        wsl: \"/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe\"\n    }));\nopen.apps = apps;\nopen.openApp = openApp;\nmodule.exports = open;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/open/index.js\n");

/***/ })

};
;