/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sprintf-js";
exports.ids = ["vendor-chunks/sprintf-js"];
exports.modules = {

/***/ "(rsc)/./node_modules/sprintf-js/src/sprintf.js":
/*!************************************************!*\
  !*** ./node_modules/sprintf-js/src/sprintf.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/* global window, exports, define */ !function() {\n    \"use strict\";\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    };\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments);\n    }\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [\n            fmt\n        ].concat(argv || []));\n    }\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = \"\", i, k, ph, pad, pad_character, pad_length, is_positive, sign;\n        for(i = 0; i < tree_length; i++){\n            if (typeof parse_tree[i] === \"string\") {\n                output += parse_tree[i];\n            } else if (typeof parse_tree[i] === \"object\") {\n                ph = parse_tree[i] // convenience purposes only\n                ;\n                if (ph.keys) {\n                    arg = argv[cursor];\n                    for(k = 0; k < ph.keys.length; k++){\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k - 1]));\n                        }\n                        arg = arg[ph.keys[k]];\n                    }\n                } else if (ph.param_no) {\n                    arg = argv[ph.param_no];\n                } else {\n                    arg = argv[cursor++];\n                }\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg();\n                }\n                if (re.numeric_arg.test(ph.type) && typeof arg !== \"number\" && isNaN(arg)) {\n                    throw new TypeError(sprintf(\"[sprintf] expecting number but found %T\", arg));\n                }\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0;\n                }\n                switch(ph.type){\n                    case \"b\":\n                        arg = parseInt(arg, 10).toString(2);\n                        break;\n                    case \"c\":\n                        arg = String.fromCharCode(parseInt(arg, 10));\n                        break;\n                    case \"d\":\n                    case \"i\":\n                        arg = parseInt(arg, 10);\n                        break;\n                    case \"j\":\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);\n                        break;\n                    case \"e\":\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();\n                        break;\n                    case \"f\":\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);\n                        break;\n                    case \"g\":\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);\n                        break;\n                    case \"o\":\n                        arg = (parseInt(arg, 10) >>> 0).toString(8);\n                        break;\n                    case \"s\":\n                        arg = String(arg);\n                        arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n                        break;\n                    case \"t\":\n                        arg = String(!!arg);\n                        arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n                        break;\n                    case \"T\":\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();\n                        arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n                        break;\n                    case \"u\":\n                        arg = parseInt(arg, 10) >>> 0;\n                        break;\n                    case \"v\":\n                        arg = arg.valueOf();\n                        arg = ph.precision ? arg.substring(0, ph.precision) : arg;\n                        break;\n                    case \"x\":\n                        arg = (parseInt(arg, 10) >>> 0).toString(16);\n                        break;\n                    case \"X\":\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();\n                        break;\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg;\n                } else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? \"+\" : \"-\";\n                        arg = arg.toString().replace(re.sign, \"\");\n                    } else {\n                        sign = \"\";\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === \"0\" ? \"0\" : ph.pad_char.charAt(1) : \" \";\n                    pad_length = ph.width - (sign + arg).length;\n                    pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : \"\" : \"\";\n                    output += ph.align ? sign + arg + pad : pad_character === \"0\" ? sign + pad + arg : pad + sign + arg;\n                }\n            }\n        }\n        return output;\n    }\n    var sprintf_cache = Object.create(null);\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt];\n        }\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0;\n        while(_fmt){\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0]);\n            } else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push(\"%\");\n            } else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1;\n                    var field_list = [], replacement_field = match[2], field_match = [];\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1]);\n                        while((replacement_field = replacement_field.substring(field_match[0].length)) !== \"\"){\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1]);\n                            } else {\n                                throw new SyntaxError(\"[sprintf] failed to parse named argument key\");\n                            }\n                        }\n                    } else {\n                        throw new SyntaxError(\"[sprintf] failed to parse named argument key\");\n                    }\n                    match[2] = field_list;\n                } else {\n                    arg_names |= 2;\n                }\n                if (arg_names === 3) {\n                    throw new Error(\"[sprintf] mixing positional and named placeholders is not (yet) supported\");\n                }\n                parse_tree.push({\n                    placeholder: match[0],\n                    param_no: match[1],\n                    keys: match[2],\n                    sign: match[3],\n                    pad_char: match[4],\n                    align: match[5],\n                    width: match[6],\n                    precision: match[7],\n                    type: match[8]\n                });\n            } else {\n                throw new SyntaxError(\"[sprintf] unexpected placeholder\");\n            }\n            _fmt = _fmt.substring(match[0].length);\n        }\n        return sprintf_cache[fmt] = parse_tree;\n    }\n    /**\n     * export to either browser or node.js\n     */ /* eslint-disable quote-props */ if (true) {\n        exports.sprintf = sprintf;\n        exports.vsprintf = vsprintf;\n    }\n    if (false) {}\n/* eslint-enable quote-props */ }(); // eslint-disable-line\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/sprintf-js/src/sprintf.js\n");

/***/ })

};
;