"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@js-joda";
exports.ids = ["vendor-chunks/@js-joda"];
exports.modules = {

/***/ "(rsc)/./node_modules/@js-joda/core/dist/js-joda.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@js-joda/core/dist/js-joda.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArithmeticException: () => (/* binding */ ArithmeticException),\n/* harmony export */   ChronoField: () => (/* binding */ ChronoField),\n/* harmony export */   ChronoLocalDate: () => (/* binding */ ChronoLocalDate),\n/* harmony export */   ChronoLocalDateTime: () => (/* binding */ ChronoLocalDateTime),\n/* harmony export */   ChronoUnit: () => (/* binding */ ChronoUnit),\n/* harmony export */   ChronoZonedDateTime: () => (/* binding */ ChronoZonedDateTime),\n/* harmony export */   Clock: () => (/* binding */ Clock),\n/* harmony export */   DateTimeException: () => (/* binding */ DateTimeException),\n/* harmony export */   DateTimeFormatter: () => (/* binding */ DateTimeFormatter),\n/* harmony export */   DateTimeFormatterBuilder: () => (/* binding */ DateTimeFormatterBuilder),\n/* harmony export */   DateTimeParseException: () => (/* binding */ DateTimeParseException),\n/* harmony export */   DayOfWeek: () => (/* binding */ DayOfWeek),\n/* harmony export */   DecimalStyle: () => (/* binding */ DecimalStyle),\n/* harmony export */   Duration: () => (/* binding */ Duration),\n/* harmony export */   IllegalArgumentException: () => (/* binding */ IllegalArgumentException),\n/* harmony export */   IllegalStateException: () => (/* binding */ IllegalStateException),\n/* harmony export */   Instant: () => (/* binding */ Instant),\n/* harmony export */   IsoChronology: () => (/* binding */ IsoChronology),\n/* harmony export */   IsoFields: () => (/* binding */ IsoFields),\n/* harmony export */   LocalDate: () => (/* binding */ LocalDate),\n/* harmony export */   LocalDateTime: () => (/* binding */ LocalDateTime),\n/* harmony export */   LocalTime: () => (/* binding */ LocalTime),\n/* harmony export */   Month: () => (/* binding */ Month),\n/* harmony export */   MonthDay: () => (/* binding */ MonthDay),\n/* harmony export */   NullPointerException: () => (/* binding */ NullPointerException),\n/* harmony export */   OffsetDateTime: () => (/* binding */ OffsetDateTime),\n/* harmony export */   OffsetTime: () => (/* binding */ OffsetTime),\n/* harmony export */   ParsePosition: () => (/* binding */ ParsePosition),\n/* harmony export */   Period: () => (/* binding */ Period),\n/* harmony export */   ResolverStyle: () => (/* binding */ ResolverStyle),\n/* harmony export */   SignStyle: () => (/* binding */ SignStyle),\n/* harmony export */   Temporal: () => (/* binding */ Temporal),\n/* harmony export */   TemporalAccessor: () => (/* binding */ TemporalAccessor),\n/* harmony export */   TemporalAdjuster: () => (/* binding */ TemporalAdjuster),\n/* harmony export */   TemporalAdjusters: () => (/* binding */ TemporalAdjusters),\n/* harmony export */   TemporalAmount: () => (/* binding */ TemporalAmount),\n/* harmony export */   TemporalField: () => (/* binding */ TemporalField),\n/* harmony export */   TemporalQueries: () => (/* binding */ TemporalQueries),\n/* harmony export */   TemporalQuery: () => (/* binding */ TemporalQuery),\n/* harmony export */   TemporalUnit: () => (/* binding */ TemporalUnit),\n/* harmony export */   TextStyle: () => (/* binding */ TextStyle),\n/* harmony export */   UnsupportedTemporalTypeException: () => (/* binding */ UnsupportedTemporalTypeException),\n/* harmony export */   ValueRange: () => (/* binding */ ValueRange),\n/* harmony export */   Year: () => (/* binding */ Year),\n/* harmony export */   YearConstants: () => (/* binding */ YearConstants),\n/* harmony export */   YearMonth: () => (/* binding */ YearMonth),\n/* harmony export */   ZoneId: () => (/* binding */ ZoneId),\n/* harmony export */   ZoneOffset: () => (/* binding */ ZoneOffset),\n/* harmony export */   ZoneOffsetTransition: () => (/* binding */ ZoneOffsetTransition),\n/* harmony export */   ZoneRegion: () => (/* binding */ ZoneRegion),\n/* harmony export */   ZoneRules: () => (/* binding */ ZoneRules),\n/* harmony export */   ZoneRulesProvider: () => (/* binding */ ZoneRulesProvider),\n/* harmony export */   ZonedDateTime: () => (/* binding */ ZonedDateTime),\n/* harmony export */   _: () => (/* binding */ _),\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   nativeJs: () => (/* binding */ nativeJs),\n/* harmony export */   use: () => (/* binding */ use)\n/* harmony export */ });\n//! @version @js-joda/core - 5.6.5\n//! @copyright (c) 2015-present, Philipp Thürwächter, Pattrick Hüper & js-joda contributors\n//! @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n//! @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ function createErrorType(name, init, superErrorClass) {\n    if (superErrorClass === void 0) {\n        superErrorClass = Error;\n    }\n    function JsJodaException(message) {\n        if (!Error.captureStackTrace) {\n            this.stack = new Error().stack;\n        } else {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this.message = message;\n        init && init.apply(this, arguments);\n        this.toString = function() {\n            return this.name + \": \" + this.message;\n        };\n    }\n    JsJodaException.prototype = Object.create(superErrorClass.prototype);\n    JsJodaException.prototype.name = name;\n    JsJodaException.prototype.constructor = JsJodaException;\n    return JsJodaException;\n}\nvar DateTimeException = createErrorType(\"DateTimeException\", messageWithCause);\nvar DateTimeParseException = createErrorType(\"DateTimeParseException\", messageForDateTimeParseException);\nvar UnsupportedTemporalTypeException = createErrorType(\"UnsupportedTemporalTypeException\", null, DateTimeException);\nvar ArithmeticException = createErrorType(\"ArithmeticException\");\nvar IllegalArgumentException = createErrorType(\"IllegalArgumentException\");\nvar IllegalStateException = createErrorType(\"IllegalStateException\");\nvar NullPointerException = createErrorType(\"NullPointerException\");\nfunction messageWithCause(message, cause) {\n    if (cause === void 0) {\n        cause = null;\n    }\n    var msg = message || this.name;\n    if (cause !== null && cause instanceof Error) {\n        msg += \"\\n-------\\nCaused by: \" + cause.stack + \"\\n-------\\n\";\n    }\n    this.message = msg;\n}\nfunction messageForDateTimeParseException(message, text, index, cause) {\n    if (text === void 0) {\n        text = \"\";\n    }\n    if (index === void 0) {\n        index = 0;\n    }\n    if (cause === void 0) {\n        cause = null;\n    }\n    var msg = message || this.name;\n    msg += \": \" + text + \", at index: \" + index;\n    if (cause !== null && cause instanceof Error) {\n        msg += \"\\n-------\\nCaused by: \" + cause.stack + \"\\n-------\\n\";\n    }\n    this.message = msg;\n    this.parsedString = function() {\n        return text;\n    };\n    this.errorIndex = function() {\n        return index;\n    };\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ function assert(assertion, msg, error) {\n    if (!assertion) {\n        if (error) {\n            throw new error(msg);\n        } else {\n            throw new Error(msg);\n        }\n    }\n}\nfunction requireNonNull(value, parameterName) {\n    if (value == null) {\n        throw new NullPointerException(parameterName + \" must not be null\");\n    }\n    return value;\n}\nfunction requireInstance(value, _class, parameterName) {\n    if (!(value instanceof _class)) {\n        throw new IllegalArgumentException(parameterName + \" must be an instance of \" + (_class.name ? _class.name : _class) + (value && value.constructor && value.constructor.name ? \", but is \" + value.constructor.name : \"\"));\n    }\n    return value;\n}\nfunction abstractMethodFail(methodName) {\n    throw new TypeError('abstract method \"' + methodName + '\" is not implemented');\n}\nvar assert$1 = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    abstractMethodFail: abstractMethodFail,\n    assert: assert,\n    requireInstance: requireInstance,\n    requireNonNull: requireNonNull\n});\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var MAX_SAFE_INTEGER = 9007199254740991;\nvar MIN_SAFE_INTEGER = -9007199254740991;\nvar MathUtil = function() {\n    function MathUtil() {}\n    MathUtil.intDiv = function intDiv(x, y) {\n        var r = x / y;\n        r = MathUtil.roundDown(r);\n        return MathUtil.safeZero(r);\n    };\n    MathUtil.intMod = function intMod(x, y) {\n        var r = x - MathUtil.intDiv(x, y) * y;\n        r = MathUtil.roundDown(r);\n        return MathUtil.safeZero(r);\n    };\n    MathUtil.roundDown = function roundDown(r) {\n        if (r < 0) {\n            return Math.ceil(r);\n        } else {\n            return Math.floor(r);\n        }\n    };\n    MathUtil.floorDiv = function floorDiv(x, y) {\n        var r = Math.floor(x / y);\n        return MathUtil.safeZero(r);\n    };\n    MathUtil.floorMod = function floorMod(x, y) {\n        var r = x - MathUtil.floorDiv(x, y) * y;\n        return MathUtil.safeZero(r);\n    };\n    MathUtil.safeAdd = function safeAdd(x, y) {\n        MathUtil.verifyInt(x);\n        MathUtil.verifyInt(y);\n        if (x === 0) {\n            return MathUtil.safeZero(y);\n        }\n        if (y === 0) {\n            return MathUtil.safeZero(x);\n        }\n        var r = MathUtil.safeToInt(x + y);\n        if (r === x || r === y) {\n            throw new ArithmeticException(\"Invalid addition beyond MAX_SAFE_INTEGER!\");\n        }\n        return r;\n    };\n    MathUtil.safeSubtract = function safeSubtract(x, y) {\n        MathUtil.verifyInt(x);\n        MathUtil.verifyInt(y);\n        if (x === 0 && y === 0) {\n            return 0;\n        } else if (x === 0) {\n            return MathUtil.safeZero(-1 * y);\n        } else if (y === 0) {\n            return MathUtil.safeZero(x);\n        }\n        return MathUtil.safeToInt(x - y);\n    };\n    MathUtil.safeMultiply = function safeMultiply(x, y) {\n        MathUtil.verifyInt(x);\n        MathUtil.verifyInt(y);\n        if (x === 1) {\n            return MathUtil.safeZero(y);\n        }\n        if (y === 1) {\n            return MathUtil.safeZero(x);\n        }\n        if (x === 0 || y === 0) {\n            return 0;\n        }\n        var r = MathUtil.safeToInt(x * y);\n        if (r / y !== x || x === MIN_SAFE_INTEGER && y === -1 || y === MIN_SAFE_INTEGER && x === -1) {\n            throw new ArithmeticException(\"Multiplication overflows: \" + x + \" * \" + y);\n        }\n        return r;\n    };\n    MathUtil.parseInt = function(_parseInt) {\n        function parseInt1(_x) {\n            return _parseInt.apply(this, arguments);\n        }\n        parseInt1.toString = function() {\n            return _parseInt.toString();\n        };\n        return parseInt1;\n    }(function(value) {\n        var r = parseInt(value);\n        return MathUtil.safeToInt(r);\n    });\n    MathUtil.safeToInt = function safeToInt(value) {\n        MathUtil.verifyInt(value);\n        return MathUtil.safeZero(value);\n    };\n    MathUtil.verifyInt = function verifyInt(value) {\n        if (value == null) {\n            throw new ArithmeticException(\"Invalid value: '\" + value + \"', using null or undefined as argument\");\n        }\n        if (isNaN(value)) {\n            throw new ArithmeticException(\"Invalid int value, using NaN as argument\");\n        }\n        if (Number.isInteger) {\n            if (!Number.isInteger(Number(value))) {\n                throw new ArithmeticException(\"Invalid value: '\" + value + \"' is a float\");\n            }\n        } else if (value % 1 !== 0) {\n            throw new ArithmeticException(\"Invalid value: '\" + value + \"' is a float\");\n        }\n        if (value > MAX_SAFE_INTEGER || value < MIN_SAFE_INTEGER) {\n            throw new ArithmeticException(\"Calculation overflows an int: \" + value);\n        }\n    };\n    MathUtil.safeZero = function safeZero(value) {\n        return value === 0 ? 0 : +value;\n    };\n    MathUtil.compareNumbers = function compareNumbers(a, b) {\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    };\n    MathUtil.smi = function smi(int) {\n        return int >>> 1 & 0x40000000 | int & 0xBFFFFFFF;\n    };\n    MathUtil.hash = function hash(number) {\n        if (number !== number || number === Infinity) {\n            return 0;\n        }\n        var result = number;\n        while(number > 0xFFFFFFFF){\n            number /= 0xFFFFFFFF;\n            result ^= number;\n        }\n        return MathUtil.smi(result);\n    };\n    MathUtil.hashCode = function hashCode() {\n        var result = 17;\n        for(var _len = arguments.length, numbers = new Array(_len), _key = 0; _key < _len; _key++){\n            numbers[_key] = arguments[_key];\n        }\n        for(var _i = 0, _numbers = numbers; _i < _numbers.length; _i++){\n            var n = _numbers[_i];\n            result = (result << 5) - result + MathUtil.hash(n);\n        }\n        return MathUtil.hash(result);\n    };\n    return MathUtil;\n}();\nMathUtil.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nMathUtil.MIN_SAFE_INTEGER = MIN_SAFE_INTEGER;\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var Enum = function() {\n    function Enum(name) {\n        this._name = name;\n    }\n    var _proto = Enum.prototype;\n    _proto.equals = function equals(other) {\n        return this === other;\n    };\n    _proto.toString = function toString() {\n        return this._name;\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    return Enum;\n}();\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var TemporalAmount = function() {\n    function TemporalAmount() {}\n    var _proto = TemporalAmount.prototype;\n    _proto.get = function get(unit) {\n        abstractMethodFail(\"get\");\n    };\n    _proto.units = function units() {\n        abstractMethodFail(\"units\");\n    };\n    _proto.addTo = function addTo(temporal) {\n        abstractMethodFail(\"addTo\");\n    };\n    _proto.subtractFrom = function subtractFrom(temporal) {\n        abstractMethodFail(\"subtractFrom\");\n    };\n    return TemporalAmount;\n}();\nif (typeof Symbol !== \"undefined\" && Symbol.toPrimitive) {\n    TemporalAmount.prototype[Symbol.toPrimitive] = function(hint) {\n        if (hint !== \"number\") {\n            return this.toString();\n        }\n        throw new TypeError(\"A conversion from TemporalAmount to a number is not allowed. \" + \"To compare use the methods .equals(), .compareTo(), .isBefore() \" + \"or one that is more suitable to your use case.\");\n    };\n}\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var TemporalUnit = function() {\n    function TemporalUnit() {}\n    var _proto = TemporalUnit.prototype;\n    _proto.duration = function duration() {\n        abstractMethodFail(\"duration\");\n    };\n    _proto.isDurationEstimated = function isDurationEstimated() {\n        abstractMethodFail(\"isDurationEstimated\");\n    };\n    _proto.isDateBased = function isDateBased() {\n        abstractMethodFail(\"isDateBased\");\n    };\n    _proto.isTimeBased = function isTimeBased() {\n        abstractMethodFail(\"isTimeBased\");\n    };\n    _proto.isSupportedBy = function isSupportedBy(temporal) {\n        abstractMethodFail(\"isSupportedBy\");\n    };\n    _proto.addTo = function addTo(dateTime, periodToAdd) {\n        abstractMethodFail(\"addTo\");\n    };\n    _proto.between = function between(temporal1, temporal2) {\n        abstractMethodFail(\"between\");\n    };\n    return TemporalUnit;\n}();\nvar Duration = function(_TemporalAmount) {\n    _inheritsLoose(Duration, _TemporalAmount);\n    function Duration(seconds, nanos) {\n        var _this;\n        _this = _TemporalAmount.call(this) || this;\n        _this._seconds = MathUtil.safeToInt(seconds);\n        _this._nanos = MathUtil.safeToInt(nanos);\n        return _this;\n    }\n    Duration.ofDays = function ofDays(days) {\n        return Duration._create(MathUtil.safeMultiply(days, LocalTime.SECONDS_PER_DAY), 0);\n    };\n    Duration.ofHours = function ofHours(hours) {\n        return Duration._create(MathUtil.safeMultiply(hours, LocalTime.SECONDS_PER_HOUR), 0);\n    };\n    Duration.ofMinutes = function ofMinutes(minutes) {\n        return Duration._create(MathUtil.safeMultiply(minutes, LocalTime.SECONDS_PER_MINUTE), 0);\n    };\n    Duration.ofSeconds = function ofSeconds(seconds, nanoAdjustment) {\n        if (nanoAdjustment === void 0) {\n            nanoAdjustment = 0;\n        }\n        var secs = MathUtil.safeAdd(seconds, MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND));\n        var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        return Duration._create(secs, nos);\n    };\n    Duration.ofMillis = function ofMillis(millis) {\n        var secs = MathUtil.intDiv(millis, 1000);\n        var mos = MathUtil.intMod(millis, 1000);\n        if (mos < 0) {\n            mos += 1000;\n            secs--;\n        }\n        return Duration._create(secs, mos * 1000000);\n    };\n    Duration.ofNanos = function ofNanos(nanos) {\n        var secs = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_SECOND);\n        var nos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_SECOND);\n        if (nos < 0) {\n            nos += LocalTime.NANOS_PER_SECOND;\n            secs--;\n        }\n        return this._create(secs, nos);\n    };\n    Duration.of = function of(amount, unit) {\n        return Duration.ZERO.plus(amount, unit);\n    };\n    Duration.from = function from(amount) {\n        requireNonNull(amount, \"amount\");\n        requireInstance(amount, TemporalAmount);\n        var duration = Duration.ZERO;\n        amount.units().forEach(function(unit) {\n            duration = duration.plus(amount.get(unit), unit);\n        });\n        return duration;\n    };\n    Duration.between = function between(startInclusive, endExclusive) {\n        requireNonNull(startInclusive, \"startInclusive\");\n        requireNonNull(endExclusive, \"endExclusive\");\n        var secs = startInclusive.until(endExclusive, ChronoUnit.SECONDS);\n        var nanos = 0;\n        if (startInclusive.isSupported(ChronoField.NANO_OF_SECOND) && endExclusive.isSupported(ChronoField.NANO_OF_SECOND)) {\n            try {\n                var startNos = startInclusive.getLong(ChronoField.NANO_OF_SECOND);\n                nanos = endExclusive.getLong(ChronoField.NANO_OF_SECOND) - startNos;\n                if (secs > 0 && nanos < 0) {\n                    nanos += LocalTime.NANOS_PER_SECOND;\n                } else if (secs < 0 && nanos > 0) {\n                    nanos -= LocalTime.NANOS_PER_SECOND;\n                } else if (secs === 0 && nanos !== 0) {\n                    var adjustedEnd = endExclusive.with(ChronoField.NANO_OF_SECOND, startNos);\n                    secs = startInclusive.until(adjustedEnd, ChronoUnit.SECONDS);\n                }\n            } catch (e) {}\n        }\n        return this.ofSeconds(secs, nanos);\n    };\n    Duration.parse = function parse(text) {\n        requireNonNull(text, \"text\");\n        var PATTERN = new RegExp(\"([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?\", \"i\");\n        var matches = PATTERN.exec(text);\n        if (matches !== null) {\n            if (\"T\" === matches[3] === false) {\n                var negate = \"-\" === matches[1];\n                var dayMatch = matches[2];\n                var hourMatch = matches[4];\n                var minuteMatch = matches[5];\n                var secondMatch = matches[6];\n                var fractionMatch = matches[7];\n                if (dayMatch != null || hourMatch != null || minuteMatch != null || secondMatch != null) {\n                    var daysAsSecs = Duration._parseNumber(text, dayMatch, LocalTime.SECONDS_PER_DAY, \"days\");\n                    var hoursAsSecs = Duration._parseNumber(text, hourMatch, LocalTime.SECONDS_PER_HOUR, \"hours\");\n                    var minsAsSecs = Duration._parseNumber(text, minuteMatch, LocalTime.SECONDS_PER_MINUTE, \"minutes\");\n                    var seconds = Duration._parseNumber(text, secondMatch, 1, \"seconds\");\n                    var negativeSecs = secondMatch != null && secondMatch.charAt(0) === \"-\";\n                    var nanos = Duration._parseFraction(text, fractionMatch, negativeSecs ? -1 : 1);\n                    try {\n                        return Duration._create(negate, daysAsSecs, hoursAsSecs, minsAsSecs, seconds, nanos);\n                    } catch (ex) {\n                        throw new DateTimeParseException(\"Text cannot be parsed to a Duration: overflow\", text, 0, ex);\n                    }\n                }\n            }\n        }\n        throw new DateTimeParseException(\"Text cannot be parsed to a Duration\", text, 0);\n    };\n    Duration._parseNumber = function _parseNumber(text, parsed, multiplier, errorText) {\n        if (parsed == null) {\n            return 0;\n        }\n        try {\n            if (parsed[0] === \"+\") {\n                parsed = parsed.substring(1);\n            }\n            return MathUtil.safeMultiply(parseFloat(parsed), multiplier);\n        } catch (ex) {\n            throw new DateTimeParseException(\"Text cannot be parsed to a Duration: \" + errorText, text, 0, ex);\n        }\n    };\n    Duration._parseFraction = function _parseFraction(text, parsed, negate) {\n        if (parsed == null || parsed.length === 0) {\n            return 0;\n        }\n        parsed = (parsed + \"000000000\").substring(0, 9);\n        return parseFloat(parsed) * negate;\n    };\n    Duration._create = function _create() {\n        if (arguments.length <= 2) {\n            return Duration._createSecondsNanos(arguments[0], arguments[1]);\n        } else {\n            return Duration._createNegateDaysHoursMinutesSecondsNanos(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }\n    };\n    Duration._createNegateDaysHoursMinutesSecondsNanos = function _createNegateDaysHoursMinutesSecondsNanos(negate, daysAsSecs, hoursAsSecs, minsAsSecs, secs, nanos) {\n        var seconds = MathUtil.safeAdd(daysAsSecs, MathUtil.safeAdd(hoursAsSecs, MathUtil.safeAdd(minsAsSecs, secs)));\n        if (negate) {\n            return Duration.ofSeconds(seconds, nanos).negated();\n        }\n        return Duration.ofSeconds(seconds, nanos);\n    };\n    Duration._createSecondsNanos = function _createSecondsNanos(seconds, nanoAdjustment) {\n        if (seconds === void 0) {\n            seconds = 0;\n        }\n        if (nanoAdjustment === void 0) {\n            nanoAdjustment = 0;\n        }\n        if (seconds === 0 && nanoAdjustment === 0) {\n            return Duration.ZERO;\n        }\n        return new Duration(seconds, nanoAdjustment);\n    };\n    var _proto = Duration.prototype;\n    _proto.get = function get(unit) {\n        if (unit === ChronoUnit.SECONDS) {\n            return this._seconds;\n        } else if (unit === ChronoUnit.NANOS) {\n            return this._nanos;\n        } else {\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n    };\n    _proto.units = function units() {\n        return [\n            ChronoUnit.SECONDS,\n            ChronoUnit.NANOS\n        ];\n    };\n    _proto.isZero = function isZero() {\n        return this._seconds === 0 && this._nanos === 0;\n    };\n    _proto.isNegative = function isNegative() {\n        return this._seconds < 0;\n    };\n    _proto.seconds = function seconds() {\n        return this._seconds;\n    };\n    _proto.nano = function nano() {\n        return this._nanos;\n    };\n    _proto.withSeconds = function withSeconds(seconds) {\n        return Duration._create(seconds, this._nanos);\n    };\n    _proto.withNanos = function withNanos(nanoOfSecond) {\n        ChronoField.NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);\n        return Duration._create(this._seconds, nanoOfSecond);\n    };\n    _proto.plusDuration = function plusDuration(duration) {\n        requireNonNull(duration, \"duration\");\n        return this.plus(duration.seconds(), duration.nano());\n    };\n    _proto.plus = function plus(durationOrNumber, unitOrNumber) {\n        if (arguments.length === 1) {\n            return this.plusDuration(durationOrNumber);\n        } else if (arguments.length === 2 && unitOrNumber instanceof TemporalUnit) {\n            return this.plusAmountUnit(durationOrNumber, unitOrNumber);\n        } else {\n            return this.plusSecondsNanos(durationOrNumber, unitOrNumber);\n        }\n    };\n    _proto.plusAmountUnit = function plusAmountUnit(amountToAdd, unit) {\n        requireNonNull(amountToAdd, \"amountToAdd\");\n        requireNonNull(unit, \"unit\");\n        if (unit === ChronoUnit.DAYS) {\n            return this.plusSecondsNanos(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY), 0);\n        }\n        if (unit.isDurationEstimated()) {\n            throw new UnsupportedTemporalTypeException(\"Unit must not have an estimated duration\");\n        }\n        if (amountToAdd === 0) {\n            return this;\n        }\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.NANOS:\n                    return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS:\n                    return this.plusSecondsNanos(MathUtil.intDiv(amountToAdd, 1000000 * 1000) * 1000, MathUtil.intMod(amountToAdd, 1000000 * 1000) * 1000);\n                case ChronoUnit.MILLIS:\n                    return this.plusMillis(amountToAdd);\n                case ChronoUnit.SECONDS:\n                    return this.plusSeconds(amountToAdd);\n            }\n            return this.plusSecondsNanos(MathUtil.safeMultiply(unit.duration().seconds(), amountToAdd), 0);\n        }\n        var duration = unit.duration().multipliedBy(amountToAdd);\n        return this.plusSecondsNanos(duration.seconds(), duration.nano());\n    };\n    _proto.plusDays = function plusDays(daysToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(daysToAdd, LocalTime.SECONDS_PER_DAY), 0);\n    };\n    _proto.plusHours = function plusHours(hoursToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(hoursToAdd, LocalTime.SECONDS_PER_HOUR), 0);\n    };\n    _proto.plusMinutes = function plusMinutes(minutesToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(minutesToAdd, LocalTime.SECONDS_PER_MINUTE), 0);\n    };\n    _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n        return this.plusSecondsNanos(secondsToAdd, 0);\n    };\n    _proto.plusMillis = function plusMillis(millisToAdd) {\n        return this.plusSecondsNanos(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * 1000000);\n    };\n    _proto.plusNanos = function plusNanos(nanosToAdd) {\n        return this.plusSecondsNanos(0, nanosToAdd);\n    };\n    _proto.plusSecondsNanos = function plusSecondsNanos(secondsToAdd, nanosToAdd) {\n        requireNonNull(secondsToAdd, \"secondsToAdd\");\n        requireNonNull(nanosToAdd, \"nanosToAdd\");\n        if (secondsToAdd === 0 && nanosToAdd === 0) {\n            return this;\n        }\n        var epochSec = MathUtil.safeAdd(this._seconds, secondsToAdd);\n        epochSec = MathUtil.safeAdd(epochSec, MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND));\n        nanosToAdd = MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n        var nanoAdjustment = MathUtil.safeAdd(this._nanos, nanosToAdd);\n        return Duration.ofSeconds(epochSec, nanoAdjustment);\n    };\n    _proto.minus = function minus(durationOrNumber, unit) {\n        if (arguments.length === 1) {\n            return this.minusDuration(durationOrNumber);\n        } else {\n            return this.minusAmountUnit(durationOrNumber, unit);\n        }\n    };\n    _proto.minusDuration = function minusDuration(duration) {\n        requireNonNull(duration, \"duration\");\n        var secsToSubtract = duration.seconds();\n        var nanosToSubtract = duration.nano();\n        if (secsToSubtract === MIN_SAFE_INTEGER) {\n            return this.plus(MAX_SAFE_INTEGER, -nanosToSubtract);\n        }\n        return this.plus(-secsToSubtract, -nanosToSubtract);\n    };\n    _proto.minusAmountUnit = function minusAmountUnit(amountToSubtract, unit) {\n        requireNonNull(amountToSubtract, \"amountToSubtract\");\n        requireNonNull(unit, \"unit\");\n        return amountToSubtract === MIN_SAFE_INTEGER ? this.plusAmountUnit(MAX_SAFE_INTEGER, unit) : this.plusAmountUnit(-amountToSubtract, unit);\n    };\n    _proto.minusDays = function minusDays(daysToSubtract) {\n        return daysToSubtract === MIN_SAFE_INTEGER ? this.plusDays(MAX_SAFE_INTEGER) : this.plusDays(-daysToSubtract);\n    };\n    _proto.minusHours = function minusHours(hoursToSubtract) {\n        return hoursToSubtract === MIN_SAFE_INTEGER ? this.plusHours(MAX_SAFE_INTEGER) : this.plusHours(-hoursToSubtract);\n    };\n    _proto.minusMinutes = function minusMinutes(minutesToSubtract) {\n        return minutesToSubtract === MIN_SAFE_INTEGER ? this.plusMinutes(MAX_SAFE_INTEGER) : this.plusMinutes(-minutesToSubtract);\n    };\n    _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n        return secondsToSubtract === MIN_SAFE_INTEGER ? this.plusSeconds(MAX_SAFE_INTEGER) : this.plusSeconds(-secondsToSubtract);\n    };\n    _proto.minusMillis = function minusMillis(millisToSubtract) {\n        return millisToSubtract === MIN_SAFE_INTEGER ? this.plusMillis(MAX_SAFE_INTEGER) : this.plusMillis(-millisToSubtract);\n    };\n    _proto.minusNanos = function minusNanos(nanosToSubtract) {\n        return nanosToSubtract === MIN_SAFE_INTEGER ? this.plusNanos(MAX_SAFE_INTEGER) : this.plusNanos(-nanosToSubtract);\n    };\n    _proto.multipliedBy = function multipliedBy(multiplicand) {\n        if (multiplicand === 0) {\n            return Duration.ZERO;\n        }\n        if (multiplicand === 1) {\n            return this;\n        }\n        var secs = MathUtil.safeMultiply(this._seconds, multiplicand);\n        var nos = MathUtil.safeMultiply(this._nanos, multiplicand);\n        secs = secs + MathUtil.intDiv(nos, LocalTime.NANOS_PER_SECOND);\n        nos = MathUtil.intMod(nos, LocalTime.NANOS_PER_SECOND);\n        return Duration.ofSeconds(secs, nos);\n    };\n    _proto.dividedBy = function dividedBy(divisor) {\n        if (divisor === 0) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        if (divisor === 1) {\n            return this;\n        }\n        var secs = MathUtil.intDiv(this._seconds, divisor);\n        var secsMod = MathUtil.roundDown((this._seconds / divisor - secs) * LocalTime.NANOS_PER_SECOND);\n        var nos = MathUtil.intDiv(this._nanos, divisor);\n        nos = secsMod + nos;\n        return Duration.ofSeconds(secs, nos);\n    };\n    _proto.negated = function negated() {\n        return this.multipliedBy(-1);\n    };\n    _proto.abs = function abs() {\n        return this.isNegative() ? this.negated() : this;\n    };\n    _proto.addTo = function addTo(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (this._seconds !== 0) {\n            temporal = temporal.plus(this._seconds, ChronoUnit.SECONDS);\n        }\n        if (this._nanos !== 0) {\n            temporal = temporal.plus(this._nanos, ChronoUnit.NANOS);\n        }\n        return temporal;\n    };\n    _proto.subtractFrom = function subtractFrom(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (this._seconds !== 0) {\n            temporal = temporal.minus(this._seconds, ChronoUnit.SECONDS);\n        }\n        if (this._nanos !== 0) {\n            temporal = temporal.minus(this._nanos, ChronoUnit.NANOS);\n        }\n        return temporal;\n    };\n    _proto.toDays = function toDays() {\n        return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_DAY);\n    };\n    _proto.toHours = function toHours() {\n        return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n    };\n    _proto.toMinutes = function toMinutes() {\n        return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n    };\n    _proto.toMillis = function toMillis() {\n        var millis = Math.round(MathUtil.safeMultiply(this._seconds, 1000));\n        millis = MathUtil.safeAdd(millis, MathUtil.intDiv(this._nanos, 1000000));\n        return millis;\n    };\n    _proto.toNanos = function toNanos() {\n        var totalNanos = MathUtil.safeMultiply(this._seconds, LocalTime.NANOS_PER_SECOND);\n        totalNanos = MathUtil.safeAdd(totalNanos, this._nanos);\n        return totalNanos;\n    };\n    _proto.compareTo = function compareTo(otherDuration) {\n        requireNonNull(otherDuration, \"otherDuration\");\n        requireInstance(otherDuration, Duration, \"otherDuration\");\n        var cmp = MathUtil.compareNumbers(this._seconds, otherDuration.seconds());\n        if (cmp !== 0) {\n            return cmp;\n        }\n        return this._nanos - otherDuration.nano();\n    };\n    _proto.equals = function equals(otherDuration) {\n        if (this === otherDuration) {\n            return true;\n        }\n        if (otherDuration instanceof Duration) {\n            return this.seconds() === otherDuration.seconds() && this.nano() === otherDuration.nano();\n        }\n        return false;\n    };\n    _proto.toString = function toString() {\n        if (this === Duration.ZERO) {\n            return \"PT0S\";\n        }\n        var hours = MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n        var minutes = MathUtil.intDiv(MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_HOUR), LocalTime.SECONDS_PER_MINUTE);\n        var secs = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n        var rval = \"PT\";\n        if (hours !== 0) {\n            rval += hours + \"H\";\n        }\n        if (minutes !== 0) {\n            rval += minutes + \"M\";\n        }\n        if (secs === 0 && this._nanos === 0 && rval.length > 2) {\n            return rval;\n        }\n        if (secs < 0 && this._nanos > 0) {\n            if (secs === -1) {\n                rval += \"-0\";\n            } else {\n                rval += secs + 1;\n            }\n        } else {\n            rval += secs;\n        }\n        if (this._nanos > 0) {\n            rval += \".\";\n            var nanoString;\n            if (secs < 0) {\n                nanoString = \"\" + (2 * LocalTime.NANOS_PER_SECOND - this._nanos);\n            } else {\n                nanoString = \"\" + (LocalTime.NANOS_PER_SECOND + this._nanos);\n            }\n            nanoString = nanoString.slice(1, nanoString.length);\n            rval += nanoString;\n            while(rval.charAt(rval.length - 1) === \"0\"){\n                rval = rval.slice(0, rval.length - 1);\n            }\n        }\n        rval += \"S\";\n        return rval;\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    return Duration;\n}(TemporalAmount);\nfunction _init$n() {\n    Duration.ZERO = new Duration(0, 0);\n}\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */ var YearConstants = function YearConstants() {};\nfunction _init$m() {\n    YearConstants.MIN_VALUE = -999999;\n    YearConstants.MAX_VALUE = 999999;\n}\nvar ChronoUnit = function(_TemporalUnit) {\n    _inheritsLoose(ChronoUnit, _TemporalUnit);\n    function ChronoUnit(name, estimatedDuration) {\n        var _this;\n        _this = _TemporalUnit.call(this) || this;\n        _this._name = name;\n        _this._duration = estimatedDuration;\n        return _this;\n    }\n    var _proto = ChronoUnit.prototype;\n    _proto.duration = function duration() {\n        return this._duration;\n    };\n    _proto.isDurationEstimated = function isDurationEstimated() {\n        return this.isDateBased() || this === ChronoUnit.FOREVER;\n    };\n    _proto.isDateBased = function isDateBased() {\n        return this.compareTo(ChronoUnit.DAYS) >= 0 && this !== ChronoUnit.FOREVER;\n    };\n    _proto.isTimeBased = function isTimeBased() {\n        return this.compareTo(ChronoUnit.DAYS) < 0;\n    };\n    _proto.isSupportedBy = function isSupportedBy(temporal) {\n        if (this === ChronoUnit.FOREVER) {\n            return false;\n        }\n        try {\n            temporal.plus(1, this);\n            return true;\n        } catch (e) {\n            try {\n                temporal.plus(-1, this);\n                return true;\n            } catch (e2) {\n                return false;\n            }\n        }\n    };\n    _proto.addTo = function addTo(temporal, amount) {\n        return temporal.plus(amount, this);\n    };\n    _proto.between = function between(temporal1, temporal2) {\n        return temporal1.until(temporal2, this);\n    };\n    _proto.toString = function toString() {\n        return this._name;\n    };\n    _proto.compareTo = function compareTo(other) {\n        return this.duration().compareTo(other.duration());\n    };\n    return ChronoUnit;\n}(TemporalUnit);\nfunction _init$l() {\n    ChronoUnit.NANOS = new ChronoUnit(\"Nanos\", Duration.ofNanos(1));\n    ChronoUnit.MICROS = new ChronoUnit(\"Micros\", Duration.ofNanos(1000));\n    ChronoUnit.MILLIS = new ChronoUnit(\"Millis\", Duration.ofNanos(1000000));\n    ChronoUnit.SECONDS = new ChronoUnit(\"Seconds\", Duration.ofSeconds(1));\n    ChronoUnit.MINUTES = new ChronoUnit(\"Minutes\", Duration.ofSeconds(60));\n    ChronoUnit.HOURS = new ChronoUnit(\"Hours\", Duration.ofSeconds(3600));\n    ChronoUnit.HALF_DAYS = new ChronoUnit(\"HalfDays\", Duration.ofSeconds(43200));\n    ChronoUnit.DAYS = new ChronoUnit(\"Days\", Duration.ofSeconds(86400));\n    ChronoUnit.WEEKS = new ChronoUnit(\"Weeks\", Duration.ofSeconds(7 * 86400));\n    ChronoUnit.MONTHS = new ChronoUnit(\"Months\", Duration.ofSeconds(31556952 / 12));\n    ChronoUnit.YEARS = new ChronoUnit(\"Years\", Duration.ofSeconds(31556952));\n    ChronoUnit.DECADES = new ChronoUnit(\"Decades\", Duration.ofSeconds(31556952 * 10));\n    ChronoUnit.CENTURIES = new ChronoUnit(\"Centuries\", Duration.ofSeconds(31556952 * 100));\n    ChronoUnit.MILLENNIA = new ChronoUnit(\"Millennia\", Duration.ofSeconds(31556952 * 1000));\n    ChronoUnit.ERAS = new ChronoUnit(\"Eras\", Duration.ofSeconds(31556952 * (YearConstants.MAX_VALUE + 1)));\n    ChronoUnit.FOREVER = new ChronoUnit(\"Forever\", Duration.ofSeconds(MathUtil.MAX_SAFE_INTEGER, 999999999));\n}\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var TemporalField = function() {\n    function TemporalField() {}\n    var _proto = TemporalField.prototype;\n    _proto.isDateBased = function isDateBased() {\n        abstractMethodFail(\"isDateBased\");\n    };\n    _proto.isTimeBased = function isTimeBased() {\n        abstractMethodFail(\"isTimeBased\");\n    };\n    _proto.baseUnit = function baseUnit() {\n        abstractMethodFail(\"baseUnit\");\n    };\n    _proto.rangeUnit = function rangeUnit() {\n        abstractMethodFail(\"rangeUnit\");\n    };\n    _proto.range = function range() {\n        abstractMethodFail(\"range\");\n    };\n    _proto.rangeRefinedBy = function rangeRefinedBy(temporal) {\n        abstractMethodFail(\"rangeRefinedBy\");\n    };\n    _proto.getFrom = function getFrom(temporal) {\n        abstractMethodFail(\"getFrom\");\n    };\n    _proto.adjustInto = function adjustInto(temporal, newValue) {\n        abstractMethodFail(\"adjustInto\");\n    };\n    _proto.isSupportedBy = function isSupportedBy(temporal) {\n        abstractMethodFail(\"isSupportedBy\");\n    };\n    _proto.displayName = function displayName() {\n        abstractMethodFail(\"displayName\");\n    };\n    _proto.equals = function equals(other) {\n        abstractMethodFail(\"equals\");\n    };\n    _proto.name = function name() {\n        abstractMethodFail(\"name\");\n    };\n    return TemporalField;\n}();\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var ValueRange = function() {\n    function ValueRange(minSmallest, minLargest, maxSmallest, maxLargest) {\n        assert(!(minSmallest > minLargest), \"Smallest minimum value '\" + minSmallest + \"' must be less than largest minimum value '\" + minLargest + \"'\", IllegalArgumentException);\n        assert(!(maxSmallest > maxLargest), \"Smallest maximum value '\" + maxSmallest + \"' must be less than largest maximum value '\" + maxLargest + \"'\", IllegalArgumentException);\n        assert(!(minLargest > maxLargest), \"Minimum value '\" + minLargest + \"' must be less than maximum value '\" + maxLargest + \"'\", IllegalArgumentException);\n        this._minSmallest = minSmallest;\n        this._minLargest = minLargest;\n        this._maxLargest = maxLargest;\n        this._maxSmallest = maxSmallest;\n    }\n    var _proto = ValueRange.prototype;\n    _proto.isFixed = function isFixed() {\n        return this._minSmallest === this._minLargest && this._maxSmallest === this._maxLargest;\n    };\n    _proto.minimum = function minimum() {\n        return this._minSmallest;\n    };\n    _proto.largestMinimum = function largestMinimum() {\n        return this._minLargest;\n    };\n    _proto.maximum = function maximum() {\n        return this._maxLargest;\n    };\n    _proto.smallestMaximum = function smallestMaximum() {\n        return this._maxSmallest;\n    };\n    _proto.isValidValue = function isValidValue(value) {\n        return this.minimum() <= value && value <= this.maximum();\n    };\n    _proto.checkValidValue = function checkValidValue(value, field) {\n        var msg;\n        if (!this.isValidValue(value)) {\n            if (field != null) {\n                msg = \"Invalid value for \" + field + \" (valid values \" + this.toString() + \"): \" + value;\n            } else {\n                msg = \"Invalid value (valid values \" + this.toString() + \"): \" + value;\n            }\n            return assert(false, msg, DateTimeException);\n        }\n        return value;\n    };\n    _proto.checkValidIntValue = function checkValidIntValue(value, field) {\n        if (this.isValidIntValue(value) === false) {\n            throw new DateTimeException(\"Invalid int value for \" + field + \": \" + value);\n        }\n        return value;\n    };\n    _proto.isValidIntValue = function isValidIntValue(value) {\n        return this.isIntValue() && this.isValidValue(value);\n    };\n    _proto.isIntValue = function isIntValue() {\n        return this.minimum() >= MathUtil.MIN_SAFE_INTEGER && this.maximum() <= MathUtil.MAX_SAFE_INTEGER;\n    };\n    _proto.equals = function equals(other) {\n        if (other === this) {\n            return true;\n        }\n        if (other instanceof ValueRange) {\n            return this._minSmallest === other._minSmallest && this._minLargest === other._minLargest && this._maxSmallest === other._maxSmallest && this._maxLargest === other._maxLargest;\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return MathUtil.hashCode(this._minSmallest, this._minLargest, this._maxSmallest, this._maxLargest);\n    };\n    _proto.toString = function toString() {\n        var str = this.minimum() + (this.minimum() !== this.largestMinimum() ? \"/\" + this.largestMinimum() : \"\");\n        str += \" - \";\n        str += this.smallestMaximum() + (this.smallestMaximum() !== this.maximum() ? \"/\" + this.maximum() : \"\");\n        return str;\n    };\n    ValueRange.of = function of() {\n        if (arguments.length === 2) {\n            return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[1]);\n        } else if (arguments.length === 3) {\n            return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[2]);\n        } else if (arguments.length === 4) {\n            return new ValueRange(arguments[0], arguments[1], arguments[2], arguments[3]);\n        } else {\n            return assert(false, \"Invalid number of arguments \" + arguments.length, IllegalArgumentException);\n        }\n    };\n    return ValueRange;\n}();\nvar ChronoField = function(_TemporalField) {\n    _inheritsLoose(ChronoField, _TemporalField);\n    ChronoField.byName = function byName(fieldName) {\n        for(var prop in ChronoField){\n            if (ChronoField[prop]) {\n                if (ChronoField[prop] instanceof ChronoField && ChronoField[prop].name() === fieldName) {\n                    return ChronoField[prop];\n                }\n            }\n        }\n    };\n    function ChronoField(name, baseUnit, rangeUnit, range) {\n        var _this;\n        _this = _TemporalField.call(this) || this;\n        _this._name = name;\n        _this._baseUnit = baseUnit;\n        _this._rangeUnit = rangeUnit;\n        _this._range = range;\n        return _this;\n    }\n    var _proto = ChronoField.prototype;\n    _proto.name = function name() {\n        return this._name;\n    };\n    _proto.baseUnit = function baseUnit() {\n        return this._baseUnit;\n    };\n    _proto.rangeUnit = function rangeUnit() {\n        return this._rangeUnit;\n    };\n    _proto.range = function range() {\n        return this._range;\n    };\n    _proto.displayName = function displayName() {\n        return this.toString();\n    };\n    _proto.checkValidValue = function checkValidValue(value) {\n        return this.range().checkValidValue(value, this);\n    };\n    _proto.checkValidIntValue = function checkValidIntValue(value) {\n        return this.range().checkValidIntValue(value, this);\n    };\n    _proto.isDateBased = function isDateBased() {\n        var dateBased = this === ChronoField.DAY_OF_WEEK || this === ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH || this === ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR || this === ChronoField.DAY_OF_MONTH || this === ChronoField.DAY_OF_YEAR || this === ChronoField.EPOCH_DAY || this === ChronoField.ALIGNED_WEEK_OF_MONTH || this === ChronoField.ALIGNED_WEEK_OF_YEAR || this === ChronoField.MONTH_OF_YEAR || this === ChronoField.PROLEPTIC_MONTH || this === ChronoField.YEAR_OF_ERA || this === ChronoField.YEAR || this === ChronoField.ERA;\n        return dateBased;\n    };\n    _proto.isTimeBased = function isTimeBased() {\n        var timeBased = this === ChronoField.NANO_OF_SECOND || this === ChronoField.NANO_OF_DAY || this === ChronoField.MICRO_OF_SECOND || this === ChronoField.MICRO_OF_DAY || this === ChronoField.MILLI_OF_SECOND || this === ChronoField.MILLI_OF_DAY || this === ChronoField.SECOND_OF_MINUTE || this === ChronoField.SECOND_OF_DAY || this === ChronoField.MINUTE_OF_HOUR || this === ChronoField.MINUTE_OF_DAY || this === ChronoField.HOUR_OF_AMPM || this === ChronoField.CLOCK_HOUR_OF_AMPM || this === ChronoField.HOUR_OF_DAY || this === ChronoField.CLOCK_HOUR_OF_DAY || this === ChronoField.AMPM_OF_DAY;\n        return timeBased;\n    };\n    _proto.rangeRefinedBy = function rangeRefinedBy(temporal) {\n        return temporal.range(this);\n    };\n    _proto.getFrom = function getFrom(temporal) {\n        return temporal.getLong(this);\n    };\n    _proto.toString = function toString() {\n        return this.name();\n    };\n    _proto.equals = function equals(other) {\n        return this === other;\n    };\n    _proto.adjustInto = function adjustInto(temporal, newValue) {\n        return temporal.with(this, newValue);\n    };\n    _proto.isSupportedBy = function isSupportedBy(temporal) {\n        return temporal.isSupported(this);\n    };\n    return ChronoField;\n}(TemporalField);\nfunction _init$k() {\n    ChronoField.NANO_OF_SECOND = new ChronoField(\"NanoOfSecond\", ChronoUnit.NANOS, ChronoUnit.SECONDS, ValueRange.of(0, 999999999));\n    ChronoField.NANO_OF_DAY = new ChronoField(\"NanoOfDay\", ChronoUnit.NANOS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000000000 - 1));\n    ChronoField.MICRO_OF_SECOND = new ChronoField(\"MicroOfSecond\", ChronoUnit.MICROS, ChronoUnit.SECONDS, ValueRange.of(0, 999999));\n    ChronoField.MICRO_OF_DAY = new ChronoField(\"MicroOfDay\", ChronoUnit.MICROS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000000 - 1));\n    ChronoField.MILLI_OF_SECOND = new ChronoField(\"MilliOfSecond\", ChronoUnit.MILLIS, ChronoUnit.SECONDS, ValueRange.of(0, 999));\n    ChronoField.MILLI_OF_DAY = new ChronoField(\"MilliOfDay\", ChronoUnit.MILLIS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000 - 1));\n    ChronoField.SECOND_OF_MINUTE = new ChronoField(\"SecondOfMinute\", ChronoUnit.SECONDS, ChronoUnit.MINUTES, ValueRange.of(0, 59));\n    ChronoField.SECOND_OF_DAY = new ChronoField(\"SecondOfDay\", ChronoUnit.SECONDS, ChronoUnit.DAYS, ValueRange.of(0, 86400 - 1));\n    ChronoField.MINUTE_OF_HOUR = new ChronoField(\"MinuteOfHour\", ChronoUnit.MINUTES, ChronoUnit.HOURS, ValueRange.of(0, 59));\n    ChronoField.MINUTE_OF_DAY = new ChronoField(\"MinuteOfDay\", ChronoUnit.MINUTES, ChronoUnit.DAYS, ValueRange.of(0, 24 * 60 - 1));\n    ChronoField.HOUR_OF_AMPM = new ChronoField(\"HourOfAmPm\", ChronoUnit.HOURS, ChronoUnit.HALF_DAYS, ValueRange.of(0, 11));\n    ChronoField.CLOCK_HOUR_OF_AMPM = new ChronoField(\"ClockHourOfAmPm\", ChronoUnit.HOURS, ChronoUnit.HALF_DAYS, ValueRange.of(1, 12));\n    ChronoField.HOUR_OF_DAY = new ChronoField(\"HourOfDay\", ChronoUnit.HOURS, ChronoUnit.DAYS, ValueRange.of(0, 23));\n    ChronoField.CLOCK_HOUR_OF_DAY = new ChronoField(\"ClockHourOfDay\", ChronoUnit.HOURS, ChronoUnit.DAYS, ValueRange.of(1, 24));\n    ChronoField.AMPM_OF_DAY = new ChronoField(\"AmPmOfDay\", ChronoUnit.HALF_DAYS, ChronoUnit.DAYS, ValueRange.of(0, 1));\n    ChronoField.DAY_OF_WEEK = new ChronoField(\"DayOfWeek\", ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n    ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH = new ChronoField(\"AlignedDayOfWeekInMonth\", ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n    ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR = new ChronoField(\"AlignedDayOfWeekInYear\", ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n    ChronoField.DAY_OF_MONTH = new ChronoField(\"DayOfMonth\", ChronoUnit.DAYS, ChronoUnit.MONTHS, ValueRange.of(1, 28, 31), \"day\");\n    ChronoField.DAY_OF_YEAR = new ChronoField(\"DayOfYear\", ChronoUnit.DAYS, ChronoUnit.YEARS, ValueRange.of(1, 365, 366));\n    ChronoField.EPOCH_DAY = new ChronoField(\"EpochDay\", ChronoUnit.DAYS, ChronoUnit.FOREVER, ValueRange.of(-365961662, 364522971));\n    ChronoField.ALIGNED_WEEK_OF_MONTH = new ChronoField(\"AlignedWeekOfMonth\", ChronoUnit.WEEKS, ChronoUnit.MONTHS, ValueRange.of(1, 4, 5));\n    ChronoField.ALIGNED_WEEK_OF_YEAR = new ChronoField(\"AlignedWeekOfYear\", ChronoUnit.WEEKS, ChronoUnit.YEARS, ValueRange.of(1, 53));\n    ChronoField.MONTH_OF_YEAR = new ChronoField(\"MonthOfYear\", ChronoUnit.MONTHS, ChronoUnit.YEARS, ValueRange.of(1, 12), \"month\");\n    ChronoField.PROLEPTIC_MONTH = new ChronoField(\"ProlepticMonth\", ChronoUnit.MONTHS, ChronoUnit.FOREVER, ValueRange.of(YearConstants.MIN_VALUE * 12, YearConstants.MAX_VALUE * 12 + 11));\n    ChronoField.YEAR_OF_ERA = new ChronoField(\"YearOfEra\", ChronoUnit.YEARS, ChronoUnit.FOREVER, ValueRange.of(1, YearConstants.MAX_VALUE, YearConstants.MAX_VALUE + 1));\n    ChronoField.YEAR = new ChronoField(\"Year\", ChronoUnit.YEARS, ChronoUnit.FOREVER, ValueRange.of(YearConstants.MIN_VALUE, YearConstants.MAX_VALUE), \"year\");\n    ChronoField.ERA = new ChronoField(\"Era\", ChronoUnit.ERAS, ChronoUnit.FOREVER, ValueRange.of(0, 1));\n    ChronoField.INSTANT_SECONDS = new ChronoField(\"InstantSeconds\", ChronoUnit.SECONDS, ChronoUnit.FOREVER, ValueRange.of(MIN_SAFE_INTEGER, MAX_SAFE_INTEGER));\n    ChronoField.OFFSET_SECONDS = new ChronoField(\"OffsetSeconds\", ChronoUnit.SECONDS, ChronoUnit.FOREVER, ValueRange.of(-18 * 3600, 18 * 3600));\n}\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var TemporalQueries = function() {\n    function TemporalQueries() {}\n    TemporalQueries.zoneId = function zoneId() {\n        return TemporalQueries.ZONE_ID;\n    };\n    TemporalQueries.chronology = function chronology() {\n        return TemporalQueries.CHRONO;\n    };\n    TemporalQueries.precision = function precision() {\n        return TemporalQueries.PRECISION;\n    };\n    TemporalQueries.zone = function zone() {\n        return TemporalQueries.ZONE;\n    };\n    TemporalQueries.offset = function offset() {\n        return TemporalQueries.OFFSET;\n    };\n    TemporalQueries.localDate = function localDate() {\n        return TemporalQueries.LOCAL_DATE;\n    };\n    TemporalQueries.localTime = function localTime() {\n        return TemporalQueries.LOCAL_TIME;\n    };\n    return TemporalQueries;\n}();\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var TemporalAccessor = function() {\n    function TemporalAccessor() {}\n    var _proto = TemporalAccessor.prototype;\n    _proto.query = function query(_query) {\n        if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.chronology() || _query === TemporalQueries.precision()) {\n            return null;\n        }\n        return _query.queryFrom(this);\n    };\n    _proto.get = function get(field) {\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    };\n    _proto.getLong = function getLong(field) {\n        abstractMethodFail(\"getLong\");\n    };\n    _proto.range = function range(field) {\n        if (field instanceof ChronoField) {\n            if (this.isSupported(field)) {\n                return field.range();\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.rangeRefinedBy(this);\n    };\n    _proto.isSupported = function isSupported(field) {\n        abstractMethodFail(\"isSupported\");\n    };\n    return TemporalAccessor;\n}();\nvar TemporalQuery = function(_Enum) {\n    _inheritsLoose(TemporalQuery, _Enum);\n    function TemporalQuery() {\n        return _Enum.apply(this, arguments) || this;\n    }\n    var _proto = TemporalQuery.prototype;\n    _proto.queryFrom = function queryFrom(temporal) {\n        abstractMethodFail(\"queryFrom\");\n    };\n    return TemporalQuery;\n}(Enum);\nfunction createTemporalQuery(name, queryFromFunction) {\n    var ExtendedTemporalQuery = function(_TemporalQuery) {\n        _inheritsLoose(ExtendedTemporalQuery, _TemporalQuery);\n        function ExtendedTemporalQuery() {\n            return _TemporalQuery.apply(this, arguments) || this;\n        }\n        return ExtendedTemporalQuery;\n    }(TemporalQuery);\n    ExtendedTemporalQuery.prototype.queryFrom = queryFromFunction;\n    return new ExtendedTemporalQuery(name);\n}\nvar DayOfWeek = function(_TemporalAccessor) {\n    _inheritsLoose(DayOfWeek, _TemporalAccessor);\n    function DayOfWeek(ordinal, name) {\n        var _this;\n        _this = _TemporalAccessor.call(this) || this;\n        _this._ordinal = ordinal;\n        _this._name = name;\n        return _this;\n    }\n    var _proto = DayOfWeek.prototype;\n    _proto.ordinal = function ordinal() {\n        return this._ordinal;\n    };\n    _proto.name = function name() {\n        return this._name;\n    };\n    DayOfWeek.values = function values() {\n        return ENUMS.slice();\n    };\n    DayOfWeek.valueOf = function valueOf(name) {\n        var ordinal = 0;\n        for(ordinal; ordinal < ENUMS.length; ordinal++){\n            if (ENUMS[ordinal].name() === name) {\n                break;\n            }\n        }\n        return DayOfWeek.of(ordinal + 1);\n    };\n    DayOfWeek.of = function of(dayOfWeek) {\n        if (dayOfWeek < 1 || dayOfWeek > 7) {\n            throw new DateTimeException(\"Invalid value for DayOfWeek: \" + dayOfWeek);\n        }\n        return ENUMS[dayOfWeek - 1];\n    };\n    DayOfWeek.from = function from(temporal) {\n        assert(temporal != null, \"temporal\", NullPointerException);\n        if (temporal instanceof DayOfWeek) {\n            return temporal;\n        }\n        try {\n            return DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));\n        } catch (ex) {\n            if (ex instanceof DateTimeException) {\n                throw new DateTimeException(\"Unable to obtain DayOfWeek from TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : \"\"), ex);\n            } else {\n                throw ex;\n            }\n        }\n    };\n    _proto.value = function value() {\n        return this._ordinal + 1;\n    };\n    _proto.displayName = function displayName(style, locale) {\n        throw new IllegalArgumentException(\"Pattern using (localized) text not implemented yet!\");\n    };\n    _proto.isSupported = function isSupported(field) {\n        if (field instanceof ChronoField) {\n            return field === ChronoField.DAY_OF_WEEK;\n        }\n        return field != null && field.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        if (field === ChronoField.DAY_OF_WEEK) {\n            return field.range();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.rangeRefinedBy(this);\n    };\n    _proto.get = function get(field) {\n        if (field === ChronoField.DAY_OF_WEEK) {\n            return this.value();\n        }\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    };\n    _proto.getLong = function getLong(field) {\n        if (field === ChronoField.DAY_OF_WEEK) {\n            return this.value();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.plus = function plus(days) {\n        var amount = MathUtil.floorMod(days, 7);\n        return ENUMS[MathUtil.floorMod(this._ordinal + (amount + 7), 7)];\n    };\n    _proto.minus = function minus(days) {\n        return this.plus(-1 * MathUtil.floorMod(days, 7));\n    };\n    _proto.query = function query(_query) {\n        if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.DAYS;\n        } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n            return null;\n        }\n        assert(_query != null, \"query\", NullPointerException);\n        return _query.queryFrom(this);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        return temporal.with(ChronoField.DAY_OF_WEEK, this.value());\n    };\n    _proto.equals = function equals(other) {\n        return this === other;\n    };\n    _proto.toString = function toString() {\n        return this._name;\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, DayOfWeek, \"other\");\n        return this._ordinal - other._ordinal;\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    return DayOfWeek;\n}(TemporalAccessor);\nvar ENUMS;\nfunction _init$j() {\n    DayOfWeek.MONDAY = new DayOfWeek(0, \"MONDAY\");\n    DayOfWeek.TUESDAY = new DayOfWeek(1, \"TUESDAY\");\n    DayOfWeek.WEDNESDAY = new DayOfWeek(2, \"WEDNESDAY\");\n    DayOfWeek.THURSDAY = new DayOfWeek(3, \"THURSDAY\");\n    DayOfWeek.FRIDAY = new DayOfWeek(4, \"FRIDAY\");\n    DayOfWeek.SATURDAY = new DayOfWeek(5, \"SATURDAY\");\n    DayOfWeek.SUNDAY = new DayOfWeek(6, \"SUNDAY\");\n    DayOfWeek.FROM = createTemporalQuery(\"DayOfWeek.FROM\", function(temporal) {\n        return DayOfWeek.from(temporal);\n    });\n    ENUMS = [\n        DayOfWeek.MONDAY,\n        DayOfWeek.TUESDAY,\n        DayOfWeek.WEDNESDAY,\n        DayOfWeek.THURSDAY,\n        DayOfWeek.FRIDAY,\n        DayOfWeek.SATURDAY,\n        DayOfWeek.SUNDAY\n    ];\n}\nvar Month = function(_TemporalAccessor) {\n    _inheritsLoose(Month, _TemporalAccessor);\n    function Month(value, name) {\n        var _this;\n        _this = _TemporalAccessor.call(this) || this;\n        _this._value = MathUtil.safeToInt(value);\n        _this._name = name;\n        return _this;\n    }\n    var _proto = Month.prototype;\n    _proto.value = function value() {\n        return this._value;\n    };\n    _proto.ordinal = function ordinal() {\n        return this._value - 1;\n    };\n    _proto.name = function name() {\n        return this._name;\n    };\n    _proto.displayName = function displayName(style, locale) {\n        throw new IllegalArgumentException(\"Pattern using (localized) text not implemented yet!\");\n    };\n    _proto.isSupported = function isSupported(field) {\n        if (null === field) {\n            return false;\n        }\n        if (field instanceof ChronoField) {\n            return field === ChronoField.MONTH_OF_YEAR;\n        }\n        return field != null && field.isSupportedBy(this);\n    };\n    _proto.get = function get(field) {\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            return this.value();\n        }\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    };\n    _proto.getLong = function getLong(field) {\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            return this.value();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.plus = function plus(months) {\n        var amount = MathUtil.intMod(months, 12) + 12;\n        var newMonthVal = MathUtil.intMod(this.value() + amount, 12);\n        newMonthVal = newMonthVal === 0 ? 12 : newMonthVal;\n        return Month.of(newMonthVal);\n    };\n    _proto.minus = function minus(months) {\n        return this.plus(-1 * MathUtil.intMod(months, 12));\n    };\n    _proto.length = function length(leapYear) {\n        switch(this){\n            case Month.FEBRUARY:\n                return leapYear ? 29 : 28;\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    };\n    _proto.minLength = function minLength() {\n        switch(this){\n            case Month.FEBRUARY:\n                return 28;\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    };\n    _proto.maxLength = function maxLength() {\n        switch(this){\n            case Month.FEBRUARY:\n                return 29;\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    };\n    _proto.firstDayOfYear = function firstDayOfYear(leapYear) {\n        var leap = leapYear ? 1 : 0;\n        switch(this){\n            case Month.JANUARY:\n                return 1;\n            case Month.FEBRUARY:\n                return 32;\n            case Month.MARCH:\n                return 60 + leap;\n            case Month.APRIL:\n                return 91 + leap;\n            case Month.MAY:\n                return 121 + leap;\n            case Month.JUNE:\n                return 152 + leap;\n            case Month.JULY:\n                return 182 + leap;\n            case Month.AUGUST:\n                return 213 + leap;\n            case Month.SEPTEMBER:\n                return 244 + leap;\n            case Month.OCTOBER:\n                return 274 + leap;\n            case Month.NOVEMBER:\n                return 305 + leap;\n            case Month.DECEMBER:\n            default:\n                return 335 + leap;\n        }\n    };\n    _proto.firstMonthOfQuarter = function firstMonthOfQuarter() {\n        switch(this){\n            case Month.JANUARY:\n            case Month.FEBRUARY:\n            case Month.MARCH:\n                return Month.JANUARY;\n            case Month.APRIL:\n            case Month.MAY:\n            case Month.JUNE:\n                return Month.APRIL;\n            case Month.JULY:\n            case Month.AUGUST:\n            case Month.SEPTEMBER:\n                return Month.JULY;\n            case Month.OCTOBER:\n            case Month.NOVEMBER:\n            case Month.DECEMBER:\n            default:\n                return Month.OCTOBER;\n        }\n    };\n    _proto.query = function query(_query) {\n        assert(_query != null, \"query() parameter must not be null\", DateTimeException);\n        if (_query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.MONTHS;\n        }\n        return _TemporalAccessor.prototype.query.call(this, _query);\n    };\n    _proto.toString = function toString() {\n        switch(this){\n            case Month.JANUARY:\n                return \"JANUARY\";\n            case Month.FEBRUARY:\n                return \"FEBRUARY\";\n            case Month.MARCH:\n                return \"MARCH\";\n            case Month.APRIL:\n                return \"APRIL\";\n            case Month.MAY:\n                return \"MAY\";\n            case Month.JUNE:\n                return \"JUNE\";\n            case Month.JULY:\n                return \"JULY\";\n            case Month.AUGUST:\n                return \"AUGUST\";\n            case Month.SEPTEMBER:\n                return \"SEPTEMBER\";\n            case Month.OCTOBER:\n                return \"OCTOBER\";\n            case Month.NOVEMBER:\n                return \"NOVEMBER\";\n            case Month.DECEMBER:\n                return \"DECEMBER\";\n            default:\n                return \"unknown Month, value: \" + this.value();\n        }\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        return temporal.with(ChronoField.MONTH_OF_YEAR, this.value());\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, Month, \"other\");\n        return this._value - other._value;\n    };\n    _proto.equals = function equals(other) {\n        return this === other;\n    };\n    Month.valueOf = function valueOf(name) {\n        var ordinal = 0;\n        for(ordinal; ordinal < MONTHS.length; ordinal++){\n            if (MONTHS[ordinal].name() === name) {\n                break;\n            }\n        }\n        return Month.of(ordinal + 1);\n    };\n    Month.values = function values() {\n        return MONTHS.slice();\n    };\n    Month.of = function of(month) {\n        if (month < 1 || month > 12) {\n            assert(false, \"Invalid value for MonthOfYear: \" + month, DateTimeException);\n        }\n        return MONTHS[month - 1];\n    };\n    Month.from = function from(temporal) {\n        if (temporal instanceof Month) {\n            return temporal;\n        }\n        try {\n            return Month.of(temporal.get(ChronoField.MONTH_OF_YEAR));\n        } catch (ex) {\n            throw new DateTimeException(\"Unable to obtain Month from TemporalAccessor: \" + temporal + \" of type \" + (temporal && temporal.constructor != null ? temporal.constructor.name : \"\"), ex);\n        }\n    };\n    return Month;\n}(TemporalAccessor);\nvar MONTHS;\nfunction _init$i() {\n    Month.JANUARY = new Month(1, \"JANUARY\");\n    Month.FEBRUARY = new Month(2, \"FEBRUARY\");\n    Month.MARCH = new Month(3, \"MARCH\");\n    Month.APRIL = new Month(4, \"APRIL\");\n    Month.MAY = new Month(5, \"MAY\");\n    Month.JUNE = new Month(6, \"JUNE\");\n    Month.JULY = new Month(7, \"JULY\");\n    Month.AUGUST = new Month(8, \"AUGUST\");\n    Month.SEPTEMBER = new Month(9, \"SEPTEMBER\");\n    Month.OCTOBER = new Month(10, \"OCTOBER\");\n    Month.NOVEMBER = new Month(11, \"NOVEMBER\");\n    Month.DECEMBER = new Month(12, \"DECEMBER\");\n    MONTHS = [\n        Month.JANUARY,\n        Month.FEBRUARY,\n        Month.MARCH,\n        Month.APRIL,\n        Month.MAY,\n        Month.JUNE,\n        Month.JULY,\n        Month.AUGUST,\n        Month.SEPTEMBER,\n        Month.OCTOBER,\n        Month.NOVEMBER,\n        Month.DECEMBER\n    ];\n}\nvar PATTERN = /([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?/;\nvar Period = function(_TemporalAmount) {\n    _inheritsLoose(Period, _TemporalAmount);\n    function Period(years, months, days) {\n        var _this;\n        _this = _TemporalAmount.call(this) || this;\n        var _years = MathUtil.safeToInt(years);\n        var _months = MathUtil.safeToInt(months);\n        var _days = MathUtil.safeToInt(days);\n        if (_years === 0 && _months === 0 && _days === 0) {\n            if (!Period.ZERO) {\n                _this._years = _years;\n                _this._months = _months;\n                _this._days = _days;\n                Period.ZERO = _assertThisInitialized(_this);\n            }\n            return Period.ZERO || _assertThisInitialized(_this);\n        }\n        _this._years = _years;\n        _this._months = _months;\n        _this._days = _days;\n        return _this;\n    }\n    Period.ofYears = function ofYears(years) {\n        return Period.create(years, 0, 0);\n    };\n    Period.ofMonths = function ofMonths(months) {\n        return Period.create(0, months, 0);\n    };\n    Period.ofWeeks = function ofWeeks(weeks) {\n        return Period.create(0, 0, MathUtil.safeMultiply(weeks, 7));\n    };\n    Period.ofDays = function ofDays(days) {\n        return Period.create(0, 0, days);\n    };\n    Period.of = function of(years, months, days) {\n        return Period.create(years, months, days);\n    };\n    Period.from = function from(amount) {\n        if (amount instanceof Period) {\n            return amount;\n        }\n        requireNonNull(amount, \"amount\");\n        var years = 0;\n        var months = 0;\n        var days = 0;\n        var units = amount.units();\n        for(var i = 0; i < units.length; i++){\n            var unit = units[i];\n            var unitAmount = amount.get(unit);\n            if (unit === ChronoUnit.YEARS) {\n                years = MathUtil.safeToInt(unitAmount);\n            } else if (unit === ChronoUnit.MONTHS) {\n                months = MathUtil.safeToInt(unitAmount);\n            } else if (unit === ChronoUnit.DAYS) {\n                days = MathUtil.safeToInt(unitAmount);\n            } else {\n                throw new DateTimeException(\"Unit must be Years, Months or Days, but was \" + unit);\n            }\n        }\n        return Period.create(years, months, days);\n    };\n    Period.between = function between(startDate, endDate) {\n        requireNonNull(startDate, \"startDate\");\n        requireNonNull(endDate, \"endDate\");\n        requireInstance(startDate, LocalDate, \"startDate\");\n        requireInstance(endDate, LocalDate, \"endDate\");\n        return startDate.until(endDate);\n    };\n    Period.parse = function parse(text) {\n        requireNonNull(text, \"text\");\n        try {\n            return Period._parse(text);\n        } catch (ex) {\n            if (ex instanceof ArithmeticException) {\n                throw new DateTimeParseException(\"Text cannot be parsed to a Period\", text, 0, ex);\n            } else {\n                throw ex;\n            }\n        }\n    };\n    Period._parse = function _parse(text) {\n        var matches = PATTERN.exec(text);\n        if (matches != null) {\n            var negate = \"-\" === matches[1] ? -1 : 1;\n            var yearMatch = matches[2];\n            var monthMatch = matches[3];\n            var weekMatch = matches[4];\n            var dayMatch = matches[5];\n            if (yearMatch != null || monthMatch != null || weekMatch != null || dayMatch != null) {\n                var years = Period._parseNumber(text, yearMatch, negate);\n                var months = Period._parseNumber(text, monthMatch, negate);\n                var weeks = Period._parseNumber(text, weekMatch, negate);\n                var days = Period._parseNumber(text, dayMatch, negate);\n                days = MathUtil.safeAdd(days, MathUtil.safeMultiply(weeks, 7));\n                return Period.create(years, months, days);\n            }\n        }\n        throw new DateTimeParseException(\"Text cannot be parsed to a Period\", text, 0);\n    };\n    Period._parseNumber = function _parseNumber(text, str, negate) {\n        if (str == null) {\n            return 0;\n        }\n        var val = MathUtil.parseInt(str);\n        return MathUtil.safeMultiply(val, negate);\n    };\n    Period.create = function create(years, months, days) {\n        return new Period(years, months, days);\n    };\n    var _proto = Period.prototype;\n    _proto.units = function units() {\n        return [\n            ChronoUnit.YEARS,\n            ChronoUnit.MONTHS,\n            ChronoUnit.DAYS\n        ];\n    };\n    _proto.chronology = function chronology() {\n        return IsoChronology.INSTANCE;\n    };\n    _proto.get = function get(unit) {\n        if (unit === ChronoUnit.YEARS) {\n            return this._years;\n        }\n        if (unit === ChronoUnit.MONTHS) {\n            return this._months;\n        }\n        if (unit === ChronoUnit.DAYS) {\n            return this._days;\n        }\n        throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n    };\n    _proto.isZero = function isZero() {\n        return this === Period.ZERO;\n    };\n    _proto.isNegative = function isNegative() {\n        return this._years < 0 || this._months < 0 || this._days < 0;\n    };\n    _proto.years = function years() {\n        return this._years;\n    };\n    _proto.months = function months() {\n        return this._months;\n    };\n    _proto.days = function days() {\n        return this._days;\n    };\n    _proto.withYears = function withYears(years) {\n        if (years === this._years) {\n            return this;\n        }\n        return Period.create(years, this._months, this._days);\n    };\n    _proto.withMonths = function withMonths(months) {\n        if (months === this._months) {\n            return this;\n        }\n        return Period.create(this._years, months, this._days);\n    };\n    _proto.withDays = function withDays(days) {\n        if (days === this._days) {\n            return this;\n        }\n        return Period.create(this._years, this._months, days);\n    };\n    _proto.plus = function plus(amountToAdd) {\n        var amount = Period.from(amountToAdd);\n        return Period.create(MathUtil.safeAdd(this._years, amount._years), MathUtil.safeAdd(this._months, amount._months), MathUtil.safeAdd(this._days, amount._days));\n    };\n    _proto.plusYears = function plusYears(yearsToAdd) {\n        if (yearsToAdd === 0) {\n            return this;\n        }\n        return Period.create(MathUtil.safeToInt(MathUtil.safeAdd(this._years, yearsToAdd)), this._months, this._days);\n    };\n    _proto.plusMonths = function plusMonths(monthsToAdd) {\n        if (monthsToAdd === 0) {\n            return this;\n        }\n        return Period.create(this._years, MathUtil.safeToInt(MathUtil.safeAdd(this._months, monthsToAdd)), this._days);\n    };\n    _proto.plusDays = function plusDays(daysToAdd) {\n        if (daysToAdd === 0) {\n            return this;\n        }\n        return Period.create(this._years, this._months, MathUtil.safeToInt(MathUtil.safeAdd(this._days, daysToAdd)));\n    };\n    _proto.minus = function minus(amountToSubtract) {\n        var amount = Period.from(amountToSubtract);\n        return Period.create(MathUtil.safeSubtract(this._years, amount._years), MathUtil.safeSubtract(this._months, amount._months), MathUtil.safeSubtract(this._days, amount._days));\n    };\n    _proto.minusYears = function minusYears(yearsToSubtract) {\n        return this.plusYears(-1 * yearsToSubtract);\n    };\n    _proto.minusMonths = function minusMonths(monthsToSubtract) {\n        return this.plusMonths(-1 * monthsToSubtract);\n    };\n    _proto.minusDays = function minusDays(daysToSubtract) {\n        return this.plusDays(-1 * daysToSubtract);\n    };\n    _proto.multipliedBy = function multipliedBy(scalar) {\n        if (this === Period.ZERO || scalar === 1) {\n            return this;\n        }\n        return Period.create(MathUtil.safeMultiply(this._years, scalar), MathUtil.safeMultiply(this._months, scalar), MathUtil.safeMultiply(this._days, scalar));\n    };\n    _proto.negated = function negated() {\n        return this.multipliedBy(-1);\n    };\n    _proto.normalized = function normalized() {\n        var totalMonths = this.toTotalMonths();\n        var splitYears = MathUtil.intDiv(totalMonths, 12);\n        var splitMonths = MathUtil.intMod(totalMonths, 12);\n        if (splitYears === this._years && splitMonths === this._months) {\n            return this;\n        }\n        return Period.create(MathUtil.safeToInt(splitYears), splitMonths, this._days);\n    };\n    _proto.toTotalMonths = function toTotalMonths() {\n        return this._years * 12 + this._months;\n    };\n    _proto.addTo = function addTo(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (this._years !== 0) {\n            if (this._months !== 0) {\n                temporal = temporal.plus(this.toTotalMonths(), ChronoUnit.MONTHS);\n            } else {\n                temporal = temporal.plus(this._years, ChronoUnit.YEARS);\n            }\n        } else if (this._months !== 0) {\n            temporal = temporal.plus(this._months, ChronoUnit.MONTHS);\n        }\n        if (this._days !== 0) {\n            temporal = temporal.plus(this._days, ChronoUnit.DAYS);\n        }\n        return temporal;\n    };\n    _proto.subtractFrom = function subtractFrom(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (this._years !== 0) {\n            if (this._months !== 0) {\n                temporal = temporal.minus(this.toTotalMonths(), ChronoUnit.MONTHS);\n            } else {\n                temporal = temporal.minus(this._years, ChronoUnit.YEARS);\n            }\n        } else if (this._months !== 0) {\n            temporal = temporal.minus(this._months, ChronoUnit.MONTHS);\n        }\n        if (this._days !== 0) {\n            temporal = temporal.minus(this._days, ChronoUnit.DAYS);\n        }\n        return temporal;\n    };\n    _proto.equals = function equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof Period) {\n            var other = obj;\n            return this._years === other._years && this._months === other._months && this._days === other._days;\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return MathUtil.hashCode(this._years, this._months, this._days);\n    };\n    _proto.toString = function toString() {\n        if (this === Period.ZERO) {\n            return \"P0D\";\n        } else {\n            var buf = \"P\";\n            if (this._years !== 0) {\n                buf += this._years + \"Y\";\n            }\n            if (this._months !== 0) {\n                buf += this._months + \"M\";\n            }\n            if (this._days !== 0) {\n                buf += this._days + \"D\";\n            }\n            return buf;\n        }\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    return Period;\n}(TemporalAmount);\nfunction _init$h() {\n    Period.ofDays(0);\n}\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var ParsePosition = function() {\n    function ParsePosition(index) {\n        this._index = index;\n        this._errorIndex = -1;\n    }\n    var _proto = ParsePosition.prototype;\n    _proto.getIndex = function getIndex() {\n        return this._index;\n    };\n    _proto.setIndex = function setIndex(index) {\n        this._index = index;\n    };\n    _proto.getErrorIndex = function getErrorIndex() {\n        return this._errorIndex;\n    };\n    _proto.setErrorIndex = function setErrorIndex(errorIndex) {\n        this._errorIndex = errorIndex;\n    };\n    return ParsePosition;\n}();\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var EnumMap = function() {\n    function EnumMap() {\n        this._map = {};\n    }\n    var _proto = EnumMap.prototype;\n    _proto.putAll = function putAll(otherMap) {\n        for(var key in otherMap._map){\n            this._map[key] = otherMap._map[key];\n        }\n        return this;\n    };\n    _proto.containsKey = function containsKey(key) {\n        return this._map.hasOwnProperty(key.name()) && this.get(key) !== undefined;\n    };\n    _proto.get = function get(key) {\n        return this._map[key.name()];\n    };\n    _proto.put = function put(key, val) {\n        return this.set(key, val);\n    };\n    _proto.set = function set(key, val) {\n        this._map[key.name()] = val;\n        return this;\n    };\n    _proto.retainAll = function retainAll(keyList) {\n        var map = {};\n        for(var i = 0; i < keyList.length; i++){\n            var key = keyList[i].name();\n            map[key] = this._map[key];\n        }\n        this._map = map;\n        return this;\n    };\n    _proto.remove = function remove(key) {\n        var keyName = key.name();\n        var val = this._map[keyName];\n        this._map[keyName] = undefined;\n        return val;\n    };\n    _proto.keySet = function keySet() {\n        return this._map;\n    };\n    _proto.clear = function clear() {\n        this._map = {};\n    };\n    return EnumMap;\n}();\nvar ResolverStyle = function(_Enum) {\n    _inheritsLoose(ResolverStyle, _Enum);\n    function ResolverStyle() {\n        return _Enum.apply(this, arguments) || this;\n    }\n    return ResolverStyle;\n}(Enum);\nResolverStyle.STRICT = new ResolverStyle(\"STRICT\");\nResolverStyle.SMART = new ResolverStyle(\"SMART\");\nResolverStyle.LENIENT = new ResolverStyle(\"LENIENT\");\nvar Temporal = function(_TemporalAccessor) {\n    _inheritsLoose(Temporal, _TemporalAccessor);\n    function Temporal() {\n        return _TemporalAccessor.apply(this, arguments) || this;\n    }\n    var _proto = Temporal.prototype;\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        abstractMethodFail(\"isSupported\");\n    };\n    _proto.minus = function minus(amount, unit) {\n        if (arguments.length < 2) {\n            return this._minusAmount(amount);\n        } else {\n            return this._minusUnit(amount, unit);\n        }\n    };\n    _proto._minusAmount = function _minusAmount(amount) {\n        requireNonNull(amount, \"amount\");\n        requireInstance(amount, TemporalAmount, \"amount\");\n        return amount.subtractFrom(this);\n    };\n    _proto._minusUnit = function _minusUnit(amountToSubtract, unit) {\n        requireNonNull(amountToSubtract, \"amountToSubtract\");\n        requireNonNull(unit, \"unit\");\n        requireInstance(unit, TemporalUnit, \"unit\");\n        return this._plusUnit(-amountToSubtract, unit);\n    };\n    _proto.plus = function plus(amount, unit) {\n        if (arguments.length < 2) {\n            return this._plusAmount(amount);\n        } else {\n            return this._plusUnit(amount, unit);\n        }\n    };\n    _proto._plusAmount = function _plusAmount(amount) {\n        requireNonNull(amount, \"amount\");\n        requireInstance(amount, TemporalAmount, \"amount\");\n        return amount.addTo(this);\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        abstractMethodFail(\"_plusUnit\");\n    };\n    _proto.until = function until(endTemporal, unit) {\n        abstractMethodFail(\"until\");\n    };\n    _proto.with = function _with(adjusterOrField, newValue) {\n        if (arguments.length < 2) {\n            return this._withAdjuster(adjusterOrField);\n        } else {\n            return this._withField(adjusterOrField, newValue);\n        }\n    };\n    _proto._withAdjuster = function _withAdjuster(adjuster) {\n        requireNonNull(adjuster, \"adjuster\");\n        assert(typeof adjuster.adjustInto === \"function\", \"adjuster must be a TemporalAdjuster\", IllegalArgumentException);\n        return adjuster.adjustInto(this);\n    };\n    _proto._withField = function _withField(field, newValue) {\n        abstractMethodFail(\"_withField\");\n    };\n    return Temporal;\n}(TemporalAccessor);\nif (typeof Symbol !== \"undefined\" && Symbol.toPrimitive) {\n    Temporal.prototype[Symbol.toPrimitive] = function(hint) {\n        if (hint !== \"number\") {\n            return this.toString();\n        }\n        throw new TypeError(\"A conversion from Temporal to a number is not allowed. \" + \"To compare use the methods .equals(), .compareTo(), .isBefore() \" + \"or one that is more suitable to your use case.\");\n    };\n}\nvar ChronoLocalDate = function(_Temporal) {\n    _inheritsLoose(ChronoLocalDate, _Temporal);\n    function ChronoLocalDate() {\n        return _Temporal.apply(this, arguments) || this;\n    }\n    var _proto = ChronoLocalDate.prototype;\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isDateBased();\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isDateBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    };\n    _proto.query = function query(_query) {\n        if (_query === TemporalQueries.chronology()) {\n            return this.chronology();\n        } else if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.DAYS;\n        } else if (_query === TemporalQueries.localDate()) {\n            return LocalDate.ofEpochDay(this.toEpochDay());\n        } else if (_query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n            return null;\n        }\n        return _Temporal.prototype.query.call(this, _query);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        return temporal.with(ChronoField.EPOCH_DAY, this.toEpochDay());\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        requireInstance(formatter, DateTimeFormatter, \"formatter\");\n        return formatter.format(this);\n    };\n    return ChronoLocalDate;\n}(Temporal);\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var StringUtil = function() {\n    function StringUtil() {}\n    StringUtil.startsWith = function startsWith(text, pattern) {\n        return text.indexOf(pattern) === 0;\n    };\n    StringUtil.hashCode = function hashCode(text) {\n        var len = text.length;\n        if (len === 0) {\n            return 0;\n        }\n        var hash = 0;\n        for(var i = 0; i < len; i++){\n            var chr = text.charCodeAt(i);\n            hash = (hash << 5) - hash + chr;\n            hash |= 0;\n        }\n        return MathUtil.smi(hash);\n    };\n    return StringUtil;\n}();\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var ZoneId = function() {\n    function ZoneId() {}\n    ZoneId.systemDefault = function systemDefault() {\n        throw new DateTimeException(\"not supported operation\");\n    };\n    ZoneId.getAvailableZoneIds = function getAvailableZoneIds() {\n        throw new DateTimeException(\"not supported operation\");\n    };\n    ZoneId.of = function of(zoneId) {\n        throw new DateTimeException(\"not supported operation\" + zoneId);\n    };\n    ZoneId.ofOffset = function ofOffset(prefix, offset) {\n        throw new DateTimeException(\"not supported operation\" + prefix + offset);\n    };\n    ZoneId.from = function from(temporal) {\n        throw new DateTimeException(\"not supported operation\" + temporal);\n    };\n    var _proto = ZoneId.prototype;\n    _proto.id = function id() {\n        abstractMethodFail(\"ZoneId.id\");\n    };\n    _proto.rules = function rules() {\n        abstractMethodFail(\"ZoneId.rules\");\n    };\n    _proto.normalized = function normalized() {\n        var rules = this.rules();\n        if (rules.isFixedOffset()) {\n            return rules.offset(Instant.EPOCH);\n        }\n        return this;\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ZoneId) {\n            return this.id() === other.id();\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return StringUtil.hashCode(this.id());\n    };\n    _proto.toString = function toString() {\n        return this.id();\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    return ZoneId;\n}();\nvar ZoneRules = function() {\n    function ZoneRules() {}\n    ZoneRules.of = function of(offset) {\n        requireNonNull(offset, \"offset\");\n        return new Fixed(offset);\n    };\n    var _proto = ZoneRules.prototype;\n    _proto.isFixedOffset = function isFixedOffset() {\n        abstractMethodFail(\"ZoneRules.isFixedOffset\");\n    };\n    _proto.offset = function offset(instantOrLocalDateTime) {\n        if (instantOrLocalDateTime instanceof Instant) {\n            return this.offsetOfInstant(instantOrLocalDateTime);\n        } else {\n            return this.offsetOfLocalDateTime(instantOrLocalDateTime);\n        }\n    };\n    _proto.offsetOfInstant = function offsetOfInstant(instant) {\n        abstractMethodFail(\"ZoneRules.offsetInstant\");\n    };\n    _proto.offsetOfEpochMilli = function offsetOfEpochMilli(epochMilli) {\n        abstractMethodFail(\"ZoneRules.offsetOfEpochMilli\");\n    };\n    _proto.offsetOfLocalDateTime = function offsetOfLocalDateTime(localDateTime) {\n        abstractMethodFail(\"ZoneRules.offsetLocalDateTime\");\n    };\n    _proto.validOffsets = function validOffsets(localDateTime) {\n        abstractMethodFail(\"ZoneRules.validOffsets\");\n    };\n    _proto.transition = function transition(localDateTime) {\n        abstractMethodFail(\"ZoneRules.transition\");\n    };\n    _proto.standardOffset = function standardOffset(instant) {\n        abstractMethodFail(\"ZoneRules.standardOffset\");\n    };\n    _proto.daylightSavings = function daylightSavings(instant) {\n        abstractMethodFail(\"ZoneRules.daylightSavings\");\n    };\n    _proto.isDaylightSavings = function isDaylightSavings(instant) {\n        abstractMethodFail(\"ZoneRules.isDaylightSavings\");\n    };\n    _proto.isValidOffset = function isValidOffset(localDateTime, offset) {\n        abstractMethodFail(\"ZoneRules.isValidOffset\");\n    };\n    _proto.nextTransition = function nextTransition(instant) {\n        abstractMethodFail(\"ZoneRules.nextTransition\");\n    };\n    _proto.previousTransition = function previousTransition(instant) {\n        abstractMethodFail(\"ZoneRules.previousTransition\");\n    };\n    _proto.transitions = function transitions() {\n        abstractMethodFail(\"ZoneRules.transitions\");\n    };\n    _proto.transitionRules = function transitionRules() {\n        abstractMethodFail(\"ZoneRules.transitionRules\");\n    };\n    _proto.toString = function toString() {\n        abstractMethodFail(\"ZoneRules.toString\");\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    return ZoneRules;\n}();\nvar Fixed = function(_ZoneRules) {\n    _inheritsLoose(Fixed, _ZoneRules);\n    function Fixed(offset) {\n        var _this;\n        _this = _ZoneRules.call(this) || this;\n        _this._offset = offset;\n        return _this;\n    }\n    var _proto2 = Fixed.prototype;\n    _proto2.isFixedOffset = function isFixedOffset() {\n        return true;\n    };\n    _proto2.offsetOfInstant = function offsetOfInstant() {\n        return this._offset;\n    };\n    _proto2.offsetOfEpochMilli = function offsetOfEpochMilli() {\n        return this._offset;\n    };\n    _proto2.offsetOfLocalDateTime = function offsetOfLocalDateTime() {\n        return this._offset;\n    };\n    _proto2.validOffsets = function validOffsets() {\n        return [\n            this._offset\n        ];\n    };\n    _proto2.transition = function transition() {\n        return null;\n    };\n    _proto2.standardOffset = function standardOffset() {\n        return this._offset;\n    };\n    _proto2.daylightSavings = function daylightSavings() {\n        return Duration.ZERO;\n    };\n    _proto2.isDaylightSavings = function isDaylightSavings() {\n        return false;\n    };\n    _proto2.isValidOffset = function isValidOffset(localDateTime, offset) {\n        return this._offset.equals(offset);\n    };\n    _proto2.nextTransition = function nextTransition() {\n        return null;\n    };\n    _proto2.previousTransition = function previousTransition() {\n        return null;\n    };\n    _proto2.transitions = function transitions() {\n        return [];\n    };\n    _proto2.transitionRules = function transitionRules() {\n        return [];\n    };\n    _proto2.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof Fixed) {\n            return this._offset.equals(other._offset);\n        }\n        return false;\n    };\n    _proto2.toString = function toString() {\n        return \"FixedRules:\" + this._offset.toString();\n    };\n    return Fixed;\n}(ZoneRules);\nvar SECONDS_CACHE = {};\nvar ID_CACHE = {};\nvar ZoneOffset = function(_ZoneId) {\n    _inheritsLoose(ZoneOffset, _ZoneId);\n    function ZoneOffset(totalSeconds) {\n        var _this;\n        _this = _ZoneId.call(this) || this;\n        ZoneOffset._validateTotalSeconds(totalSeconds);\n        _this._totalSeconds = MathUtil.safeToInt(totalSeconds);\n        _this._rules = ZoneRules.of(_assertThisInitialized(_this));\n        _this._id = ZoneOffset._buildId(totalSeconds);\n        return _this;\n    }\n    var _proto = ZoneOffset.prototype;\n    _proto.totalSeconds = function totalSeconds() {\n        return this._totalSeconds;\n    };\n    _proto.id = function id() {\n        return this._id;\n    };\n    ZoneOffset._buildId = function _buildId(totalSeconds) {\n        if (totalSeconds === 0) {\n            return \"Z\";\n        } else {\n            var absTotalSeconds = Math.abs(totalSeconds);\n            var absHours = MathUtil.intDiv(absTotalSeconds, LocalTime.SECONDS_PER_HOUR);\n            var absMinutes = MathUtil.intMod(MathUtil.intDiv(absTotalSeconds, LocalTime.SECONDS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n            var buf = \"\" + (totalSeconds < 0 ? \"-\" : \"+\") + (absHours < 10 ? \"0\" : \"\") + absHours + (absMinutes < 10 ? \":0\" : \":\") + absMinutes;\n            var absSeconds = MathUtil.intMod(absTotalSeconds, LocalTime.SECONDS_PER_MINUTE);\n            if (absSeconds !== 0) {\n                buf += (absSeconds < 10 ? \":0\" : \":\") + absSeconds;\n            }\n            return buf;\n        }\n    };\n    ZoneOffset._validateTotalSeconds = function _validateTotalSeconds(totalSeconds) {\n        if (Math.abs(totalSeconds) > ZoneOffset.MAX_SECONDS) {\n            throw new DateTimeException(\"Zone offset not in valid range: -18:00 to +18:00\");\n        }\n    };\n    ZoneOffset._validate = function _validate(hours, minutes, seconds) {\n        if (hours < -18 || hours > 18) {\n            throw new DateTimeException(\"Zone offset hours not in valid range: value \" + hours + \" is not in the range -18 to 18\");\n        }\n        if (hours > 0) {\n            if (minutes < 0 || seconds < 0) {\n                throw new DateTimeException(\"Zone offset minutes and seconds must be positive because hours is positive\");\n            }\n        } else if (hours < 0) {\n            if (minutes > 0 || seconds > 0) {\n                throw new DateTimeException(\"Zone offset minutes and seconds must be negative because hours is negative\");\n            }\n        } else if (minutes > 0 && seconds < 0 || minutes < 0 && seconds > 0) {\n            throw new DateTimeException(\"Zone offset minutes and seconds must have the same sign\");\n        }\n        if (Math.abs(minutes) > 59) {\n            throw new DateTimeException(\"Zone offset minutes not in valid range: abs(value) \" + Math.abs(minutes) + \" is not in the range 0 to 59\");\n        }\n        if (Math.abs(seconds) > 59) {\n            throw new DateTimeException(\"Zone offset seconds not in valid range: abs(value) \" + Math.abs(seconds) + \" is not in the range 0 to 59\");\n        }\n        if (Math.abs(hours) === 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {\n            throw new DateTimeException(\"Zone offset not in valid range: -18:00 to +18:00\");\n        }\n    };\n    ZoneOffset.of = function of(offsetId) {\n        requireNonNull(offsetId, \"offsetId\");\n        var offset = ID_CACHE[offsetId];\n        if (offset != null) {\n            return offset;\n        }\n        var hours, minutes, seconds;\n        switch(offsetId.length){\n            case 2:\n                offsetId = offsetId[0] + \"0\" + offsetId[1];\n            case 3:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = 0;\n                seconds = 0;\n                break;\n            case 5:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = ZoneOffset._parseNumber(offsetId, 3, false);\n                seconds = 0;\n                break;\n            case 6:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = ZoneOffset._parseNumber(offsetId, 4, true);\n                seconds = 0;\n                break;\n            case 7:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = ZoneOffset._parseNumber(offsetId, 3, false);\n                seconds = ZoneOffset._parseNumber(offsetId, 5, false);\n                break;\n            case 9:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = ZoneOffset._parseNumber(offsetId, 4, true);\n                seconds = ZoneOffset._parseNumber(offsetId, 7, true);\n                break;\n            default:\n                throw new DateTimeException(\"Invalid ID for ZoneOffset, invalid format: \" + offsetId);\n        }\n        var first = offsetId[0];\n        if (first !== \"+\" && first !== \"-\") {\n            throw new DateTimeException(\"Invalid ID for ZoneOffset, plus/minus not found when expected: \" + offsetId);\n        }\n        if (first === \"-\") {\n            return ZoneOffset.ofHoursMinutesSeconds(-hours, -minutes, -seconds);\n        } else {\n            return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, seconds);\n        }\n    };\n    ZoneOffset._parseNumber = function _parseNumber(offsetId, pos, precededByColon) {\n        if (precededByColon && offsetId[pos - 1] !== \":\") {\n            throw new DateTimeException(\"Invalid ID for ZoneOffset, colon not found when expected: \" + offsetId);\n        }\n        var ch1 = offsetId[pos];\n        var ch2 = offsetId[pos + 1];\n        if (ch1 < \"0\" || ch1 > \"9\" || ch2 < \"0\" || ch2 > \"9\") {\n            throw new DateTimeException(\"Invalid ID for ZoneOffset, non numeric characters found: \" + offsetId);\n        }\n        return (ch1.charCodeAt(0) - 48) * 10 + (ch2.charCodeAt(0) - 48);\n    };\n    ZoneOffset.ofHours = function ofHours(hours) {\n        return ZoneOffset.ofHoursMinutesSeconds(hours, 0, 0);\n    };\n    ZoneOffset.ofHoursMinutes = function ofHoursMinutes(hours, minutes) {\n        return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, 0);\n    };\n    ZoneOffset.ofHoursMinutesSeconds = function ofHoursMinutesSeconds(hours, minutes, seconds) {\n        ZoneOffset._validate(hours, minutes, seconds);\n        var totalSeconds = hours * LocalTime.SECONDS_PER_HOUR + minutes * LocalTime.SECONDS_PER_MINUTE + seconds;\n        return ZoneOffset.ofTotalSeconds(totalSeconds);\n    };\n    ZoneOffset.ofTotalMinutes = function ofTotalMinutes(totalMinutes) {\n        var totalSeconds = totalMinutes * LocalTime.SECONDS_PER_MINUTE;\n        return ZoneOffset.ofTotalSeconds(totalSeconds);\n    };\n    ZoneOffset.ofTotalSeconds = function ofTotalSeconds(totalSeconds) {\n        if (totalSeconds % (15 * LocalTime.SECONDS_PER_MINUTE) === 0) {\n            var totalSecs = totalSeconds;\n            var result = SECONDS_CACHE[totalSecs];\n            if (result == null) {\n                result = new ZoneOffset(totalSeconds);\n                SECONDS_CACHE[totalSecs] = result;\n                ID_CACHE[result.id()] = result;\n            }\n            return result;\n        } else {\n            return new ZoneOffset(totalSeconds);\n        }\n    };\n    _proto.rules = function rules() {\n        return this._rules;\n    };\n    _proto.get = function get(field) {\n        return this.getLong(field);\n    };\n    _proto.getLong = function getLong(field) {\n        if (field === ChronoField.OFFSET_SECONDS) {\n            return this._totalSeconds;\n        } else if (field instanceof ChronoField) {\n            throw new DateTimeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n            return this;\n        } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.precision() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId()) {\n            return null;\n        }\n        return _query.queryFrom(this);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        return temporal.with(ChronoField.OFFSET_SECONDS, this._totalSeconds);\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        return other._totalSeconds - this._totalSeconds;\n    };\n    _proto.equals = function equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof ZoneOffset) {\n            return this._totalSeconds === obj._totalSeconds;\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return this._totalSeconds;\n    };\n    _proto.toString = function toString() {\n        return this._id;\n    };\n    return ZoneOffset;\n}(ZoneId);\nfunction _init$g() {\n    ZoneOffset.MAX_SECONDS = 18 * LocalTime.SECONDS_PER_HOUR;\n    ZoneOffset.UTC = ZoneOffset.ofTotalSeconds(0);\n    ZoneOffset.MIN = ZoneOffset.ofTotalSeconds(-ZoneOffset.MAX_SECONDS);\n    ZoneOffset.MAX = ZoneOffset.ofTotalSeconds(ZoneOffset.MAX_SECONDS);\n}\nvar DateTimeBuilder = function(_TemporalAccessor) {\n    _inheritsLoose(DateTimeBuilder, _TemporalAccessor);\n    DateTimeBuilder.create = function create(field, value) {\n        var dtb = new DateTimeBuilder();\n        dtb._addFieldValue(field, value);\n        return dtb;\n    };\n    function DateTimeBuilder() {\n        var _this;\n        _this = _TemporalAccessor.call(this) || this;\n        _this.fieldValues = new EnumMap();\n        _this.chrono = null;\n        _this.zone = null;\n        _this.date = null;\n        _this.time = null;\n        _this.leapSecond = false;\n        _this.excessDays = null;\n        return _this;\n    }\n    var _proto = DateTimeBuilder.prototype;\n    _proto.getFieldValue0 = function getFieldValue0(field) {\n        return this.fieldValues.get(field);\n    };\n    _proto._addFieldValue = function _addFieldValue(field, value) {\n        requireNonNull(field, \"field\");\n        var old = this.getFieldValue0(field);\n        if (old != null && old !== value) {\n            throw new DateTimeException(\"Conflict found: \" + field + \" \" + old + \" differs from \" + field + \" \" + value + \": \" + this);\n        }\n        return this._putFieldValue0(field, value);\n    };\n    _proto._putFieldValue0 = function _putFieldValue0(field, value) {\n        this.fieldValues.put(field, value);\n        return this;\n    };\n    _proto.resolve = function resolve(resolverStyle, resolverFields) {\n        if (resolverFields != null) {\n            this.fieldValues.retainAll(resolverFields);\n        }\n        this._mergeDate(resolverStyle);\n        this._mergeTime(resolverStyle);\n        this._resolveTimeInferZeroes(resolverStyle);\n        if (this.excessDays != null && this.excessDays.isZero() === false && this.date != null && this.time != null) {\n            this.date = this.date.plus(this.excessDays);\n            this.excessDays = Period.ZERO;\n        }\n        this._resolveInstant();\n        return this;\n    };\n    _proto._mergeDate = function _mergeDate(resolverStyle) {\n        this._checkDate(IsoChronology.INSTANCE.resolveDate(this.fieldValues, resolverStyle));\n    };\n    _proto._checkDate = function _checkDate(date) {\n        if (date != null) {\n            this._addObject(date);\n            for(var fieldName in this.fieldValues.keySet()){\n                var field = ChronoField.byName(fieldName);\n                if (field) {\n                    if (this.fieldValues.get(field) !== undefined) {\n                        if (field.isDateBased()) {\n                            var val1 = void 0;\n                            try {\n                                val1 = date.getLong(field);\n                            } catch (ex) {\n                                if (ex instanceof DateTimeException) {\n                                    continue;\n                                } else {\n                                    throw ex;\n                                }\n                            }\n                            var val2 = this.fieldValues.get(field);\n                            if (val1 !== val2) {\n                                throw new DateTimeException(\"Conflict found: Field \" + field + \" \" + val1 + \" differs from \" + field + \" \" + val2 + \" derived from \" + date);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    _proto._mergeTime = function _mergeTime(resolverStyle) {\n        if (this.fieldValues.containsKey(ChronoField.CLOCK_HOUR_OF_DAY)) {\n            var ch = this.fieldValues.remove(ChronoField.CLOCK_HOUR_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                if (resolverStyle === ResolverStyle.SMART && ch === 0) ;\n                else {\n                    ChronoField.CLOCK_HOUR_OF_DAY.checkValidValue(ch);\n                }\n            }\n            this._addFieldValue(ChronoField.HOUR_OF_DAY, ch === 24 ? 0 : ch);\n        }\n        if (this.fieldValues.containsKey(ChronoField.CLOCK_HOUR_OF_AMPM)) {\n            var _ch = this.fieldValues.remove(ChronoField.CLOCK_HOUR_OF_AMPM);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                if (resolverStyle === ResolverStyle.SMART && _ch === 0) ;\n                else {\n                    ChronoField.CLOCK_HOUR_OF_AMPM.checkValidValue(_ch);\n                }\n            }\n            this._addFieldValue(ChronoField.HOUR_OF_AMPM, _ch === 12 ? 0 : _ch);\n        }\n        if (resolverStyle !== ResolverStyle.LENIENT) {\n            if (this.fieldValues.containsKey(ChronoField.AMPM_OF_DAY)) {\n                ChronoField.AMPM_OF_DAY.checkValidValue(this.fieldValues.get(ChronoField.AMPM_OF_DAY));\n            }\n            if (this.fieldValues.containsKey(ChronoField.HOUR_OF_AMPM)) {\n                ChronoField.HOUR_OF_AMPM.checkValidValue(this.fieldValues.get(ChronoField.HOUR_OF_AMPM));\n            }\n        }\n        if (this.fieldValues.containsKey(ChronoField.AMPM_OF_DAY) && this.fieldValues.containsKey(ChronoField.HOUR_OF_AMPM)) {\n            var ap = this.fieldValues.remove(ChronoField.AMPM_OF_DAY);\n            var hap = this.fieldValues.remove(ChronoField.HOUR_OF_AMPM);\n            this._addFieldValue(ChronoField.HOUR_OF_DAY, ap * 12 + hap);\n        }\n        if (this.fieldValues.containsKey(ChronoField.NANO_OF_DAY)) {\n            var nod = this.fieldValues.remove(ChronoField.NANO_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.NANO_OF_DAY.checkValidValue(nod);\n            }\n            this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(nod, 1000000000));\n            this._addFieldValue(ChronoField.NANO_OF_SECOND, MathUtil.intMod(nod, 1000000000));\n        }\n        if (this.fieldValues.containsKey(ChronoField.MICRO_OF_DAY)) {\n            var cod = this.fieldValues.remove(ChronoField.MICRO_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.MICRO_OF_DAY.checkValidValue(cod);\n            }\n            this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(cod, 1000000));\n            this._addFieldValue(ChronoField.MICRO_OF_SECOND, MathUtil.intMod(cod, 1000000));\n        }\n        if (this.fieldValues.containsKey(ChronoField.MILLI_OF_DAY)) {\n            var lod = this.fieldValues.remove(ChronoField.MILLI_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.MILLI_OF_DAY.checkValidValue(lod);\n            }\n            this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(lod, 1000));\n            this._addFieldValue(ChronoField.MILLI_OF_SECOND, MathUtil.intMod(lod, 1000));\n        }\n        if (this.fieldValues.containsKey(ChronoField.SECOND_OF_DAY)) {\n            var sod = this.fieldValues.remove(ChronoField.SECOND_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.SECOND_OF_DAY.checkValidValue(sod);\n            }\n            this._addFieldValue(ChronoField.HOUR_OF_DAY, MathUtil.intDiv(sod, 3600));\n            this._addFieldValue(ChronoField.MINUTE_OF_HOUR, MathUtil.intMod(MathUtil.intDiv(sod, 60), 60));\n            this._addFieldValue(ChronoField.SECOND_OF_MINUTE, MathUtil.intMod(sod, 60));\n        }\n        if (this.fieldValues.containsKey(ChronoField.MINUTE_OF_DAY)) {\n            var mod = this.fieldValues.remove(ChronoField.MINUTE_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.MINUTE_OF_DAY.checkValidValue(mod);\n            }\n            this._addFieldValue(ChronoField.HOUR_OF_DAY, MathUtil.intDiv(mod, 60));\n            this._addFieldValue(ChronoField.MINUTE_OF_HOUR, MathUtil.intMod(mod, 60));\n        }\n        if (resolverStyle !== ResolverStyle.LENIENT) {\n            if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND)) {\n                ChronoField.MILLI_OF_SECOND.checkValidValue(this.fieldValues.get(ChronoField.MILLI_OF_SECOND));\n            }\n            if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n                ChronoField.MICRO_OF_SECOND.checkValidValue(this.fieldValues.get(ChronoField.MICRO_OF_SECOND));\n            }\n        }\n        if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND) && this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n            var los = this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n            var cos = this.fieldValues.get(ChronoField.MICRO_OF_SECOND);\n            this._putFieldValue0(ChronoField.MICRO_OF_SECOND, los * 1000 + MathUtil.intMod(cos, 1000));\n        }\n        if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND) && this.fieldValues.containsKey(ChronoField.NANO_OF_SECOND)) {\n            var nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n            this._putFieldValue0(ChronoField.MICRO_OF_SECOND, MathUtil.intDiv(nos, 1000));\n            this.fieldValues.remove(ChronoField.MICRO_OF_SECOND);\n        }\n        if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND) && this.fieldValues.containsKey(ChronoField.NANO_OF_SECOND)) {\n            var _nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n            this._putFieldValue0(ChronoField.MILLI_OF_SECOND, MathUtil.intDiv(_nos, 1000000));\n            this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n        }\n        if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n            var _cos = this.fieldValues.remove(ChronoField.MICRO_OF_SECOND);\n            this._putFieldValue0(ChronoField.NANO_OF_SECOND, _cos * 1000);\n        } else if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND)) {\n            var _los = this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n            this._putFieldValue0(ChronoField.NANO_OF_SECOND, _los * 1000000);\n        }\n    };\n    _proto._resolveTimeInferZeroes = function _resolveTimeInferZeroes(resolverStyle) {\n        var hod = this.fieldValues.get(ChronoField.HOUR_OF_DAY);\n        var moh = this.fieldValues.get(ChronoField.MINUTE_OF_HOUR);\n        var som = this.fieldValues.get(ChronoField.SECOND_OF_MINUTE);\n        var nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n        if (hod == null) {\n            return;\n        }\n        if (moh == null && (som != null || nos != null)) {\n            return;\n        }\n        if (moh != null && som == null && nos != null) {\n            return;\n        }\n        if (resolverStyle !== ResolverStyle.LENIENT) {\n            if (hod != null) {\n                if (resolverStyle === ResolverStyle.SMART && hod === 24 && (moh == null || moh === 0) && (som == null || som === 0) && (nos == null || nos === 0)) {\n                    hod = 0;\n                    this.excessDays = Period.ofDays(1);\n                }\n                var hodVal = ChronoField.HOUR_OF_DAY.checkValidIntValue(hod);\n                if (moh != null) {\n                    var mohVal = ChronoField.MINUTE_OF_HOUR.checkValidIntValue(moh);\n                    if (som != null) {\n                        var somVal = ChronoField.SECOND_OF_MINUTE.checkValidIntValue(som);\n                        if (nos != null) {\n                            var nosVal = ChronoField.NANO_OF_SECOND.checkValidIntValue(nos);\n                            this._addObject(LocalTime.of(hodVal, mohVal, somVal, nosVal));\n                        } else {\n                            this._addObject(LocalTime.of(hodVal, mohVal, somVal));\n                        }\n                    } else {\n                        if (nos == null) {\n                            this._addObject(LocalTime.of(hodVal, mohVal));\n                        }\n                    }\n                } else {\n                    if (som == null && nos == null) {\n                        this._addObject(LocalTime.of(hodVal, 0));\n                    }\n                }\n            }\n        } else {\n            if (hod != null) {\n                var _hodVal = hod;\n                if (moh != null) {\n                    if (som != null) {\n                        if (nos == null) {\n                            nos = 0;\n                        }\n                        var totalNanos = MathUtil.safeMultiply(_hodVal, 3600000000000);\n                        totalNanos = MathUtil.safeAdd(totalNanos, MathUtil.safeMultiply(moh, 60000000000));\n                        totalNanos = MathUtil.safeAdd(totalNanos, MathUtil.safeMultiply(som, 1000000000));\n                        totalNanos = MathUtil.safeAdd(totalNanos, nos);\n                        var excessDays = MathUtil.floorDiv(totalNanos, 86400000000000);\n                        var nod = MathUtil.floorMod(totalNanos, 86400000000000);\n                        this._addObject(LocalTime.ofNanoOfDay(nod));\n                        this.excessDays = Period.ofDays(excessDays);\n                    } else {\n                        var totalSecs = MathUtil.safeMultiply(_hodVal, 3600);\n                        totalSecs = MathUtil.safeAdd(totalSecs, MathUtil.safeMultiply(moh, 60));\n                        var _excessDays = MathUtil.floorDiv(totalSecs, 86400);\n                        var sod = MathUtil.floorMod(totalSecs, 86400);\n                        this._addObject(LocalTime.ofSecondOfDay(sod));\n                        this.excessDays = Period.ofDays(_excessDays);\n                    }\n                } else {\n                    var _excessDays2 = MathUtil.safeToInt(MathUtil.floorDiv(_hodVal, 24));\n                    _hodVal = MathUtil.floorMod(_hodVal, 24);\n                    this._addObject(LocalTime.of(_hodVal, 0));\n                    this.excessDays = Period.ofDays(_excessDays2);\n                }\n            }\n        }\n        this.fieldValues.remove(ChronoField.HOUR_OF_DAY);\n        this.fieldValues.remove(ChronoField.MINUTE_OF_HOUR);\n        this.fieldValues.remove(ChronoField.SECOND_OF_MINUTE);\n        this.fieldValues.remove(ChronoField.NANO_OF_SECOND);\n    };\n    _proto._addObject = function _addObject(dateOrTime) {\n        if (dateOrTime instanceof ChronoLocalDate) {\n            this.date = dateOrTime;\n        } else if (dateOrTime instanceof LocalTime) {\n            this.time = dateOrTime;\n        }\n    };\n    _proto._resolveInstant = function _resolveInstant() {\n        if (this.date != null && this.time != null) {\n            var offsetSecs = this.fieldValues.get(ChronoField.OFFSET_SECONDS);\n            if (offsetSecs != null) {\n                var offset = ZoneOffset.ofTotalSeconds(offsetSecs);\n                var instant = this.date.atTime(this.time).atZone(offset).getLong(ChronoField.INSTANT_SECONDS);\n                this.fieldValues.put(ChronoField.INSTANT_SECONDS, instant);\n            } else if (this.zone != null) {\n                var _instant = this.date.atTime(this.time).atZone(this.zone).getLong(ChronoField.INSTANT_SECONDS);\n                this.fieldValues.put(ChronoField.INSTANT_SECONDS, _instant);\n            }\n        }\n    };\n    _proto.build = function build(type) {\n        return type.queryFrom(this);\n    };\n    _proto.isSupported = function isSupported(field) {\n        if (field == null) {\n            return false;\n        }\n        return this.fieldValues.containsKey(field) && this.fieldValues.get(field) !== undefined || this.date != null && this.date.isSupported(field) || this.time != null && this.time.isSupported(field);\n    };\n    _proto.getLong = function getLong(field) {\n        requireNonNull(field, \"field\");\n        var value = this.getFieldValue0(field);\n        if (value == null) {\n            if (this.date != null && this.date.isSupported(field)) {\n                return this.date.getLong(field);\n            }\n            if (this.time != null && this.time.isSupported(field)) {\n                return this.time.getLong(field);\n            }\n            throw new DateTimeException(\"Field not found: \" + field);\n        }\n        return value;\n    };\n    _proto.query = function query(_query) {\n        if (_query === TemporalQueries.zoneId()) {\n            return this.zone;\n        } else if (_query === TemporalQueries.chronology()) {\n            return this.chrono;\n        } else if (_query === TemporalQueries.localDate()) {\n            return this.date != null ? LocalDate.from(this.date) : null;\n        } else if (_query === TemporalQueries.localTime()) {\n            return this.time;\n        } else if (_query === TemporalQueries.zone() || _query === TemporalQueries.offset()) {\n            return _query.queryFrom(this);\n        } else if (_query === TemporalQueries.precision()) {\n            return null;\n        }\n        return _query.queryFrom(this);\n    };\n    return DateTimeBuilder;\n}(TemporalAccessor);\nvar DateTimeParseContext = function() {\n    function DateTimeParseContext() {\n        if (arguments.length === 1) {\n            if (arguments[0] instanceof DateTimeParseContext) {\n                this._constructorSelf.apply(this, arguments);\n                return;\n            } else {\n                this._constructorFormatter.apply(this, arguments);\n            }\n        } else {\n            this._constructorParam.apply(this, arguments);\n        }\n        this._caseSensitive = true;\n        this._strict = true;\n        this._parsed = [\n            new Parsed(this)\n        ];\n    }\n    var _proto = DateTimeParseContext.prototype;\n    _proto._constructorParam = function _constructorParam(locale, symbols, chronology) {\n        this._locale = locale;\n        this._symbols = symbols;\n        this._overrideChronology = chronology;\n    };\n    _proto._constructorFormatter = function _constructorFormatter(formatter) {\n        this._locale = formatter.locale();\n        this._symbols = formatter.decimalStyle();\n        this._overrideChronology = formatter.chronology();\n    };\n    _proto._constructorSelf = function _constructorSelf(other) {\n        this._locale = other._locale;\n        this._symbols = other._symbols;\n        this._overrideChronology = other._overrideChronology;\n        this._overrideZone = other._overrideZone;\n        this._caseSensitive = other._caseSensitive;\n        this._strict = other._strict;\n        this._parsed = [\n            new Parsed(this)\n        ];\n    };\n    _proto.copy = function copy() {\n        return new DateTimeParseContext(this);\n    };\n    _proto.symbols = function symbols() {\n        return this._symbols;\n    };\n    _proto.isStrict = function isStrict() {\n        return this._strict;\n    };\n    _proto.setStrict = function setStrict(strict) {\n        this._strict = strict;\n    };\n    _proto.locale = function locale() {\n        return this._locale;\n    };\n    _proto.setLocale = function setLocale(locale) {\n        this._locale = locale;\n    };\n    _proto.startOptional = function startOptional() {\n        this._parsed.push(this.currentParsed().copy());\n    };\n    _proto.endOptional = function endOptional(successful) {\n        if (successful) {\n            this._parsed.splice(this._parsed.length - 2, 1);\n        } else {\n            this._parsed.splice(this._parsed.length - 1, 1);\n        }\n    };\n    _proto.isCaseSensitive = function isCaseSensitive() {\n        return this._caseSensitive;\n    };\n    _proto.setCaseSensitive = function setCaseSensitive(caseSensitive) {\n        this._caseSensitive = caseSensitive;\n    };\n    _proto.subSequenceEquals = function subSequenceEquals(cs1, offset1, cs2, offset2, length) {\n        if (offset1 + length > cs1.length || offset2 + length > cs2.length) {\n            return false;\n        }\n        if (!this.isCaseSensitive()) {\n            cs1 = cs1.toLowerCase();\n            cs2 = cs2.toLowerCase();\n        }\n        for(var i = 0; i < length; i++){\n            var ch1 = cs1[offset1 + i];\n            var ch2 = cs2[offset2 + i];\n            if (ch1 !== ch2) {\n                return false;\n            }\n        }\n        return true;\n    };\n    _proto.charEquals = function charEquals(ch1, ch2) {\n        if (this.isCaseSensitive()) {\n            return ch1 === ch2;\n        }\n        return this.charEqualsIgnoreCase(ch1, ch2);\n    };\n    _proto.charEqualsIgnoreCase = function charEqualsIgnoreCase(c1, c2) {\n        return c1 === c2 || c1.toLowerCase() === c2.toLowerCase();\n    };\n    _proto.setParsedField = function setParsedField(field, value, errorPos, successPos) {\n        var currentParsedFieldValues = this.currentParsed().fieldValues;\n        var old = currentParsedFieldValues.get(field);\n        currentParsedFieldValues.set(field, value);\n        return old != null && old !== value ? ~errorPos : successPos;\n    };\n    _proto.setParsedZone = function setParsedZone(zone) {\n        requireNonNull(zone, \"zone\");\n        this.currentParsed().zone = zone;\n    };\n    _proto.getParsed = function getParsed(field) {\n        return this.currentParsed().fieldValues.get(field);\n    };\n    _proto.toParsed = function toParsed() {\n        return this.currentParsed();\n    };\n    _proto.currentParsed = function currentParsed() {\n        return this._parsed[this._parsed.length - 1];\n    };\n    _proto.setParsedLeapSecond = function setParsedLeapSecond() {\n        this.currentParsed().leapSecond = true;\n    };\n    _proto.getEffectiveChronology = function getEffectiveChronology() {\n        var chrono = this.currentParsed().chrono;\n        if (chrono == null) {\n            chrono = this._overrideChronology;\n            if (chrono == null) {\n                chrono = IsoChronology.INSTANCE;\n            }\n        }\n        return chrono;\n    };\n    return DateTimeParseContext;\n}();\nvar Parsed = function(_Temporal) {\n    _inheritsLoose(Parsed, _Temporal);\n    function Parsed(dateTimeParseContext) {\n        var _this;\n        _this = _Temporal.call(this) || this;\n        _this.chrono = null;\n        _this.zone = null;\n        _this.fieldValues = new EnumMap();\n        _this.leapSecond = false;\n        _this.dateTimeParseContext = dateTimeParseContext;\n        return _this;\n    }\n    var _proto2 = Parsed.prototype;\n    _proto2.copy = function copy() {\n        var cloned = new Parsed();\n        cloned.chrono = this.chrono;\n        cloned.zone = this.zone;\n        cloned.fieldValues.putAll(this.fieldValues);\n        cloned.leapSecond = this.leapSecond;\n        cloned.dateTimeParseContext = this.dateTimeParseContext;\n        return cloned;\n    };\n    _proto2.toString = function toString() {\n        return this.fieldValues + \", \" + this.chrono + \", \" + this.zone;\n    };\n    _proto2.isSupported = function isSupported(field) {\n        return this.fieldValues.containsKey(field);\n    };\n    _proto2.get = function get(field) {\n        var val = this.fieldValues.get(field);\n        assert(val != null);\n        return val;\n    };\n    _proto2.query = function query(_query) {\n        if (_query === TemporalQueries.chronology()) {\n            return this.chrono;\n        }\n        if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.zone()) {\n            return this.zone;\n        }\n        return _Temporal.prototype.query.call(this, _query);\n    };\n    _proto2.toBuilder = function toBuilder() {\n        var builder = new DateTimeBuilder();\n        builder.fieldValues.putAll(this.fieldValues);\n        builder.chrono = this.dateTimeParseContext.getEffectiveChronology();\n        if (this.zone != null) {\n            builder.zone = this.zone;\n        } else {\n            builder.zone = this.overrideZone;\n        }\n        builder.leapSecond = this.leapSecond;\n        builder.excessDays = this.excessDays;\n        return builder;\n    };\n    return Parsed;\n}(Temporal);\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var DateTimePrintContext = function() {\n    function DateTimePrintContext(temporal, localeOrFormatter, symbols) {\n        if (arguments.length === 2 && arguments[1] instanceof DateTimeFormatter) {\n            this._temporal = DateTimePrintContext.adjust(temporal, localeOrFormatter);\n            this._locale = localeOrFormatter.locale();\n            this._symbols = localeOrFormatter.decimalStyle();\n        } else {\n            this._temporal = temporal;\n            this._locale = localeOrFormatter;\n            this._symbols = symbols;\n        }\n        this._optional = 0;\n    }\n    DateTimePrintContext.adjust = function adjust(temporal, formatter) {\n        return temporal;\n    };\n    var _proto = DateTimePrintContext.prototype;\n    _proto.symbols = function symbols() {\n        return this._symbols;\n    };\n    _proto.startOptional = function startOptional() {\n        this._optional++;\n    };\n    _proto.endOptional = function endOptional() {\n        this._optional--;\n    };\n    _proto.getValueQuery = function getValueQuery(query) {\n        var result = this._temporal.query(query);\n        if (result == null && this._optional === 0) {\n            throw new DateTimeException(\"Unable to extract value: \" + this._temporal);\n        }\n        return result;\n    };\n    _proto.getValue = function getValue(field) {\n        try {\n            return this._temporal.getLong(field);\n        } catch (ex) {\n            if (ex instanceof DateTimeException && this._optional > 0) {\n                return null;\n            }\n            throw ex;\n        }\n    };\n    _proto.temporal = function temporal() {\n        return this._temporal;\n    };\n    _proto.locale = function locale() {\n        return this._locale;\n    };\n    _proto.setDateTime = function setDateTime(temporal) {\n        this._temporal = temporal;\n    };\n    _proto.setLocale = function setLocale(locale) {\n        this._locale = locale;\n    };\n    return DateTimePrintContext;\n}();\nvar IsoFields = {};\nvar QUARTER_DAYS = [\n    0,\n    90,\n    181,\n    273,\n    0,\n    91,\n    182,\n    274\n];\nvar Field = function(_TemporalField) {\n    _inheritsLoose(Field, _TemporalField);\n    function Field() {\n        return _TemporalField.apply(this, arguments) || this;\n    }\n    var _proto = Field.prototype;\n    _proto.isDateBased = function isDateBased() {\n        return true;\n    };\n    _proto.isTimeBased = function isTimeBased() {\n        return false;\n    };\n    _proto._isIso = function _isIso() {\n        return true;\n    };\n    Field._getWeekRangeByLocalDate = function _getWeekRangeByLocalDate(date) {\n        var wby = Field._getWeekBasedYear(date);\n        return ValueRange.of(1, Field._getWeekRangeByYear(wby));\n    };\n    Field._getWeekRangeByYear = function _getWeekRangeByYear(wby) {\n        var date = LocalDate.of(wby, 1, 1);\n        if (date.dayOfWeek() === DayOfWeek.THURSDAY || date.dayOfWeek() === DayOfWeek.WEDNESDAY && date.isLeapYear()) {\n            return 53;\n        }\n        return 52;\n    };\n    Field._getWeek = function _getWeek(date) {\n        var dow0 = date.dayOfWeek().ordinal();\n        var doy0 = date.dayOfYear() - 1;\n        var doyThu0 = doy0 + (3 - dow0);\n        var alignedWeek = MathUtil.intDiv(doyThu0, 7);\n        var firstThuDoy0 = doyThu0 - alignedWeek * 7;\n        var firstMonDoy0 = firstThuDoy0 - 3;\n        if (firstMonDoy0 < -3) {\n            firstMonDoy0 += 7;\n        }\n        if (doy0 < firstMonDoy0) {\n            return Field._getWeekRangeByLocalDate(date.withDayOfYear(180).minusYears(1)).maximum();\n        }\n        var week = MathUtil.intDiv(doy0 - firstMonDoy0, 7) + 1;\n        if (week === 53) {\n            if ((firstMonDoy0 === -3 || firstMonDoy0 === -2 && date.isLeapYear()) === false) {\n                week = 1;\n            }\n        }\n        return week;\n    };\n    Field._getWeekBasedYear = function _getWeekBasedYear(date) {\n        var year = date.year();\n        var doy = date.dayOfYear();\n        if (doy <= 3) {\n            var dow = date.dayOfWeek().ordinal();\n            if (doy - dow < -2) {\n                year--;\n            }\n        } else if (doy >= 363) {\n            var _dow = date.dayOfWeek().ordinal();\n            doy = doy - 363 - (date.isLeapYear() ? 1 : 0);\n            if (doy - _dow >= 0) {\n                year++;\n            }\n        }\n        return year;\n    };\n    _proto.displayName = function displayName() {\n        return this.toString();\n    };\n    _proto.resolve = function resolve() {\n        return null;\n    };\n    _proto.name = function name() {\n        return this.toString();\n    };\n    return Field;\n}(TemporalField);\nvar DAY_OF_QUARTER_FIELD = function(_Field) {\n    _inheritsLoose(DAY_OF_QUARTER_FIELD, _Field);\n    function DAY_OF_QUARTER_FIELD() {\n        return _Field.apply(this, arguments) || this;\n    }\n    var _proto2 = DAY_OF_QUARTER_FIELD.prototype;\n    _proto2.toString = function toString() {\n        return \"DayOfQuarter\";\n    };\n    _proto2.baseUnit = function baseUnit() {\n        return ChronoUnit.DAYS;\n    };\n    _proto2.rangeUnit = function rangeUnit() {\n        return QUARTER_YEARS;\n    };\n    _proto2.range = function range() {\n        return ValueRange.of(1, 90, 92);\n    };\n    _proto2.isSupportedBy = function isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.DAY_OF_YEAR) && temporal.isSupported(ChronoField.MONTH_OF_YEAR) && temporal.isSupported(ChronoField.YEAR) && this._isIso(temporal);\n    };\n    _proto2.rangeRefinedBy = function rangeRefinedBy(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: DayOfQuarter\");\n        }\n        var qoy = temporal.getLong(QUARTER_OF_YEAR);\n        if (qoy === 1) {\n            var year = temporal.getLong(ChronoField.YEAR);\n            return IsoChronology.isLeapYear(year) ? ValueRange.of(1, 91) : ValueRange.of(1, 90);\n        } else if (qoy === 2) {\n            return ValueRange.of(1, 91);\n        } else if (qoy === 3 || qoy === 4) {\n            return ValueRange.of(1, 92);\n        }\n        return this.range();\n    };\n    _proto2.getFrom = function getFrom(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: DayOfQuarter\");\n        }\n        var doy = temporal.get(ChronoField.DAY_OF_YEAR);\n        var moy = temporal.get(ChronoField.MONTH_OF_YEAR);\n        var year = temporal.getLong(ChronoField.YEAR);\n        return doy - QUARTER_DAYS[MathUtil.intDiv(moy - 1, 3) + (IsoChronology.isLeapYear(year) ? 4 : 0)];\n    };\n    _proto2.adjustInto = function adjustInto(temporal, newValue) {\n        var curValue = this.getFrom(temporal);\n        this.range().checkValidValue(newValue, this);\n        return temporal.with(ChronoField.DAY_OF_YEAR, temporal.getLong(ChronoField.DAY_OF_YEAR) + (newValue - curValue));\n    };\n    _proto2.resolve = function resolve(fieldValues, partialTemporal, resolverStyle) {\n        var yearLong = fieldValues.get(ChronoField.YEAR);\n        var qoyLong = fieldValues.get(QUARTER_OF_YEAR);\n        if (yearLong == null || qoyLong == null) {\n            return null;\n        }\n        var y = ChronoField.YEAR.checkValidIntValue(yearLong);\n        var doq = fieldValues.get(DAY_OF_QUARTER);\n        var date;\n        if (resolverStyle === ResolverStyle.LENIENT) {\n            var qoy = qoyLong;\n            date = LocalDate.of(y, 1, 1);\n            date = date.plusMonths(MathUtil.safeMultiply(MathUtil.safeSubtract(qoy, 1), 3));\n            date = date.plusDays(MathUtil.safeSubtract(doq, 1));\n        } else {\n            var _qoy = QUARTER_OF_YEAR.range().checkValidIntValue(qoyLong, QUARTER_OF_YEAR);\n            if (resolverStyle === ResolverStyle.STRICT) {\n                var max = 92;\n                if (_qoy === 1) {\n                    max = IsoChronology.isLeapYear(y) ? 91 : 90;\n                } else if (_qoy === 2) {\n                    max = 91;\n                }\n                ValueRange.of(1, max).checkValidValue(doq, this);\n            } else {\n                this.range().checkValidValue(doq, this);\n            }\n            date = LocalDate.of(y, (_qoy - 1) * 3 + 1, 1).plusDays(doq - 1);\n        }\n        fieldValues.remove(this);\n        fieldValues.remove(ChronoField.YEAR);\n        fieldValues.remove(QUARTER_OF_YEAR);\n        return date;\n    };\n    return DAY_OF_QUARTER_FIELD;\n}(Field);\nvar QUARTER_OF_YEAR_FIELD = function(_Field2) {\n    _inheritsLoose(QUARTER_OF_YEAR_FIELD, _Field2);\n    function QUARTER_OF_YEAR_FIELD() {\n        return _Field2.apply(this, arguments) || this;\n    }\n    var _proto3 = QUARTER_OF_YEAR_FIELD.prototype;\n    _proto3.toString = function toString() {\n        return \"QuarterOfYear\";\n    };\n    _proto3.baseUnit = function baseUnit() {\n        return QUARTER_YEARS;\n    };\n    _proto3.rangeUnit = function rangeUnit() {\n        return ChronoUnit.YEARS;\n    };\n    _proto3.range = function range() {\n        return ValueRange.of(1, 4);\n    };\n    _proto3.isSupportedBy = function isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.MONTH_OF_YEAR) && this._isIso(temporal);\n    };\n    _proto3.rangeRefinedBy = function rangeRefinedBy(temporal) {\n        return this.range();\n    };\n    _proto3.getFrom = function getFrom(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: QuarterOfYear\");\n        }\n        var moy = temporal.getLong(ChronoField.MONTH_OF_YEAR);\n        return MathUtil.intDiv(moy + 2, 3);\n    };\n    _proto3.adjustInto = function adjustInto(temporal, newValue) {\n        var curValue = this.getFrom(temporal);\n        this.range().checkValidValue(newValue, this);\n        return temporal.with(ChronoField.MONTH_OF_YEAR, temporal.getLong(ChronoField.MONTH_OF_YEAR) + (newValue - curValue) * 3);\n    };\n    return QUARTER_OF_YEAR_FIELD;\n}(Field);\nvar WEEK_OF_WEEK_BASED_YEAR_FIELD = function(_Field3) {\n    _inheritsLoose(WEEK_OF_WEEK_BASED_YEAR_FIELD, _Field3);\n    function WEEK_OF_WEEK_BASED_YEAR_FIELD() {\n        return _Field3.apply(this, arguments) || this;\n    }\n    var _proto4 = WEEK_OF_WEEK_BASED_YEAR_FIELD.prototype;\n    _proto4.toString = function toString() {\n        return \"WeekOfWeekBasedYear\";\n    };\n    _proto4.baseUnit = function baseUnit() {\n        return ChronoUnit.WEEKS;\n    };\n    _proto4.rangeUnit = function rangeUnit() {\n        return WEEK_BASED_YEARS;\n    };\n    _proto4.range = function range() {\n        return ValueRange.of(1, 52, 53);\n    };\n    _proto4.isSupportedBy = function isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.EPOCH_DAY) && this._isIso(temporal);\n    };\n    _proto4.rangeRefinedBy = function rangeRefinedBy(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: WeekOfWeekBasedYear\");\n        }\n        return Field._getWeekRangeByLocalDate(LocalDate.from(temporal));\n    };\n    _proto4.getFrom = function getFrom(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: WeekOfWeekBasedYear\");\n        }\n        return Field._getWeek(LocalDate.from(temporal));\n    };\n    _proto4.adjustInto = function adjustInto(temporal, newValue) {\n        this.range().checkValidValue(newValue, this);\n        return temporal.plus(MathUtil.safeSubtract(newValue, this.getFrom(temporal)), ChronoUnit.WEEKS);\n    };\n    _proto4.resolve = function resolve(fieldValues, partialTemporal, resolverStyle) {\n        var wbyLong = fieldValues.get(WEEK_BASED_YEAR);\n        var dowLong = fieldValues.get(ChronoField.DAY_OF_WEEK);\n        if (wbyLong == null || dowLong == null) {\n            return null;\n        }\n        var wby = WEEK_BASED_YEAR.range().checkValidIntValue(wbyLong, WEEK_BASED_YEAR);\n        var wowby = fieldValues.get(WEEK_OF_WEEK_BASED_YEAR);\n        var date;\n        if (resolverStyle === ResolverStyle.LENIENT) {\n            var dow = dowLong;\n            var weeks = 0;\n            if (dow > 7) {\n                weeks = MathUtil.intDiv(dow - 1, 7);\n                dow = MathUtil.intMod(dow - 1, 7) + 1;\n            } else if (dow < 1) {\n                weeks = MathUtil.intDiv(dow, 7) - 1;\n                dow = MathUtil.intMod(dow, 7) + 7;\n            }\n            date = LocalDate.of(wby, 1, 4).plusWeeks(wowby - 1).plusWeeks(weeks).with(ChronoField.DAY_OF_WEEK, dow);\n        } else {\n            var _dow2 = ChronoField.DAY_OF_WEEK.checkValidIntValue(dowLong);\n            if (resolverStyle === ResolverStyle.STRICT) {\n                var temp = LocalDate.of(wby, 1, 4);\n                var range = Field._getWeekRangeByLocalDate(temp);\n                range.checkValidValue(wowby, this);\n            } else {\n                this.range().checkValidValue(wowby, this);\n            }\n            date = LocalDate.of(wby, 1, 4).plusWeeks(wowby - 1).with(ChronoField.DAY_OF_WEEK, _dow2);\n        }\n        fieldValues.remove(this);\n        fieldValues.remove(WEEK_BASED_YEAR);\n        fieldValues.remove(ChronoField.DAY_OF_WEEK);\n        return date;\n    };\n    _proto4.displayName = function displayName() {\n        return \"Week\";\n    };\n    return WEEK_OF_WEEK_BASED_YEAR_FIELD;\n}(Field);\nvar WEEK_BASED_YEAR_FIELD = function(_Field4) {\n    _inheritsLoose(WEEK_BASED_YEAR_FIELD, _Field4);\n    function WEEK_BASED_YEAR_FIELD() {\n        return _Field4.apply(this, arguments) || this;\n    }\n    var _proto5 = WEEK_BASED_YEAR_FIELD.prototype;\n    _proto5.toString = function toString() {\n        return \"WeekBasedYear\";\n    };\n    _proto5.baseUnit = function baseUnit() {\n        return WEEK_BASED_YEARS;\n    };\n    _proto5.rangeUnit = function rangeUnit() {\n        return ChronoUnit.FOREVER;\n    };\n    _proto5.range = function range() {\n        return ChronoField.YEAR.range();\n    };\n    _proto5.isSupportedBy = function isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.EPOCH_DAY) && this._isIso(temporal);\n    };\n    _proto5.rangeRefinedBy = function rangeRefinedBy(temporal) {\n        return ChronoField.YEAR.range();\n    };\n    _proto5.getFrom = function getFrom(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: WeekBasedYear\");\n        }\n        return Field._getWeekBasedYear(LocalDate.from(temporal));\n    };\n    _proto5.adjustInto = function adjustInto(temporal, newValue) {\n        if (this.isSupportedBy(temporal) === false) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: WeekBasedYear\");\n        }\n        var newWby = this.range().checkValidIntValue(newValue, WEEK_BASED_YEAR);\n        var date = LocalDate.from(temporal);\n        var dow = date.get(ChronoField.DAY_OF_WEEK);\n        var week = Field._getWeek(date);\n        if (week === 53 && Field._getWeekRangeByYear(newWby) === 52) {\n            week = 52;\n        }\n        var resolved = LocalDate.of(newWby, 1, 4);\n        var days = dow - resolved.get(ChronoField.DAY_OF_WEEK) + (week - 1) * 7;\n        resolved = resolved.plusDays(days);\n        return temporal.with(resolved);\n    };\n    return WEEK_BASED_YEAR_FIELD;\n}(Field);\nvar Unit = function(_TemporalUnit) {\n    _inheritsLoose(Unit, _TemporalUnit);\n    function Unit(name, estimatedDuration) {\n        var _this;\n        _this = _TemporalUnit.call(this) || this;\n        _this._name = name;\n        _this._duration = estimatedDuration;\n        return _this;\n    }\n    var _proto6 = Unit.prototype;\n    _proto6.duration = function duration() {\n        return this._duration;\n    };\n    _proto6.isDurationEstimated = function isDurationEstimated() {\n        return true;\n    };\n    _proto6.isDateBased = function isDateBased() {\n        return true;\n    };\n    _proto6.isTimeBased = function isTimeBased() {\n        return false;\n    };\n    _proto6.isSupportedBy = function isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.EPOCH_DAY);\n    };\n    _proto6.addTo = function addTo(temporal, periodToAdd) {\n        switch(this){\n            case WEEK_BASED_YEARS:\n                {\n                    var added = MathUtil.safeAdd(temporal.get(WEEK_BASED_YEAR), periodToAdd);\n                    return temporal.with(WEEK_BASED_YEAR, added);\n                }\n            case QUARTER_YEARS:\n                return temporal.plus(MathUtil.intDiv(periodToAdd, 256), ChronoUnit.YEARS).plus(MathUtil.intMod(periodToAdd, 256) * 3, ChronoUnit.MONTHS);\n            default:\n                throw new IllegalStateException(\"Unreachable\");\n        }\n    };\n    _proto6.between = function between(temporal1, temporal2) {\n        switch(this){\n            case WEEK_BASED_YEARS:\n                return MathUtil.safeSubtract(temporal2.getLong(WEEK_BASED_YEAR), temporal1.getLong(WEEK_BASED_YEAR));\n            case QUARTER_YEARS:\n                return MathUtil.intDiv(temporal1.until(temporal2, ChronoUnit.MONTHS), 3);\n            default:\n                throw new IllegalStateException(\"Unreachable\");\n        }\n    };\n    _proto6.toString = function toString() {\n        return this._name;\n    };\n    return Unit;\n}(TemporalUnit);\nvar DAY_OF_QUARTER = null;\nvar QUARTER_OF_YEAR = null;\nvar WEEK_OF_WEEK_BASED_YEAR = null;\nvar WEEK_BASED_YEAR = null;\nvar WEEK_BASED_YEARS = null;\nvar QUARTER_YEARS = null;\nfunction _init$f() {\n    DAY_OF_QUARTER = new DAY_OF_QUARTER_FIELD();\n    QUARTER_OF_YEAR = new QUARTER_OF_YEAR_FIELD();\n    WEEK_OF_WEEK_BASED_YEAR = new WEEK_OF_WEEK_BASED_YEAR_FIELD();\n    WEEK_BASED_YEAR = new WEEK_BASED_YEAR_FIELD();\n    WEEK_BASED_YEARS = new Unit(\"WeekBasedYears\", Duration.ofSeconds(31556952));\n    QUARTER_YEARS = new Unit(\"QuarterYears\", Duration.ofSeconds(31556952 / 4));\n    IsoFields.DAY_OF_QUARTER = DAY_OF_QUARTER;\n    IsoFields.QUARTER_OF_YEAR = QUARTER_OF_YEAR;\n    IsoFields.WEEK_OF_WEEK_BASED_YEAR = WEEK_OF_WEEK_BASED_YEAR;\n    IsoFields.WEEK_BASED_YEAR = WEEK_BASED_YEAR;\n    IsoFields.WEEK_BASED_YEARS = WEEK_BASED_YEARS;\n    IsoFields.QUARTER_YEARS = QUARTER_YEARS;\n    LocalDate.prototype.isoWeekOfWeekyear = function() {\n        return this.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n    };\n    LocalDate.prototype.isoWeekyear = function() {\n        return this.get(IsoFields.WEEK_BASED_YEAR);\n    };\n}\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var DecimalStyle = function() {\n    function DecimalStyle(zeroChar, positiveSignChar, negativeSignChar, decimalPointChar) {\n        this._zeroDigit = zeroChar;\n        this._zeroDigitCharCode = zeroChar.charCodeAt(0);\n        this._positiveSign = positiveSignChar;\n        this._negativeSign = negativeSignChar;\n        this._decimalSeparator = decimalPointChar;\n    }\n    var _proto = DecimalStyle.prototype;\n    _proto.positiveSign = function positiveSign() {\n        return this._positiveSign;\n    };\n    _proto.withPositiveSign = function withPositiveSign(positiveSign) {\n        if (positiveSign === this._positiveSign) {\n            return this;\n        }\n        return new DecimalStyle(this._zeroDigit, positiveSign, this._negativeSign, this._decimalSeparator);\n    };\n    _proto.negativeSign = function negativeSign() {\n        return this._negativeSign;\n    };\n    _proto.withNegativeSign = function withNegativeSign(negativeSign) {\n        if (negativeSign === this._negativeSign) {\n            return this;\n        }\n        return new DecimalStyle(this._zeroDigit, this._positiveSign, negativeSign, this._decimalSeparator);\n    };\n    _proto.zeroDigit = function zeroDigit() {\n        return this._zeroDigit;\n    };\n    _proto.withZeroDigit = function withZeroDigit(zeroDigit) {\n        if (zeroDigit === this._zeroDigit) {\n            return this;\n        }\n        return new DecimalStyle(zeroDigit, this._positiveSign, this._negativeSign, this._decimalSeparator);\n    };\n    _proto.decimalSeparator = function decimalSeparator() {\n        return this._decimalSeparator;\n    };\n    _proto.withDecimalSeparator = function withDecimalSeparator(decimalSeparator) {\n        if (decimalSeparator === this._decimalSeparator) {\n            return this;\n        }\n        return new DecimalStyle(this._zeroDigit, this._positiveSign, this._negativeSign, decimalSeparator);\n    };\n    _proto.convertToDigit = function convertToDigit(char) {\n        var val = char.charCodeAt(0) - this._zeroDigitCharCode;\n        return val >= 0 && val <= 9 ? val : -1;\n    };\n    _proto.convertNumberToI18N = function convertNumberToI18N(numericText) {\n        if (this._zeroDigit === \"0\") {\n            return numericText;\n        }\n        var diff = this._zeroDigitCharCode - \"0\".charCodeAt(0);\n        var convertedText = \"\";\n        for(var i = 0; i < numericText.length; i++){\n            convertedText += String.fromCharCode(numericText.charCodeAt(i) + diff);\n        }\n        return convertedText;\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof DecimalStyle) {\n            return this._zeroDigit === other._zeroDigit && this._positiveSign === other._positiveSign && this._negativeSign === other._negativeSign && this._decimalSeparator === other._decimalSeparator;\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return this._zeroDigit + this._positiveSign + this._negativeSign + this._decimalSeparator;\n    };\n    _proto.toString = function toString() {\n        return \"DecimalStyle[\" + this._zeroDigit + this._positiveSign + this._negativeSign + this._decimalSeparator + \"]\";\n    };\n    DecimalStyle.of = function of() {\n        throw new Error(\"not yet supported\");\n    };\n    DecimalStyle.availableLocales = function availableLocales() {\n        throw new Error(\"not yet supported\");\n    };\n    return DecimalStyle;\n}();\nDecimalStyle.STANDARD = new DecimalStyle(\"0\", \"+\", \"-\", \".\");\nvar SignStyle = function(_Enum) {\n    _inheritsLoose(SignStyle, _Enum);\n    function SignStyle() {\n        return _Enum.apply(this, arguments) || this;\n    }\n    var _proto = SignStyle.prototype;\n    _proto.parse = function parse(positive, strict, fixedWidth) {\n        switch(this){\n            case SignStyle.NORMAL:\n                return !positive || !strict;\n            case SignStyle.ALWAYS:\n            case SignStyle.EXCEEDS_PAD:\n                return true;\n            default:\n                return !strict && !fixedWidth;\n        }\n    };\n    return SignStyle;\n}(Enum);\nSignStyle.NORMAL = new SignStyle(\"NORMAL\");\nSignStyle.NEVER = new SignStyle(\"NEVER\");\nSignStyle.ALWAYS = new SignStyle(\"ALWAYS\");\nSignStyle.EXCEEDS_PAD = new SignStyle(\"EXCEEDS_PAD\");\nSignStyle.NOT_NEGATIVE = new SignStyle(\"NOT_NEGATIVE\");\nvar TextStyle = function(_Enum) {\n    _inheritsLoose(TextStyle, _Enum);\n    function TextStyle() {\n        return _Enum.apply(this, arguments) || this;\n    }\n    var _proto = TextStyle.prototype;\n    _proto.isStandalone = function isStandalone() {\n        switch(this){\n            case TextStyle.FULL_STANDALONE:\n            case TextStyle.SHORT_STANDALONE:\n            case TextStyle.NARROW_STANDALONE:\n                return true;\n            default:\n                return false;\n        }\n    };\n    _proto.asStandalone = function asStandalone() {\n        switch(this){\n            case TextStyle.FULL:\n                return TextStyle.FULL_STANDALONE;\n            case TextStyle.SHORT:\n                return TextStyle.SHORT_STANDALONE;\n            case TextStyle.NARROW:\n                return TextStyle.NARROW_STANDALONE;\n            default:\n                return this;\n        }\n    };\n    _proto.asNormal = function asNormal() {\n        switch(this){\n            case TextStyle.FULL_STANDALONE:\n                return TextStyle.FULL;\n            case TextStyle.SHORT_STANDALONE:\n                return TextStyle.SHORT;\n            case TextStyle.NARROW_STANDALONE:\n                return TextStyle.NARROW;\n            default:\n                return this;\n        }\n    };\n    return TextStyle;\n}(Enum);\nTextStyle.FULL = new TextStyle(\"FULL\");\nTextStyle.FULL_STANDALONE = new TextStyle(\"FULL_STANDALONE\");\nTextStyle.SHORT = new TextStyle(\"SHORT\");\nTextStyle.SHORT_STANDALONE = new TextStyle(\"SHORT_STANDALONE\");\nTextStyle.NARROW = new TextStyle(\"NARROW\");\nTextStyle.NARROW_STANDALONE = new TextStyle(\"NARROW_STANDALONE\");\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var CharLiteralPrinterParser = function() {\n    function CharLiteralPrinterParser(literal) {\n        if (literal.length > 1) {\n            throw new IllegalArgumentException('invalid literal, too long: \"' + literal + '\"');\n        }\n        this._literal = literal;\n    }\n    var _proto = CharLiteralPrinterParser.prototype;\n    _proto.print = function print(context, buf) {\n        buf.append(this._literal);\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        var length = text.length;\n        if (position === length) {\n            return ~position;\n        }\n        var ch = text.charAt(position);\n        if (context.charEquals(this._literal, ch) === false) {\n            return ~position;\n        }\n        return position + this._literal.length;\n    };\n    _proto.toString = function toString() {\n        if (this._literal === \"'\") {\n            return \"''\";\n        }\n        return \"'\" + this._literal + \"'\";\n    };\n    return CharLiteralPrinterParser;\n}();\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var CompositePrinterParser = function() {\n    function CompositePrinterParser(printerParsers, optional) {\n        this._printerParsers = printerParsers;\n        this._optional = optional;\n    }\n    var _proto = CompositePrinterParser.prototype;\n    _proto.withOptional = function withOptional(optional) {\n        if (optional === this._optional) {\n            return this;\n        }\n        return new CompositePrinterParser(this._printerParsers, optional);\n    };\n    _proto.print = function print(context, buf) {\n        var length = buf.length();\n        if (this._optional) {\n            context.startOptional();\n        }\n        try {\n            for(var i = 0; i < this._printerParsers.length; i++){\n                var pp = this._printerParsers[i];\n                if (pp.print(context, buf) === false) {\n                    buf.setLength(length);\n                    return true;\n                }\n            }\n        } finally{\n            if (this._optional) {\n                context.endOptional();\n            }\n        }\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        if (this._optional) {\n            context.startOptional();\n            var pos = position;\n            for(var i = 0; i < this._printerParsers.length; i++){\n                var pp = this._printerParsers[i];\n                pos = pp.parse(context, text, pos);\n                if (pos < 0) {\n                    context.endOptional(false);\n                    return position;\n                }\n            }\n            context.endOptional(true);\n            return pos;\n        } else {\n            for(var _i = 0; _i < this._printerParsers.length; _i++){\n                var _pp = this._printerParsers[_i];\n                position = _pp.parse(context, text, position);\n                if (position < 0) {\n                    break;\n                }\n            }\n            return position;\n        }\n    };\n    _proto.toString = function toString() {\n        var buf = \"\";\n        if (this._printerParsers != null) {\n            buf += this._optional ? \"[\" : \"(\";\n            for(var i = 0; i < this._printerParsers.length; i++){\n                var pp = this._printerParsers[i];\n                buf += pp.toString();\n            }\n            buf += this._optional ? \"]\" : \")\";\n        }\n        return buf;\n    };\n    return CompositePrinterParser;\n}();\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var FractionPrinterParser = function() {\n    function FractionPrinterParser(field, minWidth, maxWidth, decimalPoint) {\n        requireNonNull(field, \"field\");\n        if (field.range().isFixed() === false) {\n            throw new IllegalArgumentException(\"Field must have a fixed set of values: \" + field);\n        }\n        if (minWidth < 0 || minWidth > 9) {\n            throw new IllegalArgumentException(\"Minimum width must be from 0 to 9 inclusive but was \" + minWidth);\n        }\n        if (maxWidth < 1 || maxWidth > 9) {\n            throw new IllegalArgumentException(\"Maximum width must be from 1 to 9 inclusive but was \" + maxWidth);\n        }\n        if (maxWidth < minWidth) {\n            throw new IllegalArgumentException(\"Maximum width must exceed or equal the minimum width but \" + maxWidth + \" < \" + minWidth);\n        }\n        this.field = field;\n        this.minWidth = minWidth;\n        this.maxWidth = maxWidth;\n        this.decimalPoint = decimalPoint;\n    }\n    var _proto = FractionPrinterParser.prototype;\n    _proto.print = function print(context, buf) {\n        var value = context.getValue(this.field);\n        if (value === null) {\n            return false;\n        }\n        var symbols = context.symbols();\n        if (value === 0) {\n            if (this.minWidth > 0) {\n                if (this.decimalPoint) {\n                    buf.append(symbols.decimalSeparator());\n                }\n                for(var i = 0; i < this.minWidth; i++){\n                    buf.append(symbols.zeroDigit());\n                }\n            }\n        } else {\n            var fraction = this.convertToFraction(value, symbols.zeroDigit());\n            var outputScale = Math.min(Math.max(fraction.length, this.minWidth), this.maxWidth);\n            fraction = fraction.substr(0, outputScale);\n            if (fraction * 1 > 0) {\n                while(fraction.length > this.minWidth && fraction[fraction.length - 1] === \"0\"){\n                    fraction = fraction.substr(0, fraction.length - 1);\n                }\n            }\n            var str = fraction;\n            str = symbols.convertNumberToI18N(str);\n            if (this.decimalPoint) {\n                buf.append(symbols.decimalSeparator());\n            }\n            buf.append(str);\n        }\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        var effectiveMin = context.isStrict() ? this.minWidth : 0;\n        var effectiveMax = context.isStrict() ? this.maxWidth : 9;\n        var length = text.length;\n        if (position === length) {\n            return effectiveMin > 0 ? ~position : position;\n        }\n        if (this.decimalPoint) {\n            if (text[position] !== context.symbols().decimalSeparator()) {\n                return effectiveMin > 0 ? ~position : position;\n            }\n            position++;\n        }\n        var minEndPos = position + effectiveMin;\n        if (minEndPos > length) {\n            return ~position;\n        }\n        var maxEndPos = Math.min(position + effectiveMax, length);\n        var total = 0;\n        var pos = position;\n        while(pos < maxEndPos){\n            var ch = text.charAt(pos++);\n            var digit = context.symbols().convertToDigit(ch);\n            if (digit < 0) {\n                if (pos < minEndPos) {\n                    return ~position;\n                }\n                pos--;\n                break;\n            }\n            total = total * 10 + digit;\n        }\n        var moveLeft = pos - position;\n        var scale = Math.pow(10, moveLeft);\n        var value = this.convertFromFraction(total, scale);\n        return context.setParsedField(this.field, value, position, pos);\n    };\n    _proto.convertToFraction = function convertToFraction(value, zeroDigit) {\n        var range = this.field.range();\n        range.checkValidValue(value, this.field);\n        var _min = range.minimum();\n        var _range = range.maximum() - _min + 1;\n        var _value = value - _min;\n        var _scaled = MathUtil.intDiv(_value * 1000000000, _range);\n        var fraction = \"\" + _scaled;\n        while(fraction.length < 9){\n            fraction = zeroDigit + fraction;\n        }\n        return fraction;\n    };\n    _proto.convertFromFraction = function convertFromFraction(total, scale) {\n        var range = this.field.range();\n        var _min = range.minimum();\n        var _range = range.maximum() - _min + 1;\n        var _value = MathUtil.intDiv(total * _range, scale);\n        return _value;\n    };\n    _proto.toString = function toString() {\n        var decimal = this.decimalPoint ? \",DecimalPoint\" : \"\";\n        return \"Fraction(\" + this.field + \",\" + this.minWidth + \",\" + this.maxWidth + decimal + \")\";\n    };\n    return FractionPrinterParser;\n}();\nvar MAX_WIDTH$1 = 15;\nvar EXCEED_POINTS = [\n    0,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000,\n    1000000000\n];\nvar NumberPrinterParser = function() {\n    function NumberPrinterParser(field, minWidth, maxWidth, signStyle, subsequentWidth) {\n        if (subsequentWidth === void 0) {\n            subsequentWidth = 0;\n        }\n        this._field = field;\n        this._minWidth = minWidth;\n        this._maxWidth = maxWidth;\n        this._signStyle = signStyle;\n        this._subsequentWidth = subsequentWidth;\n    }\n    var _proto = NumberPrinterParser.prototype;\n    _proto.field = function field() {\n        return this._field;\n    };\n    _proto.minWidth = function minWidth() {\n        return this._minWidth;\n    };\n    _proto.maxWidth = function maxWidth() {\n        return this._maxWidth;\n    };\n    _proto.signStyle = function signStyle() {\n        return this._signStyle;\n    };\n    _proto.withFixedWidth = function withFixedWidth() {\n        if (this._subsequentWidth === -1) {\n            return this;\n        }\n        return new NumberPrinterParser(this._field, this._minWidth, this._maxWidth, this._signStyle, -1);\n    };\n    _proto.withSubsequentWidth = function withSubsequentWidth(subsequentWidth) {\n        return new NumberPrinterParser(this._field, this._minWidth, this._maxWidth, this._signStyle, this._subsequentWidth + subsequentWidth);\n    };\n    _proto._isFixedWidth = function _isFixedWidth() {\n        return this._subsequentWidth === -1 || this._subsequentWidth > 0 && this._minWidth === this._maxWidth && this._signStyle === SignStyle.NOT_NEGATIVE;\n    };\n    _proto.print = function print(context, buf) {\n        var contextValue = context.getValue(this._field);\n        if (contextValue == null) {\n            return false;\n        }\n        var value = this._getValue(context, contextValue);\n        var symbols = context.symbols();\n        var str = \"\" + Math.abs(value);\n        if (str.length > this._maxWidth) {\n            throw new DateTimeException(\"Field \" + this._field + \" cannot be printed as the value \" + value + \" exceeds the maximum print width of \" + this._maxWidth);\n        }\n        str = symbols.convertNumberToI18N(str);\n        if (value >= 0) {\n            switch(this._signStyle){\n                case SignStyle.EXCEEDS_PAD:\n                    if (this._minWidth < MAX_WIDTH$1 && value >= EXCEED_POINTS[this._minWidth]) {\n                        buf.append(symbols.positiveSign());\n                    }\n                    break;\n                case SignStyle.ALWAYS:\n                    buf.append(symbols.positiveSign());\n                    break;\n            }\n        } else {\n            switch(this._signStyle){\n                case SignStyle.NORMAL:\n                case SignStyle.EXCEEDS_PAD:\n                case SignStyle.ALWAYS:\n                    buf.append(symbols.negativeSign());\n                    break;\n                case SignStyle.NOT_NEGATIVE:\n                    throw new DateTimeException(\"Field \" + this._field + \" cannot be printed as the value \" + value + \" cannot be negative according to the SignStyle\");\n            }\n        }\n        for(var i = 0; i < this._minWidth - str.length; i++){\n            buf.append(symbols.zeroDigit());\n        }\n        buf.append(str);\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        var length = text.length;\n        if (position === length) {\n            return ~position;\n        }\n        assert(position >= 0 && position < length);\n        var sign = text.charAt(position);\n        var negative = false;\n        var positive = false;\n        if (sign === context.symbols().positiveSign()) {\n            if (this._signStyle.parse(true, context.isStrict(), this._minWidth === this._maxWidth) === false) {\n                return ~position;\n            }\n            positive = true;\n            position++;\n        } else if (sign === context.symbols().negativeSign()) {\n            if (this._signStyle.parse(false, context.isStrict(), this._minWidth === this._maxWidth) === false) {\n                return ~position;\n            }\n            negative = true;\n            position++;\n        } else {\n            if (this._signStyle === SignStyle.ALWAYS && context.isStrict()) {\n                return ~position;\n            }\n        }\n        var effMinWidth = context.isStrict() || this._isFixedWidth() ? this._minWidth : 1;\n        var minEndPos = position + effMinWidth;\n        if (minEndPos > length) {\n            return ~position;\n        }\n        var effMaxWidth = (context.isStrict() || this._isFixedWidth() ? this._maxWidth : 9) + Math.max(this._subsequentWidth, 0);\n        var total = 0;\n        var pos = position;\n        for(var pass = 0; pass < 2; pass++){\n            var maxEndPos = Math.min(pos + effMaxWidth, length);\n            while(pos < maxEndPos){\n                var ch = text.charAt(pos++);\n                var digit = context.symbols().convertToDigit(ch);\n                if (digit < 0) {\n                    pos--;\n                    if (pos < minEndPos) {\n                        return ~position;\n                    }\n                    break;\n                }\n                if (pos - position > MAX_WIDTH$1) {\n                    throw new ArithmeticException(\"number text exceeds length\");\n                } else {\n                    total = total * 10 + digit;\n                }\n            }\n            if (this._subsequentWidth > 0 && pass === 0) {\n                var parseLen = pos - position;\n                effMaxWidth = Math.max(effMinWidth, parseLen - this._subsequentWidth);\n                pos = position;\n                total = 0;\n            } else {\n                break;\n            }\n        }\n        if (negative) {\n            if (total === 0 && context.isStrict()) {\n                return ~(position - 1);\n            }\n            if (total !== 0) {\n                total = -total;\n            }\n        } else if (this._signStyle === SignStyle.EXCEEDS_PAD && context.isStrict()) {\n            var _parseLen = pos - position;\n            if (positive) {\n                if (_parseLen <= this._minWidth) {\n                    return ~(position - 1);\n                }\n            } else {\n                if (_parseLen > this._minWidth) {\n                    return ~position;\n                }\n            }\n        }\n        return this._setValue(context, total, position, pos);\n    };\n    _proto._getValue = function _getValue(context, value) {\n        return value;\n    };\n    _proto._setValue = function _setValue(context, value, errorPos, successPos) {\n        return context.setParsedField(this._field, value, errorPos, successPos);\n    };\n    _proto.toString = function toString() {\n        if (this._minWidth === 1 && this._maxWidth === MAX_WIDTH$1 && this._signStyle === SignStyle.NORMAL) {\n            return \"Value(\" + this._field + \")\";\n        }\n        if (this._minWidth === this._maxWidth && this._signStyle === SignStyle.NOT_NEGATIVE) {\n            return \"Value(\" + this._field + \",\" + this._minWidth + \")\";\n        }\n        return \"Value(\" + this._field + \",\" + this._minWidth + \",\" + this._maxWidth + \",\" + this._signStyle + \")\";\n    };\n    return NumberPrinterParser;\n}();\nvar ReducedPrinterParser = function(_NumberPrinterParser) {\n    _inheritsLoose(ReducedPrinterParser, _NumberPrinterParser);\n    function ReducedPrinterParser(field, width, maxWidth, baseValue, baseDate) {\n        var _this;\n        _this = _NumberPrinterParser.call(this, field, width, maxWidth, SignStyle.NOT_NEGATIVE) || this;\n        if (width < 1 || width > 10) {\n            throw new IllegalArgumentException(\"The width must be from 1 to 10 inclusive but was \" + width);\n        }\n        if (maxWidth < 1 || maxWidth > 10) {\n            throw new IllegalArgumentException(\"The maxWidth must be from 1 to 10 inclusive but was \" + maxWidth);\n        }\n        if (maxWidth < width) {\n            throw new IllegalArgumentException(\"The maxWidth must be greater than the width\");\n        }\n        if (baseDate === null) {\n            if (field.range().isValidValue(baseValue) === false) {\n                throw new IllegalArgumentException(\"The base value must be within the range of the field\");\n            }\n            if (baseValue + EXCEED_POINTS[width] > MathUtil.MAX_SAFE_INTEGER) {\n                throw new DateTimeException(\"Unable to add printer-parser as the range exceeds the capacity of an int\");\n            }\n        }\n        _this._baseValue = baseValue;\n        _this._baseDate = baseDate;\n        return _this;\n    }\n    var _proto2 = ReducedPrinterParser.prototype;\n    _proto2._getValue = function _getValue(context, value) {\n        var absValue = Math.abs(value);\n        var baseValue = this._baseValue;\n        if (this._baseDate !== null) {\n            context.temporal();\n            var chrono = IsoChronology.INSTANCE;\n            baseValue = chrono.date(this._baseDate).get(this._field);\n        }\n        if (value >= baseValue && value < baseValue + EXCEED_POINTS[this._minWidth]) {\n            return absValue % EXCEED_POINTS[this._minWidth];\n        }\n        return absValue % EXCEED_POINTS[this._maxWidth];\n    };\n    _proto2._setValue = function _setValue(context, value, errorPos, successPos) {\n        var baseValue = this._baseValue;\n        if (this._baseDate != null) {\n            var chrono = context.getEffectiveChronology();\n            baseValue = chrono.date(this._baseDate).get(this._field);\n        }\n        var parseLen = successPos - errorPos;\n        if (parseLen === this._minWidth && value >= 0) {\n            var range = EXCEED_POINTS[this._minWidth];\n            var lastPart = baseValue % range;\n            var basePart = baseValue - lastPart;\n            if (baseValue > 0) {\n                value = basePart + value;\n            } else {\n                value = basePart - value;\n            }\n            if (value < baseValue) {\n                value += range;\n            }\n        }\n        return context.setParsedField(this._field, value, errorPos, successPos);\n    };\n    _proto2.withFixedWidth = function withFixedWidth() {\n        if (this._subsequentWidth === -1) {\n            return this;\n        }\n        return new ReducedPrinterParser(this._field, this._minWidth, this._maxWidth, this._baseValue, this._baseDate);\n    };\n    _proto2.withSubsequentWidth = function withSubsequentWidth(subsequentWidth) {\n        return new ReducedPrinterParser(this._field, this._minWidth, this._maxWidth, this._baseValue, this._baseDate, this._subsequentWidth + subsequentWidth);\n    };\n    _proto2.isFixedWidth = function isFixedWidth(context) {\n        if (context.isStrict() === false) {\n            return false;\n        }\n        return _NumberPrinterParser.prototype.isFixedWidth.call(this, context);\n    };\n    _proto2.toString = function toString() {\n        return \"ReducedValue(\" + this._field + \",\" + this._minWidth + \",\" + this._maxWidth + \",\" + (this._baseDate != null ? this._baseDate : this._baseValue) + \")\";\n    };\n    return ReducedPrinterParser;\n}(NumberPrinterParser);\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var PATTERNS = [\n    \"+HH\",\n    \"+HHmm\",\n    \"+HH:mm\",\n    \"+HHMM\",\n    \"+HH:MM\",\n    \"+HHMMss\",\n    \"+HH:MM:ss\",\n    \"+HHMMSS\",\n    \"+HH:MM:SS\"\n];\nvar OffsetIdPrinterParser = function() {\n    function OffsetIdPrinterParser(noOffsetText, pattern) {\n        requireNonNull(noOffsetText, \"noOffsetText\");\n        requireNonNull(pattern, \"pattern\");\n        this.noOffsetText = noOffsetText;\n        this.type = this._checkPattern(pattern);\n    }\n    var _proto = OffsetIdPrinterParser.prototype;\n    _proto._checkPattern = function _checkPattern(pattern) {\n        for(var i = 0; i < PATTERNS.length; i++){\n            if (PATTERNS[i] === pattern) {\n                return i;\n            }\n        }\n        throw new IllegalArgumentException(\"Invalid zone offset pattern: \" + pattern);\n    };\n    _proto.print = function print(context, buf) {\n        var offsetSecs = context.getValue(ChronoField.OFFSET_SECONDS);\n        if (offsetSecs == null) {\n            return false;\n        }\n        var totalSecs = MathUtil.safeToInt(offsetSecs);\n        if (totalSecs === 0) {\n            buf.append(this.noOffsetText);\n        } else {\n            var absHours = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 3600), 100));\n            var absMinutes = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 60), 60));\n            var absSeconds = Math.abs(MathUtil.intMod(totalSecs, 60));\n            var bufPos = buf.length();\n            var output = absHours;\n            buf.append(totalSecs < 0 ? \"-\" : \"+\").appendChar(MathUtil.intDiv(absHours, 10) + \"0\").appendChar(MathUtil.intMod(absHours, 10) + \"0\");\n            if (this.type >= 3 || this.type >= 1 && absMinutes > 0) {\n                buf.append(this.type % 2 === 0 ? \":\" : \"\").appendChar(MathUtil.intDiv(absMinutes, 10) + \"0\").appendChar(absMinutes % 10 + \"0\");\n                output += absMinutes;\n                if (this.type >= 7 || this.type >= 5 && absSeconds > 0) {\n                    buf.append(this.type % 2 === 0 ? \":\" : \"\").appendChar(MathUtil.intDiv(absSeconds, 10) + \"0\").appendChar(absSeconds % 10 + \"0\");\n                    output += absSeconds;\n                }\n            }\n            if (output === 0) {\n                buf.setLength(bufPos);\n                buf.append(this.noOffsetText);\n            }\n        }\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        var length = text.length;\n        var noOffsetLen = this.noOffsetText.length;\n        if (noOffsetLen === 0) {\n            if (position === length) {\n                return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position);\n            }\n        } else {\n            if (position === length) {\n                return ~position;\n            }\n            if (context.subSequenceEquals(text, position, this.noOffsetText, 0, noOffsetLen)) {\n                return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position + noOffsetLen);\n            }\n        }\n        var sign = text[position];\n        if (sign === \"+\" || sign === \"-\") {\n            var negative = sign === \"-\" ? -1 : 1;\n            var array = [\n                0,\n                0,\n                0,\n                0\n            ];\n            array[0] = position + 1;\n            if ((this._parseNumber(array, 1, text, true) || this._parseNumber(array, 2, text, this.type >= 3) || this._parseNumber(array, 3, text, false)) === false) {\n                var offsetSecs = MathUtil.safeZero(negative * (array[1] * 3600 + array[2] * 60 + array[3]));\n                return context.setParsedField(ChronoField.OFFSET_SECONDS, offsetSecs, position, array[0]);\n            }\n        }\n        if (noOffsetLen === 0) {\n            return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position + noOffsetLen);\n        }\n        return ~position;\n    };\n    _proto._parseNumber = function _parseNumber(array, arrayIndex, parseText, required) {\n        if ((this.type + 3) / 2 < arrayIndex) {\n            return false;\n        }\n        var pos = array[0];\n        if (this.type % 2 === 0 && arrayIndex > 1) {\n            if (pos + 1 > parseText.length || parseText[pos] !== \":\") {\n                return required;\n            }\n            pos++;\n        }\n        if (pos + 2 > parseText.length) {\n            return required;\n        }\n        var ch1 = parseText[pos++];\n        var ch2 = parseText[pos++];\n        if (ch1 < \"0\" || ch1 > \"9\" || ch2 < \"0\" || ch2 > \"9\") {\n            return required;\n        }\n        var value = (ch1.charCodeAt(0) - 48) * 10 + (ch2.charCodeAt(0) - 48);\n        if (value < 0 || value > 59) {\n            return required;\n        }\n        array[arrayIndex] = value;\n        array[0] = pos;\n        return false;\n    };\n    _proto.toString = function toString() {\n        var converted = this.noOffsetText.replace(\"'\", \"''\");\n        return \"Offset(\" + PATTERNS[this.type] + \",'\" + converted + \"')\";\n    };\n    return OffsetIdPrinterParser;\n}();\nOffsetIdPrinterParser.INSTANCE_ID = new OffsetIdPrinterParser(\"Z\", \"+HH:MM:ss\");\nOffsetIdPrinterParser.PATTERNS = PATTERNS;\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var PadPrinterParserDecorator = function() {\n    function PadPrinterParserDecorator(printerParser, padWidth, padChar) {\n        this._printerParser = printerParser;\n        this._padWidth = padWidth;\n        this._padChar = padChar;\n    }\n    var _proto = PadPrinterParserDecorator.prototype;\n    _proto.print = function print(context, buf) {\n        var preLen = buf.length();\n        if (this._printerParser.print(context, buf) === false) {\n            return false;\n        }\n        var len = buf.length() - preLen;\n        if (len > this._padWidth) {\n            throw new DateTimeException(\"Cannot print as output of \" + len + \" characters exceeds pad width of \" + this._padWidth);\n        }\n        for(var i = 0; i < this._padWidth - len; i++){\n            buf.insert(preLen, this._padChar);\n        }\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        var strict = context.isStrict();\n        var caseSensitive = context.isCaseSensitive();\n        assert(!(position > text.length));\n        assert(position >= 0);\n        if (position === text.length) {\n            return ~position;\n        }\n        var endPos = position + this._padWidth;\n        if (endPos > text.length) {\n            if (strict) {\n                return ~position;\n            }\n            endPos = text.length;\n        }\n        var pos = position;\n        while(pos < endPos && (caseSensitive ? text[pos] === this._padChar : context.charEquals(text[pos], this._padChar))){\n            pos++;\n        }\n        text = text.substring(0, endPos);\n        var resultPos = this._printerParser.parse(context, text, pos);\n        if (resultPos !== endPos && strict) {\n            return ~(position + pos);\n        }\n        return resultPos;\n    };\n    _proto.toString = function toString() {\n        return \"Pad(\" + this._printerParser + \",\" + this._padWidth + (this._padChar === \" \" ? \")\" : \",'\" + this._padChar + \"')\");\n    };\n    return PadPrinterParserDecorator;\n}();\nvar SettingsParser = function(_Enum) {\n    _inheritsLoose(SettingsParser, _Enum);\n    function SettingsParser() {\n        return _Enum.apply(this, arguments) || this;\n    }\n    var _proto = SettingsParser.prototype;\n    _proto.print = function print() {\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        switch(this){\n            case SettingsParser.SENSITIVE:\n                context.setCaseSensitive(true);\n                break;\n            case SettingsParser.INSENSITIVE:\n                context.setCaseSensitive(false);\n                break;\n            case SettingsParser.STRICT:\n                context.setStrict(true);\n                break;\n            case SettingsParser.LENIENT:\n                context.setStrict(false);\n                break;\n        }\n        return position;\n    };\n    _proto.toString = function toString() {\n        switch(this){\n            case SettingsParser.SENSITIVE:\n                return \"ParseCaseSensitive(true)\";\n            case SettingsParser.INSENSITIVE:\n                return \"ParseCaseSensitive(false)\";\n            case SettingsParser.STRICT:\n                return \"ParseStrict(true)\";\n            case SettingsParser.LENIENT:\n                return \"ParseStrict(false)\";\n        }\n    };\n    return SettingsParser;\n}(Enum);\nSettingsParser.SENSITIVE = new SettingsParser(\"SENSITIVE\");\nSettingsParser.INSENSITIVE = new SettingsParser(\"INSENSITIVE\");\nSettingsParser.STRICT = new SettingsParser(\"STRICT\");\nSettingsParser.LENIENT = new SettingsParser(\"LENIENT\");\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var StringLiteralPrinterParser = function() {\n    function StringLiteralPrinterParser(literal) {\n        this._literal = literal;\n    }\n    var _proto = StringLiteralPrinterParser.prototype;\n    _proto.print = function print(context, buf) {\n        buf.append(this._literal);\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        var length = text.length;\n        assert(!(position > length || position < 0));\n        if (context.subSequenceEquals(text, position, this._literal, 0, this._literal.length) === false) {\n            return ~position;\n        }\n        return position + this._literal.length;\n    };\n    _proto.toString = function toString() {\n        var converted = this._literal.replace(\"'\", \"''\");\n        return \"'\" + converted + \"'\";\n    };\n    return StringLiteralPrinterParser;\n}();\n/*\n * @copyright (c) 2016, Philipp Thürwächter, Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var ZoneRulesProvider = function() {\n    function ZoneRulesProvider() {}\n    ZoneRulesProvider.getRules = function getRules(zoneId) {\n        throw new DateTimeException(\"unsupported ZoneId:\" + zoneId);\n    };\n    ZoneRulesProvider.getAvailableZoneIds = function getAvailableZoneIds() {\n        return [];\n    };\n    return ZoneRulesProvider;\n}();\nvar ZoneRegion = function(_ZoneId) {\n    _inheritsLoose(ZoneRegion, _ZoneId);\n    ZoneRegion.ofId = function ofId(zoneId) {\n        var rules = ZoneRulesProvider.getRules(zoneId);\n        return new ZoneRegion(zoneId, rules);\n    };\n    function ZoneRegion(id, rules) {\n        var _this;\n        _this = _ZoneId.call(this) || this;\n        _this._id = id;\n        _this._rules = rules;\n        return _this;\n    }\n    var _proto = ZoneRegion.prototype;\n    _proto.id = function id() {\n        return this._id;\n    };\n    _proto.rules = function rules() {\n        return this._rules;\n    };\n    return ZoneRegion;\n}(ZoneId);\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var ZoneIdPrinterParser = function() {\n    function ZoneIdPrinterParser(query, description) {\n        this.query = query;\n        this.description = description;\n    }\n    var _proto = ZoneIdPrinterParser.prototype;\n    _proto.print = function print(context, buf) {\n        var zone = context.getValueQuery(this.query);\n        if (zone == null) {\n            return false;\n        }\n        buf.append(zone.id());\n        return true;\n    };\n    _proto.parse = function parse(context, text, position) {\n        var length = text.length;\n        if (position > length) {\n            return ~position;\n        }\n        if (position === length) {\n            return ~position;\n        }\n        var nextChar = text.charAt(position);\n        if (nextChar === \"+\" || nextChar === \"-\") {\n            var newContext = context.copy();\n            var endPos = OffsetIdPrinterParser.INSTANCE_ID.parse(newContext, text, position);\n            if (endPos < 0) {\n                return endPos;\n            }\n            var offset = newContext.getParsed(ChronoField.OFFSET_SECONDS);\n            var zone = ZoneOffset.ofTotalSeconds(offset);\n            context.setParsedZone(zone);\n            return endPos;\n        } else if (length >= position + 2) {\n            var nextNextChar = text.charAt(position + 1);\n            if (context.charEquals(nextChar, \"U\") && context.charEquals(nextNextChar, \"T\")) {\n                if (length >= position + 3 && context.charEquals(text.charAt(position + 2), \"C\")) {\n                    return this._parsePrefixedOffset(context, text, position, position + 3);\n                }\n                return this._parsePrefixedOffset(context, text, position, position + 2);\n            } else if (context.charEquals(nextChar, \"G\") && length >= position + 3 && context.charEquals(nextNextChar, \"M\") && context.charEquals(text.charAt(position + 2), \"T\")) {\n                return this._parsePrefixedOffset(context, text, position, position + 3);\n            }\n        }\n        if (text.substr(position, 6) === \"SYSTEM\") {\n            context.setParsedZone(ZoneId.systemDefault());\n            return position + 6;\n        }\n        if (context.charEquals(nextChar, \"Z\")) {\n            context.setParsedZone(ZoneOffset.UTC);\n            return position + 1;\n        }\n        var availableZoneIds = ZoneRulesProvider.getAvailableZoneIds();\n        if (zoneIdTree.size !== availableZoneIds.length) {\n            zoneIdTree = ZoneIdTree.createTreeMap(availableZoneIds);\n        }\n        var maxParseLength = length - position;\n        var treeMap = zoneIdTree.treeMap;\n        var parsedZoneId = null;\n        var parseLength = 0;\n        while(treeMap != null){\n            var parsedSubZoneId = text.substr(position, Math.min(treeMap.length, maxParseLength));\n            treeMap = treeMap.get(parsedSubZoneId);\n            if (treeMap != null && treeMap.isLeaf) {\n                parsedZoneId = parsedSubZoneId;\n                parseLength = treeMap.length;\n            }\n        }\n        if (parsedZoneId != null) {\n            context.setParsedZone(ZoneRegion.ofId(parsedZoneId));\n            return position + parseLength;\n        }\n        return ~position;\n    };\n    _proto._parsePrefixedOffset = function _parsePrefixedOffset(context, text, prefixPos, position) {\n        var prefix = text.substring(prefixPos, position).toUpperCase();\n        var newContext = context.copy();\n        if (position < text.length && context.charEquals(text.charAt(position), \"Z\")) {\n            context.setParsedZone(ZoneId.ofOffset(prefix, ZoneOffset.UTC));\n            return position;\n        }\n        var endPos = OffsetIdPrinterParser.INSTANCE_ID.parse(newContext, text, position);\n        if (endPos < 0) {\n            context.setParsedZone(ZoneId.ofOffset(prefix, ZoneOffset.UTC));\n            return position;\n        }\n        var offsetSecs = newContext.getParsed(ChronoField.OFFSET_SECONDS);\n        var offset = ZoneOffset.ofTotalSeconds(offsetSecs);\n        context.setParsedZone(ZoneId.ofOffset(prefix, offset));\n        return endPos;\n    };\n    _proto.toString = function toString() {\n        return this.description;\n    };\n    return ZoneIdPrinterParser;\n}();\nvar ZoneIdTree = function() {\n    ZoneIdTree.createTreeMap = function createTreeMap(availableZoneIds) {\n        var sortedZoneIds = availableZoneIds.sort(function(a, b) {\n            return a.length - b.length;\n        });\n        var treeMap = new ZoneIdTreeMap(sortedZoneIds[0].length, false);\n        for(var i = 0; i < sortedZoneIds.length; i++){\n            treeMap.add(sortedZoneIds[i]);\n        }\n        return new ZoneIdTree(sortedZoneIds.length, treeMap);\n    };\n    function ZoneIdTree(size, treeMap) {\n        this.size = size;\n        this.treeMap = treeMap;\n    }\n    return ZoneIdTree;\n}();\nvar ZoneIdTreeMap = function() {\n    function ZoneIdTreeMap(length, isLeaf) {\n        if (length === void 0) {\n            length = 0;\n        }\n        if (isLeaf === void 0) {\n            isLeaf = false;\n        }\n        this.length = length;\n        this.isLeaf = isLeaf;\n        this._treeMap = {};\n    }\n    var _proto2 = ZoneIdTreeMap.prototype;\n    _proto2.add = function add(zoneId) {\n        var idLength = zoneId.length;\n        if (idLength === this.length) {\n            this._treeMap[zoneId] = new ZoneIdTreeMap(idLength, true);\n        } else if (idLength > this.length) {\n            var subZoneId = zoneId.substr(0, this.length);\n            var subTreeMap = this._treeMap[subZoneId];\n            if (subTreeMap == null) {\n                subTreeMap = new ZoneIdTreeMap(idLength, false);\n                this._treeMap[subZoneId] = subTreeMap;\n            }\n            subTreeMap.add(zoneId);\n        }\n    };\n    _proto2.get = function get(zoneId) {\n        return this._treeMap[zoneId];\n    };\n    return ZoneIdTreeMap;\n}();\nvar zoneIdTree = new ZoneIdTree([]);\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var MAX_WIDTH = 15;\nvar DateTimeFormatterBuilder = function() {\n    function DateTimeFormatterBuilder() {\n        this._active = this;\n        this._parent = null;\n        this._printerParsers = [];\n        this._optional = false;\n        this._padNextWidth = 0;\n        this._padNextChar = null;\n        this._valueParserIndex = -1;\n    }\n    DateTimeFormatterBuilder._of = function _of(parent, optional) {\n        requireNonNull(parent, \"parent\");\n        requireNonNull(optional, \"optional\");\n        var dtFormatterBuilder = new DateTimeFormatterBuilder();\n        dtFormatterBuilder._parent = parent;\n        dtFormatterBuilder._optional = optional;\n        return dtFormatterBuilder;\n    };\n    var _proto = DateTimeFormatterBuilder.prototype;\n    _proto.parseCaseSensitive = function parseCaseSensitive() {\n        this._appendInternalPrinterParser(SettingsParser.SENSITIVE);\n        return this;\n    };\n    _proto.parseCaseInsensitive = function parseCaseInsensitive() {\n        this._appendInternalPrinterParser(SettingsParser.INSENSITIVE);\n        return this;\n    };\n    _proto.parseStrict = function parseStrict() {\n        this._appendInternalPrinterParser(SettingsParser.STRICT);\n        return this;\n    };\n    _proto.parseLenient = function parseLenient() {\n        this._appendInternalPrinterParser(SettingsParser.LENIENT);\n        return this;\n    };\n    _proto.parseDefaulting = function parseDefaulting(field, value) {\n        requireNonNull(field);\n        this._appendInternal(new DefaultingParser(field, value));\n        return this;\n    };\n    _proto.appendValue = function appendValue() {\n        if (arguments.length === 1) {\n            return this._appendValue1.apply(this, arguments);\n        } else if (arguments.length === 2) {\n            return this._appendValue2.apply(this, arguments);\n        } else {\n            return this._appendValue4.apply(this, arguments);\n        }\n    };\n    _proto._appendValue1 = function _appendValue1(field) {\n        requireNonNull(field);\n        this._appendValuePrinterParser(new NumberPrinterParser(field, 1, MAX_WIDTH, SignStyle.NORMAL));\n        return this;\n    };\n    _proto._appendValue2 = function _appendValue2(field, width) {\n        requireNonNull(field);\n        if (width < 1 || width > MAX_WIDTH) {\n            throw new IllegalArgumentException(\"The width must be from 1 to \" + MAX_WIDTH + \" inclusive but was \" + width);\n        }\n        var pp = new NumberPrinterParser(field, width, width, SignStyle.NOT_NEGATIVE);\n        this._appendValuePrinterParser(pp);\n        return this;\n    };\n    _proto._appendValue4 = function _appendValue4(field, minWidth, maxWidth, signStyle) {\n        requireNonNull(field);\n        requireNonNull(signStyle);\n        if (minWidth === maxWidth && signStyle === SignStyle.NOT_NEGATIVE) {\n            return this._appendValue2(field, maxWidth);\n        }\n        if (minWidth < 1 || minWidth > MAX_WIDTH) {\n            throw new IllegalArgumentException(\"The minimum width must be from 1 to \" + MAX_WIDTH + \" inclusive but was \" + minWidth);\n        }\n        if (maxWidth < 1 || maxWidth > MAX_WIDTH) {\n            throw new IllegalArgumentException(\"The minimum width must be from 1 to \" + MAX_WIDTH + \" inclusive but was \" + maxWidth);\n        }\n        if (maxWidth < minWidth) {\n            throw new IllegalArgumentException(\"The maximum width must exceed or equal the minimum width but \" + maxWidth + \" < \" + minWidth);\n        }\n        var pp = new NumberPrinterParser(field, minWidth, maxWidth, signStyle);\n        this._appendValuePrinterParser(pp);\n        return this;\n    };\n    _proto.appendValueReduced = function appendValueReduced() {\n        if (arguments.length === 4 && arguments[3] instanceof ChronoLocalDate) {\n            return this._appendValueReducedFieldWidthMaxWidthBaseDate.apply(this, arguments);\n        } else {\n            return this._appendValueReducedFieldWidthMaxWidthBaseValue.apply(this, arguments);\n        }\n    };\n    _proto._appendValueReducedFieldWidthMaxWidthBaseValue = function _appendValueReducedFieldWidthMaxWidthBaseValue(field, width, maxWidth, baseValue) {\n        requireNonNull(field, \"field\");\n        var pp = new ReducedPrinterParser(field, width, maxWidth, baseValue, null);\n        this._appendValuePrinterParser(pp);\n        return this;\n    };\n    _proto._appendValueReducedFieldWidthMaxWidthBaseDate = function _appendValueReducedFieldWidthMaxWidthBaseDate(field, width, maxWidth, baseDate) {\n        requireNonNull(field, \"field\");\n        requireNonNull(baseDate, \"baseDate\");\n        requireInstance(baseDate, ChronoLocalDate, \"baseDate\");\n        var pp = new ReducedPrinterParser(field, width, maxWidth, 0, baseDate);\n        this._appendValuePrinterParser(pp);\n        return this;\n    };\n    _proto._appendValuePrinterParser = function _appendValuePrinterParser(pp) {\n        assert(pp != null);\n        if (this._active._valueParserIndex >= 0 && this._active._printerParsers[this._active._valueParserIndex] instanceof NumberPrinterParser) {\n            var activeValueParser = this._active._valueParserIndex;\n            var basePP = this._active._printerParsers[activeValueParser];\n            if (pp.minWidth() === pp.maxWidth() && pp.signStyle() === SignStyle.NOT_NEGATIVE) {\n                basePP = basePP.withSubsequentWidth(pp.maxWidth());\n                this._appendInternal(pp.withFixedWidth());\n                this._active._valueParserIndex = activeValueParser;\n            } else {\n                basePP = basePP.withFixedWidth();\n                this._active._valueParserIndex = this._appendInternal(pp);\n            }\n            this._active._printerParsers[activeValueParser] = basePP;\n        } else {\n            this._active._valueParserIndex = this._appendInternal(pp);\n        }\n        return this;\n    };\n    _proto.appendFraction = function appendFraction(field, minWidth, maxWidth, decimalPoint) {\n        this._appendInternal(new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint));\n        return this;\n    };\n    _proto.appendInstant = function appendInstant(fractionalDigits) {\n        if (fractionalDigits === void 0) {\n            fractionalDigits = -2;\n        }\n        if (fractionalDigits < -2 || fractionalDigits > 9) {\n            throw new IllegalArgumentException(\"Invalid fractional digits: \" + fractionalDigits);\n        }\n        this._appendInternal(new InstantPrinterParser(fractionalDigits));\n        return this;\n    };\n    _proto.appendOffsetId = function appendOffsetId() {\n        this._appendInternal(OffsetIdPrinterParser.INSTANCE_ID);\n        return this;\n    };\n    _proto.appendOffset = function appendOffset(pattern, noOffsetText) {\n        this._appendInternalPrinterParser(new OffsetIdPrinterParser(noOffsetText, pattern));\n        return this;\n    };\n    _proto.appendZoneId = function appendZoneId() {\n        this._appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), \"ZoneId()\"));\n        return this;\n    };\n    _proto.appendPattern = function appendPattern(pattern) {\n        requireNonNull(pattern, \"pattern\");\n        this._parsePattern(pattern);\n        return this;\n    };\n    _proto.appendZoneText = function appendZoneText() {\n        throw new IllegalArgumentException(\"Pattern using (localized) text not implemented, use @js-joda/locale plugin!\");\n    };\n    _proto.appendText = function appendText() {\n        throw new IllegalArgumentException(\"Pattern using (localized) text not implemented, use @js-joda/locale plugin!\");\n    };\n    _proto.appendLocalizedOffset = function appendLocalizedOffset() {\n        throw new IllegalArgumentException(\"Pattern using (localized) text not implemented, use @js-joda/locale plugin!\");\n    };\n    _proto.appendWeekField = function appendWeekField() {\n        throw new IllegalArgumentException(\"Pattern using (localized) text not implemented, use @js-joda/locale plugin!\");\n    };\n    _proto._parsePattern = function _parsePattern(pattern) {\n        var FIELD_MAP = {\n            \"G\": ChronoField.ERA,\n            \"y\": ChronoField.YEAR_OF_ERA,\n            \"u\": ChronoField.YEAR,\n            \"Q\": IsoFields.QUARTER_OF_YEAR,\n            \"q\": IsoFields.QUARTER_OF_YEAR,\n            \"M\": ChronoField.MONTH_OF_YEAR,\n            \"L\": ChronoField.MONTH_OF_YEAR,\n            \"D\": ChronoField.DAY_OF_YEAR,\n            \"d\": ChronoField.DAY_OF_MONTH,\n            \"F\": ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH,\n            \"E\": ChronoField.DAY_OF_WEEK,\n            \"c\": ChronoField.DAY_OF_WEEK,\n            \"e\": ChronoField.DAY_OF_WEEK,\n            \"a\": ChronoField.AMPM_OF_DAY,\n            \"H\": ChronoField.HOUR_OF_DAY,\n            \"k\": ChronoField.CLOCK_HOUR_OF_DAY,\n            \"K\": ChronoField.HOUR_OF_AMPM,\n            \"h\": ChronoField.CLOCK_HOUR_OF_AMPM,\n            \"m\": ChronoField.MINUTE_OF_HOUR,\n            \"s\": ChronoField.SECOND_OF_MINUTE,\n            \"S\": ChronoField.NANO_OF_SECOND,\n            \"A\": ChronoField.MILLI_OF_DAY,\n            \"n\": ChronoField.NANO_OF_SECOND,\n            \"N\": ChronoField.NANO_OF_DAY\n        };\n        for(var pos = 0; pos < pattern.length; pos++){\n            var cur = pattern.charAt(pos);\n            if (cur >= \"A\" && cur <= \"Z\" || cur >= \"a\" && cur <= \"z\") {\n                var start = pos++;\n                for(; pos < pattern.length && pattern.charAt(pos) === cur; pos++);\n                var count = pos - start;\n                if (cur === \"p\") {\n                    var pad = 0;\n                    if (pos < pattern.length) {\n                        cur = pattern.charAt(pos);\n                        if (cur >= \"A\" && cur <= \"Z\" || cur >= \"a\" && cur <= \"z\") {\n                            pad = count;\n                            start = pos++;\n                            for(; pos < pattern.length && pattern.charAt(pos) === cur; pos++);\n                            count = pos - start;\n                        }\n                    }\n                    if (pad === 0) {\n                        throw new IllegalArgumentException(\"Pad letter 'p' must be followed by valid pad pattern: \" + pattern);\n                    }\n                    this.padNext(pad);\n                }\n                var field = FIELD_MAP[cur];\n                if (field != null) {\n                    this._parseField(cur, count, field);\n                } else if (cur === \"z\") {\n                    if (count > 4) {\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                    } else if (count === 4) {\n                        this.appendZoneText(TextStyle.FULL);\n                    } else {\n                        this.appendZoneText(TextStyle.SHORT);\n                    }\n                } else if (cur === \"V\") {\n                    if (count !== 2) {\n                        throw new IllegalArgumentException(\"Pattern letter count must be 2: \" + cur);\n                    }\n                    this.appendZoneId();\n                } else if (cur === \"Z\") {\n                    if (count < 4) {\n                        this.appendOffset(\"+HHMM\", \"+0000\");\n                    } else if (count === 4) {\n                        this.appendLocalizedOffset(TextStyle.FULL);\n                    } else if (count === 5) {\n                        this.appendOffset(\"+HH:MM:ss\", \"Z\");\n                    } else {\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                    }\n                } else if (cur === \"O\") {\n                    if (count === 1) {\n                        this.appendLocalizedOffset(TextStyle.SHORT);\n                    } else if (count === 4) {\n                        this.appendLocalizedOffset(TextStyle.FULL);\n                    } else {\n                        throw new IllegalArgumentException(\"Pattern letter count must be 1 or 4: \" + cur);\n                    }\n                } else if (cur === \"X\") {\n                    if (count > 5) {\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                    }\n                    this.appendOffset(OffsetIdPrinterParser.PATTERNS[count + (count === 1 ? 0 : 1)], \"Z\");\n                } else if (cur === \"x\") {\n                    if (count > 5) {\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                    }\n                    var zero = count === 1 ? \"+00\" : count % 2 === 0 ? \"+0000\" : \"+00:00\";\n                    this.appendOffset(OffsetIdPrinterParser.PATTERNS[count + (count === 1 ? 0 : 1)], zero);\n                } else if (cur === \"W\") {\n                    if (count > 1) {\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                    }\n                    this.appendWeekField(\"W\", count);\n                } else if (cur === \"w\") {\n                    if (count > 2) {\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                    }\n                    this.appendWeekField(\"w\", count);\n                } else if (cur === \"Y\") {\n                    this.appendWeekField(\"Y\", count);\n                } else {\n                    throw new IllegalArgumentException(\"Unknown pattern letter: \" + cur);\n                }\n                pos--;\n            } else if (cur === \"'\") {\n                var _start = pos++;\n                for(; pos < pattern.length; pos++){\n                    if (pattern.charAt(pos) === \"'\") {\n                        if (pos + 1 < pattern.length && pattern.charAt(pos + 1) === \"'\") {\n                            pos++;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                if (pos >= pattern.length) {\n                    throw new IllegalArgumentException(\"Pattern ends with an incomplete string literal: \" + pattern);\n                }\n                var str = pattern.substring(_start + 1, pos);\n                if (str.length === 0) {\n                    this.appendLiteral(\"'\");\n                } else {\n                    this.appendLiteral(str.replace(\"''\", \"'\"));\n                }\n            } else if (cur === \"[\") {\n                this.optionalStart();\n            } else if (cur === \"]\") {\n                if (this._active._parent === null) {\n                    throw new IllegalArgumentException(\"Pattern invalid as it contains ] without previous [\");\n                }\n                this.optionalEnd();\n            } else if (cur === \"{\" || cur === \"}\" || cur === \"#\") {\n                throw new IllegalArgumentException(\"Pattern includes reserved character: '\" + cur + \"'\");\n            } else {\n                this.appendLiteral(cur);\n            }\n        }\n    };\n    _proto._parseField = function _parseField(cur, count, field) {\n        switch(cur){\n            case \"u\":\n            case \"y\":\n                if (count === 2) {\n                    this.appendValueReduced(field, 2, 2, ReducedPrinterParser.BASE_DATE);\n                } else if (count < 4) {\n                    this.appendValue(field, count, MAX_WIDTH, SignStyle.NORMAL);\n                } else {\n                    this.appendValue(field, count, MAX_WIDTH, SignStyle.EXCEEDS_PAD);\n                }\n                break;\n            case \"M\":\n            case \"Q\":\n                switch(count){\n                    case 1:\n                        this.appendValue(field);\n                        break;\n                    case 2:\n                        this.appendValue(field, 2);\n                        break;\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            case \"L\":\n            case \"q\":\n                switch(count){\n                    case 1:\n                        this.appendValue(field);\n                        break;\n                    case 2:\n                        this.appendValue(field, 2);\n                        break;\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT_STANDALONE);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL_STANDALONE);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW_STANDALONE);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            case \"e\":\n                switch(count){\n                    case 1:\n                    case 2:\n                        this.appendWeekField(\"e\", count);\n                        break;\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            case \"c\":\n                switch(count){\n                    case 1:\n                        this.appendWeekField(\"c\", count);\n                        break;\n                    case 2:\n                        throw new IllegalArgumentException(\"Invalid number of pattern letters: \" + cur);\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT_STANDALONE);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL_STANDALONE);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW_STANDALONE);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            case \"a\":\n                if (count === 1) {\n                    this.appendText(field, TextStyle.SHORT);\n                } else {\n                    throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            case \"E\":\n            case \"G\":\n                switch(count){\n                    case 1:\n                    case 2:\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            case \"S\":\n                this.appendFraction(ChronoField.NANO_OF_SECOND, count, count, false);\n                break;\n            case \"F\":\n                if (count === 1) {\n                    this.appendValue(field);\n                } else {\n                    throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            case \"d\":\n            case \"h\":\n            case \"H\":\n            case \"k\":\n            case \"K\":\n            case \"m\":\n            case \"s\":\n                if (count === 1) {\n                    this.appendValue(field);\n                } else if (count === 2) {\n                    this.appendValue(field, count);\n                } else {\n                    throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            case \"D\":\n                if (count === 1) {\n                    this.appendValue(field);\n                } else if (count <= 3) {\n                    this.appendValue(field, count);\n                } else {\n                    throw new IllegalArgumentException(\"Too many pattern letters: \" + cur);\n                }\n                break;\n            default:\n                if (count === 1) {\n                    this.appendValue(field);\n                } else {\n                    this.appendValue(field, count);\n                }\n                break;\n        }\n    };\n    _proto.padNext = function padNext() {\n        if (arguments.length === 1) {\n            return this._padNext1.apply(this, arguments);\n        } else {\n            return this._padNext2.apply(this, arguments);\n        }\n    };\n    _proto._padNext1 = function _padNext1(padWidth) {\n        return this._padNext2(padWidth, \" \");\n    };\n    _proto._padNext2 = function _padNext2(padWidth, padChar) {\n        if (padWidth < 1) {\n            throw new IllegalArgumentException(\"The pad width must be at least one but was \" + padWidth);\n        }\n        this._active._padNextWidth = padWidth;\n        this._active._padNextChar = padChar;\n        this._active._valueParserIndex = -1;\n        return this;\n    };\n    _proto.optionalStart = function optionalStart() {\n        this._active._valueParserIndex = -1;\n        this._active = DateTimeFormatterBuilder._of(this._active, true);\n        return this;\n    };\n    _proto.optionalEnd = function optionalEnd() {\n        if (this._active._parent == null) {\n            throw new IllegalStateException(\"Cannot call optionalEnd() as there was no previous call to optionalStart()\");\n        }\n        if (this._active._printerParsers.length > 0) {\n            var cpp = new CompositePrinterParser(this._active._printerParsers, this._active._optional);\n            this._active = this._active._parent;\n            this._appendInternal(cpp);\n        } else {\n            this._active = this._active._parent;\n        }\n        return this;\n    };\n    _proto._appendInternal = function _appendInternal(pp) {\n        assert(pp != null);\n        if (this._active._padNextWidth > 0) {\n            if (pp != null) {\n                pp = new PadPrinterParserDecorator(pp, this._active._padNextWidth, this._active._padNextChar);\n            }\n            this._active._padNextWidth = 0;\n            this._active._padNextChar = 0;\n        }\n        this._active._printerParsers.push(pp);\n        this._active._valueParserIndex = -1;\n        return this._active._printerParsers.length - 1;\n    };\n    _proto.appendLiteral = function appendLiteral(literal) {\n        assert(literal != null);\n        if (literal.length > 0) {\n            if (literal.length === 1) {\n                this._appendInternalPrinterParser(new CharLiteralPrinterParser(literal.charAt(0)));\n            } else {\n                this._appendInternalPrinterParser(new StringLiteralPrinterParser(literal));\n            }\n        }\n        return this;\n    };\n    _proto._appendInternalPrinterParser = function _appendInternalPrinterParser(pp) {\n        assert(pp != null);\n        if (this._active._padNextWidth > 0) {\n            if (pp != null) {\n                pp = new PadPrinterParserDecorator(pp, this._active._padNextWidth, this._active._padNextChar);\n            }\n            this._active._padNextWidth = 0;\n            this._active._padNextChar = 0;\n        }\n        this._active._printerParsers.push(pp);\n        this._active._valueParserIndex = -1;\n        return this._active._printerParsers.length - 1;\n    };\n    _proto.append = function append(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        this._appendInternal(formatter._toPrinterParser(false));\n        return this;\n    };\n    _proto.toFormatter = function toFormatter(resolverStyle) {\n        if (resolverStyle === void 0) {\n            resolverStyle = ResolverStyle.SMART;\n        }\n        while(this._active._parent != null){\n            this.optionalEnd();\n        }\n        var pp = new CompositePrinterParser(this._printerParsers, false);\n        return new DateTimeFormatter(pp, null, DecimalStyle.STANDARD, resolverStyle, null, null, null);\n    };\n    return DateTimeFormatterBuilder;\n}();\nvar SECONDS_PER_10000_YEARS = 146097 * 25 * 86400;\nvar SECONDS_0000_TO_1970 = (146097 * 5 - (30 * 365 + 7)) * 86400;\nvar InstantPrinterParser = function() {\n    function InstantPrinterParser(fractionalDigits) {\n        this.fractionalDigits = fractionalDigits;\n    }\n    var _proto2 = InstantPrinterParser.prototype;\n    _proto2.print = function print(context, buf) {\n        var inSecs = context.getValue(ChronoField.INSTANT_SECONDS);\n        var inNanos = 0;\n        if (context.temporal().isSupported(ChronoField.NANO_OF_SECOND)) {\n            inNanos = context.temporal().getLong(ChronoField.NANO_OF_SECOND);\n        }\n        if (inSecs == null) {\n            return false;\n        }\n        var inSec = inSecs;\n        var inNano = ChronoField.NANO_OF_SECOND.checkValidIntValue(inNanos);\n        if (inSec >= -SECONDS_0000_TO_1970) {\n            var zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;\n            var hi = MathUtil.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;\n            var lo = MathUtil.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);\n            var ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n            if (hi > 0) {\n                buf.append(\"+\").append(hi);\n            }\n            buf.append(ldt.toString());\n            if (ldt.second() === 0) {\n                buf.append(\":00\");\n            }\n        } else {\n            var _zeroSecs = inSec + SECONDS_0000_TO_1970;\n            var _hi = MathUtil.intDiv(_zeroSecs, SECONDS_PER_10000_YEARS);\n            var _lo = MathUtil.intMod(_zeroSecs, SECONDS_PER_10000_YEARS);\n            var _ldt = LocalDateTime.ofEpochSecond(_lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n            var pos = buf.length();\n            buf.append(_ldt.toString());\n            if (_ldt.second() === 0) {\n                buf.append(\":00\");\n            }\n            if (_hi < 0) {\n                if (_ldt.year() === -10000) {\n                    buf.replace(pos, pos + 2, \"\" + (_hi - 1));\n                } else if (_lo === 0) {\n                    buf.insert(pos, _hi);\n                } else {\n                    buf.insert(pos + 1, Math.abs(_hi));\n                }\n            }\n        }\n        if (this.fractionalDigits === -2) {\n            if (inNano !== 0) {\n                buf.append(\".\");\n                if (MathUtil.intMod(inNano, 1000000) === 0) {\n                    buf.append((\"\" + (MathUtil.intDiv(inNano, 1000000) + 1000)).substring(1));\n                } else if (MathUtil.intMod(inNano, 1000) === 0) {\n                    buf.append((\"\" + (MathUtil.intDiv(inNano, 1000) + 1000000)).substring(1));\n                } else {\n                    buf.append((\"\" + (inNano + 1000000000)).substring(1));\n                }\n            }\n        } else if (this.fractionalDigits > 0 || this.fractionalDigits === -1 && inNano > 0) {\n            buf.append(\".\");\n            var div = 100000000;\n            for(var i = 0; this.fractionalDigits === -1 && inNano > 0 || i < this.fractionalDigits; i++){\n                var digit = MathUtil.intDiv(inNano, div);\n                buf.append(digit);\n                inNano = inNano - digit * div;\n                div = MathUtil.intDiv(div, 10);\n            }\n        }\n        buf.append(\"Z\");\n        return true;\n    };\n    _proto2.parse = function parse(context, text, position) {\n        var newContext = context.copy();\n        var minDigits = this.fractionalDigits < 0 ? 0 : this.fractionalDigits;\n        var maxDigits = this.fractionalDigits < 0 ? 9 : this.fractionalDigits;\n        var parser = new DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_LOCAL_DATE).appendLiteral(\"T\").appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral(\":\").appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral(\":\").appendValue(ChronoField.SECOND_OF_MINUTE, 2).appendFraction(ChronoField.NANO_OF_SECOND, minDigits, maxDigits, true).appendLiteral(\"Z\").toFormatter()._toPrinterParser(false);\n        var pos = parser.parse(newContext, text, position);\n        if (pos < 0) {\n            return pos;\n        }\n        var yearParsed = newContext.getParsed(ChronoField.YEAR);\n        var month = newContext.getParsed(ChronoField.MONTH_OF_YEAR);\n        var day = newContext.getParsed(ChronoField.DAY_OF_MONTH);\n        var hour = newContext.getParsed(ChronoField.HOUR_OF_DAY);\n        var min = newContext.getParsed(ChronoField.MINUTE_OF_HOUR);\n        var secVal = newContext.getParsed(ChronoField.SECOND_OF_MINUTE);\n        var nanoVal = newContext.getParsed(ChronoField.NANO_OF_SECOND);\n        var sec = secVal != null ? secVal : 0;\n        var nano = nanoVal != null ? nanoVal : 0;\n        var year = MathUtil.intMod(yearParsed, 10000);\n        var days = 0;\n        if (hour === 24 && min === 0 && sec === 0 && nano === 0) {\n            hour = 0;\n            days = 1;\n        } else if (hour === 23 && min === 59 && sec === 60) {\n            context.setParsedLeapSecond();\n            sec = 59;\n        }\n        var instantSecs;\n        try {\n            var ldt = LocalDateTime.of(year, month, day, hour, min, sec, 0).plusDays(days);\n            instantSecs = ldt.toEpochSecond(ZoneOffset.UTC);\n            instantSecs += MathUtil.safeMultiply(MathUtil.intDiv(yearParsed, 10000), SECONDS_PER_10000_YEARS);\n        } catch (ex) {\n            return ~position;\n        }\n        var successPos = pos;\n        successPos = context.setParsedField(ChronoField.INSTANT_SECONDS, instantSecs, position, successPos);\n        return context.setParsedField(ChronoField.NANO_OF_SECOND, nano, position, successPos);\n    };\n    _proto2.toString = function toString() {\n        return \"Instant()\";\n    };\n    return InstantPrinterParser;\n}();\nvar DefaultingParser = function() {\n    function DefaultingParser(field, value) {\n        this._field = field;\n        this._value = value;\n    }\n    var _proto3 = DefaultingParser.prototype;\n    _proto3.print = function print() {\n        return true;\n    };\n    _proto3.parse = function parse(context, text, position) {\n        if (context.getParsed(this._field) == null) {\n            context.setParsedField(this._field, this._value, position, position);\n        }\n        return position;\n    };\n    return DefaultingParser;\n}();\nfunction _init$e() {\n    ReducedPrinterParser.BASE_DATE = LocalDate.of(2000, 1, 1);\n    DateTimeFormatterBuilder.CompositePrinterParser = CompositePrinterParser;\n    DateTimeFormatterBuilder.PadPrinterParserDecorator = PadPrinterParserDecorator;\n    DateTimeFormatterBuilder.SettingsParser = SettingsParser;\n    DateTimeFormatterBuilder.CharLiteralPrinterParser = StringLiteralPrinterParser;\n    DateTimeFormatterBuilder.StringLiteralPrinterParser = StringLiteralPrinterParser;\n    DateTimeFormatterBuilder.CharLiteralPrinterParser = CharLiteralPrinterParser;\n    DateTimeFormatterBuilder.NumberPrinterParser = NumberPrinterParser;\n    DateTimeFormatterBuilder.ReducedPrinterParser = ReducedPrinterParser;\n    DateTimeFormatterBuilder.FractionPrinterParser = FractionPrinterParser;\n    DateTimeFormatterBuilder.OffsetIdPrinterParser = OffsetIdPrinterParser;\n    DateTimeFormatterBuilder.ZoneIdPrinterParser = ZoneIdPrinterParser;\n}\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var StringBuilder = function() {\n    function StringBuilder() {\n        this._str = \"\";\n    }\n    var _proto = StringBuilder.prototype;\n    _proto.append = function append(str) {\n        this._str += str;\n        return this;\n    };\n    _proto.appendChar = function appendChar(str) {\n        this._str += str[0];\n        return this;\n    };\n    _proto.insert = function insert(offset, str) {\n        this._str = this._str.slice(0, offset) + str + this._str.slice(offset);\n        return this;\n    };\n    _proto.replace = function replace(start, end, str) {\n        this._str = this._str.slice(0, start) + str + this._str.slice(end);\n        return this;\n    };\n    _proto.length = function length() {\n        return this._str.length;\n    };\n    _proto.setLength = function setLength(length) {\n        this._str = this._str.slice(0, length);\n        return this;\n    };\n    _proto.toString = function toString() {\n        return this._str;\n    };\n    return StringBuilder;\n}();\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var DateTimeFormatter = function() {\n    DateTimeFormatter.parsedExcessDays = function parsedExcessDays() {\n        return DateTimeFormatter.PARSED_EXCESS_DAYS;\n    };\n    DateTimeFormatter.parsedLeapSecond = function parsedLeapSecond() {\n        return DateTimeFormatter.PARSED_LEAP_SECOND;\n    };\n    DateTimeFormatter.ofPattern = function ofPattern(pattern) {\n        return new DateTimeFormatterBuilder().appendPattern(pattern).toFormatter();\n    };\n    function DateTimeFormatter(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono, zone) {\n        if (chrono === void 0) {\n            chrono = IsoChronology.INSTANCE;\n        }\n        assert(printerParser != null);\n        assert(decimalStyle != null);\n        assert(resolverStyle != null);\n        this._printerParser = printerParser;\n        this._locale = locale;\n        this._decimalStyle = decimalStyle;\n        this._resolverStyle = resolverStyle;\n        this._resolverFields = resolverFields;\n        this._chrono = chrono;\n        this._zone = zone;\n    }\n    var _proto = DateTimeFormatter.prototype;\n    _proto.locale = function locale() {\n        return this._locale;\n    };\n    _proto.decimalStyle = function decimalStyle() {\n        return this._decimalStyle;\n    };\n    _proto.chronology = function chronology() {\n        return this._chrono;\n    };\n    _proto.withChronology = function withChronology(chrono) {\n        if (this._chrono != null && this._chrono.equals(chrono)) {\n            return this;\n        }\n        return new DateTimeFormatter(this._printerParser, this._locale, this._decimalStyle, this._resolverStyle, this._resolverFields, chrono, this._zone);\n    };\n    _proto.withLocale = function withLocale() {\n        return this;\n    };\n    _proto.withResolverStyle = function withResolverStyle(resolverStyle) {\n        requireNonNull(resolverStyle, \"resolverStyle\");\n        if (resolverStyle.equals(this._resolverStyle)) {\n            return this;\n        }\n        return new DateTimeFormatter(this._printerParser, this._locale, this._decimalStyle, resolverStyle, this._resolverFields, this._chrono, this._zone);\n    };\n    _proto.format = function format(temporal) {\n        var buf = new StringBuilder(32);\n        this._formatTo(temporal, buf);\n        return buf.toString();\n    };\n    _proto._formatTo = function _formatTo(temporal, appendable) {\n        requireNonNull(temporal, \"temporal\");\n        requireNonNull(appendable, \"appendable\");\n        var context = new DateTimePrintContext(temporal, this);\n        this._printerParser.print(context, appendable);\n    };\n    _proto.parse = function parse(text, type) {\n        if (arguments.length === 1) {\n            return this.parse1(text);\n        } else {\n            return this.parse2(text, type);\n        }\n    };\n    _proto.parse1 = function parse1(text) {\n        requireNonNull(text, \"text\");\n        try {\n            return this._parseToBuilder(text, null).resolve(this._resolverStyle, this._resolverFields);\n        } catch (ex) {\n            if (ex instanceof DateTimeParseException) {\n                throw ex;\n            } else {\n                throw this._createError(text, ex);\n            }\n        }\n    };\n    _proto.parse2 = function parse2(text, type) {\n        requireNonNull(text, \"text\");\n        requireNonNull(type, \"type\");\n        try {\n            var builder = this._parseToBuilder(text, null).resolve(this._resolverStyle, this._resolverFields);\n            return builder.build(type);\n        } catch (ex) {\n            if (ex instanceof DateTimeParseException) {\n                throw ex;\n            } else {\n                throw this._createError(text, ex);\n            }\n        }\n    };\n    _proto._createError = function _createError(text, ex) {\n        var abbr = \"\";\n        if (text.length > 64) {\n            abbr = text.substring(0, 64) + \"...\";\n        } else {\n            abbr = text;\n        }\n        return new DateTimeParseException(\"Text '\" + abbr + \"' could not be parsed: \" + ex.message, text, 0, ex);\n    };\n    _proto._parseToBuilder = function _parseToBuilder(text, position) {\n        var pos = position != null ? position : new ParsePosition(0);\n        var result = this._parseUnresolved0(text, pos);\n        if (result == null || pos.getErrorIndex() >= 0 || position == null && pos.getIndex() < text.length) {\n            var abbr = \"\";\n            if (text.length > 64) {\n                abbr = text.substr(0, 64).toString() + \"...\";\n            } else {\n                abbr = text;\n            }\n            if (pos.getErrorIndex() >= 0) {\n                throw new DateTimeParseException(\"Text '\" + abbr + \"' could not be parsed at index \" + pos.getErrorIndex(), text, pos.getErrorIndex());\n            } else {\n                throw new DateTimeParseException(\"Text '\" + abbr + \"' could not be parsed, unparsed text found at index \" + pos.getIndex(), text, pos.getIndex());\n            }\n        }\n        return result.toBuilder();\n    };\n    _proto.parseUnresolved = function parseUnresolved(text, position) {\n        return this._parseUnresolved0(text, position);\n    };\n    _proto._parseUnresolved0 = function _parseUnresolved0(text, position) {\n        assert(text != null, \"text\", NullPointerException);\n        assert(position != null, \"position\", NullPointerException);\n        var context = new DateTimeParseContext(this);\n        var pos = position.getIndex();\n        pos = this._printerParser.parse(context, text, pos);\n        if (pos < 0) {\n            position.setErrorIndex(~pos);\n            return null;\n        }\n        position.setIndex(pos);\n        return context.toParsed();\n    };\n    _proto._toPrinterParser = function _toPrinterParser(optional) {\n        return this._printerParser.withOptional(optional);\n    };\n    _proto.toString = function toString() {\n        var pattern = this._printerParser.toString();\n        return pattern.indexOf(\"[\") === 0 ? pattern : pattern.substring(1, pattern.length - 1);\n    };\n    return DateTimeFormatter;\n}();\nfunction _init$d() {\n    DateTimeFormatter.ISO_LOCAL_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral(\"-\").appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral(\"-\").appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.ISO_LOCAL_TIME = new DateTimeFormatterBuilder().appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral(\":\").appendValue(ChronoField.MINUTE_OF_HOUR, 2).optionalStart().appendLiteral(\":\").appendValue(ChronoField.SECOND_OF_MINUTE, 2).optionalStart().appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true).toFormatter(ResolverStyle.STRICT);\n    DateTimeFormatter.ISO_LOCAL_DATE_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE).appendLiteral(\"T\").append(DateTimeFormatter.ISO_LOCAL_TIME).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.ISO_INSTANT = new DateTimeFormatterBuilder().parseCaseInsensitive().appendInstant().toFormatter(ResolverStyle.STRICT);\n    DateTimeFormatter.ISO_OFFSET_DATE_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE_TIME).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.ISO_ZONED_DATE_TIME = new DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_OFFSET_DATE_TIME).optionalStart().appendLiteral(\"[\").parseCaseSensitive().appendZoneId().appendLiteral(\"]\").toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.BASIC_ISO_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendValue(ChronoField.MONTH_OF_YEAR, 2).appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.ISO_OFFSET_DATE = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.ISO_OFFSET_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_TIME).appendOffsetId().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.ISO_ORDINAL_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral(\"-\").appendValue(ChronoField.DAY_OF_YEAR).toFormatter(ResolverStyle.STRICT);\n    DateTimeFormatter.ISO_WEEK_DATE = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral(\"-W\").appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR).appendLiteral(\"-\").appendValue(ChronoField.DAY_OF_WEEK).toFormatter(ResolverStyle.STRICT);\n    DateTimeFormatter.ISO_DATE = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE).optionalStart().appendOffsetId().optionalEnd().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.ISO_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_TIME).optionalStart().appendOffsetId().optionalEnd().toFormatter(ResolverStyle.STRICT);\n    DateTimeFormatter.ISO_DATE_TIME = new DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_LOCAL_DATE_TIME).optionalStart().appendOffsetId().optionalEnd().toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n    DateTimeFormatter.PARSED_EXCESS_DAYS = createTemporalQuery(\"PARSED_EXCESS_DAYS\", function(temporal) {\n        if (temporal instanceof DateTimeBuilder) {\n            return temporal.excessDays;\n        } else {\n            return Period.ZERO;\n        }\n    });\n    DateTimeFormatter.PARSED_LEAP_SECOND = createTemporalQuery(\"PARSED_LEAP_SECOND\", function(temporal) {\n        if (temporal instanceof DateTimeBuilder) {\n            return temporal.leapSecond;\n        } else {\n            return false;\n        }\n    });\n}\nvar MonthDay = function(_TemporalAccessor) {\n    _inheritsLoose(MonthDay, _TemporalAccessor);\n    MonthDay.now = function now(zoneIdOrClock) {\n        if (arguments.length === 0) {\n            return MonthDay.now0();\n        } else if (arguments.length === 1 && zoneIdOrClock instanceof ZoneId) {\n            return MonthDay.nowZoneId(zoneIdOrClock);\n        } else {\n            return MonthDay.nowClock(zoneIdOrClock);\n        }\n    };\n    MonthDay.now0 = function now0() {\n        return this.nowClock(Clock.systemDefaultZone());\n    };\n    MonthDay.nowZoneId = function nowZoneId(zone) {\n        requireNonNull(zone, \"zone\");\n        return this.nowClock(Clock.system(zone));\n    };\n    MonthDay.nowClock = function nowClock(clock) {\n        requireNonNull(clock, \"clock\");\n        var now = LocalDate.now(clock);\n        return MonthDay.of(now.month(), now.dayOfMonth());\n    };\n    MonthDay.of = function of(monthOrNumber, number) {\n        if (arguments.length === 2 && monthOrNumber instanceof Month) {\n            return MonthDay.ofMonthNumber(monthOrNumber, number);\n        } else {\n            return MonthDay.ofNumberNumber(monthOrNumber, number);\n        }\n    };\n    MonthDay.ofMonthNumber = function ofMonthNumber(month, dayOfMonth) {\n        requireNonNull(month, \"month\");\n        ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        if (dayOfMonth > month.maxLength()) {\n            throw new DateTimeException(\"Illegal value for DayOfMonth field, value \" + dayOfMonth + \" is not valid for month \" + month.toString());\n        }\n        return new MonthDay(month.value(), dayOfMonth);\n    };\n    MonthDay.ofNumberNumber = function ofNumberNumber(month, dayOfMonth) {\n        requireNonNull(month, \"month\");\n        requireNonNull(dayOfMonth, \"dayOfMonth\");\n        return MonthDay.of(Month.of(month), dayOfMonth);\n    };\n    MonthDay.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        requireInstance(temporal, TemporalAccessor, \"temporal\");\n        if (temporal instanceof MonthDay) {\n            return temporal;\n        }\n        try {\n            return MonthDay.of(temporal.get(ChronoField.MONTH_OF_YEAR), temporal.get(ChronoField.DAY_OF_MONTH));\n        } catch (ex) {\n            throw new DateTimeException(\"Unable to obtain MonthDay from TemporalAccessor: \" + temporal + \", type \" + (temporal && temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n    };\n    MonthDay.parse = function parse(text, formatter) {\n        if (arguments.length === 1) {\n            return MonthDay.parseString(text);\n        } else {\n            return MonthDay.parseStringFormatter(text, formatter);\n        }\n    };\n    MonthDay.parseString = function parseString(text) {\n        return MonthDay.parseStringFormatter(text, PARSER$2);\n    };\n    MonthDay.parseStringFormatter = function parseStringFormatter(text, formatter) {\n        requireNonNull(text, \"text\");\n        requireNonNull(formatter, \"formatter\");\n        requireInstance(formatter, DateTimeFormatter, \"formatter\");\n        return formatter.parse(text, MonthDay.FROM);\n    };\n    function MonthDay(month, dayOfMonth) {\n        var _this;\n        _this = _TemporalAccessor.call(this) || this;\n        _this._month = MathUtil.safeToInt(month);\n        _this._day = MathUtil.safeToInt(dayOfMonth);\n        return _this;\n    }\n    var _proto = MonthDay.prototype;\n    _proto.monthValue = function monthValue() {\n        return this._month;\n    };\n    _proto.month = function month() {\n        return Month.of(this._month);\n    };\n    _proto.dayOfMonth = function dayOfMonth() {\n        return this._day;\n    };\n    _proto.isSupported = function isSupported(field) {\n        if (field instanceof ChronoField) {\n            return field === ChronoField.MONTH_OF_YEAR || field === ChronoField.DAY_OF_MONTH;\n        }\n        return field != null && field.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            return field.range();\n        } else if (field === ChronoField.DAY_OF_MONTH) {\n            return ValueRange.of(1, this.month().minLength(), this.month().maxLength());\n        }\n        return _TemporalAccessor.prototype.range.call(this, field);\n    };\n    _proto.get = function get(field) {\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    };\n    _proto.getLong = function getLong(field) {\n        requireNonNull(field, \"field\");\n        if (field instanceof ChronoField) {\n            switch(field){\n                case ChronoField.DAY_OF_MONTH:\n                    return this._day;\n                case ChronoField.MONTH_OF_YEAR:\n                    return this._month;\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.isValidYear = function isValidYear(year) {\n        return (this._day === 29 && this._month === 2 && Year.isLeap(year) === false) === false;\n    };\n    _proto.withMonth = function withMonth(month) {\n        return this.with(Month.of(month));\n    };\n    _proto.with = function _with(month) {\n        requireNonNull(month, \"month\");\n        if (month.value() === this._month) {\n            return this;\n        }\n        var day = Math.min(this._day, month.maxLength());\n        return new MonthDay(month.value(), day);\n    };\n    _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n        if (dayOfMonth === this._day) {\n            return this;\n        }\n        return MonthDay.of(this._month, dayOfMonth);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        requireInstance(_query, TemporalQuery, \"query\");\n        if (_query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        }\n        return _TemporalAccessor.prototype.query.call(this, _query);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        temporal = temporal.with(ChronoField.MONTH_OF_YEAR, this._month);\n        return temporal.with(ChronoField.DAY_OF_MONTH, Math.min(temporal.range(ChronoField.DAY_OF_MONTH).maximum(), this._day));\n    };\n    _proto.atYear = function atYear(year) {\n        return LocalDate.of(year, this._month, this.isValidYear(year) ? this._day : 28);\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, MonthDay, \"other\");\n        var cmp = this._month - other.monthValue();\n        if (cmp === 0) {\n            cmp = this._day - other.dayOfMonth();\n        }\n        return cmp;\n    };\n    _proto.isAfter = function isAfter(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, MonthDay, \"other\");\n        return this.compareTo(other) > 0;\n    };\n    _proto.isBefore = function isBefore(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, MonthDay, \"other\");\n        return this.compareTo(other) < 0;\n    };\n    _proto.equals = function equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof MonthDay) {\n            var other = obj;\n            return this.monthValue() === other.monthValue() && this.dayOfMonth() === other.dayOfMonth();\n        }\n        return false;\n    };\n    _proto.toString = function toString() {\n        return \"--\" + (this._month < 10 ? \"0\" : \"\") + this._month + (this._day < 10 ? \"-0\" : \"-\") + this._day;\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        requireInstance(formatter, DateTimeFormatter, \"formatter\");\n        return formatter.format(this);\n    };\n    return MonthDay;\n}(TemporalAccessor);\nvar PARSER$2;\nfunction _init$c() {\n    PARSER$2 = new DateTimeFormatterBuilder().appendLiteral(\"--\").appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral(\"-\").appendValue(ChronoField.DAY_OF_MONTH, 2).toFormatter();\n    MonthDay.FROM = createTemporalQuery(\"MonthDay.FROM\", function(temporal) {\n        return MonthDay.from(temporal);\n    });\n}\nvar YearMonth = function(_Temporal) {\n    _inheritsLoose(YearMonth, _Temporal);\n    YearMonth.now = function now(zoneIdOrClock) {\n        if (arguments.length === 0) {\n            return YearMonth.now0();\n        } else if (arguments.length === 1 && zoneIdOrClock instanceof ZoneId) {\n            return YearMonth.nowZoneId(zoneIdOrClock);\n        } else {\n            return YearMonth.nowClock(zoneIdOrClock);\n        }\n    };\n    YearMonth.now0 = function now0() {\n        return YearMonth.nowClock(Clock.systemDefaultZone());\n    };\n    YearMonth.nowZoneId = function nowZoneId(zone) {\n        return YearMonth.nowClock(Clock.system(zone));\n    };\n    YearMonth.nowClock = function nowClock(clock) {\n        var now = LocalDate.now(clock);\n        return YearMonth.of(now.year(), now.month());\n    };\n    YearMonth.of = function of(year, monthOrNumber) {\n        if (arguments.length === 2 && monthOrNumber instanceof Month) {\n            return YearMonth.ofNumberMonth(year, monthOrNumber);\n        } else {\n            return YearMonth.ofNumberNumber(year, monthOrNumber);\n        }\n    };\n    YearMonth.ofNumberMonth = function ofNumberMonth(year, month) {\n        requireNonNull(month, \"month\");\n        requireInstance(month, Month, \"month\");\n        return YearMonth.ofNumberNumber(year, month.value());\n    };\n    YearMonth.ofNumberNumber = function ofNumberNumber(year, month) {\n        requireNonNull(year, \"year\");\n        requireNonNull(month, \"month\");\n        ChronoField.YEAR.checkValidValue(year);\n        ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n        return new YearMonth(year, month);\n    };\n    YearMonth.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (temporal instanceof YearMonth) {\n            return temporal;\n        }\n        try {\n            return YearMonth.of(temporal.get(ChronoField.YEAR), temporal.get(ChronoField.MONTH_OF_YEAR));\n        } catch (ex) {\n            throw new DateTimeException(\"Unable to obtain YearMonth from TemporalAccessor: \" + temporal + \", type \" + (temporal && temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n    };\n    YearMonth.parse = function parse(text, formatter) {\n        if (arguments.length === 1) {\n            return YearMonth.parseString(text);\n        } else {\n            return YearMonth.parseStringFormatter(text, formatter);\n        }\n    };\n    YearMonth.parseString = function parseString(text) {\n        return YearMonth.parseStringFormatter(text, PARSER$1);\n    };\n    YearMonth.parseStringFormatter = function parseStringFormatter(text, formatter) {\n        requireNonNull(formatter, \"formatter\");\n        return formatter.parse(text, YearMonth.FROM);\n    };\n    function YearMonth(year, month) {\n        var _this;\n        _this = _Temporal.call(this) || this;\n        _this._year = MathUtil.safeToInt(year);\n        _this._month = MathUtil.safeToInt(month);\n        return _this;\n    }\n    var _proto = YearMonth.prototype;\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (arguments.length === 1 && fieldOrUnit instanceof TemporalField) {\n            return this.isSupportedField(fieldOrUnit);\n        } else {\n            return this.isSupportedUnit(fieldOrUnit);\n        }\n    };\n    _proto.isSupportedField = function isSupportedField(field) {\n        if (field instanceof ChronoField) {\n            return field === ChronoField.YEAR || field === ChronoField.MONTH_OF_YEAR || field === ChronoField.PROLEPTIC_MONTH || field === ChronoField.YEAR_OF_ERA || field === ChronoField.ERA;\n        }\n        return field != null && field.isSupportedBy(this);\n    };\n    _proto.isSupportedUnit = function isSupportedUnit(unit) {\n        if (unit instanceof ChronoUnit) {\n            return unit === ChronoUnit.MONTHS || unit === ChronoUnit.YEARS || unit === ChronoUnit.DECADES || unit === ChronoUnit.CENTURIES || unit === ChronoUnit.MILLENNIA || unit === ChronoUnit.ERAS;\n        }\n        return unit != null && unit.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        if (field === ChronoField.YEAR_OF_ERA) {\n            return this.year() <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE);\n        }\n        return _Temporal.prototype.range.call(this, field);\n    };\n    _proto.get = function get(field) {\n        requireNonNull(field, \"field\");\n        requireInstance(field, TemporalField, \"field\");\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    };\n    _proto.getLong = function getLong(field) {\n        requireNonNull(field, \"field\");\n        requireInstance(field, TemporalField, \"field\");\n        if (field instanceof ChronoField) {\n            switch(field){\n                case ChronoField.MONTH_OF_YEAR:\n                    return this._month;\n                case ChronoField.PROLEPTIC_MONTH:\n                    return this._getProlepticMonth();\n                case ChronoField.YEAR_OF_ERA:\n                    return this._year < 1 ? 1 - this._year : this._year;\n                case ChronoField.YEAR:\n                    return this._year;\n                case ChronoField.ERA:\n                    return this._year < 1 ? 0 : 1;\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    };\n    _proto._getProlepticMonth = function _getProlepticMonth() {\n        return MathUtil.safeAdd(MathUtil.safeMultiply(this._year, 12), this._month - 1);\n    };\n    _proto.year = function year() {\n        return this._year;\n    };\n    _proto.monthValue = function monthValue() {\n        return this._month;\n    };\n    _proto.month = function month() {\n        return Month.of(this._month);\n    };\n    _proto.isLeapYear = function isLeapYear() {\n        return IsoChronology.isLeapYear(this._year);\n    };\n    _proto.isValidDay = function isValidDay(dayOfMonth) {\n        return dayOfMonth >= 1 && dayOfMonth <= this.lengthOfMonth();\n    };\n    _proto.lengthOfMonth = function lengthOfMonth() {\n        return this.month().length(this.isLeapYear());\n    };\n    _proto.lengthOfYear = function lengthOfYear() {\n        return this.isLeapYear() ? 366 : 365;\n    };\n    _proto.with = function _with(adjusterOrField, value) {\n        if (arguments.length === 1) {\n            return this._withAdjuster(adjusterOrField);\n        } else {\n            return this._withField(adjusterOrField, value);\n        }\n    };\n    _proto._withField = function _withField(field, newValue) {\n        requireNonNull(field, \"field\");\n        requireInstance(field, TemporalField, \"field\");\n        if (field instanceof ChronoField) {\n            var f = field;\n            f.checkValidValue(newValue);\n            switch(f){\n                case ChronoField.MONTH_OF_YEAR:\n                    return this.withMonth(newValue);\n                case ChronoField.PROLEPTIC_MONTH:\n                    return this.plusMonths(newValue - this.getLong(ChronoField.PROLEPTIC_MONTH));\n                case ChronoField.YEAR_OF_ERA:\n                    return this.withYear(this._year < 1 ? 1 - newValue : newValue);\n                case ChronoField.YEAR:\n                    return this.withYear(newValue);\n                case ChronoField.ERA:\n                    return this.getLong(ChronoField.ERA) === newValue ? this : this.withYear(1 - this._year);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto.withYear = function withYear(year) {\n        ChronoField.YEAR.checkValidValue(year);\n        return new YearMonth(year, this._month);\n    };\n    _proto.withMonth = function withMonth(month) {\n        ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n        return new YearMonth(this._year, month);\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        requireNonNull(unit, \"unit\");\n        requireInstance(unit, TemporalUnit, \"unit\");\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.MONTHS:\n                    return this.plusMonths(amountToAdd);\n                case ChronoUnit.YEARS:\n                    return this.plusYears(amountToAdd);\n                case ChronoUnit.DECADES:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n                case ChronoUnit.CENTURIES:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n                case ChronoUnit.MILLENNIA:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n                case ChronoUnit.ERAS:\n                    return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusYears = function plusYears(yearsToAdd) {\n        if (yearsToAdd === 0) {\n            return this;\n        }\n        var newYear = ChronoField.YEAR.checkValidIntValue(this._year + yearsToAdd);\n        return this.withYear(newYear);\n    };\n    _proto.plusMonths = function plusMonths(monthsToAdd) {\n        if (monthsToAdd === 0) {\n            return this;\n        }\n        var monthCount = this._year * 12 + (this._month - 1);\n        var calcMonths = monthCount + monthsToAdd;\n        var newYear = ChronoField.YEAR.checkValidIntValue(MathUtil.floorDiv(calcMonths, 12));\n        var newMonth = MathUtil.floorMod(calcMonths, 12) + 1;\n        return new YearMonth(newYear, newMonth);\n    };\n    _proto.minusYears = function minusYears(yearsToSubtract) {\n        return yearsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusYears(MathUtil.MIN_SAFE_INTEGER).plusYears(1) : this.plusYears(-yearsToSubtract);\n    };\n    _proto.minusMonths = function minusMonths(monthsToSubtract) {\n        return monthsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusMonths(Math.MAX_SAFE_INTEGER).plusMonths(1) : this.plusMonths(-monthsToSubtract);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        requireInstance(_query, TemporalQuery, \"query\");\n        if (_query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.MONTHS;\n        } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n            return null;\n        }\n        return _Temporal.prototype.query.call(this, _query);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        requireInstance(temporal, Temporal, \"temporal\");\n        return temporal.with(ChronoField.PROLEPTIC_MONTH, this._getProlepticMonth());\n    };\n    _proto.until = function until(endExclusive, unit) {\n        requireNonNull(endExclusive, \"endExclusive\");\n        requireNonNull(unit, \"unit\");\n        requireInstance(endExclusive, Temporal, \"endExclusive\");\n        requireInstance(unit, TemporalUnit, \"unit\");\n        var end = YearMonth.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            var monthsUntil = end._getProlepticMonth() - this._getProlepticMonth();\n            switch(unit){\n                case ChronoUnit.MONTHS:\n                    return monthsUntil;\n                case ChronoUnit.YEARS:\n                    return MathUtil.intDiv(monthsUntil, 12);\n                case ChronoUnit.DECADES:\n                    return MathUtil.intDiv(monthsUntil, 120);\n                case ChronoUnit.CENTURIES:\n                    return MathUtil.intDiv(monthsUntil, 1200);\n                case ChronoUnit.MILLENNIA:\n                    return MathUtil.intDiv(monthsUntil, 12000);\n                case ChronoUnit.ERAS:\n                    return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    };\n    _proto.atDay = function atDay(dayOfMonth) {\n        requireNonNull(dayOfMonth, \"dayOfMonth\");\n        return LocalDate.of(this._year, this._month, dayOfMonth);\n    };\n    _proto.atEndOfMonth = function atEndOfMonth() {\n        return LocalDate.of(this._year, this._month, this.lengthOfMonth());\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, YearMonth, \"other\");\n        var cmp = this._year - other.year();\n        if (cmp === 0) {\n            cmp = this._month - other.monthValue();\n        }\n        return cmp;\n    };\n    _proto.isAfter = function isAfter(other) {\n        return this.compareTo(other) > 0;\n    };\n    _proto.isBefore = function isBefore(other) {\n        return this.compareTo(other) < 0;\n    };\n    _proto.equals = function equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof YearMonth) {\n            var other = obj;\n            return this.year() === other.year() && this.monthValue() === other.monthValue();\n        }\n        return false;\n    };\n    _proto.toString = function toString() {\n        return PARSER$1.format(this);\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        return formatter.format(this);\n    };\n    return YearMonth;\n}(Temporal);\nvar PARSER$1;\nfunction _init$b() {\n    PARSER$1 = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral(\"-\").appendValue(ChronoField.MONTH_OF_YEAR, 2).toFormatter();\n    YearMonth.FROM = createTemporalQuery(\"YearMonth.FROM\", function(temporal) {\n        return YearMonth.from(temporal);\n    });\n}\nvar Year = function(_Temporal) {\n    _inheritsLoose(Year, _Temporal);\n    function Year(value) {\n        var _this;\n        _this = _Temporal.call(this) || this;\n        _this._year = MathUtil.safeToInt(value);\n        return _this;\n    }\n    var _proto = Year.prototype;\n    _proto.value = function value() {\n        return this._year;\n    };\n    Year.now = function now(zoneIdOrClock) {\n        if (zoneIdOrClock === void 0) {\n            zoneIdOrClock = undefined;\n        }\n        if (zoneIdOrClock === undefined) {\n            return Year.now0();\n        } else if (zoneIdOrClock instanceof ZoneId) {\n            return Year.nowZoneId(zoneIdOrClock);\n        } else {\n            return Year.nowClock(zoneIdOrClock);\n        }\n    };\n    Year.now0 = function now0() {\n        return Year.nowClock(Clock.systemDefaultZone());\n    };\n    Year.nowZoneId = function nowZoneId(zone) {\n        requireNonNull(zone, \"zone\");\n        requireInstance(zone, ZoneId, \"zone\");\n        return Year.nowClock(Clock.system(zone));\n    };\n    Year.nowClock = function nowClock(clock) {\n        requireNonNull(clock, \"clock\");\n        requireInstance(clock, Clock, \"clock\");\n        var now = LocalDate.now(clock);\n        return Year.of(now.year());\n    };\n    Year.of = function of(isoYear) {\n        requireNonNull(isoYear, \"isoYear\");\n        ChronoField.YEAR.checkValidValue(isoYear);\n        return new Year(isoYear);\n    };\n    Year.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        requireInstance(temporal, TemporalAccessor, \"temporal\");\n        if (temporal instanceof Year) {\n            return temporal;\n        }\n        try {\n            return Year.of(temporal.get(ChronoField.YEAR));\n        } catch (ex) {\n            throw new DateTimeException(\"Unable to obtain Year from TemporalAccessor: \" + temporal + \", type \" + (temporal && temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n    };\n    Year.parse = function parse(text, formatter) {\n        if (arguments.length <= 1) {\n            return Year.parseText(text);\n        } else {\n            return Year.parseTextFormatter(text, formatter);\n        }\n    };\n    Year.parseText = function parseText(text) {\n        requireNonNull(text, \"text\");\n        return Year.parse(text, PARSER);\n    };\n    Year.parseTextFormatter = function parseTextFormatter(text, formatter) {\n        if (formatter === void 0) {\n            formatter = PARSER;\n        }\n        requireNonNull(text, \"text\");\n        requireNonNull(formatter, \"formatter\");\n        requireInstance(formatter, DateTimeFormatter, \"formatter\");\n        return formatter.parse(text, Year.FROM);\n    };\n    Year.isLeap = function isLeap(year) {\n        return MathUtil.intMod(year, 4) === 0 && (MathUtil.intMod(year, 100) !== 0 || MathUtil.intMod(year, 400) === 0);\n    };\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (arguments.length === 1 && fieldOrUnit instanceof TemporalField) {\n            return this.isSupportedField(fieldOrUnit);\n        } else {\n            return this.isSupportedUnit(fieldOrUnit);\n        }\n    };\n    _proto.isSupportedField = function isSupportedField(field) {\n        if (field instanceof ChronoField) {\n            return field === ChronoField.YEAR || field === ChronoField.YEAR_OF_ERA || field === ChronoField.ERA;\n        }\n        return field != null && field.isSupportedBy(this);\n    };\n    _proto.isSupportedUnit = function isSupportedUnit(unit) {\n        if (unit instanceof ChronoUnit) {\n            return unit === ChronoUnit.YEARS || unit === ChronoUnit.DECADES || unit === ChronoUnit.CENTURIES || unit === ChronoUnit.MILLENNIA || unit === ChronoUnit.ERAS;\n        }\n        return unit != null && unit.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        if (this.isSupported(field)) {\n            return field.range();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return _Temporal.prototype.range.call(this, field);\n    };\n    _proto.get = function get(field) {\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    };\n    _proto.getLong = function getLong(field) {\n        requireNonNull(field, \"field\");\n        if (field instanceof ChronoField) {\n            switch(field){\n                case ChronoField.YEAR_OF_ERA:\n                    return this._year < 1 ? 1 - this._year : this._year;\n                case ChronoField.YEAR:\n                    return this._year;\n                case ChronoField.ERA:\n                    return this._year < 1 ? 0 : 1;\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.isLeap = function isLeap() {\n        return Year.isLeap(this._year);\n    };\n    _proto._withField = function _withField(field, newValue) {\n        requireNonNull(field, \"field\");\n        requireInstance(field, TemporalField, \"field\");\n        if (field instanceof ChronoField) {\n            field.checkValidValue(newValue);\n            switch(field){\n                case ChronoField.YEAR_OF_ERA:\n                    return Year.of(this._year < 1 ? 1 - newValue : newValue);\n                case ChronoField.YEAR:\n                    return Year.of(newValue);\n                case ChronoField.ERA:\n                    return this.getLong(ChronoField.ERA) === newValue ? this : Year.of(1 - this._year);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        requireNonNull(amountToAdd, \"amountToAdd\");\n        requireNonNull(unit, \"unit\");\n        requireInstance(unit, TemporalUnit, \"unit\");\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.YEARS:\n                    return this.plusYears(amountToAdd);\n                case ChronoUnit.DECADES:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n                case ChronoUnit.CENTURIES:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n                case ChronoUnit.MILLENNIA:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n                case ChronoUnit.ERAS:\n                    return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusYears = function plusYears(yearsToAdd) {\n        if (yearsToAdd === 0) {\n            return this;\n        }\n        return Year.of(ChronoField.YEAR.checkValidIntValue(MathUtil.safeAdd(this._year, yearsToAdd)));\n    };\n    _proto.minusYears = function minusYears(yearsToSubtract) {\n        return yearsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusYears(MathUtil.MAX_SAFE_INTEGER).plusYears(1) : this.plusYears(-yearsToSubtract);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        return temporal.with(ChronoField.YEAR, this._year);\n    };\n    _proto.isValidMonthDay = function isValidMonthDay(monthDay) {\n        return monthDay != null && monthDay.isValidYear(this._year);\n    };\n    _proto.length = function length() {\n        return this.isLeap() ? 366 : 365;\n    };\n    _proto.atDay = function atDay(dayOfYear) {\n        return LocalDate.ofYearDay(this._year, dayOfYear);\n    };\n    _proto.atMonth = function atMonth(monthOrNumber) {\n        if (arguments.length === 1 && monthOrNumber instanceof Month) {\n            return this.atMonthMonth(monthOrNumber);\n        } else {\n            return this.atMonthNumber(monthOrNumber);\n        }\n    };\n    _proto.atMonthMonth = function atMonthMonth(month) {\n        requireNonNull(month, \"month\");\n        requireInstance(month, Month, \"month\");\n        return YearMonth.of(this._year, month);\n    };\n    _proto.atMonthNumber = function atMonthNumber(month) {\n        requireNonNull(month, \"month\");\n        return YearMonth.of(this._year, month);\n    };\n    _proto.atMonthDay = function atMonthDay(monthDay) {\n        requireNonNull(monthDay, \"monthDay\");\n        requireInstance(monthDay, MonthDay, \"monthDay\");\n        return monthDay.atYear(this._year);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query()\");\n        requireInstance(_query, TemporalQuery, \"query()\");\n        if (_query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.YEARS;\n        } else if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n            return null;\n        }\n        return _Temporal.prototype.query.call(this, _query);\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, Year, \"other\");\n        return this._year - other._year;\n    };\n    _proto.isAfter = function isAfter(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, Year, \"other\");\n        return this._year > other._year;\n    };\n    _proto.isBefore = function isBefore(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, Year, \"other\");\n        return this._year < other._year;\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        requireInstance(formatter, DateTimeFormatter, \"formatter\");\n        return formatter.format(this);\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof Year) {\n            return this.value() === other.value();\n        }\n        return false;\n    };\n    _proto.toString = function toString() {\n        return \"\" + this._year;\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.until = function until(endExclusive, unit) {\n        var end = Year.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            var yearsUntil = end.value() - this.value();\n            switch(unit){\n                case ChronoUnit.YEARS:\n                    return yearsUntil;\n                case ChronoUnit.DECADES:\n                    return MathUtil.intDiv(yearsUntil, 10);\n                case ChronoUnit.CENTURIES:\n                    return MathUtil.intDiv(yearsUntil, 100);\n                case ChronoUnit.MILLENNIA:\n                    return MathUtil.intDiv(yearsUntil, 1000);\n                case ChronoUnit.ERAS:\n                    return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    };\n    return Year;\n}(Temporal);\nvar PARSER;\nfunction _init$a() {\n    Year.MIN_VALUE = YearConstants.MIN_VALUE;\n    Year.MAX_VALUE = YearConstants.MAX_VALUE;\n    PARSER = new DateTimeFormatterBuilder().appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).toFormatter();\n    Year.FROM = createTemporalQuery(\"Year.FROM\", function(temporal) {\n        return Year.from(temporal);\n    });\n}\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var TemporalAdjuster = function() {\n    function TemporalAdjuster() {}\n    var _proto = TemporalAdjuster.prototype;\n    _proto.adjustInto = function adjustInto(temporal) {\n        abstractMethodFail(\"adjustInto\");\n    };\n    return TemporalAdjuster;\n}();\nvar TemporalAdjusters = function() {\n    function TemporalAdjusters() {}\n    TemporalAdjusters.firstDayOfMonth = function firstDayOfMonth() {\n        return Impl.FIRST_DAY_OF_MONTH;\n    };\n    TemporalAdjusters.lastDayOfMonth = function lastDayOfMonth() {\n        return Impl.LAST_DAY_OF_MONTH;\n    };\n    TemporalAdjusters.firstDayOfNextMonth = function firstDayOfNextMonth() {\n        return Impl.FIRST_DAY_OF_NEXT_MONTH;\n    };\n    TemporalAdjusters.firstDayOfYear = function firstDayOfYear() {\n        return Impl.FIRST_DAY_OF_YEAR;\n    };\n    TemporalAdjusters.lastDayOfYear = function lastDayOfYear() {\n        return Impl.LAST_DAY_OF_YEAR;\n    };\n    TemporalAdjusters.firstDayOfNextYear = function firstDayOfNextYear() {\n        return Impl.FIRST_DAY_OF_NEXT_YEAR;\n    };\n    TemporalAdjusters.firstInMonth = function firstInMonth(dayOfWeek) {\n        requireNonNull(dayOfWeek, \"dayOfWeek\");\n        return new DayOfWeekInMonth(1, dayOfWeek);\n    };\n    TemporalAdjusters.lastInMonth = function lastInMonth(dayOfWeek) {\n        requireNonNull(dayOfWeek, \"dayOfWeek\");\n        return new DayOfWeekInMonth(-1, dayOfWeek);\n    };\n    TemporalAdjusters.dayOfWeekInMonth = function dayOfWeekInMonth(ordinal, dayOfWeek) {\n        requireNonNull(dayOfWeek, \"dayOfWeek\");\n        return new DayOfWeekInMonth(ordinal, dayOfWeek);\n    };\n    TemporalAdjusters.next = function next(dayOfWeek) {\n        return new RelativeDayOfWeek(2, dayOfWeek);\n    };\n    TemporalAdjusters.nextOrSame = function nextOrSame(dayOfWeek) {\n        return new RelativeDayOfWeek(0, dayOfWeek);\n    };\n    TemporalAdjusters.previous = function previous(dayOfWeek) {\n        return new RelativeDayOfWeek(3, dayOfWeek);\n    };\n    TemporalAdjusters.previousOrSame = function previousOrSame(dayOfWeek) {\n        return new RelativeDayOfWeek(1, dayOfWeek);\n    };\n    return TemporalAdjusters;\n}();\nvar Impl = function(_TemporalAdjuster) {\n    _inheritsLoose(Impl, _TemporalAdjuster);\n    function Impl(ordinal) {\n        var _this;\n        _this = _TemporalAdjuster.call(this) || this;\n        _this._ordinal = ordinal;\n        return _this;\n    }\n    var _proto = Impl.prototype;\n    _proto.adjustInto = function adjustInto(temporal) {\n        switch(this._ordinal){\n            case 0:\n                return temporal.with(ChronoField.DAY_OF_MONTH, 1);\n            case 1:\n                return temporal.with(ChronoField.DAY_OF_MONTH, temporal.range(ChronoField.DAY_OF_MONTH).maximum());\n            case 2:\n                return temporal.with(ChronoField.DAY_OF_MONTH, 1).plus(1, ChronoUnit.MONTHS);\n            case 3:\n                return temporal.with(ChronoField.DAY_OF_YEAR, 1);\n            case 4:\n                return temporal.with(ChronoField.DAY_OF_YEAR, temporal.range(ChronoField.DAY_OF_YEAR).maximum());\n            case 5:\n                return temporal.with(ChronoField.DAY_OF_YEAR, 1).plus(1, ChronoUnit.YEARS);\n        }\n        throw new IllegalStateException(\"Unreachable\");\n    };\n    return Impl;\n}(TemporalAdjuster);\nImpl.FIRST_DAY_OF_MONTH = new Impl(0);\nImpl.LAST_DAY_OF_MONTH = new Impl(1);\nImpl.FIRST_DAY_OF_NEXT_MONTH = new Impl(2);\nImpl.FIRST_DAY_OF_YEAR = new Impl(3);\nImpl.LAST_DAY_OF_YEAR = new Impl(4);\nImpl.FIRST_DAY_OF_NEXT_YEAR = new Impl(5);\nvar DayOfWeekInMonth = function(_TemporalAdjuster2) {\n    _inheritsLoose(DayOfWeekInMonth, _TemporalAdjuster2);\n    function DayOfWeekInMonth(ordinal, dow) {\n        var _this2;\n        _this2 = _TemporalAdjuster2.call(this) || this;\n        _this2._ordinal = ordinal;\n        _this2._dowValue = dow.value();\n        return _this2;\n    }\n    var _proto2 = DayOfWeekInMonth.prototype;\n    _proto2.adjustInto = function adjustInto(temporal) {\n        if (this._ordinal >= 0) {\n            var temp = temporal.with(ChronoField.DAY_OF_MONTH, 1);\n            var curDow = temp.get(ChronoField.DAY_OF_WEEK);\n            var dowDiff = MathUtil.intMod(this._dowValue - curDow + 7, 7);\n            dowDiff += (this._ordinal - 1) * 7;\n            return temp.plus(dowDiff, ChronoUnit.DAYS);\n        } else {\n            var _temp = temporal.with(ChronoField.DAY_OF_MONTH, temporal.range(ChronoField.DAY_OF_MONTH).maximum());\n            var _curDow = _temp.get(ChronoField.DAY_OF_WEEK);\n            var daysDiff = this._dowValue - _curDow;\n            daysDiff = daysDiff === 0 ? 0 : daysDiff > 0 ? daysDiff - 7 : daysDiff;\n            daysDiff -= (-this._ordinal - 1) * 7;\n            return _temp.plus(daysDiff, ChronoUnit.DAYS);\n        }\n    };\n    return DayOfWeekInMonth;\n}(TemporalAdjuster);\nvar RelativeDayOfWeek = function(_TemporalAdjuster3) {\n    _inheritsLoose(RelativeDayOfWeek, _TemporalAdjuster3);\n    function RelativeDayOfWeek(relative, dayOfWeek) {\n        var _this3;\n        _this3 = _TemporalAdjuster3.call(this) || this;\n        requireNonNull(dayOfWeek, \"dayOfWeek\");\n        _this3._relative = relative;\n        _this3._dowValue = dayOfWeek.value();\n        return _this3;\n    }\n    var _proto3 = RelativeDayOfWeek.prototype;\n    _proto3.adjustInto = function adjustInto(temporal) {\n        var calDow = temporal.get(ChronoField.DAY_OF_WEEK);\n        if (this._relative < 2 && calDow === this._dowValue) {\n            return temporal;\n        }\n        if ((this._relative & 1) === 0) {\n            var daysDiff = calDow - this._dowValue;\n            return temporal.plus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, ChronoUnit.DAYS);\n        } else {\n            var _daysDiff = this._dowValue - calDow;\n            return temporal.minus(_daysDiff >= 0 ? 7 - _daysDiff : -_daysDiff, ChronoUnit.DAYS);\n        }\n    };\n    return RelativeDayOfWeek;\n}(TemporalAdjuster);\nvar IsoChronology = function(_Enum) {\n    _inheritsLoose(IsoChronology, _Enum);\n    function IsoChronology() {\n        return _Enum.apply(this, arguments) || this;\n    }\n    IsoChronology.isLeapYear = function isLeapYear(prolepticYear) {\n        return (prolepticYear & 3) === 0 && (prolepticYear % 100 !== 0 || prolepticYear % 400 === 0);\n    };\n    var _proto = IsoChronology.prototype;\n    _proto._updateResolveMap = function _updateResolveMap(fieldValues, field, value) {\n        requireNonNull(fieldValues, \"fieldValues\");\n        requireNonNull(field, \"field\");\n        var current = fieldValues.get(field);\n        if (current != null && current !== value) {\n            throw new DateTimeException(\"Invalid state, field: \" + field + \" \" + current + \" conflicts with \" + field + \" \" + value);\n        }\n        fieldValues.put(field, value);\n    };\n    _proto.resolveDate = function resolveDate(fieldValues, resolverStyle) {\n        if (fieldValues.containsKey(ChronoField.EPOCH_DAY)) {\n            return LocalDate.ofEpochDay(fieldValues.remove(ChronoField.EPOCH_DAY));\n        }\n        var prolepticMonth = fieldValues.remove(ChronoField.PROLEPTIC_MONTH);\n        if (prolepticMonth != null) {\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.PROLEPTIC_MONTH.checkValidValue(prolepticMonth);\n            }\n            this._updateResolveMap(fieldValues, ChronoField.MONTH_OF_YEAR, MathUtil.floorMod(prolepticMonth, 12) + 1);\n            this._updateResolveMap(fieldValues, ChronoField.YEAR, MathUtil.floorDiv(prolepticMonth, 12));\n        }\n        var yoeLong = fieldValues.remove(ChronoField.YEAR_OF_ERA);\n        if (yoeLong != null) {\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.YEAR_OF_ERA.checkValidValue(yoeLong);\n            }\n            var era = fieldValues.remove(ChronoField.ERA);\n            if (era == null) {\n                var year = fieldValues.get(ChronoField.YEAR);\n                if (resolverStyle === ResolverStyle.STRICT) {\n                    if (year != null) {\n                        this._updateResolveMap(fieldValues, ChronoField.YEAR, year > 0 ? yoeLong : MathUtil.safeSubtract(1, yoeLong));\n                    } else {\n                        fieldValues.put(ChronoField.YEAR_OF_ERA, yoeLong);\n                    }\n                } else {\n                    this._updateResolveMap(fieldValues, ChronoField.YEAR, year == null || year > 0 ? yoeLong : MathUtil.safeSubtract(1, yoeLong));\n                }\n            } else if (era === 1) {\n                this._updateResolveMap(fieldValues, ChronoField.YEAR, yoeLong);\n            } else if (era === 0) {\n                this._updateResolveMap(fieldValues, ChronoField.YEAR, MathUtil.safeSubtract(1, yoeLong));\n            } else {\n                throw new DateTimeException(\"Invalid value for era: \" + era);\n            }\n        } else if (fieldValues.containsKey(ChronoField.ERA)) {\n            ChronoField.ERA.checkValidValue(fieldValues.get(ChronoField.ERA));\n        }\n        if (fieldValues.containsKey(ChronoField.YEAR)) {\n            if (fieldValues.containsKey(ChronoField.MONTH_OF_YEAR)) {\n                if (fieldValues.containsKey(ChronoField.DAY_OF_MONTH)) {\n                    var y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                    var moy = fieldValues.remove(ChronoField.MONTH_OF_YEAR);\n                    var dom = fieldValues.remove(ChronoField.DAY_OF_MONTH);\n                    if (resolverStyle === ResolverStyle.LENIENT) {\n                        var months = moy - 1;\n                        var days = dom - 1;\n                        return LocalDate.of(y, 1, 1).plusMonths(months).plusDays(days);\n                    } else if (resolverStyle === ResolverStyle.SMART) {\n                        ChronoField.DAY_OF_MONTH.checkValidValue(dom);\n                        if (moy === 4 || moy === 6 || moy === 9 || moy === 11) {\n                            dom = Math.min(dom, 30);\n                        } else if (moy === 2) {\n                            dom = Math.min(dom, Month.FEBRUARY.length(Year.isLeap(y)));\n                        }\n                        return LocalDate.of(y, moy, dom);\n                    } else {\n                        return LocalDate.of(y, moy, dom);\n                    }\n                }\n            }\n            if (fieldValues.containsKey(ChronoField.DAY_OF_YEAR)) {\n                var _y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                if (resolverStyle === ResolverStyle.LENIENT) {\n                    var _days = MathUtil.safeSubtract(fieldValues.remove(ChronoField.DAY_OF_YEAR), 1);\n                    return LocalDate.ofYearDay(_y, 1).plusDays(_days);\n                }\n                var doy = ChronoField.DAY_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.DAY_OF_YEAR));\n                return LocalDate.ofYearDay(_y, doy);\n            }\n            if (fieldValues.containsKey(ChronoField.ALIGNED_WEEK_OF_YEAR)) {\n                if (fieldValues.containsKey(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR)) {\n                    var _y2 = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                    if (resolverStyle === ResolverStyle.LENIENT) {\n                        var weeks = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR), 1);\n                        var _days2 = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR), 1);\n                        return LocalDate.of(_y2, 1, 1).plusWeeks(weeks).plusDays(_days2);\n                    }\n                    var aw = ChronoField.ALIGNED_WEEK_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR));\n                    var ad = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));\n                    var date = LocalDate.of(_y2, 1, 1).plusDays((aw - 1) * 7 + (ad - 1));\n                    if (resolverStyle === ResolverStyle.STRICT && date.get(ChronoField.YEAR) !== _y2) {\n                        throw new DateTimeException(\"Strict mode rejected date parsed to a different year\");\n                    }\n                    return date;\n                }\n                if (fieldValues.containsKey(ChronoField.DAY_OF_WEEK)) {\n                    var _y3 = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                    if (resolverStyle === ResolverStyle.LENIENT) {\n                        var _weeks = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR), 1);\n                        var _days3 = MathUtil.safeSubtract(fieldValues.remove(ChronoField.DAY_OF_WEEK), 1);\n                        return LocalDate.of(_y3, 1, 1).plusWeeks(_weeks).plusDays(_days3);\n                    }\n                    var _aw = ChronoField.ALIGNED_WEEK_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR));\n                    var dow = ChronoField.DAY_OF_WEEK.checkValidIntValue(fieldValues.remove(ChronoField.DAY_OF_WEEK));\n                    var _date = LocalDate.of(_y3, 1, 1).plusWeeks(_aw - 1).with(TemporalAdjusters.nextOrSame(DayOfWeek.of(dow)));\n                    if (resolverStyle === ResolverStyle.STRICT && _date.get(ChronoField.YEAR) !== _y3) {\n                        throw new DateTimeException(\"Strict mode rejected date parsed to a different month\");\n                    }\n                    return _date;\n                }\n            }\n        }\n        return null;\n    };\n    _proto.date = function date(temporal) {\n        return LocalDate.from(temporal);\n    };\n    return IsoChronology;\n}(Enum);\nfunction _init$9() {\n    IsoChronology.INSTANCE = new IsoChronology(\"IsoChronology\");\n}\nvar OffsetTime = function(_Temporal) {\n    _inheritsLoose(OffsetTime, _Temporal);\n    OffsetTime.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (temporal instanceof OffsetTime) {\n            return temporal;\n        } else if (temporal instanceof OffsetDateTime) {\n            return temporal.toOffsetTime();\n        }\n        try {\n            var time = LocalTime.from(temporal);\n            var offset = ZoneOffset.from(temporal);\n            return new OffsetTime(time, offset);\n        } catch (ex) {\n            throw new DateTimeException(\"Unable to obtain OffsetTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n    };\n    OffsetTime.now = function now(clockOrZone) {\n        if (arguments.length === 0) {\n            return OffsetTime._now(Clock.systemDefaultZone());\n        } else if (clockOrZone instanceof Clock) {\n            return OffsetTime._now(clockOrZone);\n        } else {\n            return OffsetTime._now(Clock.system(clockOrZone));\n        }\n    };\n    OffsetTime._now = function _now(clock) {\n        requireNonNull(clock, \"clock\");\n        var now = clock.instant();\n        return OffsetTime.ofInstant(now, clock.zone().rules().offset(now));\n    };\n    OffsetTime.of = function of() {\n        if (arguments.length <= 2) {\n            return OffsetTime.ofTimeAndOffset.apply(this, arguments);\n        } else {\n            return OffsetTime.ofNumbers.apply(this, arguments);\n        }\n    };\n    OffsetTime.ofNumbers = function ofNumbers(hour, minute, second, nanoOfSecond, offset) {\n        var time = LocalTime.of(hour, minute, second, nanoOfSecond);\n        return new OffsetTime(time, offset);\n    };\n    OffsetTime.ofTimeAndOffset = function ofTimeAndOffset(time, offset) {\n        return new OffsetTime(time, offset);\n    };\n    OffsetTime.ofInstant = function ofInstant(instant, zone) {\n        requireNonNull(instant, \"instant\");\n        requireInstance(instant, Instant, \"instant\");\n        requireNonNull(zone, \"zone\");\n        requireInstance(zone, ZoneId, \"zone\");\n        var rules = zone.rules();\n        var offset = rules.offset(instant);\n        var secsOfDay = instant.epochSecond() % LocalTime.SECONDS_PER_DAY;\n        secsOfDay = (secsOfDay + offset.totalSeconds()) % LocalTime.SECONDS_PER_DAY;\n        if (secsOfDay < 0) {\n            secsOfDay += LocalTime.SECONDS_PER_DAY;\n        }\n        var time = LocalTime.ofSecondOfDay(secsOfDay, instant.nano());\n        return new OffsetTime(time, offset);\n    };\n    OffsetTime.parse = function parse(text, formatter) {\n        if (formatter === void 0) {\n            formatter = DateTimeFormatter.ISO_OFFSET_TIME;\n        }\n        requireNonNull(formatter, \"formatter\");\n        return formatter.parse(text, OffsetTime.FROM);\n    };\n    function OffsetTime(time, offset) {\n        var _this;\n        _this = _Temporal.call(this) || this;\n        requireNonNull(time, \"time\");\n        requireInstance(time, LocalTime, \"time\");\n        requireNonNull(offset, \"offset\");\n        requireInstance(offset, ZoneOffset, \"offset\");\n        _this._time = time;\n        _this._offset = offset;\n        return _this;\n    }\n    var _proto = OffsetTime.prototype;\n    _proto.adjustInto = function adjustInto(temporal) {\n        return temporal.with(ChronoField.NANO_OF_DAY, this._time.toNanoOfDay()).with(ChronoField.OFFSET_SECONDS, this.offset().totalSeconds());\n    };\n    _proto.atDate = function atDate(date) {\n        return OffsetDateTime.of(date, this._time, this._offset);\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        return formatter.format(this, OffsetTime.FROM);\n    };\n    _proto.get = function get(field) {\n        return _Temporal.prototype.get.call(this, field);\n    };\n    _proto.getLong = function getLong(field) {\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.OFFSET_SECONDS) {\n                return this._offset.totalSeconds();\n            }\n            return this._time.getLong(field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.hour = function hour() {\n        return this._time.hour();\n    };\n    _proto.minute = function minute() {\n        return this._time.minute();\n    };\n    _proto.second = function second() {\n        return this._time.second();\n    };\n    _proto.nano = function nano() {\n        return this._time.nano();\n    };\n    _proto.offset = function offset() {\n        return this._offset;\n    };\n    _proto.isAfter = function isAfter(other) {\n        requireNonNull(other, \"other\");\n        return this._toEpochNano() > other._toEpochNano();\n    };\n    _proto.isBefore = function isBefore(other) {\n        requireNonNull(other, \"other\");\n        return this._toEpochNano() < other._toEpochNano();\n    };\n    _proto.isEqual = function isEqual(other) {\n        requireNonNull(other, \"other\");\n        return this._toEpochNano() === other._toEpochNano();\n    };\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoField.OFFSET_SECONDS;\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    };\n    _proto.minusHours = function minusHours(hours) {\n        return this._withLocalTimeOffset(this._time.minusHours(hours), this._offset);\n    };\n    _proto.minusMinutes = function minusMinutes(minutes) {\n        return this._withLocalTimeOffset(this._time.minusMinutes(minutes), this._offset);\n    };\n    _proto.minusSeconds = function minusSeconds(seconds) {\n        return this._withLocalTimeOffset(this._time.minusSeconds(seconds), this._offset);\n    };\n    _proto.minusNanos = function minusNanos(nanos) {\n        return this._withLocalTimeOffset(this._time.minusNanos(nanos), this._offset);\n    };\n    _proto._minusAmount = function _minusAmount(amount) {\n        requireNonNull(amount);\n        return amount.subtractFrom(this);\n    };\n    _proto._minusUnit = function _minusUnit(amountToSubtract, unit) {\n        return this.plus(-1 * amountToSubtract, unit);\n    };\n    _proto._plusAmount = function _plusAmount(amount) {\n        requireNonNull(amount);\n        return amount.addTo(this);\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        if (unit instanceof ChronoUnit) {\n            return this._withLocalTimeOffset(this._time.plus(amountToAdd, unit), this._offset);\n        }\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusHours = function plusHours(hours) {\n        return this._withLocalTimeOffset(this._time.plusHours(hours), this._offset);\n    };\n    _proto.plusMinutes = function plusMinutes(minutes) {\n        return this._withLocalTimeOffset(this._time.plusMinutes(minutes), this._offset);\n    };\n    _proto.plusSeconds = function plusSeconds(seconds) {\n        return this._withLocalTimeOffset(this._time.plusSeconds(seconds), this._offset);\n    };\n    _proto.plusNanos = function plusNanos(nanos) {\n        return this._withLocalTimeOffset(this._time.plusNanos(nanos), this._offset);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n            return this.offset();\n        } else if (_query === TemporalQueries.localTime()) {\n            return this._time;\n        } else if (_query === TemporalQueries.chronology() || _query === TemporalQueries.localDate() || _query === TemporalQueries.zoneId()) {\n            return null;\n        }\n        return _Temporal.prototype.query.call(this, _query);\n    };\n    _proto.range = function range(field) {\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.OFFSET_SECONDS) {\n                return field.range();\n            }\n            return this._time.range(field);\n        }\n        return field.rangeRefinedBy(this);\n    };\n    _proto.toLocalTime = function toLocalTime() {\n        return this._time;\n    };\n    _proto.truncatedTo = function truncatedTo(unit) {\n        return this._withLocalTimeOffset(this._time.truncatedTo(unit), this._offset);\n    };\n    _proto.until = function until(endExclusive, unit) {\n        requireNonNull(endExclusive, \"endExclusive\");\n        requireNonNull(unit, \"unit\");\n        var end = OffsetTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            var nanosUntil = end._toEpochNano() - this._toEpochNano();\n            switch(unit){\n                case ChronoUnit.NANOS:\n                    return nanosUntil;\n                case ChronoUnit.MICROS:\n                    return MathUtil.intDiv(nanosUntil, 1000);\n                case ChronoUnit.MILLIS:\n                    return MathUtil.intDiv(nanosUntil, 1000000);\n                case ChronoUnit.SECONDS:\n                    return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_SECOND);\n                case ChronoUnit.MINUTES:\n                    return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_MINUTE);\n                case ChronoUnit.HOURS:\n                    return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_HOUR);\n                case ChronoUnit.HALF_DAYS:\n                    return MathUtil.intDiv(nanosUntil, 12 * LocalTime.NANOS_PER_HOUR);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    };\n    _proto.withHour = function withHour(hour) {\n        return this._withLocalTimeOffset(this._time.withHour(hour), this._offset);\n    };\n    _proto.withMinute = function withMinute(minute) {\n        return this._withLocalTimeOffset(this._time.withMinute(minute), this._offset);\n    };\n    _proto.withSecond = function withSecond(second) {\n        return this._withLocalTimeOffset(this._time.withSecond(second), this._offset);\n    };\n    _proto.withNano = function withNano(nano) {\n        return this._withLocalTimeOffset(this._time.withNano(nano), this._offset);\n    };\n    _proto.withOffsetSameInstant = function withOffsetSameInstant(offset) {\n        requireNonNull(offset, \"offset\");\n        if (offset.equals(this._offset)) {\n            return this;\n        }\n        var difference = offset.totalSeconds() - this._offset.totalSeconds();\n        var adjusted = this._time.plusSeconds(difference);\n        return new OffsetTime(adjusted, offset);\n    };\n    _proto.withOffsetSameLocal = function withOffsetSameLocal(offset) {\n        return offset != null && offset.equals(this._offset) ? this : new OffsetTime(this._time, offset);\n    };\n    _proto._toEpochNano = function _toEpochNano() {\n        var nod = this._time.toNanoOfDay();\n        var offsetNanos = this._offset.totalSeconds() * LocalTime.NANOS_PER_SECOND;\n        return nod - offsetNanos;\n    };\n    _proto._withAdjuster = function _withAdjuster(adjuster) {\n        requireNonNull(adjuster, \"adjuster\");\n        if (adjuster instanceof LocalTime) {\n            return this._withLocalTimeOffset(adjuster, this._offset);\n        } else if (adjuster instanceof ZoneOffset) {\n            return this._withLocalTimeOffset(this._time, adjuster);\n        } else if (adjuster instanceof OffsetTime) {\n            return adjuster;\n        }\n        return adjuster.adjustInto(this);\n    };\n    _proto._withField = function _withField(field, newValue) {\n        requireNonNull(field, \"field\");\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.OFFSET_SECONDS) {\n                return this._withLocalTimeOffset(this._time, ZoneOffset.ofTotalSeconds(field.checkValidIntValue(newValue)));\n            }\n            return this._withLocalTimeOffset(this._time.with(field, newValue), this._offset);\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto._withLocalTimeOffset = function _withLocalTimeOffset(time, offset) {\n        if (this._time === time && this._offset.equals(offset)) {\n            return this;\n        }\n        return new OffsetTime(time, offset);\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, OffsetTime, \"other\");\n        if (this._offset.equals(other._offset)) {\n            return this._time.compareTo(other._time);\n        }\n        var compare = MathUtil.compareNumbers(this._toEpochNano(), other._toEpochNano());\n        if (compare === 0) {\n            return this._time.compareTo(other._time);\n        }\n        return compare;\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof OffsetTime) {\n            return this._time.equals(other._time) && this._offset.equals(other._offset);\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return this._time.hashCode() ^ this._offset.hashCode();\n    };\n    _proto.toString = function toString() {\n        return this._time.toString() + this._offset.toString();\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    return OffsetTime;\n}(Temporal);\nfunction _init$8() {\n    OffsetTime.MIN = OffsetTime.ofNumbers(0, 0, 0, 0, ZoneOffset.MAX);\n    OffsetTime.MAX = OffsetTime.ofNumbers(23, 59, 59, 999999999, ZoneOffset.MIN);\n    OffsetTime.FROM = createTemporalQuery(\"OffsetTime.FROM\", function(temporal) {\n        return OffsetTime.from(temporal);\n    });\n}\nvar ChronoZonedDateTime = function(_Temporal) {\n    _inheritsLoose(ChronoZonedDateTime, _Temporal);\n    function ChronoZonedDateTime() {\n        return _Temporal.apply(this, arguments) || this;\n    }\n    var _proto = ChronoZonedDateTime.prototype;\n    _proto.query = function query(_query) {\n        if (_query === TemporalQueries.zoneId() || _query === TemporalQueries.zone()) {\n            return this.zone();\n        } else if (_query === TemporalQueries.chronology()) {\n            return this.toLocalDate().chronology();\n        } else if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (_query === TemporalQueries.offset()) {\n            return this.offset();\n        } else if (_query === TemporalQueries.localDate()) {\n            return LocalDate.ofEpochDay(this.toLocalDate().toEpochDay());\n        } else if (_query === TemporalQueries.localTime()) {\n            return this.toLocalTime();\n        }\n        return _Temporal.prototype.query.call(this, _query);\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        return formatter.format(this);\n    };\n    _proto.toInstant = function toInstant() {\n        return Instant.ofEpochSecond(this.toEpochSecond(), this.toLocalTime().nano());\n    };\n    _proto.toEpochSecond = function toEpochSecond() {\n        var epochDay = this.toLocalDate().toEpochDay();\n        var secs = epochDay * 86400 + this.toLocalTime().toSecondOfDay();\n        secs -= this.offset().totalSeconds();\n        return secs;\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        var cmp = MathUtil.compareNumbers(this.toEpochSecond(), other.toEpochSecond());\n        if (cmp === 0) {\n            cmp = this.toLocalTime().nano() - other.toLocalTime().nano();\n            if (cmp === 0) {\n                cmp = this.toLocalDateTime().compareTo(other.toLocalDateTime());\n                if (cmp === 0) {\n                    cmp = strcmp(this.zone().id(), other.zone().id());\n                }\n            }\n        }\n        return cmp;\n    };\n    _proto.isAfter = function isAfter(other) {\n        requireNonNull(other, \"other\");\n        var thisEpochSec = this.toEpochSecond();\n        var otherEpochSec = other.toEpochSecond();\n        return thisEpochSec > otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() > other.toLocalTime().nano();\n    };\n    _proto.isBefore = function isBefore(other) {\n        requireNonNull(other, \"other\");\n        var thisEpochSec = this.toEpochSecond();\n        var otherEpochSec = other.toEpochSecond();\n        return thisEpochSec < otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() < other.toLocalTime().nano();\n    };\n    _proto.isEqual = function isEqual(other) {\n        requireNonNull(other, \"other\");\n        return this.toEpochSecond() === other.toEpochSecond() && this.toLocalTime().nano() === other.toLocalTime().nano();\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ChronoZonedDateTime) {\n            return this.compareTo(other) === 0;\n        }\n        return false;\n    };\n    return ChronoZonedDateTime;\n}(Temporal);\nfunction strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nvar ZonedDateTime = function(_ChronoZonedDateTime) {\n    _inheritsLoose(ZonedDateTime, _ChronoZonedDateTime);\n    ZonedDateTime.now = function now(clockOrZone) {\n        var clock;\n        if (clockOrZone instanceof ZoneId) {\n            clock = Clock.system(clockOrZone);\n        } else {\n            clock = clockOrZone == null ? Clock.systemDefaultZone() : clockOrZone;\n        }\n        return ZonedDateTime.ofInstant(clock.instant(), clock.zone());\n    };\n    ZonedDateTime.of = function of() {\n        if (arguments.length <= 2) {\n            return ZonedDateTime.of2.apply(this, arguments);\n        } else if (arguments.length === 3 && arguments[0] instanceof LocalDate) {\n            return ZonedDateTime.of3.apply(this, arguments);\n        } else {\n            return ZonedDateTime.of8.apply(this, arguments);\n        }\n    };\n    ZonedDateTime.of3 = function of3(date, time, zone) {\n        return ZonedDateTime.of2(LocalDateTime.of(date, time), zone);\n    };\n    ZonedDateTime.of2 = function of2(localDateTime, zone) {\n        return ZonedDateTime.ofLocal(localDateTime, zone, null);\n    };\n    ZonedDateTime.of8 = function of8(year, month, dayOfMonth, hour, minute, second, nanoOfSecond, zone) {\n        var dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);\n        return ZonedDateTime.ofLocal(dt, zone, null);\n    };\n    ZonedDateTime.ofLocal = function ofLocal(localDateTime, zone, preferredOffset) {\n        requireNonNull(localDateTime, \"localDateTime\");\n        requireNonNull(zone, \"zone\");\n        if (zone instanceof ZoneOffset) {\n            return new ZonedDateTime(localDateTime, zone, zone);\n        }\n        var offset = null;\n        var rules = zone.rules();\n        var validOffsets = rules.validOffsets(localDateTime);\n        if (validOffsets.length === 1) {\n            offset = validOffsets[0];\n        } else if (validOffsets.length === 0) {\n            var trans = rules.transition(localDateTime);\n            localDateTime = localDateTime.plusSeconds(trans.duration().seconds());\n            offset = trans.offsetAfter();\n        } else {\n            if (preferredOffset != null && validOffsets.some(function(validOffset) {\n                return validOffset.equals(preferredOffset);\n            })) {\n                offset = preferredOffset;\n            } else {\n                offset = requireNonNull(validOffsets[0], \"offset\");\n            }\n        }\n        return new ZonedDateTime(localDateTime, offset, zone);\n    };\n    ZonedDateTime.ofInstant = function ofInstant() {\n        if (arguments.length === 2) {\n            return ZonedDateTime.ofInstant2.apply(this, arguments);\n        } else {\n            return ZonedDateTime.ofInstant3.apply(this, arguments);\n        }\n    };\n    ZonedDateTime.ofInstant2 = function ofInstant2(instant, zone) {\n        requireNonNull(instant, \"instant\");\n        requireNonNull(zone, \"zone\");\n        return ZonedDateTime._create(instant.epochSecond(), instant.nano(), zone);\n    };\n    ZonedDateTime.ofInstant3 = function ofInstant3(localDateTime, offset, zone) {\n        requireNonNull(localDateTime, \"localDateTime\");\n        requireNonNull(offset, \"offset\");\n        requireNonNull(zone, \"zone\");\n        return ZonedDateTime._create(localDateTime.toEpochSecond(offset), localDateTime.nano(), zone);\n    };\n    ZonedDateTime._create = function _create(epochSecond, nanoOfSecond, zone) {\n        var rules = zone.rules();\n        var instant = Instant.ofEpochSecond(epochSecond, nanoOfSecond);\n        var offset = rules.offset(instant);\n        var ldt = LocalDateTime.ofEpochSecond(epochSecond, nanoOfSecond, offset);\n        return new ZonedDateTime(ldt, offset, zone);\n    };\n    ZonedDateTime.ofStrict = function ofStrict(localDateTime, offset, zone) {\n        requireNonNull(localDateTime, \"localDateTime\");\n        requireNonNull(offset, \"offset\");\n        requireNonNull(zone, \"zone\");\n        var rules = zone.rules();\n        if (rules.isValidOffset(localDateTime, offset) === false) {\n            var trans = rules.transition(localDateTime);\n            if (trans != null && trans.isGap()) {\n                throw new DateTimeException(\"LocalDateTime \" + localDateTime + \" does not exist in zone \" + zone + \" due to a gap in the local time-line, typically caused by daylight savings\");\n            }\n            throw new DateTimeException('ZoneOffset \"' + offset + '\" is not valid for LocalDateTime \"' + localDateTime + '\" in zone \"' + zone + '\"');\n        }\n        return new ZonedDateTime(localDateTime, offset, zone);\n    };\n    ZonedDateTime.ofLenient = function ofLenient(localDateTime, offset, zone) {\n        requireNonNull(localDateTime, \"localDateTime\");\n        requireNonNull(offset, \"offset\");\n        requireNonNull(zone, \"zone\");\n        if (zone instanceof ZoneOffset && offset.equals(zone) === false) {\n            throw new IllegalArgumentException(\"ZoneId must match ZoneOffset\");\n        }\n        return new ZonedDateTime(localDateTime, offset, zone);\n    };\n    ZonedDateTime.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (temporal instanceof ZonedDateTime) {\n            return temporal;\n        }\n        var zone = ZoneId.from(temporal);\n        if (temporal.isSupported(ChronoField.INSTANT_SECONDS)) {\n            var zdt = ZonedDateTime._from(temporal, zone);\n            if (zdt != null) return zdt;\n        }\n        var ldt = LocalDateTime.from(temporal);\n        return ZonedDateTime.of2(ldt, zone);\n    };\n    ZonedDateTime._from = function _from(temporal, zone) {\n        try {\n            return ZonedDateTime.__from(temporal, zone);\n        } catch (ex) {\n            if (!(ex instanceof DateTimeException)) throw ex;\n        }\n    };\n    ZonedDateTime.__from = function __from(temporal, zone) {\n        var epochSecond = temporal.getLong(ChronoField.INSTANT_SECONDS);\n        var nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n        return ZonedDateTime._create(epochSecond, nanoOfSecond, zone);\n    };\n    ZonedDateTime.parse = function parse(text, formatter) {\n        if (formatter === void 0) {\n            formatter = DateTimeFormatter.ISO_ZONED_DATE_TIME;\n        }\n        requireNonNull(formatter, \"formatter\");\n        return formatter.parse(text, ZonedDateTime.FROM);\n    };\n    function ZonedDateTime(dateTime, offset, zone) {\n        var _this;\n        requireNonNull(dateTime, \"dateTime\");\n        requireNonNull(offset, \"offset\");\n        requireNonNull(zone, \"zone\");\n        _this = _ChronoZonedDateTime.call(this) || this;\n        _this._dateTime = dateTime;\n        _this._offset = offset;\n        _this._zone = zone;\n        return _this;\n    }\n    var _proto = ZonedDateTime.prototype;\n    _proto._resolveLocal = function _resolveLocal(newDateTime) {\n        requireNonNull(newDateTime, \"newDateTime\");\n        return ZonedDateTime.ofLocal(newDateTime, this._zone, this._offset);\n    };\n    _proto._resolveInstant = function _resolveInstant(newDateTime) {\n        return ZonedDateTime.ofInstant3(newDateTime, this._offset, this._zone);\n    };\n    _proto._resolveOffset = function _resolveOffset(offset) {\n        if (offset.equals(this._offset) === false && this._zone.rules().isValidOffset(this._dateTime, offset)) {\n            return new ZonedDateTime(this._dateTime, offset, this._zone);\n        }\n        return this;\n    };\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return true;\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.INSTANT_SECONDS || field === ChronoField.OFFSET_SECONDS) {\n                return field.range();\n            }\n            return this._dateTime.range(field);\n        }\n        return field.rangeRefinedBy(this);\n    };\n    _proto.get = function get(field) {\n        return this.getLong(field);\n    };\n    _proto.getLong = function getLong(field) {\n        if (field instanceof ChronoField) {\n            switch(field){\n                case ChronoField.INSTANT_SECONDS:\n                    return this.toEpochSecond();\n                case ChronoField.OFFSET_SECONDS:\n                    return this._offset.totalSeconds();\n            }\n            return this._dateTime.getLong(field);\n        }\n        requireNonNull(field, \"field\");\n        return field.getFrom(this);\n    };\n    _proto.offset = function offset() {\n        return this._offset;\n    };\n    _proto.withEarlierOffsetAtOverlap = function withEarlierOffsetAtOverlap() {\n        var trans = this._zone.rules().transition(this._dateTime);\n        if (trans != null && trans.isOverlap()) {\n            var earlierOffset = trans.offsetBefore();\n            if (earlierOffset.equals(this._offset) === false) {\n                return new ZonedDateTime(this._dateTime, earlierOffset, this._zone);\n            }\n        }\n        return this;\n    };\n    _proto.withLaterOffsetAtOverlap = function withLaterOffsetAtOverlap() {\n        var trans = this._zone.rules().transition(this.toLocalDateTime());\n        if (trans != null) {\n            var laterOffset = trans.offsetAfter();\n            if (laterOffset.equals(this._offset) === false) {\n                return new ZonedDateTime(this._dateTime, laterOffset, this._zone);\n            }\n        }\n        return this;\n    };\n    _proto.zone = function zone() {\n        return this._zone;\n    };\n    _proto.withZoneSameLocal = function withZoneSameLocal(zone) {\n        requireNonNull(zone, \"zone\");\n        return this._zone.equals(zone) ? this : ZonedDateTime.ofLocal(this._dateTime, zone, this._offset);\n    };\n    _proto.withZoneSameInstant = function withZoneSameInstant(zone) {\n        requireNonNull(zone, \"zone\");\n        return this._zone.equals(zone) ? this : ZonedDateTime._create(this._dateTime.toEpochSecond(this._offset), this._dateTime.nano(), zone);\n    };\n    _proto.withFixedOffsetZone = function withFixedOffsetZone() {\n        return this._zone.equals(this._offset) ? this : new ZonedDateTime(this._dateTime, this._offset, this._offset);\n    };\n    _proto.year = function year() {\n        return this._dateTime.year();\n    };\n    _proto.monthValue = function monthValue() {\n        return this._dateTime.monthValue();\n    };\n    _proto.month = function month() {\n        return this._dateTime.month();\n    };\n    _proto.dayOfMonth = function dayOfMonth() {\n        return this._dateTime.dayOfMonth();\n    };\n    _proto.dayOfYear = function dayOfYear() {\n        return this._dateTime.dayOfYear();\n    };\n    _proto.dayOfWeek = function dayOfWeek() {\n        return this._dateTime.dayOfWeek();\n    };\n    _proto.hour = function hour() {\n        return this._dateTime.hour();\n    };\n    _proto.minute = function minute() {\n        return this._dateTime.minute();\n    };\n    _proto.second = function second() {\n        return this._dateTime.second();\n    };\n    _proto.nano = function nano() {\n        return this._dateTime.nano();\n    };\n    _proto._withAdjuster = function _withAdjuster(adjuster) {\n        if (adjuster instanceof LocalDate) {\n            return this._resolveLocal(LocalDateTime.of(adjuster, this._dateTime.toLocalTime()));\n        } else if (adjuster instanceof LocalTime) {\n            return this._resolveLocal(LocalDateTime.of(this._dateTime.toLocalDate(), adjuster));\n        } else if (adjuster instanceof LocalDateTime) {\n            return this._resolveLocal(adjuster);\n        } else if (adjuster instanceof Instant) {\n            var instant = adjuster;\n            return ZonedDateTime._create(instant.epochSecond(), instant.nano(), this._zone);\n        } else if (adjuster instanceof ZoneOffset) {\n            return this._resolveOffset(adjuster);\n        }\n        return _ChronoZonedDateTime.prototype._withAdjuster.call(this, adjuster);\n    };\n    _proto._withField = function _withField(field, newValue) {\n        if (field instanceof ChronoField) {\n            switch(field){\n                case ChronoField.INSTANT_SECONDS:\n                    return ZonedDateTime._create(newValue, this.nano(), this._zone);\n                case ChronoField.OFFSET_SECONDS:\n                    {\n                        var offset = ZoneOffset.ofTotalSeconds(field.checkValidIntValue(newValue));\n                        return this._resolveOffset(offset);\n                    }\n            }\n            return this._resolveLocal(this._dateTime.with(field, newValue));\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto.withYear = function withYear(year) {\n        return this._resolveLocal(this._dateTime.withYear(year));\n    };\n    _proto.withMonth = function withMonth(month) {\n        return this._resolveLocal(this._dateTime.withMonth(month));\n    };\n    _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n        return this._resolveLocal(this._dateTime.withDayOfMonth(dayOfMonth));\n    };\n    _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n        return this._resolveLocal(this._dateTime.withDayOfYear(dayOfYear));\n    };\n    _proto.withHour = function withHour(hour) {\n        return this._resolveLocal(this._dateTime.withHour(hour));\n    };\n    _proto.withMinute = function withMinute(minute) {\n        return this._resolveLocal(this._dateTime.withMinute(minute));\n    };\n    _proto.withSecond = function withSecond(second) {\n        return this._resolveLocal(this._dateTime.withSecond(second));\n    };\n    _proto.withNano = function withNano(nanoOfSecond) {\n        return this._resolveLocal(this._dateTime.withNano(nanoOfSecond));\n    };\n    _proto.truncatedTo = function truncatedTo(unit) {\n        return this._resolveLocal(this._dateTime.truncatedTo(unit));\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        if (unit instanceof ChronoUnit) {\n            if (unit.isDateBased()) {\n                return this._resolveLocal(this._dateTime.plus(amountToAdd, unit));\n            } else {\n                return this._resolveInstant(this._dateTime.plus(amountToAdd, unit));\n            }\n        }\n        requireNonNull(unit, \"unit\");\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusYears = function plusYears(years) {\n        return this._resolveLocal(this._dateTime.plusYears(years));\n    };\n    _proto.plusMonths = function plusMonths(months) {\n        return this._resolveLocal(this._dateTime.plusMonths(months));\n    };\n    _proto.plusWeeks = function plusWeeks(weeks) {\n        return this._resolveLocal(this._dateTime.plusWeeks(weeks));\n    };\n    _proto.plusDays = function plusDays(days) {\n        return this._resolveLocal(this._dateTime.plusDays(days));\n    };\n    _proto.plusHours = function plusHours(hours) {\n        return this._resolveInstant(this._dateTime.plusHours(hours));\n    };\n    _proto.plusMinutes = function plusMinutes(minutes) {\n        return this._resolveInstant(this._dateTime.plusMinutes(minutes));\n    };\n    _proto.plusSeconds = function plusSeconds(seconds) {\n        return this._resolveInstant(this._dateTime.plusSeconds(seconds));\n    };\n    _proto.plusNanos = function plusNanos(nanos) {\n        return this._resolveInstant(this._dateTime.plusNanos(nanos));\n    };\n    _proto._minusUnit = function _minusUnit(amountToSubtract, unit) {\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    };\n    _proto.minusYears = function minusYears(years) {\n        return this.plusYears(-1 * years);\n    };\n    _proto.minusMonths = function minusMonths(months) {\n        return this.plusMonths(-1 * months);\n    };\n    _proto.minusWeeks = function minusWeeks(weeks) {\n        return this.plusWeeks(-1 * weeks);\n    };\n    _proto.minusDays = function minusDays(days) {\n        return this.plusDays(-1 * days);\n    };\n    _proto.minusHours = function minusHours(hours) {\n        return this.plusHours(-1 * hours);\n    };\n    _proto.minusMinutes = function minusMinutes(minutes) {\n        return this.plusMinutes(-1 * minutes);\n    };\n    _proto.minusSeconds = function minusSeconds(seconds) {\n        return this.plusSeconds(-1 * seconds);\n    };\n    _proto.minusNanos = function minusNanos(nanos) {\n        return this.plusNanos(-1 * nanos);\n    };\n    _proto.query = function query(_query) {\n        if (_query === TemporalQueries.localDate()) {\n            return this.toLocalDate();\n        }\n        requireNonNull(_query, \"query\");\n        return _ChronoZonedDateTime.prototype.query.call(this, _query);\n    };\n    _proto.until = function until(endExclusive, unit) {\n        var end = ZonedDateTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            end = end.withZoneSameInstant(this._zone);\n            if (unit.isDateBased()) {\n                return this._dateTime.until(end._dateTime, unit);\n            } else {\n                var difference = this._offset.totalSeconds() - end._offset.totalSeconds();\n                var adjustedEnd = end._dateTime.plusSeconds(difference);\n                return this._dateTime.until(adjustedEnd, unit);\n            }\n        }\n        return unit.between(this, end);\n    };\n    _proto.toLocalDateTime = function toLocalDateTime() {\n        return this._dateTime;\n    };\n    _proto.toLocalDate = function toLocalDate() {\n        return this._dateTime.toLocalDate();\n    };\n    _proto.toLocalTime = function toLocalTime() {\n        return this._dateTime.toLocalTime();\n    };\n    _proto.toOffsetDateTime = function toOffsetDateTime() {\n        return OffsetDateTime.of(this._dateTime, this._offset);\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ZonedDateTime) {\n            return this._dateTime.equals(other._dateTime) && this._offset.equals(other._offset) && this._zone.equals(other._zone);\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return MathUtil.hashCode(this._dateTime.hashCode(), this._offset.hashCode(), this._zone.hashCode());\n    };\n    _proto.toString = function toString() {\n        var str = this._dateTime.toString() + this._offset.toString();\n        if (this._offset !== this._zone) {\n            str += \"[\" + this._zone.toString() + \"]\";\n        }\n        return str;\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.format = function format(formatter) {\n        return _ChronoZonedDateTime.prototype.format.call(this, formatter);\n    };\n    return ZonedDateTime;\n}(ChronoZonedDateTime);\nfunction _init$7() {\n    ZonedDateTime.FROM = createTemporalQuery(\"ZonedDateTime.FROM\", function(temporal) {\n        return ZonedDateTime.from(temporal);\n    });\n}\nvar OffsetDateTime = function(_Temporal) {\n    _inheritsLoose(OffsetDateTime, _Temporal);\n    OffsetDateTime.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (temporal instanceof OffsetDateTime) {\n            return temporal;\n        }\n        try {\n            var offset = ZoneOffset.from(temporal);\n            try {\n                var ldt = LocalDateTime.from(temporal);\n                return OffsetDateTime.of(ldt, offset);\n            } catch (_) {\n                var instant = Instant.from(temporal);\n                return OffsetDateTime.ofInstant(instant, offset);\n            }\n        } catch (ex) {\n            throw new DateTimeException(\"Unable to obtain OffsetDateTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n    };\n    OffsetDateTime.now = function now(clockOrZone) {\n        if (arguments.length === 0) {\n            return OffsetDateTime.now(Clock.systemDefaultZone());\n        } else {\n            requireNonNull(clockOrZone, \"clockOrZone\");\n            if (clockOrZone instanceof ZoneId) {\n                return OffsetDateTime.now(Clock.system(clockOrZone));\n            } else if (clockOrZone instanceof Clock) {\n                var now = clockOrZone.instant();\n                return OffsetDateTime.ofInstant(now, clockOrZone.zone().rules().offset(now));\n            } else {\n                throw new IllegalArgumentException(\"clockOrZone must be an instance of ZoneId or Clock\");\n            }\n        }\n    };\n    OffsetDateTime.of = function of() {\n        if (arguments.length <= 2) {\n            return OffsetDateTime.ofDateTime.apply(this, arguments);\n        } else if (arguments.length === 3) {\n            return OffsetDateTime.ofDateAndTime.apply(this, arguments);\n        } else {\n            return OffsetDateTime.ofNumbers.apply(this, arguments);\n        }\n    };\n    OffsetDateTime.ofDateTime = function ofDateTime(dateTime, offset) {\n        return new OffsetDateTime(dateTime, offset);\n    };\n    OffsetDateTime.ofDateAndTime = function ofDateAndTime(date, time, offset) {\n        var dt = LocalDateTime.of(date, time);\n        return new OffsetDateTime(dt, offset);\n    };\n    OffsetDateTime.ofNumbers = function ofNumbers(year, month, dayOfMonth, hour, minute, second, nanoOfSecond, offset) {\n        if (hour === void 0) {\n            hour = 0;\n        }\n        if (minute === void 0) {\n            minute = 0;\n        }\n        if (second === void 0) {\n            second = 0;\n        }\n        if (nanoOfSecond === void 0) {\n            nanoOfSecond = 0;\n        }\n        var dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);\n        return new OffsetDateTime(dt, offset);\n    };\n    OffsetDateTime.ofInstant = function ofInstant(instant, zone) {\n        requireNonNull(instant, \"instant\");\n        requireNonNull(zone, \"zone\");\n        var rules = zone.rules();\n        var offset = rules.offset(instant);\n        var ldt = LocalDateTime.ofEpochSecond(instant.epochSecond(), instant.nano(), offset);\n        return new OffsetDateTime(ldt, offset);\n    };\n    OffsetDateTime.parse = function parse(text, formatter) {\n        if (formatter === void 0) {\n            formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME;\n        }\n        requireNonNull(formatter, \"formatter\");\n        return formatter.parse(text, OffsetDateTime.FROM);\n    };\n    function OffsetDateTime(dateTime, offset) {\n        var _this;\n        _this = _Temporal.call(this) || this;\n        requireNonNull(dateTime, \"dateTime\");\n        requireInstance(dateTime, LocalDateTime, \"dateTime\");\n        requireNonNull(offset, \"offset\");\n        requireInstance(offset, ZoneOffset, \"offset\");\n        _this._dateTime = dateTime;\n        _this._offset = offset;\n        return _this;\n    }\n    var _proto = OffsetDateTime.prototype;\n    _proto.adjustInto = function adjustInto(temporal) {\n        return temporal.with(ChronoField.EPOCH_DAY, this.toLocalDate().toEpochDay()).with(ChronoField.NANO_OF_DAY, this.toLocalTime().toNanoOfDay()).with(ChronoField.OFFSET_SECONDS, this.offset().totalSeconds());\n    };\n    _proto.until = function until(endExclusive, unit) {\n        var end = OffsetDateTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            end = end.withOffsetSameInstant(this._offset);\n            return this._dateTime.until(end._dateTime, unit);\n        }\n        return unit.between(this, end);\n    };\n    _proto.atZoneSameInstant = function atZoneSameInstant(zone) {\n        return ZonedDateTime.ofInstant(this._dateTime, this._offset, zone);\n    };\n    _proto.atZoneSimilarLocal = function atZoneSimilarLocal(zone) {\n        return ZonedDateTime.ofLocal(this._dateTime, zone, this._offset);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        if (_query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (_query === TemporalQueries.offset() || _query === TemporalQueries.zone()) {\n            return this.offset();\n        } else if (_query === TemporalQueries.localDate()) {\n            return this.toLocalDate();\n        } else if (_query === TemporalQueries.localTime()) {\n            return this.toLocalTime();\n        } else if (_query === TemporalQueries.zoneId()) {\n            return null;\n        }\n        return _Temporal.prototype.query.call(this, _query);\n    };\n    _proto.get = function get(field) {\n        if (field instanceof ChronoField) {\n            switch(field){\n                case ChronoField.INSTANT_SECONDS:\n                    throw new DateTimeException(\"Field too large for an int: \" + field);\n                case ChronoField.OFFSET_SECONDS:\n                    return this.offset().totalSeconds();\n            }\n            return this._dateTime.get(field);\n        }\n        return _Temporal.prototype.get.call(this, field);\n    };\n    _proto.getLong = function getLong(field) {\n        if (field instanceof ChronoField) {\n            switch(field){\n                case ChronoField.INSTANT_SECONDS:\n                    return this.toEpochSecond();\n                case ChronoField.OFFSET_SECONDS:\n                    return this.offset().totalSeconds();\n            }\n            return this._dateTime.getLong(field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.offset = function offset() {\n        return this._offset;\n    };\n    _proto.year = function year() {\n        return this._dateTime.year();\n    };\n    _proto.monthValue = function monthValue() {\n        return this._dateTime.monthValue();\n    };\n    _proto.month = function month() {\n        return this._dateTime.month();\n    };\n    _proto.dayOfMonth = function dayOfMonth() {\n        return this._dateTime.dayOfMonth();\n    };\n    _proto.dayOfYear = function dayOfYear() {\n        return this._dateTime.dayOfYear();\n    };\n    _proto.dayOfWeek = function dayOfWeek() {\n        return this._dateTime.dayOfWeek();\n    };\n    _proto.hour = function hour() {\n        return this._dateTime.hour();\n    };\n    _proto.minute = function minute() {\n        return this._dateTime.minute();\n    };\n    _proto.second = function second() {\n        return this._dateTime.second();\n    };\n    _proto.nano = function nano() {\n        return this._dateTime.nano();\n    };\n    _proto.toLocalDateTime = function toLocalDateTime() {\n        return this._dateTime;\n    };\n    _proto.toLocalDate = function toLocalDate() {\n        return this._dateTime.toLocalDate();\n    };\n    _proto.toLocalTime = function toLocalTime() {\n        return this._dateTime.toLocalTime();\n    };\n    _proto.toOffsetTime = function toOffsetTime() {\n        return OffsetTime.of(this._dateTime.toLocalTime(), this._offset);\n    };\n    _proto.toZonedDateTime = function toZonedDateTime() {\n        return ZonedDateTime.of(this._dateTime, this._offset);\n    };\n    _proto.toInstant = function toInstant() {\n        return this._dateTime.toInstant(this._offset);\n    };\n    _proto.toEpochSecond = function toEpochSecond() {\n        return this._dateTime.toEpochSecond(this._offset);\n    };\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        }\n        if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.INSTANT_SECONDS || field === ChronoField.OFFSET_SECONDS) {\n                return field.range();\n            }\n            return this._dateTime.range(field);\n        }\n        return field.rangeRefinedBy(this);\n    };\n    _proto._withAdjuster = function _withAdjuster(adjuster) {\n        requireNonNull(adjuster);\n        if (adjuster instanceof LocalDate || adjuster instanceof LocalTime || adjuster instanceof LocalDateTime) {\n            return this._withDateTimeOffset(this._dateTime.with(adjuster), this._offset);\n        } else if (adjuster instanceof Instant) {\n            return OffsetDateTime.ofInstant(adjuster, this._offset);\n        } else if (adjuster instanceof ZoneOffset) {\n            return this._withDateTimeOffset(this._dateTime, adjuster);\n        } else if (adjuster instanceof OffsetDateTime) {\n            return adjuster;\n        }\n        return adjuster.adjustInto(this);\n    };\n    _proto._withField = function _withField(field, newValue) {\n        requireNonNull(field);\n        if (field instanceof ChronoField) {\n            var f = field;\n            switch(f){\n                case ChronoField.INSTANT_SECONDS:\n                    return OffsetDateTime.ofInstant(Instant.ofEpochSecond(newValue, this.nano()), this._offset);\n                case ChronoField.OFFSET_SECONDS:\n                    {\n                        return this._withDateTimeOffset(this._dateTime, ZoneOffset.ofTotalSeconds(f.checkValidIntValue(newValue)));\n                    }\n            }\n            return this._withDateTimeOffset(this._dateTime.with(field, newValue), this._offset);\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto._withDateTimeOffset = function _withDateTimeOffset(dateTime, offset) {\n        if (this._dateTime === dateTime && this._offset.equals(offset)) {\n            return this;\n        }\n        return new OffsetDateTime(dateTime, offset);\n    };\n    _proto.withYear = function withYear(year) {\n        return this._withDateTimeOffset(this._dateTime.withYear(year), this._offset);\n    };\n    _proto.withMonth = function withMonth(month) {\n        return this._withDateTimeOffset(this._dateTime.withMonth(month), this._offset);\n    };\n    _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n        return this._withDateTimeOffset(this._dateTime.withDayOfMonth(dayOfMonth), this._offset);\n    };\n    _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n        return this._withDateTimeOffset(this._dateTime.withDayOfYear(dayOfYear), this._offset);\n    };\n    _proto.withHour = function withHour(hour) {\n        return this._withDateTimeOffset(this._dateTime.withHour(hour), this._offset);\n    };\n    _proto.withMinute = function withMinute(minute) {\n        return this._withDateTimeOffset(this._dateTime.withMinute(minute), this._offset);\n    };\n    _proto.withSecond = function withSecond(second) {\n        return this._withDateTimeOffset(this._dateTime.withSecond(second), this._offset);\n    };\n    _proto.withNano = function withNano(nanoOfSecond) {\n        return this._withDateTimeOffset(this._dateTime.withNano(nanoOfSecond), this._offset);\n    };\n    _proto.withOffsetSameLocal = function withOffsetSameLocal(offset) {\n        requireNonNull(offset, \"offset\");\n        return this._withDateTimeOffset(this._dateTime, offset);\n    };\n    _proto.withOffsetSameInstant = function withOffsetSameInstant(offset) {\n        requireNonNull(offset, \"offset\");\n        if (offset.equals(this._offset)) {\n            return this;\n        }\n        var difference = offset.totalSeconds() - this._offset.totalSeconds();\n        var adjusted = this._dateTime.plusSeconds(difference);\n        return new OffsetDateTime(adjusted, offset);\n    };\n    _proto.truncatedTo = function truncatedTo(unit) {\n        return this._withDateTimeOffset(this._dateTime.truncatedTo(unit), this._offset);\n    };\n    _proto._plusAmount = function _plusAmount(amount) {\n        requireNonNull(amount, \"amount\");\n        return amount.addTo(this);\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        if (unit instanceof ChronoUnit) {\n            return this._withDateTimeOffset(this._dateTime.plus(amountToAdd, unit), this._offset);\n        }\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusYears = function plusYears(years) {\n        return this._withDateTimeOffset(this._dateTime.plusYears(years), this._offset);\n    };\n    _proto.plusMonths = function plusMonths(months) {\n        return this._withDateTimeOffset(this._dateTime.plusMonths(months), this._offset);\n    };\n    _proto.plusWeeks = function plusWeeks(weeks) {\n        return this._withDateTimeOffset(this._dateTime.plusWeeks(weeks), this._offset);\n    };\n    _proto.plusDays = function plusDays(days) {\n        return this._withDateTimeOffset(this._dateTime.plusDays(days), this._offset);\n    };\n    _proto.plusHours = function plusHours(hours) {\n        return this._withDateTimeOffset(this._dateTime.plusHours(hours), this._offset);\n    };\n    _proto.plusMinutes = function plusMinutes(minutes) {\n        return this._withDateTimeOffset(this._dateTime.plusMinutes(minutes), this._offset);\n    };\n    _proto.plusSeconds = function plusSeconds(seconds) {\n        return this._withDateTimeOffset(this._dateTime.plusSeconds(seconds), this._offset);\n    };\n    _proto.plusNanos = function plusNanos(nanos) {\n        return this._withDateTimeOffset(this._dateTime.plusNanos(nanos), this._offset);\n    };\n    _proto._minusAmount = function _minusAmount(amount) {\n        requireNonNull(amount);\n        return amount.subtractFrom(this);\n    };\n    _proto._minusUnit = function _minusUnit(amountToSubtract, unit) {\n        return this.plus(-1 * amountToSubtract, unit);\n    };\n    _proto.minusYears = function minusYears(years) {\n        return this._withDateTimeOffset(this._dateTime.minusYears(years), this._offset);\n    };\n    _proto.minusMonths = function minusMonths(months) {\n        return this._withDateTimeOffset(this._dateTime.minusMonths(months), this._offset);\n    };\n    _proto.minusWeeks = function minusWeeks(weeks) {\n        return this._withDateTimeOffset(this._dateTime.minusWeeks(weeks), this._offset);\n    };\n    _proto.minusDays = function minusDays(days) {\n        return this._withDateTimeOffset(this._dateTime.minusDays(days), this._offset);\n    };\n    _proto.minusHours = function minusHours(hours) {\n        return this._withDateTimeOffset(this._dateTime.minusHours(hours), this._offset);\n    };\n    _proto.minusMinutes = function minusMinutes(minutes) {\n        return this._withDateTimeOffset(this._dateTime.minusMinutes(minutes), this._offset);\n    };\n    _proto.minusSeconds = function minusSeconds(seconds) {\n        return this._withDateTimeOffset(this._dateTime.minusSeconds(seconds), this._offset);\n    };\n    _proto.minusNanos = function minusNanos(nanos) {\n        return this._withDateTimeOffset(this._dateTime.minusNanos(nanos), this._offset);\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, OffsetDateTime, \"other\");\n        if (this.offset().equals(other.offset())) {\n            return this.toLocalDateTime().compareTo(other.toLocalDateTime());\n        }\n        var cmp = MathUtil.compareNumbers(this.toEpochSecond(), other.toEpochSecond());\n        if (cmp === 0) {\n            cmp = this.toLocalTime().nano() - other.toLocalTime().nano();\n            if (cmp === 0) {\n                cmp = this.toLocalDateTime().compareTo(other.toLocalDateTime());\n            }\n        }\n        return cmp;\n    };\n    _proto.isAfter = function isAfter(other) {\n        requireNonNull(other, \"other\");\n        var thisEpochSec = this.toEpochSecond();\n        var otherEpochSec = other.toEpochSecond();\n        return thisEpochSec > otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() > other.toLocalTime().nano();\n    };\n    _proto.isBefore = function isBefore(other) {\n        requireNonNull(other, \"other\");\n        var thisEpochSec = this.toEpochSecond();\n        var otherEpochSec = other.toEpochSecond();\n        return thisEpochSec < otherEpochSec || thisEpochSec === otherEpochSec && this.toLocalTime().nano() < other.toLocalTime().nano();\n    };\n    _proto.isEqual = function isEqual(other) {\n        requireNonNull(other, \"other\");\n        return this.toEpochSecond() === other.toEpochSecond() && this.toLocalTime().nano() === other.toLocalTime().nano();\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof OffsetDateTime) {\n            return this._dateTime.equals(other._dateTime) && this._offset.equals(other._offset);\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return this._dateTime.hashCode() ^ this._offset.hashCode();\n    };\n    _proto.toString = function toString() {\n        return this._dateTime.toString() + this._offset.toString();\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        return formatter.format(this);\n    };\n    return OffsetDateTime;\n}(Temporal);\nfunction _init$6() {\n    OffsetDateTime.MIN = LocalDateTime.MIN.atOffset(ZoneOffset.MAX);\n    OffsetDateTime.MAX = LocalDateTime.MAX.atOffset(ZoneOffset.MIN);\n    OffsetDateTime.FROM = createTemporalQuery(\"OffsetDateTime.FROM\", function(temporal) {\n        return OffsetDateTime.from(temporal);\n    });\n}\nvar DAYS_PER_CYCLE = 146097;\nvar DAYS_0000_TO_1970 = DAYS_PER_CYCLE * 5 - (30 * 365 + 7);\nvar LocalDate = function(_ChronoLocalDate) {\n    _inheritsLoose(LocalDate, _ChronoLocalDate);\n    LocalDate.now = function now(clockOrZone) {\n        var clock;\n        if (clockOrZone == null) {\n            clock = Clock.systemDefaultZone();\n        } else if (clockOrZone instanceof ZoneId) {\n            clock = Clock.system(clockOrZone);\n        } else {\n            clock = clockOrZone;\n        }\n        return LocalDate.ofInstant(clock.instant(), clock.zone());\n    };\n    LocalDate.ofInstant = function ofInstant(instant, zone) {\n        if (zone === void 0) {\n            zone = ZoneId.systemDefault();\n        }\n        requireNonNull(instant, \"instant\");\n        var offset = zone.rules().offset(instant);\n        var epochSec = instant.epochSecond() + offset.totalSeconds();\n        var epochDay = MathUtil.floorDiv(epochSec, LocalTime.SECONDS_PER_DAY);\n        return LocalDate.ofEpochDay(epochDay);\n    };\n    LocalDate.of = function of(year, month, dayOfMonth) {\n        return new LocalDate(year, month, dayOfMonth);\n    };\n    LocalDate.ofYearDay = function ofYearDay(year, dayOfYear) {\n        ChronoField.YEAR.checkValidValue(year);\n        var leap = IsoChronology.isLeapYear(year);\n        if (dayOfYear === 366 && leap === false) {\n            assert(false, \"Invalid date 'DayOfYear 366' as '\" + year + \"' is not a leap year\", DateTimeException);\n        }\n        var moy = Month.of(Math.floor((dayOfYear - 1) / 31 + 1));\n        var monthEnd = moy.firstDayOfYear(leap) + moy.length(leap) - 1;\n        if (dayOfYear > monthEnd) {\n            moy = moy.plus(1);\n        }\n        var dom = dayOfYear - moy.firstDayOfYear(leap) + 1;\n        return new LocalDate(year, moy.value(), dom);\n    };\n    LocalDate.ofEpochDay = function ofEpochDay(epochDay) {\n        if (epochDay === void 0) {\n            epochDay = 0;\n        }\n        var adjust, adjustCycles, doyEst, yearEst, zeroDay;\n        zeroDay = epochDay + DAYS_0000_TO_1970;\n        zeroDay -= 60;\n        adjust = 0;\n        if (zeroDay < 0) {\n            adjustCycles = MathUtil.intDiv(zeroDay + 1, DAYS_PER_CYCLE) - 1;\n            adjust = adjustCycles * 400;\n            zeroDay += -adjustCycles * DAYS_PER_CYCLE;\n        }\n        yearEst = MathUtil.intDiv(400 * zeroDay + 591, DAYS_PER_CYCLE);\n        doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n        if (doyEst < 0) {\n            yearEst--;\n            doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n        }\n        yearEst += adjust;\n        var marchDoy0 = doyEst;\n        var marchMonth0 = MathUtil.intDiv(marchDoy0 * 5 + 2, 153);\n        var month = (marchMonth0 + 2) % 12 + 1;\n        var dom = marchDoy0 - MathUtil.intDiv(marchMonth0 * 306 + 5, 10) + 1;\n        yearEst += MathUtil.intDiv(marchMonth0, 10);\n        var year = yearEst;\n        return new LocalDate(year, month, dom);\n    };\n    LocalDate.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        var date = temporal.query(TemporalQueries.localDate());\n        if (date == null) {\n            throw new DateTimeException(\"Unable to obtain LocalDate from TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n        return date;\n    };\n    LocalDate.parse = function parse(text, formatter) {\n        if (formatter === void 0) {\n            formatter = DateTimeFormatter.ISO_LOCAL_DATE;\n        }\n        assert(formatter != null, \"formatter\", NullPointerException);\n        return formatter.parse(text, LocalDate.FROM);\n    };\n    LocalDate._resolvePreviousValid = function _resolvePreviousValid(year, month, day) {\n        switch(month){\n            case 2:\n                day = Math.min(day, IsoChronology.isLeapYear(year) ? 29 : 28);\n                break;\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                day = Math.min(day, 30);\n                break;\n        }\n        return LocalDate.of(year, month, day);\n    };\n    function LocalDate(year, month, dayOfMonth) {\n        var _this;\n        _this = _ChronoLocalDate.call(this) || this;\n        requireNonNull(year, \"year\");\n        requireNonNull(month, \"month\");\n        requireNonNull(dayOfMonth, \"dayOfMonth\");\n        if (month instanceof Month) {\n            month = month.value();\n        }\n        _this._year = MathUtil.safeToInt(year);\n        _this._month = MathUtil.safeToInt(month);\n        _this._day = MathUtil.safeToInt(dayOfMonth);\n        LocalDate._validate(_this._year, _this._month, _this._day);\n        return _this;\n    }\n    LocalDate._validate = function _validate(year, month, dayOfMonth) {\n        var dom;\n        ChronoField.YEAR.checkValidValue(year);\n        ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n        ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        if (dayOfMonth > 28) {\n            dom = 31;\n            switch(month){\n                case 2:\n                    dom = IsoChronology.isLeapYear(year) ? 29 : 28;\n                    break;\n                case 4:\n                case 6:\n                case 9:\n                case 11:\n                    dom = 30;\n            }\n            if (dayOfMonth > dom) {\n                if (dayOfMonth === 29) {\n                    assert(false, \"Invalid date 'February 29' as '\" + year + \"' is not a leap year\", DateTimeException);\n                } else {\n                    assert(false, \"Invalid date '\" + year + \"' '\" + month + \"' '\" + dayOfMonth + \"'\", DateTimeException);\n                }\n            }\n        }\n    };\n    var _proto = LocalDate.prototype;\n    _proto.isSupported = function isSupported(field) {\n        return _ChronoLocalDate.prototype.isSupported.call(this, field);\n    };\n    _proto.range = function range(field) {\n        if (field instanceof ChronoField) {\n            if (field.isDateBased()) {\n                switch(field){\n                    case ChronoField.DAY_OF_MONTH:\n                        return ValueRange.of(1, this.lengthOfMonth());\n                    case ChronoField.DAY_OF_YEAR:\n                        return ValueRange.of(1, this.lengthOfYear());\n                    case ChronoField.ALIGNED_WEEK_OF_MONTH:\n                        return ValueRange.of(1, this.month() === Month.FEBRUARY && this.isLeapYear() === false ? 4 : 5);\n                    case ChronoField.YEAR_OF_ERA:\n                        return this._year <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE);\n                }\n                return field.range();\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.rangeRefinedBy(this);\n    };\n    _proto.get = function get(field) {\n        return this.getLong(field);\n    };\n    _proto.getLong = function getLong(field) {\n        assert(field != null, \"\", NullPointerException);\n        if (field instanceof ChronoField) {\n            return this._get0(field);\n        }\n        return field.getFrom(this);\n    };\n    _proto._get0 = function _get0(field) {\n        switch(field){\n            case ChronoField.DAY_OF_WEEK:\n                return this.dayOfWeek().value();\n            case ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH:\n                return MathUtil.intMod(this._day - 1, 7) + 1;\n            case ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR:\n                return MathUtil.intMod(this.dayOfYear() - 1, 7) + 1;\n            case ChronoField.DAY_OF_MONTH:\n                return this._day;\n            case ChronoField.DAY_OF_YEAR:\n                return this.dayOfYear();\n            case ChronoField.EPOCH_DAY:\n                return this.toEpochDay();\n            case ChronoField.ALIGNED_WEEK_OF_MONTH:\n                return MathUtil.intDiv(this._day - 1, 7) + 1;\n            case ChronoField.ALIGNED_WEEK_OF_YEAR:\n                return MathUtil.intDiv(this.dayOfYear() - 1, 7) + 1;\n            case ChronoField.MONTH_OF_YEAR:\n                return this._month;\n            case ChronoField.PROLEPTIC_MONTH:\n                return this._prolepticMonth();\n            case ChronoField.YEAR_OF_ERA:\n                return this._year >= 1 ? this._year : 1 - this._year;\n            case ChronoField.YEAR:\n                return this._year;\n            case ChronoField.ERA:\n                return this._year >= 1 ? 1 : 0;\n        }\n        throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n    };\n    _proto._prolepticMonth = function _prolepticMonth() {\n        return this._year * 12 + (this._month - 1);\n    };\n    _proto.chronology = function chronology() {\n        return IsoChronology.INSTANCE;\n    };\n    _proto.year = function year() {\n        return this._year;\n    };\n    _proto.monthValue = function monthValue() {\n        return this._month;\n    };\n    _proto.month = function month() {\n        return Month.of(this._month);\n    };\n    _proto.dayOfMonth = function dayOfMonth() {\n        return this._day;\n    };\n    _proto.dayOfYear = function dayOfYear() {\n        return this.month().firstDayOfYear(this.isLeapYear()) + this._day - 1;\n    };\n    _proto.dayOfWeek = function dayOfWeek() {\n        var dow0 = MathUtil.floorMod(this.toEpochDay() + 3, 7);\n        return DayOfWeek.of(dow0 + 1);\n    };\n    _proto.isLeapYear = function isLeapYear() {\n        return IsoChronology.isLeapYear(this._year);\n    };\n    _proto.lengthOfMonth = function lengthOfMonth() {\n        switch(this._month){\n            case 2:\n                return this.isLeapYear() ? 29 : 28;\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                return 30;\n            default:\n                return 31;\n        }\n    };\n    _proto.lengthOfYear = function lengthOfYear() {\n        return this.isLeapYear() ? 366 : 365;\n    };\n    _proto._withAdjuster = function _withAdjuster(adjuster) {\n        requireNonNull(adjuster, \"adjuster\");\n        if (adjuster instanceof LocalDate) {\n            return adjuster;\n        }\n        return _ChronoLocalDate.prototype._withAdjuster.call(this, adjuster);\n    };\n    _proto._withField = function _withField(field, newValue) {\n        assert(field != null, \"field\", NullPointerException);\n        if (field instanceof ChronoField) {\n            var f = field;\n            f.checkValidValue(newValue);\n            switch(f){\n                case ChronoField.DAY_OF_WEEK:\n                    return this.plusDays(newValue - this.dayOfWeek().value());\n                case ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH:\n                    return this.plusDays(newValue - this.getLong(ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH));\n                case ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR:\n                    return this.plusDays(newValue - this.getLong(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));\n                case ChronoField.DAY_OF_MONTH:\n                    return this.withDayOfMonth(newValue);\n                case ChronoField.DAY_OF_YEAR:\n                    return this.withDayOfYear(newValue);\n                case ChronoField.EPOCH_DAY:\n                    return LocalDate.ofEpochDay(newValue);\n                case ChronoField.ALIGNED_WEEK_OF_MONTH:\n                    return this.plusWeeks(newValue - this.getLong(ChronoField.ALIGNED_WEEK_OF_MONTH));\n                case ChronoField.ALIGNED_WEEK_OF_YEAR:\n                    return this.plusWeeks(newValue - this.getLong(ChronoField.ALIGNED_WEEK_OF_YEAR));\n                case ChronoField.MONTH_OF_YEAR:\n                    return this.withMonth(newValue);\n                case ChronoField.PROLEPTIC_MONTH:\n                    return this.plusMonths(newValue - this.getLong(ChronoField.PROLEPTIC_MONTH));\n                case ChronoField.YEAR_OF_ERA:\n                    return this.withYear(this._year >= 1 ? newValue : 1 - newValue);\n                case ChronoField.YEAR:\n                    return this.withYear(newValue);\n                case ChronoField.ERA:\n                    return this.getLong(ChronoField.ERA) === newValue ? this : this.withYear(1 - this._year);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto.withYear = function withYear(year) {\n        if (this._year === year) {\n            return this;\n        }\n        ChronoField.YEAR.checkValidValue(year);\n        return LocalDate._resolvePreviousValid(year, this._month, this._day);\n    };\n    _proto.withMonth = function withMonth(month) {\n        var m = month instanceof Month ? month.value() : month;\n        if (this._month === m) {\n            return this;\n        }\n        ChronoField.MONTH_OF_YEAR.checkValidValue(m);\n        return LocalDate._resolvePreviousValid(this._year, m, this._day);\n    };\n    _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n        if (this._day === dayOfMonth) {\n            return this;\n        }\n        return LocalDate.of(this._year, this._month, dayOfMonth);\n    };\n    _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n        if (this.dayOfYear() === dayOfYear) {\n            return this;\n        }\n        return LocalDate.ofYearDay(this._year, dayOfYear);\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        requireNonNull(amountToAdd, \"amountToAdd\");\n        requireNonNull(unit, \"unit\");\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.DAYS:\n                    return this.plusDays(amountToAdd);\n                case ChronoUnit.WEEKS:\n                    return this.plusWeeks(amountToAdd);\n                case ChronoUnit.MONTHS:\n                    return this.plusMonths(amountToAdd);\n                case ChronoUnit.YEARS:\n                    return this.plusYears(amountToAdd);\n                case ChronoUnit.DECADES:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n                case ChronoUnit.CENTURIES:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n                case ChronoUnit.MILLENNIA:\n                    return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n                case ChronoUnit.ERAS:\n                    return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusYears = function plusYears(yearsToAdd) {\n        if (yearsToAdd === 0) {\n            return this;\n        }\n        var newYear = ChronoField.YEAR.checkValidIntValue(this._year + yearsToAdd);\n        return LocalDate._resolvePreviousValid(newYear, this._month, this._day);\n    };\n    _proto.plusMonths = function plusMonths(monthsToAdd) {\n        if (monthsToAdd === 0) {\n            return this;\n        }\n        var monthCount = this._year * 12 + (this._month - 1);\n        var calcMonths = monthCount + monthsToAdd;\n        var newYear = ChronoField.YEAR.checkValidIntValue(MathUtil.floorDiv(calcMonths, 12));\n        var newMonth = MathUtil.floorMod(calcMonths, 12) + 1;\n        return LocalDate._resolvePreviousValid(newYear, newMonth, this._day);\n    };\n    _proto.plusWeeks = function plusWeeks(weeksToAdd) {\n        return this.plusDays(MathUtil.safeMultiply(weeksToAdd, 7));\n    };\n    _proto.plusDays = function plusDays(daysToAdd) {\n        if (daysToAdd === 0) {\n            return this;\n        }\n        var mjDay = MathUtil.safeAdd(this.toEpochDay(), daysToAdd);\n        return LocalDate.ofEpochDay(mjDay);\n    };\n    _proto._minusUnit = function _minusUnit(amountToSubtract, unit) {\n        requireNonNull(amountToSubtract, \"amountToSubtract\");\n        requireNonNull(unit, \"unit\");\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    };\n    _proto.minusYears = function minusYears(yearsToSubtract) {\n        return this.plusYears(yearsToSubtract * -1);\n    };\n    _proto.minusMonths = function minusMonths(monthsToSubtract) {\n        return this.plusMonths(monthsToSubtract * -1);\n    };\n    _proto.minusWeeks = function minusWeeks(weeksToSubtract) {\n        return this.plusWeeks(weeksToSubtract * -1);\n    };\n    _proto.minusDays = function minusDays(daysToSubtract) {\n        return this.plusDays(daysToSubtract * -1);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        if (_query === TemporalQueries.localDate()) {\n            return this;\n        }\n        return _ChronoLocalDate.prototype.query.call(this, _query);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        return _ChronoLocalDate.prototype.adjustInto.call(this, temporal);\n    };\n    _proto.until = function until(p1, p2) {\n        if (arguments.length < 2) {\n            return this.until1(p1);\n        } else {\n            return this.until2(p1, p2);\n        }\n    };\n    _proto.until2 = function until2(endExclusive, unit) {\n        var end = LocalDate.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.DAYS:\n                    return this.daysUntil(end);\n                case ChronoUnit.WEEKS:\n                    return MathUtil.intDiv(this.daysUntil(end), 7);\n                case ChronoUnit.MONTHS:\n                    return this._monthsUntil(end);\n                case ChronoUnit.YEARS:\n                    return MathUtil.intDiv(this._monthsUntil(end), 12);\n                case ChronoUnit.DECADES:\n                    return MathUtil.intDiv(this._monthsUntil(end), 120);\n                case ChronoUnit.CENTURIES:\n                    return MathUtil.intDiv(this._monthsUntil(end), 1200);\n                case ChronoUnit.MILLENNIA:\n                    return MathUtil.intDiv(this._monthsUntil(end), 12000);\n                case ChronoUnit.ERAS:\n                    return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    };\n    _proto.daysUntil = function daysUntil(end) {\n        return end.toEpochDay() - this.toEpochDay();\n    };\n    _proto._monthsUntil = function _monthsUntil(end) {\n        var packed1 = this._prolepticMonth() * 32 + this.dayOfMonth();\n        var packed2 = end._prolepticMonth() * 32 + end.dayOfMonth();\n        return MathUtil.intDiv(packed2 - packed1, 32);\n    };\n    _proto.until1 = function until1(endDate) {\n        var end = LocalDate.from(endDate);\n        var totalMonths = end._prolepticMonth() - this._prolepticMonth();\n        var days = end._day - this._day;\n        if (totalMonths > 0 && days < 0) {\n            totalMonths--;\n            var calcDate = this.plusMonths(totalMonths);\n            days = end.toEpochDay() - calcDate.toEpochDay();\n        } else if (totalMonths < 0 && days > 0) {\n            totalMonths++;\n            days -= end.lengthOfMonth();\n        }\n        var years = MathUtil.intDiv(totalMonths, 12);\n        var months = MathUtil.intMod(totalMonths, 12);\n        return Period.of(years, months, days);\n    };\n    _proto.atTime = function atTime() {\n        if (arguments.length === 1) {\n            return this.atTime1.apply(this, arguments);\n        } else {\n            return this.atTime4.apply(this, arguments);\n        }\n    };\n    _proto.atTime1 = function atTime1(time) {\n        requireNonNull(time, \"time\");\n        if (time instanceof LocalTime) {\n            return LocalDateTime.of(this, time);\n        } else if (time instanceof OffsetTime) {\n            return this._atTimeOffsetTime(time);\n        } else {\n            throw new IllegalArgumentException(\"time must be an instance of LocalTime or OffsetTime\" + (time && time.constructor && time.constructor.name ? \", but is \" + time.constructor.name : \"\"));\n        }\n    };\n    _proto.atTime4 = function atTime4(hour, minute, second, nanoOfSecond) {\n        if (second === void 0) {\n            second = 0;\n        }\n        if (nanoOfSecond === void 0) {\n            nanoOfSecond = 0;\n        }\n        return this.atTime1(LocalTime.of(hour, minute, second, nanoOfSecond));\n    };\n    _proto._atTimeOffsetTime = function _atTimeOffsetTime(time) {\n        return OffsetDateTime.of(LocalDateTime.of(this, time.toLocalTime()), time.offset());\n    };\n    _proto.atStartOfDay = function atStartOfDay(zone) {\n        if (zone != null) {\n            return this._atStartOfDayWithZone(zone);\n        } else {\n            return LocalDateTime.of(this, LocalTime.MIDNIGHT);\n        }\n    };\n    _proto._atStartOfDayWithZone = function _atStartOfDayWithZone(zone) {\n        requireNonNull(zone, \"zone\");\n        var ldt = this.atTime(LocalTime.MIDNIGHT);\n        if (zone instanceof ZoneOffset === false) {\n            var trans = zone.rules().transition(ldt);\n            if (trans != null && trans.isGap()) {\n                ldt = trans.dateTimeAfter();\n            }\n        }\n        return ZonedDateTime.of(ldt, zone);\n    };\n    _proto.toEpochDay = function toEpochDay() {\n        var y = this._year;\n        var m = this._month;\n        var total = 0;\n        total += 365 * y;\n        if (y >= 0) {\n            total += MathUtil.intDiv(y + 3, 4) - MathUtil.intDiv(y + 99, 100) + MathUtil.intDiv(y + 399, 400);\n        } else {\n            total -= MathUtil.intDiv(y, -4) - MathUtil.intDiv(y, -100) + MathUtil.intDiv(y, -400);\n        }\n        total += MathUtil.intDiv(367 * m - 362, 12);\n        total += this.dayOfMonth() - 1;\n        if (m > 2) {\n            total--;\n            if (!IsoChronology.isLeapYear(y)) {\n                total--;\n            }\n        }\n        return total - DAYS_0000_TO_1970;\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, LocalDate, \"other\");\n        return this._compareTo0(other);\n    };\n    _proto._compareTo0 = function _compareTo0(otherDate) {\n        var cmp = this._year - otherDate._year;\n        if (cmp === 0) {\n            cmp = this._month - otherDate._month;\n            if (cmp === 0) {\n                cmp = this._day - otherDate._day;\n            }\n        }\n        return cmp;\n    };\n    _proto.isAfter = function isAfter(other) {\n        return this.compareTo(other) > 0;\n    };\n    _proto.isBefore = function isBefore(other) {\n        return this.compareTo(other) < 0;\n    };\n    _proto.isEqual = function isEqual(other) {\n        return this.compareTo(other) === 0;\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof LocalDate) {\n            return this._compareTo0(other) === 0;\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        var yearValue = this._year;\n        var monthValue = this._month;\n        var dayValue = this._day;\n        return MathUtil.hash(yearValue & 0xFFFFF800 ^ (yearValue << 11) + (monthValue << 6) + dayValue);\n    };\n    _proto.toString = function toString() {\n        var dayString, monthString, yearString;\n        var yearValue = this._year;\n        var monthValue = this._month;\n        var dayValue = this._day;\n        var absYear = Math.abs(yearValue);\n        if (absYear < 1000) {\n            if (yearValue < 0) {\n                yearString = \"-\" + (\"\" + (yearValue - 10000)).slice(-4);\n            } else {\n                yearString = (\"\" + (yearValue + 10000)).slice(-4);\n            }\n        } else {\n            if (yearValue > 9999) {\n                yearString = \"+\" + yearValue;\n            } else {\n                yearString = \"\" + yearValue;\n            }\n        }\n        if (monthValue < 10) {\n            monthString = \"-0\" + monthValue;\n        } else {\n            monthString = \"-\" + monthValue;\n        }\n        if (dayValue < 10) {\n            dayString = \"-0\" + dayValue;\n        } else {\n            dayString = \"-\" + dayValue;\n        }\n        return yearString + monthString + dayString;\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        requireInstance(formatter, DateTimeFormatter, \"formatter\");\n        return _ChronoLocalDate.prototype.format.call(this, formatter);\n    };\n    return LocalDate;\n}(ChronoLocalDate);\nfunction _init$5() {\n    LocalDate.MIN = LocalDate.of(YearConstants.MIN_VALUE, 1, 1);\n    LocalDate.MAX = LocalDate.of(YearConstants.MAX_VALUE, 12, 31);\n    LocalDate.EPOCH_0 = LocalDate.ofEpochDay(0);\n    LocalDate.FROM = createTemporalQuery(\"LocalDate.FROM\", function(temporal) {\n        return LocalDate.from(temporal);\n    });\n}\nvar ChronoLocalDateTime = function(_Temporal) {\n    _inheritsLoose(ChronoLocalDateTime, _Temporal);\n    function ChronoLocalDateTime() {\n        return _Temporal.apply(this, arguments) || this;\n    }\n    var _proto = ChronoLocalDateTime.prototype;\n    _proto.chronology = function chronology() {\n        return this.toLocalDate().chronology();\n    };\n    _proto.query = function query(_query) {\n        if (_query === TemporalQueries.chronology()) {\n            return this.chronology();\n        } else if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (_query === TemporalQueries.localDate()) {\n            return LocalDate.ofEpochDay(this.toLocalDate().toEpochDay());\n        } else if (_query === TemporalQueries.localTime()) {\n            return this.toLocalTime();\n        } else if (_query === TemporalQueries.zone() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.offset()) {\n            return null;\n        }\n        return _Temporal.prototype.query.call(this, _query);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        return temporal.with(ChronoField.EPOCH_DAY, this.toLocalDate().toEpochDay()).with(ChronoField.NANO_OF_DAY, this.toLocalTime().toNanoOfDay());\n    };\n    _proto.toInstant = function toInstant(offset) {\n        requireInstance(offset, ZoneOffset, \"zoneId\");\n        return Instant.ofEpochSecond(this.toEpochSecond(offset), this.toLocalTime().nano());\n    };\n    _proto.toEpochSecond = function toEpochSecond(offset) {\n        requireNonNull(offset, \"offset\");\n        var epochDay = this.toLocalDate().toEpochDay();\n        var secs = epochDay * 86400 + this.toLocalTime().toSecondOfDay();\n        secs -= offset.totalSeconds();\n        return MathUtil.safeToInt(secs);\n    };\n    return ChronoLocalDateTime;\n}(Temporal);\nvar LocalDateTime = function(_ChronoLocalDateTime) {\n    _inheritsLoose(LocalDateTime, _ChronoLocalDateTime);\n    LocalDateTime.now = function now(clockOrZone) {\n        if (clockOrZone == null) {\n            return LocalDateTime._now(Clock.systemDefaultZone());\n        } else if (clockOrZone instanceof Clock) {\n            return LocalDateTime._now(clockOrZone);\n        } else {\n            return LocalDateTime._now(Clock.system(clockOrZone));\n        }\n    };\n    LocalDateTime._now = function _now(clock) {\n        requireNonNull(clock, \"clock\");\n        return LocalDateTime.ofInstant(clock.instant(), clock.zone());\n    };\n    LocalDateTime._ofEpochMillis = function _ofEpochMillis(epochMilli, offset) {\n        var localSecond = MathUtil.floorDiv(epochMilli, 1000) + offset.totalSeconds();\n        var localEpochDay = MathUtil.floorDiv(localSecond, LocalTime.SECONDS_PER_DAY);\n        var secsOfDay = MathUtil.floorMod(localSecond, LocalTime.SECONDS_PER_DAY);\n        var nanoOfSecond = MathUtil.floorMod(epochMilli, 1000) * 1000000;\n        var date = LocalDate.ofEpochDay(localEpochDay);\n        var time = LocalTime.ofSecondOfDay(secsOfDay, nanoOfSecond);\n        return new LocalDateTime(date, time);\n    };\n    LocalDateTime.of = function of() {\n        if (arguments.length <= 2) {\n            return LocalDateTime.ofDateAndTime.apply(this, arguments);\n        } else {\n            return LocalDateTime.ofNumbers.apply(this, arguments);\n        }\n    };\n    LocalDateTime.ofNumbers = function ofNumbers(year, month, dayOfMonth, hour, minute, second, nanoOfSecond) {\n        if (hour === void 0) {\n            hour = 0;\n        }\n        if (minute === void 0) {\n            minute = 0;\n        }\n        if (second === void 0) {\n            second = 0;\n        }\n        if (nanoOfSecond === void 0) {\n            nanoOfSecond = 0;\n        }\n        var date = LocalDate.of(year, month, dayOfMonth);\n        var time = LocalTime.of(hour, minute, second, nanoOfSecond);\n        return new LocalDateTime(date, time);\n    };\n    LocalDateTime.ofDateAndTime = function ofDateAndTime(date, time) {\n        requireNonNull(date, \"date\");\n        requireNonNull(time, \"time\");\n        return new LocalDateTime(date, time);\n    };\n    LocalDateTime.ofInstant = function ofInstant(instant, zone) {\n        if (zone === void 0) {\n            zone = ZoneId.systemDefault();\n        }\n        requireNonNull(instant, \"instant\");\n        requireInstance(instant, Instant, \"instant\");\n        requireNonNull(zone, \"zone\");\n        var offset = zone.rules().offset(instant);\n        return LocalDateTime.ofEpochSecond(instant.epochSecond(), instant.nano(), offset);\n    };\n    LocalDateTime.ofEpochSecond = function ofEpochSecond(epochSecond, nanoOfSecond, offset) {\n        if (epochSecond === void 0) {\n            epochSecond = 0;\n        }\n        if (nanoOfSecond === void 0) {\n            nanoOfSecond = 0;\n        }\n        if (arguments.length === 2 && nanoOfSecond instanceof ZoneOffset) {\n            offset = nanoOfSecond;\n            nanoOfSecond = 0;\n        }\n        requireNonNull(offset, \"offset\");\n        var localSecond = epochSecond + offset.totalSeconds();\n        var localEpochDay = MathUtil.floorDiv(localSecond, LocalTime.SECONDS_PER_DAY);\n        var secsOfDay = MathUtil.floorMod(localSecond, LocalTime.SECONDS_PER_DAY);\n        var date = LocalDate.ofEpochDay(localEpochDay);\n        var time = LocalTime.ofSecondOfDay(secsOfDay, nanoOfSecond);\n        return new LocalDateTime(date, time);\n    };\n    LocalDateTime.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        if (temporal instanceof LocalDateTime) {\n            return temporal;\n        } else if (temporal instanceof ZonedDateTime) {\n            return temporal.toLocalDateTime();\n        }\n        try {\n            var date = LocalDate.from(temporal);\n            var time = LocalTime.from(temporal);\n            return new LocalDateTime(date, time);\n        } catch (ex) {\n            throw new DateTimeException(\"Unable to obtain LocalDateTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n    };\n    LocalDateTime.parse = function parse(text, formatter) {\n        if (formatter === void 0) {\n            formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n        }\n        requireNonNull(formatter, \"formatter\");\n        return formatter.parse(text, LocalDateTime.FROM);\n    };\n    function LocalDateTime(date, time) {\n        var _this;\n        _this = _ChronoLocalDateTime.call(this) || this;\n        requireInstance(date, LocalDate, \"date\");\n        requireInstance(time, LocalTime, \"time\");\n        _this._date = date;\n        _this._time = time;\n        return _this;\n    }\n    var _proto = LocalDateTime.prototype;\n    _proto._withDateTime = function _withDateTime(newDate, newTime) {\n        if (this._date.equals(newDate) && this._time.equals(newTime)) {\n            return this;\n        }\n        return new LocalDateTime(newDate, newTime);\n    };\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        if (field instanceof ChronoField) {\n            return field.isTimeBased() ? this._time.range(field) : this._date.range(field);\n        }\n        return field.rangeRefinedBy(this);\n    };\n    _proto.get = function get(field) {\n        if (field instanceof ChronoField) {\n            return field.isTimeBased() ? this._time.get(field) : this._date.get(field);\n        }\n        return _ChronoLocalDateTime.prototype.get.call(this, field);\n    };\n    _proto.getLong = function getLong(field) {\n        requireNonNull(field, \"field\");\n        if (field instanceof ChronoField) {\n            return field.isTimeBased() ? this._time.getLong(field) : this._date.getLong(field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.year = function year() {\n        return this._date.year();\n    };\n    _proto.monthValue = function monthValue() {\n        return this._date.monthValue();\n    };\n    _proto.month = function month() {\n        return this._date.month();\n    };\n    _proto.dayOfMonth = function dayOfMonth() {\n        return this._date.dayOfMonth();\n    };\n    _proto.dayOfYear = function dayOfYear() {\n        return this._date.dayOfYear();\n    };\n    _proto.dayOfWeek = function dayOfWeek() {\n        return this._date.dayOfWeek();\n    };\n    _proto.hour = function hour() {\n        return this._time.hour();\n    };\n    _proto.minute = function minute() {\n        return this._time.minute();\n    };\n    _proto.second = function second() {\n        return this._time.second();\n    };\n    _proto.nano = function nano() {\n        return this._time.nano();\n    };\n    _proto._withAdjuster = function _withAdjuster(adjuster) {\n        requireNonNull(adjuster, \"adjuster\");\n        if (adjuster instanceof LocalDate) {\n            return this._withDateTime(adjuster, this._time);\n        } else if (adjuster instanceof LocalTime) {\n            return this._withDateTime(this._date, adjuster);\n        } else if (adjuster instanceof LocalDateTime) {\n            return adjuster;\n        }\n        return _ChronoLocalDateTime.prototype._withAdjuster.call(this, adjuster);\n    };\n    _proto._withField = function _withField(field, newValue) {\n        requireNonNull(field, \"field\");\n        if (field instanceof ChronoField) {\n            if (field.isTimeBased()) {\n                return this._withDateTime(this._date, this._time.with(field, newValue));\n            } else {\n                return this._withDateTime(this._date.with(field, newValue), this._time);\n            }\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto.withYear = function withYear(year) {\n        return this._withDateTime(this._date.withYear(year), this._time);\n    };\n    _proto.withMonth = function withMonth(month) {\n        return this._withDateTime(this._date.withMonth(month), this._time);\n    };\n    _proto.withDayOfMonth = function withDayOfMonth(dayOfMonth) {\n        return this._withDateTime(this._date.withDayOfMonth(dayOfMonth), this._time);\n    };\n    _proto.withDayOfYear = function withDayOfYear(dayOfYear) {\n        return this._withDateTime(this._date.withDayOfYear(dayOfYear), this._time);\n    };\n    _proto.withHour = function withHour(hour) {\n        var newTime = this._time.withHour(hour);\n        return this._withDateTime(this._date, newTime);\n    };\n    _proto.withMinute = function withMinute(minute) {\n        var newTime = this._time.withMinute(minute);\n        return this._withDateTime(this._date, newTime);\n    };\n    _proto.withSecond = function withSecond(second) {\n        var newTime = this._time.withSecond(second);\n        return this._withDateTime(this._date, newTime);\n    };\n    _proto.withNano = function withNano(nanoOfSecond) {\n        var newTime = this._time.withNano(nanoOfSecond);\n        return this._withDateTime(this._date, newTime);\n    };\n    _proto.truncatedTo = function truncatedTo(unit) {\n        return this._withDateTime(this._date, this._time.truncatedTo(unit));\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        requireNonNull(unit, \"unit\");\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.NANOS:\n                    return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS:\n                    return this.plusDays(MathUtil.intDiv(amountToAdd, LocalTime.MICROS_PER_DAY)).plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MICROS_PER_DAY) * 1000);\n                case ChronoUnit.MILLIS:\n                    return this.plusDays(MathUtil.intDiv(amountToAdd, LocalTime.MILLIS_PER_DAY)).plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MILLIS_PER_DAY) * 1000000);\n                case ChronoUnit.SECONDS:\n                    return this.plusSeconds(amountToAdd);\n                case ChronoUnit.MINUTES:\n                    return this.plusMinutes(amountToAdd);\n                case ChronoUnit.HOURS:\n                    return this.plusHours(amountToAdd);\n                case ChronoUnit.HALF_DAYS:\n                    return this.plusDays(MathUtil.intDiv(amountToAdd, 256)).plusHours(MathUtil.intMod(amountToAdd, 256) * 12);\n            }\n            return this._withDateTime(this._date.plus(amountToAdd, unit), this._time);\n        }\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusYears = function plusYears(years) {\n        var newDate = this._date.plusYears(years);\n        return this._withDateTime(newDate, this._time);\n    };\n    _proto.plusMonths = function plusMonths(months) {\n        var newDate = this._date.plusMonths(months);\n        return this._withDateTime(newDate, this._time);\n    };\n    _proto.plusWeeks = function plusWeeks(weeks) {\n        var newDate = this._date.plusWeeks(weeks);\n        return this._withDateTime(newDate, this._time);\n    };\n    _proto.plusDays = function plusDays(days) {\n        var newDate = this._date.plusDays(days);\n        return this._withDateTime(newDate, this._time);\n    };\n    _proto.plusHours = function plusHours(hours) {\n        return this._plusWithOverflow(this._date, hours, 0, 0, 0, 1);\n    };\n    _proto.plusMinutes = function plusMinutes(minutes) {\n        return this._plusWithOverflow(this._date, 0, minutes, 0, 0, 1);\n    };\n    _proto.plusSeconds = function plusSeconds(seconds) {\n        return this._plusWithOverflow(this._date, 0, 0, seconds, 0, 1);\n    };\n    _proto.plusNanos = function plusNanos(nanos) {\n        return this._plusWithOverflow(this._date, 0, 0, 0, nanos, 1);\n    };\n    _proto._minusUnit = function _minusUnit(amountToSubtract, unit) {\n        requireNonNull(unit, \"unit\");\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    };\n    _proto.minusYears = function minusYears(years) {\n        return this.plusYears(-1 * years);\n    };\n    _proto.minusMonths = function minusMonths(months) {\n        return this.plusMonths(-1 * months);\n    };\n    _proto.minusWeeks = function minusWeeks(weeks) {\n        return this.plusWeeks(-1 * weeks);\n    };\n    _proto.minusDays = function minusDays(days) {\n        return this.plusDays(-1 * days);\n    };\n    _proto.minusHours = function minusHours(hours) {\n        return this._plusWithOverflow(this._date, hours, 0, 0, 0, -1);\n    };\n    _proto.minusMinutes = function minusMinutes(minutes) {\n        return this._plusWithOverflow(this._date, 0, minutes, 0, 0, -1);\n    };\n    _proto.minusSeconds = function minusSeconds(seconds) {\n        return this._plusWithOverflow(this._date, 0, 0, seconds, 0, -1);\n    };\n    _proto.minusNanos = function minusNanos(nanos) {\n        return this._plusWithOverflow(this._date, 0, 0, 0, nanos, -1);\n    };\n    _proto._plusWithOverflow = function _plusWithOverflow(newDate, hours, minutes, seconds, nanos, sign) {\n        if (hours === 0 && minutes === 0 && seconds === 0 && nanos === 0) {\n            return this._withDateTime(newDate, this._time);\n        }\n        var totDays = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_DAY) + MathUtil.intDiv(seconds, LocalTime.SECONDS_PER_DAY) + MathUtil.intDiv(minutes, LocalTime.MINUTES_PER_DAY) + MathUtil.intDiv(hours, LocalTime.HOURS_PER_DAY);\n        totDays *= sign;\n        var totNanos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_DAY) + MathUtil.intMod(seconds, LocalTime.SECONDS_PER_DAY) * LocalTime.NANOS_PER_SECOND + MathUtil.intMod(minutes, LocalTime.MINUTES_PER_DAY) * LocalTime.NANOS_PER_MINUTE + MathUtil.intMod(hours, LocalTime.HOURS_PER_DAY) * LocalTime.NANOS_PER_HOUR;\n        var curNoD = this._time.toNanoOfDay();\n        totNanos = totNanos * sign + curNoD;\n        totDays += MathUtil.floorDiv(totNanos, LocalTime.NANOS_PER_DAY);\n        var newNoD = MathUtil.floorMod(totNanos, LocalTime.NANOS_PER_DAY);\n        var newTime = newNoD === curNoD ? this._time : LocalTime.ofNanoOfDay(newNoD);\n        return this._withDateTime(newDate.plusDays(totDays), newTime);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        if (_query === TemporalQueries.localDate()) {\n            return this.toLocalDate();\n        }\n        return _ChronoLocalDateTime.prototype.query.call(this, _query);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        return _ChronoLocalDateTime.prototype.adjustInto.call(this, temporal);\n    };\n    _proto.until = function until(endExclusive, unit) {\n        requireNonNull(endExclusive, \"endExclusive\");\n        requireNonNull(unit, \"unit\");\n        var end = LocalDateTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            if (unit.isTimeBased()) {\n                var daysUntil = this._date.daysUntil(end._date);\n                var timeUntil = end._time.toNanoOfDay() - this._time.toNanoOfDay();\n                if (daysUntil > 0 && timeUntil < 0) {\n                    daysUntil--;\n                    timeUntil += LocalTime.NANOS_PER_DAY;\n                } else if (daysUntil < 0 && timeUntil > 0) {\n                    daysUntil++;\n                    timeUntil -= LocalTime.NANOS_PER_DAY;\n                }\n                var amount = daysUntil;\n                switch(unit){\n                    case ChronoUnit.NANOS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.NANOS_PER_DAY);\n                        return MathUtil.safeAdd(amount, timeUntil);\n                    case ChronoUnit.MICROS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.MICROS_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, 1000));\n                    case ChronoUnit.MILLIS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.MILLIS_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, 1000000));\n                    case ChronoUnit.SECONDS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.SECONDS_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_SECOND));\n                    case ChronoUnit.MINUTES:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.MINUTES_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_MINUTE));\n                    case ChronoUnit.HOURS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.HOURS_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_HOUR));\n                    case ChronoUnit.HALF_DAYS:\n                        amount = MathUtil.safeMultiply(amount, 2);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_HOUR * 12));\n                }\n                throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n            }\n            var endDate = end._date;\n            var endTime = end._time;\n            if (endDate.isAfter(this._date) && endTime.isBefore(this._time)) {\n                endDate = endDate.minusDays(1);\n            } else if (endDate.isBefore(this._date) && endTime.isAfter(this._time)) {\n                endDate = endDate.plusDays(1);\n            }\n            return this._date.until(endDate, unit);\n        }\n        return unit.between(this, end);\n    };\n    _proto.atOffset = function atOffset(offset) {\n        return OffsetDateTime.of(this, offset);\n    };\n    _proto.atZone = function atZone(zone) {\n        return ZonedDateTime.of(this, zone);\n    };\n    _proto.toLocalDate = function toLocalDate() {\n        return this._date;\n    };\n    _proto.toLocalTime = function toLocalTime() {\n        return this._time;\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, LocalDateTime, \"other\");\n        return this._compareTo0(other);\n    };\n    _proto._compareTo0 = function _compareTo0(other) {\n        var cmp = this._date.compareTo(other.toLocalDate());\n        if (cmp === 0) {\n            cmp = this._time.compareTo(other.toLocalTime());\n        }\n        return cmp;\n    };\n    _proto.isAfter = function isAfter(other) {\n        return this.compareTo(other) > 0;\n    };\n    _proto.isBefore = function isBefore(other) {\n        return this.compareTo(other) < 0;\n    };\n    _proto.isEqual = function isEqual(other) {\n        return this.compareTo(other) === 0;\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof LocalDateTime) {\n            return this._date.equals(other._date) && this._time.equals(other._time);\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return this._date.hashCode() ^ this._time.hashCode();\n    };\n    _proto.toString = function toString() {\n        return this._date.toString() + \"T\" + this._time.toString();\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        return formatter.format(this);\n    };\n    return LocalDateTime;\n}(ChronoLocalDateTime);\nfunction _init$4() {\n    LocalDateTime.MIN = LocalDateTime.of(LocalDate.MIN, LocalTime.MIN);\n    LocalDateTime.MAX = LocalDateTime.of(LocalDate.MAX, LocalTime.MAX);\n    LocalDateTime.FROM = createTemporalQuery(\"LocalDateTime.FROM\", function(temporal) {\n        return LocalDateTime.from(temporal);\n    });\n}\nvar LocalTime = function(_Temporal) {\n    _inheritsLoose(LocalTime, _Temporal);\n    LocalTime.now = function now(clockOrZone) {\n        if (clockOrZone == null) {\n            return LocalTime._now(Clock.systemDefaultZone());\n        } else if (clockOrZone instanceof Clock) {\n            return LocalTime._now(clockOrZone);\n        } else {\n            return LocalTime._now(Clock.system(clockOrZone));\n        }\n    };\n    LocalTime._now = function _now(clock) {\n        if (clock === void 0) {\n            clock = Clock.systemDefaultZone();\n        }\n        requireNonNull(clock, \"clock\");\n        return LocalTime.ofInstant(clock.instant(), clock.zone());\n    };\n    LocalTime.ofInstant = function ofInstant(instant, zone) {\n        if (zone === void 0) {\n            zone = ZoneId.systemDefault();\n        }\n        var offset = zone.rules().offset(instant);\n        var secsOfDay = MathUtil.intMod(instant.epochSecond(), LocalTime.SECONDS_PER_DAY);\n        secsOfDay = MathUtil.intMod(secsOfDay + offset.totalSeconds(), LocalTime.SECONDS_PER_DAY);\n        if (secsOfDay < 0) {\n            secsOfDay += LocalTime.SECONDS_PER_DAY;\n        }\n        return LocalTime.ofSecondOfDay(secsOfDay, instant.nano());\n    };\n    LocalTime.of = function of(hour, minute, second, nanoOfSecond) {\n        return new LocalTime(hour, minute, second, nanoOfSecond);\n    };\n    LocalTime.ofSecondOfDay = function ofSecondOfDay(secondOfDay, nanoOfSecond) {\n        if (secondOfDay === void 0) {\n            secondOfDay = 0;\n        }\n        if (nanoOfSecond === void 0) {\n            nanoOfSecond = 0;\n        }\n        ChronoField.SECOND_OF_DAY.checkValidValue(secondOfDay);\n        ChronoField.NANO_OF_SECOND.checkValidValue(nanoOfSecond);\n        var hours = MathUtil.intDiv(secondOfDay, LocalTime.SECONDS_PER_HOUR);\n        secondOfDay -= hours * LocalTime.SECONDS_PER_HOUR;\n        var minutes = MathUtil.intDiv(secondOfDay, LocalTime.SECONDS_PER_MINUTE);\n        secondOfDay -= minutes * LocalTime.SECONDS_PER_MINUTE;\n        return new LocalTime(hours, minutes, secondOfDay, nanoOfSecond);\n    };\n    LocalTime.ofNanoOfDay = function ofNanoOfDay(nanoOfDay) {\n        if (nanoOfDay === void 0) {\n            nanoOfDay = 0;\n        }\n        ChronoField.NANO_OF_DAY.checkValidValue(nanoOfDay);\n        var hours = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_HOUR);\n        nanoOfDay -= hours * LocalTime.NANOS_PER_HOUR;\n        var minutes = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_MINUTE);\n        nanoOfDay -= minutes * LocalTime.NANOS_PER_MINUTE;\n        var seconds = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_SECOND);\n        nanoOfDay -= seconds * LocalTime.NANOS_PER_SECOND;\n        return new LocalTime(hours, minutes, seconds, nanoOfDay);\n    };\n    LocalTime.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        var time = temporal.query(TemporalQueries.localTime());\n        if (time == null) {\n            throw new DateTimeException(\"Unable to obtain LocalTime TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n        return time;\n    };\n    LocalTime.parse = function parse(text, formatter) {\n        if (formatter === void 0) {\n            formatter = DateTimeFormatter.ISO_LOCAL_TIME;\n        }\n        requireNonNull(formatter, \"formatter\");\n        return formatter.parse(text, LocalTime.FROM);\n    };\n    function LocalTime(hour, minute, second, nanoOfSecond) {\n        var _this;\n        if (hour === void 0) {\n            hour = 0;\n        }\n        if (minute === void 0) {\n            minute = 0;\n        }\n        if (second === void 0) {\n            second = 0;\n        }\n        if (nanoOfSecond === void 0) {\n            nanoOfSecond = 0;\n        }\n        _this = _Temporal.call(this) || this;\n        var _hour = MathUtil.safeToInt(hour);\n        var _minute = MathUtil.safeToInt(minute);\n        var _second = MathUtil.safeToInt(second);\n        var _nanoOfSecond = MathUtil.safeToInt(nanoOfSecond);\n        LocalTime._validate(_hour, _minute, _second, _nanoOfSecond);\n        if (_minute === 0 && _second === 0 && _nanoOfSecond === 0) {\n            if (!LocalTime.HOURS[_hour]) {\n                _this._hour = _hour;\n                _this._minute = _minute;\n                _this._second = _second;\n                _this._nano = _nanoOfSecond;\n                LocalTime.HOURS[_hour] = _assertThisInitialized(_this);\n            }\n            return LocalTime.HOURS[_hour] || _assertThisInitialized(_this);\n        }\n        _this._hour = _hour;\n        _this._minute = _minute;\n        _this._second = _second;\n        _this._nano = _nanoOfSecond;\n        return _this;\n    }\n    LocalTime._validate = function _validate(hour, minute, second, nanoOfSecond) {\n        ChronoField.HOUR_OF_DAY.checkValidValue(hour);\n        ChronoField.MINUTE_OF_HOUR.checkValidValue(minute);\n        ChronoField.SECOND_OF_MINUTE.checkValidValue(second);\n        ChronoField.NANO_OF_SECOND.checkValidValue(nanoOfSecond);\n    };\n    var _proto = LocalTime.prototype;\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isTimeBased();\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        requireNonNull(field);\n        return _Temporal.prototype.range.call(this, field);\n    };\n    _proto.get = function get(field) {\n        return this.getLong(field);\n    };\n    _proto.getLong = function getLong(field) {\n        requireNonNull(field, \"field\");\n        if (field instanceof ChronoField) {\n            return this._get0(field);\n        }\n        return field.getFrom(this);\n    };\n    _proto._get0 = function _get0(field) {\n        switch(field){\n            case ChronoField.NANO_OF_SECOND:\n                return this._nano;\n            case ChronoField.NANO_OF_DAY:\n                return this.toNanoOfDay();\n            case ChronoField.MICRO_OF_SECOND:\n                return MathUtil.intDiv(this._nano, 1000);\n            case ChronoField.MICRO_OF_DAY:\n                return MathUtil.intDiv(this.toNanoOfDay(), 1000);\n            case ChronoField.MILLI_OF_SECOND:\n                return MathUtil.intDiv(this._nano, 1000000);\n            case ChronoField.MILLI_OF_DAY:\n                return MathUtil.intDiv(this.toNanoOfDay(), 1000000);\n            case ChronoField.SECOND_OF_MINUTE:\n                return this._second;\n            case ChronoField.SECOND_OF_DAY:\n                return this.toSecondOfDay();\n            case ChronoField.MINUTE_OF_HOUR:\n                return this._minute;\n            case ChronoField.MINUTE_OF_DAY:\n                return this._hour * 60 + this._minute;\n            case ChronoField.HOUR_OF_AMPM:\n                return MathUtil.intMod(this._hour, 12);\n            case ChronoField.CLOCK_HOUR_OF_AMPM:\n                {\n                    var ham = MathUtil.intMod(this._hour, 12);\n                    return ham % 12 === 0 ? 12 : ham;\n                }\n            case ChronoField.HOUR_OF_DAY:\n                return this._hour;\n            case ChronoField.CLOCK_HOUR_OF_DAY:\n                return this._hour === 0 ? 24 : this._hour;\n            case ChronoField.AMPM_OF_DAY:\n                return MathUtil.intDiv(this._hour, 12);\n        }\n        throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n    };\n    _proto.hour = function hour() {\n        return this._hour;\n    };\n    _proto.minute = function minute() {\n        return this._minute;\n    };\n    _proto.second = function second() {\n        return this._second;\n    };\n    _proto.nano = function nano() {\n        return this._nano;\n    };\n    _proto._withAdjuster = function _withAdjuster(adjuster) {\n        requireNonNull(adjuster, \"adjuster\");\n        if (adjuster instanceof LocalTime) {\n            return adjuster;\n        }\n        return _Temporal.prototype._withAdjuster.call(this, adjuster);\n    };\n    _proto._withField = function _withField(field, newValue) {\n        requireNonNull(field, \"field\");\n        requireInstance(field, TemporalField, \"field\");\n        if (field instanceof ChronoField) {\n            field.checkValidValue(newValue);\n            switch(field){\n                case ChronoField.NANO_OF_SECOND:\n                    return this.withNano(newValue);\n                case ChronoField.NANO_OF_DAY:\n                    return LocalTime.ofNanoOfDay(newValue);\n                case ChronoField.MICRO_OF_SECOND:\n                    return this.withNano(newValue * 1000);\n                case ChronoField.MICRO_OF_DAY:\n                    return LocalTime.ofNanoOfDay(newValue * 1000);\n                case ChronoField.MILLI_OF_SECOND:\n                    return this.withNano(newValue * 1000000);\n                case ChronoField.MILLI_OF_DAY:\n                    return LocalTime.ofNanoOfDay(newValue * 1000000);\n                case ChronoField.SECOND_OF_MINUTE:\n                    return this.withSecond(newValue);\n                case ChronoField.SECOND_OF_DAY:\n                    return this.plusSeconds(newValue - this.toSecondOfDay());\n                case ChronoField.MINUTE_OF_HOUR:\n                    return this.withMinute(newValue);\n                case ChronoField.MINUTE_OF_DAY:\n                    return this.plusMinutes(newValue - (this._hour * 60 + this._minute));\n                case ChronoField.HOUR_OF_AMPM:\n                    return this.plusHours(newValue - MathUtil.intMod(this._hour, 12));\n                case ChronoField.CLOCK_HOUR_OF_AMPM:\n                    return this.plusHours((newValue === 12 ? 0 : newValue) - MathUtil.intMod(this._hour, 12));\n                case ChronoField.HOUR_OF_DAY:\n                    return this.withHour(newValue);\n                case ChronoField.CLOCK_HOUR_OF_DAY:\n                    return this.withHour(newValue === 24 ? 0 : newValue);\n                case ChronoField.AMPM_OF_DAY:\n                    return this.plusHours((newValue - MathUtil.intDiv(this._hour, 12)) * 12);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto.withHour = function withHour(hour) {\n        if (hour === void 0) {\n            hour = 0;\n        }\n        if (this._hour === hour) {\n            return this;\n        }\n        return new LocalTime(hour, this._minute, this._second, this._nano);\n    };\n    _proto.withMinute = function withMinute(minute) {\n        if (minute === void 0) {\n            minute = 0;\n        }\n        if (this._minute === minute) {\n            return this;\n        }\n        return new LocalTime(this._hour, minute, this._second, this._nano);\n    };\n    _proto.withSecond = function withSecond(second) {\n        if (second === void 0) {\n            second = 0;\n        }\n        if (this._second === second) {\n            return this;\n        }\n        return new LocalTime(this._hour, this._minute, second, this._nano);\n    };\n    _proto.withNano = function withNano(nanoOfSecond) {\n        if (nanoOfSecond === void 0) {\n            nanoOfSecond = 0;\n        }\n        if (this._nano === nanoOfSecond) {\n            return this;\n        }\n        return new LocalTime(this._hour, this._minute, this._second, nanoOfSecond);\n    };\n    _proto.truncatedTo = function truncatedTo(unit) {\n        requireNonNull(unit, \"unit\");\n        if (unit === ChronoUnit.NANOS) {\n            return this;\n        }\n        var unitDur = unit.duration();\n        if (unitDur.seconds() > LocalTime.SECONDS_PER_DAY) {\n            throw new DateTimeException(\"Unit is too large to be used for truncation\");\n        }\n        var dur = unitDur.toNanos();\n        if (MathUtil.intMod(LocalTime.NANOS_PER_DAY, dur) !== 0) {\n            throw new DateTimeException(\"Unit must divide into a standard day without remainder\");\n        }\n        var nod = this.toNanoOfDay();\n        return LocalTime.ofNanoOfDay(MathUtil.intDiv(nod, dur) * dur);\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        requireNonNull(unit, \"unit\");\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.NANOS:\n                    return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS:\n                    return this.plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MICROS_PER_DAY) * 1000);\n                case ChronoUnit.MILLIS:\n                    return this.plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MILLIS_PER_DAY) * 1000000);\n                case ChronoUnit.SECONDS:\n                    return this.plusSeconds(amountToAdd);\n                case ChronoUnit.MINUTES:\n                    return this.plusMinutes(amountToAdd);\n                case ChronoUnit.HOURS:\n                    return this.plusHours(amountToAdd);\n                case ChronoUnit.HALF_DAYS:\n                    return this.plusHours(MathUtil.intMod(amountToAdd, 2) * 12);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusHours = function plusHours(hoursToAdd) {\n        if (hoursToAdd === 0) {\n            return this;\n        }\n        var newHour = MathUtil.intMod(MathUtil.intMod(hoursToAdd, LocalTime.HOURS_PER_DAY) + this._hour + LocalTime.HOURS_PER_DAY, LocalTime.HOURS_PER_DAY);\n        return new LocalTime(newHour, this._minute, this._second, this._nano);\n    };\n    _proto.plusMinutes = function plusMinutes(minutesToAdd) {\n        if (minutesToAdd === 0) {\n            return this;\n        }\n        var mofd = this._hour * LocalTime.MINUTES_PER_HOUR + this._minute;\n        var newMofd = MathUtil.intMod(MathUtil.intMod(minutesToAdd, LocalTime.MINUTES_PER_DAY) + mofd + LocalTime.MINUTES_PER_DAY, LocalTime.MINUTES_PER_DAY);\n        if (mofd === newMofd) {\n            return this;\n        }\n        var newHour = MathUtil.intDiv(newMofd, LocalTime.MINUTES_PER_HOUR);\n        var newMinute = MathUtil.intMod(newMofd, LocalTime.MINUTES_PER_HOUR);\n        return new LocalTime(newHour, newMinute, this._second, this._nano);\n    };\n    _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n        if (secondsToAdd === 0) {\n            return this;\n        }\n        var sofd = this._hour * LocalTime.SECONDS_PER_HOUR + this._minute * LocalTime.SECONDS_PER_MINUTE + this._second;\n        var newSofd = MathUtil.intMod(MathUtil.intMod(secondsToAdd, LocalTime.SECONDS_PER_DAY) + sofd + LocalTime.SECONDS_PER_DAY, LocalTime.SECONDS_PER_DAY);\n        if (sofd === newSofd) {\n            return this;\n        }\n        var newHour = MathUtil.intDiv(newSofd, LocalTime.SECONDS_PER_HOUR);\n        var newMinute = MathUtil.intMod(MathUtil.intDiv(newSofd, LocalTime.SECONDS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n        var newSecond = MathUtil.intMod(newSofd, LocalTime.SECONDS_PER_MINUTE);\n        return new LocalTime(newHour, newMinute, newSecond, this._nano);\n    };\n    _proto.plusNanos = function plusNanos(nanosToAdd) {\n        if (nanosToAdd === 0) {\n            return this;\n        }\n        var nofd = this.toNanoOfDay();\n        var newNofd = MathUtil.intMod(MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_DAY) + nofd + LocalTime.NANOS_PER_DAY, LocalTime.NANOS_PER_DAY);\n        if (nofd === newNofd) {\n            return this;\n        }\n        var newHour = MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_HOUR);\n        var newMinute = MathUtil.intMod(MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n        var newSecond = MathUtil.intMod(MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_SECOND), LocalTime.SECONDS_PER_MINUTE);\n        var newNano = MathUtil.intMod(newNofd, LocalTime.NANOS_PER_SECOND);\n        return new LocalTime(newHour, newMinute, newSecond, newNano);\n    };\n    _proto._minusUnit = function _minusUnit(amountToSubtract, unit) {\n        requireNonNull(unit, \"unit\");\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    };\n    _proto.minusHours = function minusHours(hoursToSubtract) {\n        return this.plusHours(-1 * MathUtil.intMod(hoursToSubtract, LocalTime.HOURS_PER_DAY));\n    };\n    _proto.minusMinutes = function minusMinutes(minutesToSubtract) {\n        return this.plusMinutes(-1 * MathUtil.intMod(minutesToSubtract, LocalTime.MINUTES_PER_DAY));\n    };\n    _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n        return this.plusSeconds(-1 * MathUtil.intMod(secondsToSubtract, LocalTime.SECONDS_PER_DAY));\n    };\n    _proto.minusNanos = function minusNanos(nanosToSubtract) {\n        return this.plusNanos(-1 * MathUtil.intMod(nanosToSubtract, LocalTime.NANOS_PER_DAY));\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (_query === TemporalQueries.localTime()) {\n            return this;\n        }\n        if (_query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.zone() || _query === TemporalQueries.offset() || _query === TemporalQueries.localDate()) {\n            return null;\n        }\n        return _query.queryFrom(this);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        return temporal.with(LocalTime.NANO_OF_DAY, this.toNanoOfDay());\n    };\n    _proto.until = function until(endExclusive, unit) {\n        requireNonNull(endExclusive, \"endExclusive\");\n        requireNonNull(unit, \"unit\");\n        var end = LocalTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            var nanosUntil = end.toNanoOfDay() - this.toNanoOfDay();\n            switch(unit){\n                case ChronoUnit.NANOS:\n                    return nanosUntil;\n                case ChronoUnit.MICROS:\n                    return MathUtil.intDiv(nanosUntil, 1000);\n                case ChronoUnit.MILLIS:\n                    return MathUtil.intDiv(nanosUntil, 1000000);\n                case ChronoUnit.SECONDS:\n                    return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_SECOND);\n                case ChronoUnit.MINUTES:\n                    return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_MINUTE);\n                case ChronoUnit.HOURS:\n                    return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_HOUR);\n                case ChronoUnit.HALF_DAYS:\n                    return MathUtil.intDiv(nanosUntil, 12 * LocalTime.NANOS_PER_HOUR);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    };\n    _proto.atDate = function atDate(date) {\n        return LocalDateTime.of(date, this);\n    };\n    _proto.atOffset = function atOffset(offset) {\n        return OffsetTime.of(this, offset);\n    };\n    _proto.toSecondOfDay = function toSecondOfDay() {\n        var total = this._hour * LocalTime.SECONDS_PER_HOUR;\n        total += this._minute * LocalTime.SECONDS_PER_MINUTE;\n        total += this._second;\n        return total;\n    };\n    _proto.toNanoOfDay = function toNanoOfDay() {\n        var total = this._hour * LocalTime.NANOS_PER_HOUR;\n        total += this._minute * LocalTime.NANOS_PER_MINUTE;\n        total += this._second * LocalTime.NANOS_PER_SECOND;\n        total += this._nano;\n        return total;\n    };\n    _proto.compareTo = function compareTo(other) {\n        requireNonNull(other, \"other\");\n        requireInstance(other, LocalTime, \"other\");\n        var cmp = MathUtil.compareNumbers(this._hour, other._hour);\n        if (cmp === 0) {\n            cmp = MathUtil.compareNumbers(this._minute, other._minute);\n            if (cmp === 0) {\n                cmp = MathUtil.compareNumbers(this._second, other._second);\n                if (cmp === 0) {\n                    cmp = MathUtil.compareNumbers(this._nano, other._nano);\n                }\n            }\n        }\n        return cmp;\n    };\n    _proto.isAfter = function isAfter(other) {\n        return this.compareTo(other) > 0;\n    };\n    _proto.isBefore = function isBefore(other) {\n        return this.compareTo(other) < 0;\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof LocalTime) {\n            return this._hour === other._hour && this._minute === other._minute && this._second === other._second && this._nano === other._nano;\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        var nod = this.toNanoOfDay();\n        return MathUtil.hash(nod);\n    };\n    _proto.toString = function toString() {\n        var buf = \"\";\n        var hourValue = this._hour;\n        var minuteValue = this._minute;\n        var secondValue = this._second;\n        var nanoValue = this._nano;\n        buf += hourValue < 10 ? \"0\" : \"\";\n        buf += hourValue;\n        buf += minuteValue < 10 ? \":0\" : \":\";\n        buf += minuteValue;\n        if (secondValue > 0 || nanoValue > 0) {\n            buf += secondValue < 10 ? \":0\" : \":\";\n            buf += secondValue;\n            if (nanoValue > 0) {\n                buf += \".\";\n                if (MathUtil.intMod(nanoValue, 1000000) === 0) {\n                    buf += (\"\" + (MathUtil.intDiv(nanoValue, 1000000) + 1000)).substring(1);\n                } else if (MathUtil.intMod(nanoValue, 1000) === 0) {\n                    buf += (\"\" + (MathUtil.intDiv(nanoValue, 1000) + 1000000)).substring(1);\n                } else {\n                    buf += (\"\" + (nanoValue + 1000000000)).substring(1);\n                }\n            }\n        }\n        return buf;\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    _proto.format = function format(formatter) {\n        requireNonNull(formatter, \"formatter\");\n        return formatter.format(this);\n    };\n    return LocalTime;\n}(Temporal);\nfunction _init$3() {\n    LocalTime.HOURS = [];\n    for(var hour = 0; hour < 24; hour++){\n        LocalTime.of(hour, 0, 0, 0);\n    }\n    LocalTime.MIN = LocalTime.HOURS[0];\n    LocalTime.MAX = new LocalTime(23, 59, 59, 999999999);\n    LocalTime.MIDNIGHT = LocalTime.HOURS[0];\n    LocalTime.NOON = LocalTime.HOURS[12];\n    LocalTime.FROM = createTemporalQuery(\"LocalTime.FROM\", function(temporal) {\n        return LocalTime.from(temporal);\n    });\n}\nLocalTime.HOURS_PER_DAY = 24;\nLocalTime.MINUTES_PER_HOUR = 60;\nLocalTime.MINUTES_PER_DAY = LocalTime.MINUTES_PER_HOUR * LocalTime.HOURS_PER_DAY;\nLocalTime.SECONDS_PER_MINUTE = 60;\nLocalTime.SECONDS_PER_HOUR = LocalTime.SECONDS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\nLocalTime.SECONDS_PER_DAY = LocalTime.SECONDS_PER_HOUR * LocalTime.HOURS_PER_DAY;\nLocalTime.MILLIS_PER_DAY = LocalTime.SECONDS_PER_DAY * 1000;\nLocalTime.MICROS_PER_DAY = LocalTime.SECONDS_PER_DAY * 1000000;\nLocalTime.NANOS_PER_SECOND = 1000000000;\nLocalTime.NANOS_PER_MINUTE = LocalTime.NANOS_PER_SECOND * LocalTime.SECONDS_PER_MINUTE;\nLocalTime.NANOS_PER_HOUR = LocalTime.NANOS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\nLocalTime.NANOS_PER_DAY = LocalTime.NANOS_PER_HOUR * LocalTime.HOURS_PER_DAY;\nvar NANOS_PER_MILLI = 1000000;\nvar Instant = function(_Temporal) {\n    _inheritsLoose(Instant, _Temporal);\n    Instant.now = function now(clock) {\n        if (clock === void 0) {\n            clock = Clock.systemUTC();\n        }\n        return clock.instant();\n    };\n    Instant.ofEpochSecond = function ofEpochSecond(epochSecond, nanoAdjustment) {\n        if (nanoAdjustment === void 0) {\n            nanoAdjustment = 0;\n        }\n        var secs = epochSecond + MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        var nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        return Instant._create(secs, nos);\n    };\n    Instant.ofEpochMilli = function ofEpochMilli(epochMilli) {\n        var secs = MathUtil.floorDiv(epochMilli, 1000);\n        var mos = MathUtil.floorMod(epochMilli, 1000);\n        return Instant._create(secs, mos * 1000000);\n    };\n    Instant.ofEpochMicro = function ofEpochMicro(epochMicro) {\n        var secs = MathUtil.floorDiv(epochMicro, 1000000);\n        var mos = MathUtil.floorMod(epochMicro, 1000000);\n        return Instant._create(secs, mos * 1000);\n    };\n    Instant.from = function from(temporal) {\n        try {\n            var instantSecs = temporal.getLong(ChronoField.INSTANT_SECONDS);\n            var nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n            return Instant.ofEpochSecond(instantSecs, nanoOfSecond);\n        } catch (ex) {\n            throw new DateTimeException(\"Unable to obtain Instant from TemporalAccessor: \" + temporal + \", type \" + typeof temporal, ex);\n        }\n    };\n    Instant.parse = function parse(text) {\n        return DateTimeFormatter.ISO_INSTANT.parse(text, Instant.FROM);\n    };\n    Instant._create = function _create(seconds, nanoOfSecond) {\n        if (seconds === 0 && nanoOfSecond === 0) {\n            return Instant.EPOCH;\n        }\n        return new Instant(seconds, nanoOfSecond);\n    };\n    Instant._validate = function _validate(seconds, nanoOfSecond) {\n        if (seconds < Instant.MIN_SECONDS || seconds > Instant.MAX_SECONDS) {\n            throw new DateTimeException(\"Instant exceeds minimum or maximum instant\");\n        }\n        if (nanoOfSecond < 0 || nanoOfSecond > LocalTime.NANOS_PER_SECOND) {\n            throw new DateTimeException(\"Instant exceeds minimum or maximum instant\");\n        }\n    };\n    function Instant(seconds, nanoOfSecond) {\n        var _this;\n        _this = _Temporal.call(this) || this;\n        Instant._validate(seconds, nanoOfSecond);\n        _this._seconds = MathUtil.safeToInt(seconds);\n        _this._nanos = MathUtil.safeToInt(nanoOfSecond);\n        return _this;\n    }\n    var _proto = Instant.prototype;\n    _proto.isSupported = function isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit === ChronoField.INSTANT_SECONDS || fieldOrUnit === ChronoField.NANO_OF_SECOND || fieldOrUnit === ChronoField.MICRO_OF_SECOND || fieldOrUnit === ChronoField.MILLI_OF_SECOND;\n        }\n        if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoUnit.DAYS;\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    };\n    _proto.range = function range(field) {\n        return _Temporal.prototype.range.call(this, field);\n    };\n    _proto.get = function get(field) {\n        return this.getLong(field);\n    };\n    _proto.getLong = function getLong(field) {\n        if (field instanceof ChronoField) {\n            switch(field){\n                case ChronoField.NANO_OF_SECOND:\n                    return this._nanos;\n                case ChronoField.MICRO_OF_SECOND:\n                    return MathUtil.intDiv(this._nanos, 1000);\n                case ChronoField.MILLI_OF_SECOND:\n                    return MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n                case ChronoField.INSTANT_SECONDS:\n                    return this._seconds;\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.getFrom(this);\n    };\n    _proto.epochSecond = function epochSecond() {\n        return this._seconds;\n    };\n    _proto.nano = function nano() {\n        return this._nanos;\n    };\n    _proto._withField = function _withField(field, newValue) {\n        requireNonNull(field, \"field\");\n        if (field instanceof ChronoField) {\n            field.checkValidValue(newValue);\n            switch(field){\n                case ChronoField.MILLI_OF_SECOND:\n                    {\n                        var nval = newValue * NANOS_PER_MILLI;\n                        return nval !== this._nanos ? Instant._create(this._seconds, nval) : this;\n                    }\n                case ChronoField.MICRO_OF_SECOND:\n                    {\n                        var _nval = newValue * 1000;\n                        return _nval !== this._nanos ? Instant._create(this._seconds, _nval) : this;\n                    }\n                case ChronoField.NANO_OF_SECOND:\n                    return newValue !== this._nanos ? Instant._create(this._seconds, newValue) : this;\n                case ChronoField.INSTANT_SECONDS:\n                    return newValue !== this._seconds ? Instant._create(newValue, this._nanos) : this;\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);\n        }\n        return field.adjustInto(this, newValue);\n    };\n    _proto.truncatedTo = function truncatedTo(unit) {\n        requireNonNull(unit, \"unit\");\n        if (unit === ChronoUnit.NANOS) {\n            return this;\n        }\n        var unitDur = unit.duration();\n        if (unitDur.seconds() > LocalTime.SECONDS_PER_DAY) {\n            throw new DateTimeException(\"Unit is too large to be used for truncation\");\n        }\n        var dur = unitDur.toNanos();\n        if (MathUtil.intMod(LocalTime.NANOS_PER_DAY, dur) !== 0) {\n            throw new DateTimeException(\"Unit must divide into a standard day without remainder\");\n        }\n        var nod = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_DAY) * LocalTime.NANOS_PER_SECOND + this._nanos;\n        var result = MathUtil.intDiv(nod, dur) * dur;\n        return this.plusNanos(result - nod);\n    };\n    _proto._plusUnit = function _plusUnit(amountToAdd, unit) {\n        requireNonNull(amountToAdd, \"amountToAdd\");\n        requireNonNull(unit, \"unit\");\n        requireInstance(unit, TemporalUnit);\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.NANOS:\n                    return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS:\n                    return this.plusMicros(amountToAdd);\n                case ChronoUnit.MILLIS:\n                    return this.plusMillis(amountToAdd);\n                case ChronoUnit.SECONDS:\n                    return this.plusSeconds(amountToAdd);\n                case ChronoUnit.MINUTES:\n                    return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_MINUTE));\n                case ChronoUnit.HOURS:\n                    return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_HOUR));\n                case ChronoUnit.HALF_DAYS:\n                    return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY / 2));\n                case ChronoUnit.DAYS:\n                    return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY));\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.addTo(this, amountToAdd);\n    };\n    _proto.plusSeconds = function plusSeconds(secondsToAdd) {\n        return this._plus(secondsToAdd, 0);\n    };\n    _proto.plusMillis = function plusMillis(millisToAdd) {\n        return this._plus(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * NANOS_PER_MILLI);\n    };\n    _proto.plusNanos = function plusNanos(nanosToAdd) {\n        return this._plus(0, nanosToAdd);\n    };\n    _proto.plusMicros = function plusMicros(microsToAdd) {\n        return this._plus(MathUtil.intDiv(microsToAdd, 1000000), MathUtil.intMod(microsToAdd, 1000000) * 1000);\n    };\n    _proto._plus = function _plus(secondsToAdd, nanosToAdd) {\n        if (secondsToAdd === 0 && nanosToAdd === 0) {\n            return this;\n        }\n        var epochSec = this._seconds + secondsToAdd;\n        epochSec = epochSec + MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n        var nanoAdjustment = this._nanos + nanosToAdd % LocalTime.NANOS_PER_SECOND;\n        return Instant.ofEpochSecond(epochSec, nanoAdjustment);\n    };\n    _proto._minusUnit = function _minusUnit(amountToSubtract, unit) {\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    };\n    _proto.minusSeconds = function minusSeconds(secondsToSubtract) {\n        return this.plusSeconds(secondsToSubtract * -1);\n    };\n    _proto.minusMillis = function minusMillis(millisToSubtract) {\n        return this.plusMillis(-1 * millisToSubtract);\n    };\n    _proto.minusNanos = function minusNanos(nanosToSubtract) {\n        return this.plusNanos(-1 * nanosToSubtract);\n    };\n    _proto.minusMicros = function minusMicros(microsToSubtract) {\n        return this.plusMicros(-1 * microsToSubtract);\n    };\n    _proto.query = function query(_query) {\n        requireNonNull(_query, \"query\");\n        if (_query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        }\n        if (_query === TemporalQueries.localDate() || _query === TemporalQueries.localTime() || _query === TemporalQueries.chronology() || _query === TemporalQueries.zoneId() || _query === TemporalQueries.zone() || _query === TemporalQueries.offset()) {\n            return null;\n        }\n        return _query.queryFrom(this);\n    };\n    _proto.adjustInto = function adjustInto(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        return temporal.with(ChronoField.INSTANT_SECONDS, this._seconds).with(ChronoField.NANO_OF_SECOND, this._nanos);\n    };\n    _proto.until = function until(endExclusive, unit) {\n        requireNonNull(endExclusive, \"endExclusive\");\n        requireNonNull(unit, \"unit\");\n        var end = Instant.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            switch(unit){\n                case ChronoUnit.NANOS:\n                    return this._nanosUntil(end);\n                case ChronoUnit.MICROS:\n                    return this._microsUntil(end);\n                case ChronoUnit.MILLIS:\n                    return MathUtil.safeSubtract(end.toEpochMilli(), this.toEpochMilli());\n                case ChronoUnit.SECONDS:\n                    return this._secondsUntil(end);\n                case ChronoUnit.MINUTES:\n                    return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_MINUTE);\n                case ChronoUnit.HOURS:\n                    return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_HOUR);\n                case ChronoUnit.HALF_DAYS:\n                    return MathUtil.intDiv(this._secondsUntil(end), 12 * LocalTime.SECONDS_PER_HOUR);\n                case ChronoUnit.DAYS:\n                    return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_DAY);\n            }\n            throw new UnsupportedTemporalTypeException(\"Unsupported unit: \" + unit);\n        }\n        return unit.between(this, end);\n    };\n    _proto._microsUntil = function _microsUntil(end) {\n        var secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n        var totalMicros = MathUtil.safeMultiply(secsDiff, 1000000);\n        return MathUtil.safeAdd(totalMicros, MathUtil.intDiv(end.nano() - this.nano(), 1000));\n    };\n    _proto._nanosUntil = function _nanosUntil(end) {\n        var secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n        var totalNanos = MathUtil.safeMultiply(secsDiff, LocalTime.NANOS_PER_SECOND);\n        return MathUtil.safeAdd(totalNanos, end.nano() - this.nano());\n    };\n    _proto._secondsUntil = function _secondsUntil(end) {\n        var secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n        var nanosDiff = end.nano() - this.nano();\n        if (secsDiff > 0 && nanosDiff < 0) {\n            secsDiff--;\n        } else if (secsDiff < 0 && nanosDiff > 0) {\n            secsDiff++;\n        }\n        return secsDiff;\n    };\n    _proto.atOffset = function atOffset(offset) {\n        return OffsetDateTime.ofInstant(this, offset);\n    };\n    _proto.atZone = function atZone(zone) {\n        return ZonedDateTime.ofInstant(this, zone);\n    };\n    _proto.toEpochMilli = function toEpochMilli() {\n        var millis = MathUtil.safeMultiply(this._seconds, 1000);\n        return millis + MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n    };\n    _proto.compareTo = function compareTo(otherInstant) {\n        requireNonNull(otherInstant, \"otherInstant\");\n        requireInstance(otherInstant, Instant, \"otherInstant\");\n        var cmp = MathUtil.compareNumbers(this._seconds, otherInstant._seconds);\n        if (cmp !== 0) {\n            return cmp;\n        }\n        return this._nanos - otherInstant._nanos;\n    };\n    _proto.isAfter = function isAfter(otherInstant) {\n        return this.compareTo(otherInstant) > 0;\n    };\n    _proto.isBefore = function isBefore(otherInstant) {\n        return this.compareTo(otherInstant) < 0;\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof Instant) {\n            return this.epochSecond() === other.epochSecond() && this.nano() === other.nano();\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return MathUtil.hashCode(this._seconds, this._nanos);\n    };\n    _proto.toString = function toString() {\n        return DateTimeFormatter.ISO_INSTANT.format(this);\n    };\n    _proto.toJSON = function toJSON() {\n        return this.toString();\n    };\n    return Instant;\n}(Temporal);\nfunction _init$2() {\n    Instant.MIN_SECONDS = -31619119219200;\n    Instant.MAX_SECONDS = 31494816403199;\n    Instant.EPOCH = new Instant(0, 0);\n    Instant.MIN = Instant.ofEpochSecond(Instant.MIN_SECONDS, 0);\n    Instant.MAX = Instant.ofEpochSecond(Instant.MAX_SECONDS, 999999999);\n    Instant.FROM = createTemporalQuery(\"Instant.FROM\", function(temporal) {\n        return Instant.from(temporal);\n    });\n}\nvar Clock = function() {\n    function Clock() {}\n    Clock.systemUTC = function systemUTC() {\n        return new SystemClock(ZoneOffset.UTC);\n    };\n    Clock.systemDefaultZone = function systemDefaultZone() {\n        return new SystemClock(ZoneId.systemDefault());\n    };\n    Clock.system = function system(zone) {\n        return new SystemClock(zone);\n    };\n    Clock.fixed = function fixed(fixedInstant, zoneId) {\n        return new FixedClock(fixedInstant, zoneId);\n    };\n    Clock.offset = function offset(baseClock, duration) {\n        return new OffsetClock(baseClock, duration);\n    };\n    var _proto = Clock.prototype;\n    _proto.millis = function millis() {\n        abstractMethodFail(\"Clock.millis\");\n    };\n    _proto.instant = function instant() {\n        abstractMethodFail(\"Clock.instant\");\n    };\n    _proto.zone = function zone() {\n        abstractMethodFail(\"Clock.zone\");\n    };\n    _proto.withZone = function withZone() {\n        abstractMethodFail(\"Clock.withZone\");\n    };\n    return Clock;\n}();\nvar SystemClock = function(_Clock) {\n    _inheritsLoose(SystemClock, _Clock);\n    function SystemClock(zone) {\n        var _this;\n        requireNonNull(zone, \"zone\");\n        _this = _Clock.call(this) || this;\n        _this._zone = zone;\n        return _this;\n    }\n    var _proto2 = SystemClock.prototype;\n    _proto2.zone = function zone() {\n        return this._zone;\n    };\n    _proto2.millis = function millis() {\n        return new Date().getTime();\n    };\n    _proto2.instant = function instant() {\n        return Instant.ofEpochMilli(this.millis());\n    };\n    _proto2.equals = function equals(obj) {\n        if (obj instanceof SystemClock) {\n            return this._zone.equals(obj._zone);\n        }\n        return false;\n    };\n    _proto2.withZone = function withZone(zone) {\n        if (zone.equals(this._zone)) {\n            return this;\n        }\n        return new SystemClock(zone);\n    };\n    _proto2.toString = function toString() {\n        return \"SystemClock[\" + this._zone.toString() + \"]\";\n    };\n    return SystemClock;\n}(Clock);\nvar FixedClock = function(_Clock2) {\n    _inheritsLoose(FixedClock, _Clock2);\n    function FixedClock(fixedInstant, zoneId) {\n        var _this2;\n        _this2 = _Clock2.call(this) || this;\n        _this2._instant = fixedInstant;\n        _this2._zoneId = zoneId;\n        return _this2;\n    }\n    var _proto3 = FixedClock.prototype;\n    _proto3.instant = function instant() {\n        return this._instant;\n    };\n    _proto3.millis = function millis() {\n        return this._instant.toEpochMilli();\n    };\n    _proto3.zone = function zone() {\n        return this._zoneId;\n    };\n    _proto3.toString = function toString() {\n        return \"FixedClock[]\";\n    };\n    _proto3.equals = function equals(obj) {\n        if (obj instanceof FixedClock) {\n            return this._instant.equals(obj._instant) && this._zoneId.equals(obj._zoneId);\n        }\n        return false;\n    };\n    _proto3.withZone = function withZone(zone) {\n        if (zone.equals(this._zoneId)) {\n            return this;\n        }\n        return new FixedClock(this._instant, zone);\n    };\n    return FixedClock;\n}(Clock);\nvar OffsetClock = function(_Clock3) {\n    _inheritsLoose(OffsetClock, _Clock3);\n    function OffsetClock(baseClock, offset) {\n        var _this3;\n        _this3 = _Clock3.call(this) || this;\n        _this3._baseClock = baseClock;\n        _this3._offset = offset;\n        return _this3;\n    }\n    var _proto4 = OffsetClock.prototype;\n    _proto4.zone = function zone() {\n        return this._baseClock.zone();\n    };\n    _proto4.withZone = function withZone(zone) {\n        if (zone.equals(this._baseClock.zone())) {\n            return this;\n        }\n        return new OffsetClock(this._baseClock.withZone(zone), this._offset);\n    };\n    _proto4.millis = function millis() {\n        return this._baseClock.millis() + this._offset.toMillis();\n    };\n    _proto4.instant = function instant() {\n        return this._baseClock.instant().plus(this._offset);\n    };\n    _proto4.equals = function equals(obj) {\n        if (obj instanceof OffsetClock) {\n            return this._baseClock.equals(obj._baseClock) && this._offset.equals(obj._offset);\n        }\n        return false;\n    };\n    _proto4.toString = function toString() {\n        return \"OffsetClock[\" + this._baseClock + \",\" + this._offset + \"]\";\n    };\n    return OffsetClock;\n}(Clock);\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var ZoneOffsetTransition = function() {\n    ZoneOffsetTransition.of = function of(transition, offsetBefore, offsetAfter) {\n        return new ZoneOffsetTransition(transition, offsetBefore, offsetAfter);\n    };\n    function ZoneOffsetTransition(transition, offsetBefore, offsetAfter) {\n        requireNonNull(transition, \"transition\");\n        requireNonNull(offsetBefore, \"offsetBefore\");\n        requireNonNull(offsetAfter, \"offsetAfter\");\n        if (offsetBefore.equals(offsetAfter)) {\n            throw new IllegalArgumentException(\"Offsets must not be equal\");\n        }\n        if (transition.nano() !== 0) {\n            throw new IllegalArgumentException(\"Nano-of-second must be zero\");\n        }\n        if (transition instanceof LocalDateTime) {\n            this._transition = transition;\n        } else {\n            this._transition = LocalDateTime.ofEpochSecond(transition, 0, offsetBefore);\n        }\n        this._offsetBefore = offsetBefore;\n        this._offsetAfter = offsetAfter;\n    }\n    var _proto = ZoneOffsetTransition.prototype;\n    _proto.instant = function instant() {\n        return this._transition.toInstant(this._offsetBefore);\n    };\n    _proto.toEpochSecond = function toEpochSecond() {\n        return this._transition.toEpochSecond(this._offsetBefore);\n    };\n    _proto.dateTimeBefore = function dateTimeBefore() {\n        return this._transition;\n    };\n    _proto.dateTimeAfter = function dateTimeAfter() {\n        return this._transition.plusSeconds(this.durationSeconds());\n    };\n    _proto.offsetBefore = function offsetBefore() {\n        return this._offsetBefore;\n    };\n    _proto.offsetAfter = function offsetAfter() {\n        return this._offsetAfter;\n    };\n    _proto.duration = function duration() {\n        return Duration.ofSeconds(this.durationSeconds());\n    };\n    _proto.durationSeconds = function durationSeconds() {\n        return this._offsetAfter.totalSeconds() - this._offsetBefore.totalSeconds();\n    };\n    _proto.isGap = function isGap() {\n        return this._offsetAfter.totalSeconds() > this._offsetBefore.totalSeconds();\n    };\n    _proto.isOverlap = function isOverlap() {\n        return this._offsetAfter.totalSeconds() < this._offsetBefore.totalSeconds();\n    };\n    _proto.isValidOffset = function isValidOffset(offset) {\n        return this.isGap() ? false : this._offsetBefore.equals(offset) || this._offsetAfter.equals(offset);\n    };\n    _proto.validOffsets = function validOffsets() {\n        if (this.isGap()) {\n            return [];\n        } else {\n            return [\n                this._offsetBefore,\n                this._offsetAfter\n            ];\n        }\n    };\n    _proto.compareTo = function compareTo(transition) {\n        return this.instant().compareTo(transition.instant());\n    };\n    _proto.equals = function equals(other) {\n        if (other === this) {\n            return true;\n        }\n        if (other instanceof ZoneOffsetTransition) {\n            var d = other;\n            return this._transition.equals(d._transition) && this._offsetBefore.equals(d.offsetBefore()) && this._offsetAfter.equals(d.offsetAfter());\n        }\n        return false;\n    };\n    _proto.hashCode = function hashCode() {\n        return this._transition.hashCode() ^ this._offsetBefore.hashCode() ^ this._offsetAfter.hashCode() >>> 16;\n    };\n    _proto.toString = function toString() {\n        return \"Transition[\" + (this.isGap() ? \"Gap\" : \"Overlap\") + \" at \" + this._transition.toString() + this._offsetBefore.toString() + \" to \" + this._offsetAfter + \"]\";\n    };\n    return ZoneOffsetTransition;\n}();\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ function _init$1() {\n    TemporalQueries.ZONE_ID = createTemporalQuery(\"ZONE_ID\", function(temporal) {\n        return temporal.query(TemporalQueries.ZONE_ID);\n    });\n    TemporalQueries.CHRONO = createTemporalQuery(\"CHRONO\", function(temporal) {\n        return temporal.query(TemporalQueries.CHRONO);\n    });\n    TemporalQueries.PRECISION = createTemporalQuery(\"PRECISION\", function(temporal) {\n        return temporal.query(TemporalQueries.PRECISION);\n    });\n    TemporalQueries.OFFSET = createTemporalQuery(\"OFFSET\", function(temporal) {\n        if (temporal.isSupported(ChronoField.OFFSET_SECONDS)) {\n            return ZoneOffset.ofTotalSeconds(temporal.get(ChronoField.OFFSET_SECONDS));\n        }\n        return null;\n    });\n    TemporalQueries.ZONE = createTemporalQuery(\"ZONE\", function(temporal) {\n        var zone = temporal.query(TemporalQueries.ZONE_ID);\n        return zone != null ? zone : temporal.query(TemporalQueries.OFFSET);\n    });\n    TemporalQueries.LOCAL_DATE = createTemporalQuery(\"LOCAL_DATE\", function(temporal) {\n        if (temporal.isSupported(ChronoField.EPOCH_DAY)) {\n            return LocalDate.ofEpochDay(temporal.getLong(ChronoField.EPOCH_DAY));\n        }\n        return null;\n    });\n    TemporalQueries.LOCAL_TIME = createTemporalQuery(\"LOCAL_TIME\", function(temporal) {\n        if (temporal.isSupported(ChronoField.NANO_OF_DAY)) {\n            return LocalTime.ofNanoOfDay(temporal.getLong(ChronoField.NANO_OF_DAY));\n        }\n        return null;\n    });\n}\nvar SystemDefaultZoneRules = function(_ZoneRules) {\n    _inheritsLoose(SystemDefaultZoneRules, _ZoneRules);\n    function SystemDefaultZoneRules() {\n        return _ZoneRules.apply(this, arguments) || this;\n    }\n    var _proto = SystemDefaultZoneRules.prototype;\n    _proto.isFixedOffset = function isFixedOffset() {\n        return false;\n    };\n    _proto.offsetOfInstant = function offsetOfInstant(instant) {\n        var offsetInMinutes = new Date(instant.toEpochMilli()).getTimezoneOffset();\n        return ZoneOffset.ofTotalMinutes(offsetInMinutes * -1);\n    };\n    _proto.offsetOfEpochMilli = function offsetOfEpochMilli(epochMilli) {\n        var offsetInMinutes = new Date(epochMilli).getTimezoneOffset();\n        return ZoneOffset.ofTotalMinutes(offsetInMinutes * -1);\n    };\n    _proto.offsetOfLocalDateTime = function offsetOfLocalDateTime(localDateTime) {\n        var epochMilli = localDateTime.toEpochSecond(ZoneOffset.UTC) * 1000;\n        var offsetInMinutesBeforePossibleTransition = new Date(epochMilli).getTimezoneOffset();\n        var epochMilliSystemZone = epochMilli + offsetInMinutesBeforePossibleTransition * 60000;\n        var offsetInMinutesAfterPossibleTransition = new Date(epochMilliSystemZone).getTimezoneOffset();\n        return ZoneOffset.ofTotalMinutes(offsetInMinutesAfterPossibleTransition * -1);\n    };\n    _proto.validOffsets = function validOffsets(localDateTime) {\n        return [\n            this.offsetOfLocalDateTime(localDateTime)\n        ];\n    };\n    _proto.transition = function transition() {\n        return null;\n    };\n    _proto.standardOffset = function standardOffset(instant) {\n        return this.offsetOfInstant(instant);\n    };\n    _proto.daylightSavings = function daylightSavings() {\n        this._throwNotSupported();\n    };\n    _proto.isDaylightSavings = function isDaylightSavings() {\n        this._throwNotSupported();\n    };\n    _proto.isValidOffset = function isValidOffset(dateTime, offset) {\n        return this.offsetOfLocalDateTime(dateTime).equals(offset);\n    };\n    _proto.nextTransition = function nextTransition() {\n        this._throwNotSupported();\n    };\n    _proto.previousTransition = function previousTransition() {\n        this._throwNotSupported();\n    };\n    _proto.transitions = function transitions() {\n        this._throwNotSupported();\n    };\n    _proto.transitionRules = function transitionRules() {\n        this._throwNotSupported();\n    };\n    _proto._throwNotSupported = function _throwNotSupported() {\n        throw new DateTimeException(\"not supported operation\");\n    };\n    _proto.equals = function equals(other) {\n        if (this === other || other instanceof SystemDefaultZoneRules) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n    _proto.toString = function toString() {\n        return \"SYSTEM\";\n    };\n    return SystemDefaultZoneRules;\n}(ZoneRules);\nvar SystemDefaultZoneId = function(_ZoneId) {\n    _inheritsLoose(SystemDefaultZoneId, _ZoneId);\n    function SystemDefaultZoneId() {\n        var _this;\n        _this = _ZoneId.call(this) || this;\n        _this._rules = new SystemDefaultZoneRules();\n        return _this;\n    }\n    var _proto = SystemDefaultZoneId.prototype;\n    _proto.rules = function rules() {\n        return this._rules;\n    };\n    _proto.equals = function equals(other) {\n        if (this === other) {\n            return true;\n        }\n        return false;\n    };\n    _proto.id = function id() {\n        return \"SYSTEM\";\n    };\n    return SystemDefaultZoneId;\n}(ZoneId);\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var ZoneIdFactory = function() {\n    function ZoneIdFactory() {}\n    ZoneIdFactory.systemDefault = function systemDefault() {\n        return SYSTEM_DEFAULT_ZONE_ID_INSTANCE;\n    };\n    ZoneIdFactory.getAvailableZoneIds = function getAvailableZoneIds() {\n        return ZoneRulesProvider.getAvailableZoneIds();\n    };\n    ZoneIdFactory.of = function of(zoneId) {\n        requireNonNull(zoneId, \"zoneId\");\n        if (zoneId === \"Z\") {\n            return ZoneOffset.UTC;\n        }\n        if (zoneId.length === 1) {\n            throw new DateTimeException(\"Invalid zone: \" + zoneId);\n        }\n        if (StringUtil.startsWith(zoneId, \"+\") || StringUtil.startsWith(zoneId, \"-\")) {\n            return ZoneOffset.of(zoneId);\n        }\n        if (zoneId === \"UTC\" || zoneId === \"GMT\" || zoneId === \"GMT0\" || zoneId === \"UT\") {\n            return new ZoneRegion(zoneId, ZoneOffset.UTC.rules());\n        }\n        if (StringUtil.startsWith(zoneId, \"UTC+\") || StringUtil.startsWith(zoneId, \"GMT+\") || StringUtil.startsWith(zoneId, \"UTC-\") || StringUtil.startsWith(zoneId, \"GMT-\")) {\n            var offset = ZoneOffset.of(zoneId.substring(3));\n            if (offset.totalSeconds() === 0) {\n                return new ZoneRegion(zoneId.substring(0, 3), offset.rules());\n            }\n            return new ZoneRegion(zoneId.substring(0, 3) + offset.id(), offset.rules());\n        }\n        if (StringUtil.startsWith(zoneId, \"UT+\") || StringUtil.startsWith(zoneId, \"UT-\")) {\n            var _offset = ZoneOffset.of(zoneId.substring(2));\n            if (_offset.totalSeconds() === 0) {\n                return new ZoneRegion(\"UT\", _offset.rules());\n            }\n            return new ZoneRegion(\"UT\" + _offset.id(), _offset.rules());\n        }\n        if (zoneId === \"SYSTEM\") {\n            return ZoneId.systemDefault();\n        }\n        return ZoneRegion.ofId(zoneId);\n    };\n    ZoneIdFactory.ofOffset = function ofOffset(prefix, offset) {\n        requireNonNull(prefix, \"prefix\");\n        requireNonNull(offset, \"offset\");\n        if (prefix.length === 0) {\n            return offset;\n        }\n        if (prefix === \"GMT\" || prefix === \"UTC\" || prefix === \"UT\") {\n            if (offset.totalSeconds() === 0) {\n                return new ZoneRegion(prefix, offset.rules());\n            }\n            return new ZoneRegion(prefix + offset.id(), offset.rules());\n        }\n        throw new IllegalArgumentException(\"Invalid prefix, must be GMT, UTC or UT: \" + prefix);\n    };\n    ZoneIdFactory.from = function from(temporal) {\n        requireNonNull(temporal, \"temporal\");\n        var obj = temporal.query(TemporalQueries.zone());\n        if (obj == null) {\n            throw new DateTimeException(\"Unable to obtain ZoneId from TemporalAccessor: \" + temporal + \", type \" + (temporal.constructor != null ? temporal.constructor.name : \"\"));\n        }\n        return obj;\n    };\n    return ZoneIdFactory;\n}();\nvar SYSTEM_DEFAULT_ZONE_ID_INSTANCE = null;\nfunction _init() {\n    SYSTEM_DEFAULT_ZONE_ID_INSTANCE = new SystemDefaultZoneId();\n    ZoneId.systemDefault = ZoneIdFactory.systemDefault;\n    ZoneId.getAvailableZoneIds = ZoneIdFactory.getAvailableZoneIds;\n    ZoneId.of = ZoneIdFactory.of;\n    ZoneId.ofOffset = ZoneIdFactory.ofOffset;\n    ZoneId.from = ZoneIdFactory.from;\n    ZoneOffset.from = ZoneIdFactory.from;\n    ZoneId.SYSTEM = SYSTEM_DEFAULT_ZONE_ID_INSTANCE;\n    ZoneId.UTC = ZoneOffset.ofTotalSeconds(0);\n}\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var isInit = false;\nfunction init() {\n    if (isInit) {\n        return;\n    }\n    isInit = true;\n    _init$m();\n    _init$n();\n    _init$l();\n    _init$k();\n    _init$3();\n    _init$f();\n    _init$1();\n    _init$j();\n    _init$2();\n    _init$5();\n    _init$4();\n    _init$a();\n    _init$i();\n    _init$b();\n    _init$c();\n    _init$h();\n    _init$g();\n    _init$7();\n    _init();\n    _init$9();\n    _init$d();\n    _init$e();\n    _init$6();\n    _init$8();\n}\ninit();\n/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var ToNativeJsConverter = function() {\n    function ToNativeJsConverter(temporal, zone) {\n        var zonedDateTime;\n        if (temporal instanceof Instant) {\n            this.instant = temporal;\n            return;\n        } else if (temporal instanceof LocalDate) {\n            zone = zone == null ? ZoneId.systemDefault() : zone;\n            zonedDateTime = temporal.atStartOfDay(zone);\n        } else if (temporal instanceof LocalDateTime) {\n            zone = zone == null ? ZoneId.systemDefault() : zone;\n            zonedDateTime = temporal.atZone(zone);\n        } else if (temporal instanceof ZonedDateTime) {\n            if (zone == null) {\n                zonedDateTime = temporal;\n            } else {\n                zonedDateTime = temporal.withZoneSameInstant(zone);\n            }\n        } else {\n            throw new IllegalArgumentException(\"unsupported instance for convert operation:\" + temporal);\n        }\n        this.instant = zonedDateTime.toInstant();\n    }\n    var _proto = ToNativeJsConverter.prototype;\n    _proto.toDate = function toDate() {\n        return new Date(this.instant.toEpochMilli());\n    };\n    _proto.toEpochMilli = function toEpochMilli() {\n        return this.instant.toEpochMilli();\n    };\n    return ToNativeJsConverter;\n}();\nfunction convert(temporal, zone) {\n    return new ToNativeJsConverter(temporal, zone);\n}\n/*\n * @copyright (c) 2015-present, Philipp Thürwächter, Pattrick Hüper & js-joda contributors\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ function nativeJs(date, zone) {\n    if (zone === void 0) {\n        zone = ZoneId.systemDefault();\n    }\n    requireNonNull(date, \"date\");\n    requireNonNull(zone, \"zone\");\n    if (date instanceof Date) {\n        return Instant.ofEpochMilli(date.getTime()).atZone(zone);\n    } else if (typeof date.toDate === \"function\" && date.toDate() instanceof Date) {\n        return Instant.ofEpochMilli(date.toDate().getTime()).atZone(zone);\n    }\n    throw new IllegalArgumentException(\"date must be a javascript Date or a moment instance\");\n}\nfunction bindUse(jsJoda) {\n    var used = [];\n    return function use(fn) {\n        if (!~used.indexOf(fn)) {\n            fn(jsJoda);\n            used.push(fn);\n        }\n        return jsJoda;\n    };\n}\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */ var _ = {\n    assert: assert$1,\n    DateTimeBuilder: DateTimeBuilder,\n    DateTimeParseContext: DateTimeParseContext,\n    DateTimePrintContext: DateTimePrintContext,\n    MathUtil: MathUtil,\n    StringUtil: StringUtil,\n    StringBuilder: StringBuilder\n};\nvar jsJodaExports = {\n    _: _,\n    convert: convert,\n    nativeJs: nativeJs,\n    ArithmeticException: ArithmeticException,\n    DateTimeException: DateTimeException,\n    DateTimeParseException: DateTimeParseException,\n    IllegalArgumentException: IllegalArgumentException,\n    IllegalStateException: IllegalStateException,\n    UnsupportedTemporalTypeException: UnsupportedTemporalTypeException,\n    NullPointerException: NullPointerException,\n    Clock: Clock,\n    DayOfWeek: DayOfWeek,\n    Duration: Duration,\n    Instant: Instant,\n    LocalDate: LocalDate,\n    LocalTime: LocalTime,\n    LocalDateTime: LocalDateTime,\n    OffsetTime: OffsetTime,\n    OffsetDateTime: OffsetDateTime,\n    Month: Month,\n    MonthDay: MonthDay,\n    ParsePosition: ParsePosition,\n    Period: Period,\n    Year: Year,\n    YearConstants: YearConstants,\n    YearMonth: YearMonth,\n    ZonedDateTime: ZonedDateTime,\n    ZoneOffset: ZoneOffset,\n    ZoneId: ZoneId,\n    ZoneRegion: ZoneRegion,\n    ZoneOffsetTransition: ZoneOffsetTransition,\n    ZoneRules: ZoneRules,\n    ZoneRulesProvider: ZoneRulesProvider,\n    ChronoLocalDate: ChronoLocalDate,\n    ChronoLocalDateTime: ChronoLocalDateTime,\n    ChronoZonedDateTime: ChronoZonedDateTime,\n    IsoChronology: IsoChronology,\n    ChronoField: ChronoField,\n    ChronoUnit: ChronoUnit,\n    IsoFields: IsoFields,\n    Temporal: Temporal,\n    TemporalAccessor: TemporalAccessor,\n    TemporalAdjuster: TemporalAdjuster,\n    TemporalAdjusters: TemporalAdjusters,\n    TemporalAmount: TemporalAmount,\n    TemporalField: TemporalField,\n    TemporalQueries: TemporalQueries,\n    TemporalQuery: TemporalQuery,\n    TemporalUnit: TemporalUnit,\n    ValueRange: ValueRange,\n    DateTimeFormatter: DateTimeFormatter,\n    DateTimeFormatterBuilder: DateTimeFormatterBuilder,\n    DecimalStyle: DecimalStyle,\n    ResolverStyle: ResolverStyle,\n    SignStyle: SignStyle,\n    TextStyle: TextStyle\n};\nvar use = bindUse(jsJodaExports);\njsJodaExports.use = use;\n //# sourceMappingURL=js-joda.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@js-joda/core/dist/js-joda.esm.js\n");

/***/ })

};
;