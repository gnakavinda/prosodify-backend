"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mssql";
exports.ids = ["vendor-chunks/mssql"];
exports.modules = {

/***/ "(rsc)/./node_modules/mssql/index.js":
/*!*************************************!*\
  !*** ./node_modules/mssql/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib/tedious */ \"(rsc)/./node_modules/mssql/lib/tedious/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBQSw0R0FBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9tc3NxbC9pbmRleC5qcz85OGViIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvdGVkaW91cycpXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/connection-pool.js":
/*!********************************************************!*\
  !*** ./node_modules/mssql/lib/base/connection-pool.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"mssql:base\");\nconst { parseSqlConnectionString } = __webpack_require__(/*! @tediousjs/connection-string */ \"(rsc)/./node_modules/@tediousjs/connection-string/lib/index.js\");\nconst tarn = __webpack_require__(/*! tarn */ \"(rsc)/./node_modules/tarn/dist/tarn.js\");\nconst { IDS } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\");\nconst ConnectionError = __webpack_require__(/*! ../error/connection-error */ \"(rsc)/./node_modules/mssql/lib/error/connection-error.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\");\nconst clone = __webpack_require__(/*! rfdc/default */ \"(rsc)/./node_modules/rfdc/default.js\");\nconst { MSSQLError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\");\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */ class ConnectionPool extends EventEmitter {\n    /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */ constructor(config, callback){\n        super();\n        IDS.add(this, \"ConnectionPool\");\n        debug(\"pool(%d): created\", IDS.get(this));\n        this._connectStack = [];\n        this._closeStack = [];\n        this._connected = false;\n        this._connecting = false;\n        this._healthy = false;\n        if (typeof config === \"string\") {\n            try {\n                this.config = this.constructor.parseConnectionString(config);\n            } catch (ex) {\n                if (typeof callback === \"function\") {\n                    return setImmediate(callback, ex);\n                }\n                throw ex;\n            }\n        } else {\n            this.config = clone(config);\n        }\n        // set defaults\n        this.config.port = this.config.port || 1433;\n        this.config.options = this.config.options || {};\n        this.config.stream = this.config.stream || false;\n        this.config.parseJSON = this.config.parseJSON || false;\n        this.config.arrayRowMode = this.config.arrayRowMode || false;\n        this.config.validateConnection = \"validateConnection\" in this.config ? this.config.validateConnection : true;\n        const namedServer = /^(.*)\\\\(.*)$/.exec(this.config.server);\n        if (namedServer) {\n            this.config.server = namedServer[1];\n            this.config.options.instanceName = namedServer[2];\n        }\n        if (typeof this.config.options.useColumnNames !== \"undefined\" && this.config.options.useColumnNames !== true) {\n            const ex = new MSSQLError(\"Invalid options `useColumnNames`, use `arrayRowMode` instead\");\n            if (typeof callback === \"function\") {\n                return setImmediate(callback, ex);\n            }\n            throw ex;\n        }\n        if (typeof callback === \"function\") {\n            this.connect(callback);\n        }\n    }\n    get connected() {\n        return this._connected;\n    }\n    get connecting() {\n        return this._connecting;\n    }\n    get healthy() {\n        return this._healthy;\n    }\n    static parseConnectionString(connectionString) {\n        return this._parseConnectionString(connectionString);\n    }\n    static _parseAuthenticationType(type, entries) {\n        switch(type.toLowerCase()){\n            case \"active directory integrated\":\n                if (entries.includes(\"token\")) {\n                    return \"azure-active-directory-access-token\";\n                } else if ([\n                    \"client id\",\n                    \"client secret\",\n                    \"tenant id\"\n                ].every((entry)=>entries.includes(entry))) {\n                    return \"azure-active-directory-service-principal-secret\";\n                } else if ([\n                    \"client id\",\n                    \"msi endpoint\",\n                    \"msi secret\"\n                ].every((entry)=>entries.includes(entry))) {\n                    return \"azure-active-directory-msi-app-service\";\n                } else if ([\n                    \"client id\",\n                    \"msi endpoint\"\n                ].every((entry)=>entries.includes(entry))) {\n                    return \"azure-active-directory-msi-vm\";\n                }\n                return \"azure-active-directory-default\";\n            case \"active directory password\":\n                return \"azure-active-directory-password\";\n            case \"ntlm\":\n                return \"ntlm\";\n            default:\n                return \"default\";\n        }\n    }\n    static _parseConnectionString(connectionString) {\n        const parsed = parseSqlConnectionString(connectionString, true, true);\n        return Object.entries(parsed).reduce((config, [key, value])=>{\n            switch(key){\n                case \"application name\":\n                    break;\n                case \"applicationintent\":\n                    Object.assign(config.options, {\n                        readOnlyIntent: value === \"readonly\"\n                    });\n                    break;\n                case \"asynchronous processing\":\n                    break;\n                case \"attachdbfilename\":\n                    break;\n                case \"authentication\":\n                    Object.assign(config, {\n                        authentication_type: this._parseAuthenticationType(value, Object.keys(parsed))\n                    });\n                    break;\n                case \"column encryption setting\":\n                    break;\n                case \"connection timeout\":\n                    Object.assign(config, {\n                        connectionTimeout: value * 1000\n                    });\n                    break;\n                case \"connection lifetime\":\n                    break;\n                case \"connectretrycount\":\n                    break;\n                case \"connectretryinterval\":\n                    Object.assign(config.options, {\n                        connectionRetryInterval: value * 1000\n                    });\n                    break;\n                case \"context connection\":\n                    break;\n                case \"client id\":\n                    Object.assign(config, {\n                        clientId: value\n                    });\n                    break;\n                case \"client secret\":\n                    Object.assign(config, {\n                        clientSecret: value\n                    });\n                    break;\n                case \"current language\":\n                    Object.assign(config.options, {\n                        language: value\n                    });\n                    break;\n                case \"data source\":\n                    {\n                        let server = value;\n                        let instanceName;\n                        let port = 1433;\n                        if (/^np:/i.test(server)) {\n                            throw new Error(\"Connection via Named Pipes is not supported.\");\n                        }\n                        if (/^tcp:/i.test(server)) {\n                            server = server.substr(4);\n                        }\n                        const namedServerParts = /^(.*)\\\\(.*)$/.exec(server);\n                        if (namedServerParts) {\n                            server = namedServerParts[1].trim();\n                            instanceName = namedServerParts[2].trim();\n                        }\n                        const serverParts = /^(.*),(.*)$/.exec(server);\n                        if (serverParts) {\n                            server = serverParts[1].trim();\n                            port = parseInt(serverParts[2].trim(), 10);\n                        } else {\n                            const instanceParts = /^(.*),(.*)$/.exec(instanceName);\n                            if (instanceParts) {\n                                instanceName = instanceParts[1].trim();\n                                port = parseInt(instanceParts[2].trim(), 10);\n                            }\n                        }\n                        if (server === \".\" || server === \"(.)\" || server.toLowerCase() === \"(localdb)\" || server.toLowerCase() === \"(local)\") {\n                            server = \"localhost\";\n                        }\n                        Object.assign(config, {\n                            port,\n                            server\n                        });\n                        if (instanceName) {\n                            Object.assign(config.options, {\n                                instanceName\n                            });\n                        }\n                        break;\n                    }\n                case \"encrypt\":\n                    Object.assign(config.options, {\n                        encrypt: !!value\n                    });\n                    break;\n                case \"enlist\":\n                    break;\n                case \"failover partner\":\n                    break;\n                case \"initial catalog\":\n                    Object.assign(config, {\n                        database: value\n                    });\n                    break;\n                case \"integrated security\":\n                    break;\n                case \"max pool size\":\n                    Object.assign(config.pool, {\n                        max: value\n                    });\n                    break;\n                case \"min pool size\":\n                    Object.assign(config.pool, {\n                        min: value\n                    });\n                    break;\n                case \"msi endpoint\":\n                    Object.assign(config, {\n                        msiEndpoint: value\n                    });\n                    break;\n                case \"msi secret\":\n                    Object.assign(config, {\n                        msiSecret: value\n                    });\n                    break;\n                case \"multipleactiveresultsets\":\n                    break;\n                case \"multisubnetfailover\":\n                    Object.assign(config.options, {\n                        multiSubnetFailover: value\n                    });\n                    break;\n                case \"network library\":\n                    break;\n                case \"packet size\":\n                    Object.assign(config.options, {\n                        packetSize: value\n                    });\n                    break;\n                case \"password\":\n                    Object.assign(config, {\n                        password: value\n                    });\n                    break;\n                case \"persist security info\":\n                    break;\n                case \"poolblockingperiod\":\n                    break;\n                case \"pooling\":\n                    break;\n                case \"replication\":\n                    break;\n                case \"tenant id\":\n                    Object.assign(config, {\n                        tenantId: value\n                    });\n                    break;\n                case \"token\":\n                    Object.assign(config, {\n                        token: value\n                    });\n                    break;\n                case \"transaction binding\":\n                    Object.assign(config.options, {\n                        enableImplicitTransactions: value.toLowerCase() === \"implicit unbind\"\n                    });\n                    break;\n                case \"transparentnetworkipresolution\":\n                    break;\n                case \"trustservercertificate\":\n                    Object.assign(config.options, {\n                        trustServerCertificate: value\n                    });\n                    break;\n                case \"type system version\":\n                    break;\n                case \"user id\":\n                    {\n                        let user = value;\n                        let domain;\n                        const domainUser = /^(.*)\\\\(.*)$/.exec(user);\n                        if (domainUser) {\n                            domain = domainUser[1];\n                            user = domainUser[2];\n                        }\n                        if (domain) {\n                            Object.assign(config, {\n                                domain\n                            });\n                        }\n                        if (user) {\n                            Object.assign(config, {\n                                user\n                            });\n                        }\n                        break;\n                    }\n                case \"user instance\":\n                    break;\n                case \"workstation id\":\n                    Object.assign(config.options, {\n                        workstationId: value\n                    });\n                    break;\n                case \"request timeout\":\n                    Object.assign(config, {\n                        requestTimeout: parseInt(value, 10)\n                    });\n                    break;\n                case \"stream\":\n                    Object.assign(config, {\n                        stream: !!value\n                    });\n                    break;\n                case \"useutc\":\n                    Object.assign(config.options, {\n                        useUTC: !!value\n                    });\n                    break;\n                case \"parsejson\":\n                    Object.assign(config, {\n                        parseJSON: !!value\n                    });\n                    break;\n            }\n            return config;\n        }, {\n            options: {},\n            pool: {}\n        });\n    }\n    /**\n   * Acquire connection from this connection pool.\n   *\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */ acquire(requester, callback) {\n        const acquirePromise = shared.Promise.resolve(this._acquire()).catch((err)=>{\n            this.emit(\"error\", err);\n            throw err;\n        });\n        if (typeof callback === \"function\") {\n            acquirePromise.then((connection)=>callback(null, connection, this.config)).catch(callback);\n            return this;\n        }\n        return acquirePromise;\n    }\n    _acquire() {\n        if (!this.pool) {\n            return shared.Promise.reject(new ConnectionError(\"Connection not yet open.\", \"ENOTOPEN\"));\n        } else if (this.pool.destroyed) {\n            return shared.Promise.reject(new ConnectionError(\"Connection is closing\", \"ENOTOPEN\"));\n        }\n        return this.pool.acquire().promise;\n    }\n    /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {ConnectionPool}\n   */ release(connection) {\n        debug(\"connection(%d): released\", IDS.get(connection));\n        if (this.pool) {\n            this.pool.release(connection);\n        }\n        return this;\n    }\n    /**\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */ connect(callback) {\n        if (typeof callback === \"function\") {\n            this._connect(callback);\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            return this._connect((err)=>{\n                if (err) return reject(err);\n                resolve(this);\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {basicCallback} callback\n   */ _connect(callback) {\n        if (this._connected) {\n            debug(\"pool(%d): already connected, executing connect callback immediately\", IDS.get(this));\n            return setImmediate(callback, null, this);\n        }\n        this._connectStack.push(callback);\n        if (this._connecting) {\n            return;\n        }\n        this._connecting = true;\n        debug(\"pool(%d): connecting\", IDS.get(this));\n        // create one test connection to check if everything is ok\n        this._poolCreate().then((connection)=>{\n            debug(\"pool(%d): connected\", IDS.get(this));\n            this._healthy = true;\n            return this._poolDestroy(connection).then(()=>{\n                // prepare pool\n                this.pool = new tarn.Pool(Object.assign({\n                    create: ()=>this._poolCreate().then((connection)=>{\n                            this._healthy = true;\n                            return connection;\n                        }).catch((err)=>{\n                            if (this.pool.numUsed() + this.pool.numFree() <= 0) {\n                                this._healthy = false;\n                            }\n                            throw err;\n                        }),\n                    validate: this._poolValidate.bind(this),\n                    destroy: this._poolDestroy.bind(this),\n                    max: 10,\n                    min: 0,\n                    idleTimeoutMillis: 30000,\n                    propagateCreateError: true\n                }, this.config.pool));\n                this._connecting = false;\n                this._connected = true;\n            });\n        }).then(()=>{\n            this._connectStack.forEach((cb)=>{\n                setImmediate(cb, null, this);\n            });\n        }).catch((err)=>{\n            this._connecting = false;\n            this._connectStack.forEach((cb)=>{\n                setImmediate(cb, err);\n            });\n        }).then(()=>{\n            this._connectStack = [];\n        });\n    }\n    get size() {\n        return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates();\n    }\n    get available() {\n        return this.pool.numFree();\n    }\n    get pending() {\n        return this.pool.numPendingAcquires();\n    }\n    get borrowed() {\n        return this.pool.numUsed();\n    }\n    /**\n   * Close all active connections in the pool.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */ close(callback) {\n        if (typeof callback === \"function\") {\n            this._close(callback);\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._close((err)=>{\n                if (err) return reject(err);\n                resolve(this);\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {basicCallback} callback\n   */ _close(callback) {\n        // we don't allow pools in a connecting state to be closed because it means there are far too many\n        // edge cases to deal with\n        if (this._connecting) {\n            debug(\"pool(%d): close called while connecting\", IDS.get(this));\n            setImmediate(callback, new ConnectionError(\"Cannot close a pool while it is connecting\"));\n        }\n        if (!this.pool) {\n            debug(\"pool(%d): already closed, executing close callback immediately\", IDS.get(this));\n            return setImmediate(callback, null);\n        }\n        this._closeStack.push(callback);\n        if (this.pool.destroyed) return;\n        this._connecting = this._connected = this._healthy = false;\n        this.pool.destroy().then(()=>{\n            debug(\"pool(%d): pool closed, removing pool reference and executing close callbacks\", IDS.get(this));\n            this.pool = null;\n            this._closeStack.forEach((cb)=>{\n                setImmediate(cb, null);\n            });\n        }).catch((err)=>{\n            this.pool = null;\n            this._closeStack.forEach((cb)=>{\n                setImmediate(cb, err);\n            });\n        }).then(()=>{\n            this._closeStack = [];\n        });\n    }\n    /**\n   * Returns new request using this connection.\n   *\n   * @return {Request}\n   */ request() {\n        return new shared.driver.Request(this);\n    }\n    /**\n   * Returns new transaction using this connection.\n   *\n   * @return {Transaction}\n   */ transaction() {\n        return new shared.driver.Transaction(this);\n    }\n    /**\n   * Creates a new query using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */ /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */ query() {\n        if (typeof arguments[0] === \"string\") {\n            return new shared.driver.Request(this).query(arguments[0], arguments[1]);\n        }\n        const values = Array.prototype.slice.call(arguments);\n        const strings = values.shift();\n        return new shared.driver.Request(this)._template(strings, values, \"query\");\n    }\n    /**\n   * Creates a new batch using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */ /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */ batch() {\n        if (typeof arguments[0] === \"string\") {\n            return new shared.driver.Request(this).batch(arguments[0], arguments[1]);\n        }\n        const values = Array.prototype.slice.call(arguments);\n        const strings = values.shift();\n        return new shared.driver.Request(this)._template(strings, values, \"batch\");\n    }\n}\nmodule.exports = ConnectionPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/connection-pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/index.js":
/*!**********************************************!*\
  !*** ./node_modules/mssql/lib/base/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ConnectionPool = __webpack_require__(/*! ./connection-pool */ \"(rsc)/./node_modules/mssql/lib/base/connection-pool.js\");\nconst PreparedStatement = __webpack_require__(/*! ./prepared-statement */ \"(rsc)/./node_modules/mssql/lib/base/prepared-statement.js\");\nconst Request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/mssql/lib/base/request.js\");\nconst Transaction = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/mssql/lib/base/transaction.js\");\nconst { ConnectionError, TransactionError, RequestError, PreparedStatementError, MSSQLError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\");\nconst Table = __webpack_require__(/*! ../table */ \"(rsc)/./node_modules/mssql/lib/table.js\");\nconst ISOLATION_LEVEL = __webpack_require__(/*! ../isolationlevel */ \"(rsc)/./node_modules/mssql/lib/isolationlevel.js\");\nconst { TYPES } = __webpack_require__(/*! ../datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\");\nconst { connect, close, on, off, removeListener, query, batch } = __webpack_require__(/*! ../global-connection */ \"(rsc)/./node_modules/mssql/lib/global-connection.js\");\nmodule.exports = {\n    ConnectionPool,\n    Transaction,\n    Request,\n    PreparedStatement,\n    ConnectionError,\n    TransactionError,\n    RequestError,\n    PreparedStatementError,\n    MSSQLError,\n    driver: shared.driver,\n    exports: {\n        ConnectionError,\n        TransactionError,\n        RequestError,\n        PreparedStatementError,\n        MSSQLError,\n        Table,\n        ISOLATION_LEVEL,\n        TYPES,\n        MAX: 65535,\n        map: shared.map,\n        getTypeByValue: shared.getTypeByValue,\n        connect,\n        close,\n        on,\n        removeListener,\n        off,\n        query,\n        batch\n    }\n};\nObject.defineProperty(module.exports, \"Promise\", ({\n    enumerable: true,\n    get: ()=>{\n        return shared.Promise;\n    },\n    set: (value)=>{\n        shared.Promise = value;\n    }\n}));\nObject.defineProperty(module.exports, \"valueHandler\", ({\n    enumerable: true,\n    value: shared.valueHandler,\n    writable: false,\n    configurable: false\n}));\nfor(const key in TYPES){\n    const value = TYPES[key];\n    module.exports.exports[key] = value;\n    module.exports.exports[key.toUpperCase()] = value;\n} /**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */  /**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */  /**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */  /**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */  /**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */  /**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */  /**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */  /**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */  /**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */  /**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */  /**\n * Dispatched when new row is parsed.\n * @event Request#row\n */  /**\n * Dispatched when request is complete.\n * @event Request#done\n */  /**\n * Dispatched on error.\n * @event Request#error\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Jhc2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxpQkFBaUJDLG1CQUFPQSxDQUFDO0FBQy9CLE1BQU1DLG9CQUFvQkQsbUJBQU9BLENBQUM7QUFDbEMsTUFBTUUsVUFBVUYsbUJBQU9BLENBQUM7QUFDeEIsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUM7QUFDNUIsTUFBTSxFQUFFSSxlQUFlLEVBQUVDLGdCQUFnQixFQUFFQyxZQUFZLEVBQUVDLHNCQUFzQixFQUFFQyxVQUFVLEVBQUUsR0FBR1IsbUJBQU9BLENBQUM7QUFDeEcsTUFBTVMsU0FBU1QsbUJBQU9BLENBQUM7QUFDdkIsTUFBTVUsUUFBUVYsbUJBQU9BLENBQUM7QUFDdEIsTUFBTVcsa0JBQWtCWCxtQkFBT0EsQ0FBQztBQUNoQyxNQUFNLEVBQUVZLEtBQUssRUFBRSxHQUFHWixtQkFBT0EsQ0FBQztBQUMxQixNQUFNLEVBQUVhLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxFQUFFLEVBQUVDLEdBQUcsRUFBRUMsY0FBYyxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRSxHQUFHbkIsbUJBQU9BLENBQUM7QUFFMUVvQixPQUFPQyxPQUFPLEdBQUc7SUFDZnRCO0lBQ0FJO0lBQ0FEO0lBQ0FEO0lBQ0FHO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FDO0lBQ0FjLFFBQVFiLE9BQU9hLE1BQU07SUFDckJELFNBQVM7UUFDUGpCO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FFO1FBQ0FDO1FBQ0FDO1FBQ0FXLEtBQUs7UUFDTEMsS0FBS2YsT0FBT2UsR0FBRztRQUNmQyxnQkFBZ0JoQixPQUFPZ0IsY0FBYztRQUNyQ1o7UUFDQUM7UUFDQUM7UUFDQUU7UUFDQUQ7UUFDQUU7UUFDQUM7SUFDRjtBQUNGO0FBRUFPLGtEQUFpRDtJQUMvQ0UsWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT3BCLE9BQU9xQixPQUFPO0lBQ3ZCO0lBQ0FDLEtBQUssQ0FBQ0M7UUFDSnZCLE9BQU9xQixPQUFPLEdBQUdFO0lBQ25CO0FBQ0YsQ0FBQyxFQUFDO0FBRUZOLHVEQUFzRDtJQUNwREUsWUFBWTtJQUNaSSxPQUFPdkIsT0FBT3dCLFlBQVk7SUFDMUJDLFVBQVU7SUFDVkMsY0FBYztBQUNoQixDQUFDLEVBQUM7QUFFRixJQUFLLE1BQU1DLE9BQU94QixNQUFPO0lBQ3ZCLE1BQU1vQixRQUFRcEIsS0FBSyxDQUFDd0IsSUFBSTtJQUN4QmhCLE9BQU9DLE9BQU8sQ0FBQ0EsT0FBTyxDQUFDZSxJQUFJLEdBQUdKO0lBQzlCWixPQUFPQyxPQUFPLENBQUNBLE9BQU8sQ0FBQ2UsSUFBSUMsV0FBVyxHQUFHLEdBQUdMO0FBQzlDLEVBRUE7Ozs7Q0FJQyxJQUVEOzs7O0NBSUMsSUFFRDs7OztDQUlDLElBRUQ7Ozs7O0NBS0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MsSUFFRDs7O0NBR0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9tc3NxbC9saWIvYmFzZS9pbmRleC5qcz8yZDYyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBDb25uZWN0aW9uUG9vbCA9IHJlcXVpcmUoJy4vY29ubmVjdGlvbi1wb29sJylcbmNvbnN0IFByZXBhcmVkU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9wcmVwYXJlZC1zdGF0ZW1lbnQnKVxuY29uc3QgUmVxdWVzdCA9IHJlcXVpcmUoJy4vcmVxdWVzdCcpXG5jb25zdCBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKVxuY29uc3QgeyBDb25uZWN0aW9uRXJyb3IsIFRyYW5zYWN0aW9uRXJyb3IsIFJlcXVlc3RFcnJvciwgUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciwgTVNTUUxFcnJvciB9ID0gcmVxdWlyZSgnLi4vZXJyb3InKVxuY29uc3Qgc2hhcmVkID0gcmVxdWlyZSgnLi4vc2hhcmVkJylcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnLi4vdGFibGUnKVxuY29uc3QgSVNPTEFUSU9OX0xFVkVMID0gcmVxdWlyZSgnLi4vaXNvbGF0aW9ubGV2ZWwnKVxuY29uc3QgeyBUWVBFUyB9ID0gcmVxdWlyZSgnLi4vZGF0YXR5cGVzJylcbmNvbnN0IHsgY29ubmVjdCwgY2xvc2UsIG9uLCBvZmYsIHJlbW92ZUxpc3RlbmVyLCBxdWVyeSwgYmF0Y2ggfSA9IHJlcXVpcmUoJy4uL2dsb2JhbC1jb25uZWN0aW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbm5lY3Rpb25Qb29sLFxuICBUcmFuc2FjdGlvbixcbiAgUmVxdWVzdCxcbiAgUHJlcGFyZWRTdGF0ZW1lbnQsXG4gIENvbm5lY3Rpb25FcnJvcixcbiAgVHJhbnNhY3Rpb25FcnJvcixcbiAgUmVxdWVzdEVycm9yLFxuICBQcmVwYXJlZFN0YXRlbWVudEVycm9yLFxuICBNU1NRTEVycm9yLFxuICBkcml2ZXI6IHNoYXJlZC5kcml2ZXIsXG4gIGV4cG9ydHM6IHtcbiAgICBDb25uZWN0aW9uRXJyb3IsXG4gICAgVHJhbnNhY3Rpb25FcnJvcixcbiAgICBSZXF1ZXN0RXJyb3IsXG4gICAgUHJlcGFyZWRTdGF0ZW1lbnRFcnJvcixcbiAgICBNU1NRTEVycm9yLFxuICAgIFRhYmxlLFxuICAgIElTT0xBVElPTl9MRVZFTCxcbiAgICBUWVBFUyxcbiAgICBNQVg6IDY1NTM1LCAvLyAoMSA8PCAxNikgLSAxXG4gICAgbWFwOiBzaGFyZWQubWFwLFxuICAgIGdldFR5cGVCeVZhbHVlOiBzaGFyZWQuZ2V0VHlwZUJ5VmFsdWUsXG4gICAgY29ubmVjdCxcbiAgICBjbG9zZSxcbiAgICBvbixcbiAgICByZW1vdmVMaXN0ZW5lcixcbiAgICBvZmYsXG4gICAgcXVlcnksXG4gICAgYmF0Y2hcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdQcm9taXNlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6ICgpID0+IHtcbiAgICByZXR1cm4gc2hhcmVkLlByb21pc2VcbiAgfSxcbiAgc2V0OiAodmFsdWUpID0+IHtcbiAgICBzaGFyZWQuUHJvbWlzZSA9IHZhbHVlXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ3ZhbHVlSGFuZGxlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgdmFsdWU6IHNoYXJlZC52YWx1ZUhhbmRsZXIsXG4gIHdyaXRhYmxlOiBmYWxzZSxcbiAgY29uZmlndXJhYmxlOiBmYWxzZVxufSlcblxuZm9yIChjb25zdCBrZXkgaW4gVFlQRVMpIHtcbiAgY29uc3QgdmFsdWUgPSBUWVBFU1trZXldXG4gIG1vZHVsZS5leHBvcnRzLmV4cG9ydHNba2V5XSA9IHZhbHVlXG4gIG1vZHVsZS5leHBvcnRzLmV4cG9ydHNba2V5LnRvVXBwZXJDYXNlKCldID0gdmFsdWVcbn1cblxuLyoqXG4gKiBAY2FsbGJhY2sgUmVxdWVzdH5yZXF1ZXN0Q2FsbGJhY2tcbiAqIEBwYXJhbSB7RXJyb3J9IGVyciBFcnJvciBvbiBlcnJvciwgb3RoZXJ3aXNlIG51bGwuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3VsdF0gUmVxdWVzdCByZXN1bHQuXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgUmVxdWVzdH5idWxrQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RXJyb3J9IGVyciBFcnJvciBvbiBlcnJvciwgb3RoZXJ3aXNlIG51bGwuXG4gKiBAcGFyYW0ge051bWJlcn0gW3Jvd3NBZmZlY3RlZF0gTnVtYmVyIG9mIGFmZmVjdGVkIHJvd3MuXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgYmFzaWNDYWxsYmFja1xuICogQHBhcmFtIHtFcnJvcn0gZXJyIEVycm9yIG9uIGVycm9yLCBvdGhlcndpc2UgbnVsbC5cbiAqIEBwYXJhbSB7Q29ubmVjdGlvbn0gW2Nvbm5lY3Rpb25dIEFjcXVpcmVkIGNvbm5lY3Rpb24uXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgYWNxdWlyZUNhbGxiYWNrXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgRXJyb3Igb24gZXJyb3IsIG90aGVyd2lzZSBudWxsLlxuICogQHBhcmFtIHtDb25uZWN0aW9ufSBbY29ubmVjdGlvbl0gQWNxdWlyZWQgY29ubmVjdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBDb25uZWN0aW9uIGNvbmZpZ1xuICovXG5cbi8qKlxuICogRGlzcGF0Y2hlZCBhZnRlciBjb25uZWN0aW9uIGhhcyBlc3RhYmxpc2hlZC5cbiAqIEBldmVudCBDb25uZWN0aW9uUG9vbCNjb25uZWN0XG4gKi9cblxuLyoqXG4gKiBEaXNwYXRjaGVkIGFmdGVyIGNvbm5lY3Rpb24gaGFzIGNsb3NlZCBhIHBvb2wgKGJ5IGNhbGxpbmcgY2xvc2UpLlxuICogQGV2ZW50IENvbm5lY3Rpb25Qb29sI2Nsb3NlXG4gKi9cblxuLyoqXG4gKiBEaXNwYXRjaGVkIHdoZW4gdHJhbnNhY3Rpb24gYmVnaW4uXG4gKiBAZXZlbnQgVHJhbnNhY3Rpb24jYmVnaW5cbiAqL1xuXG4vKipcbiAqIERpc3BhdGNoZWQgb24gc3VjY2Vzc2Z1bCBjb21taXQuXG4gKiBAZXZlbnQgVHJhbnNhY3Rpb24jY29tbWl0XG4gKi9cblxuLyoqXG4gKiBEaXNwYXRjaGVkIG9uIHN1Y2Nlc3NmdWwgcm9sbGJhY2suXG4gKiBAZXZlbnQgVHJhbnNhY3Rpb24jcm9sbGJhY2tcbiAqL1xuXG4vKipcbiAqIERpc3BhdGNoZWQgd2hlbiBtZXRhZGF0YSBmb3IgbmV3IHJlY29yZHNldCBhcmUgcGFyc2VkLlxuICogQGV2ZW50IFJlcXVlc3QjcmVjb3Jkc2V0XG4gKi9cblxuLyoqXG4gKiBEaXNwYXRjaGVkIHdoZW4gbmV3IHJvdyBpcyBwYXJzZWQuXG4gKiBAZXZlbnQgUmVxdWVzdCNyb3dcbiAqL1xuXG4vKipcbiAqIERpc3BhdGNoZWQgd2hlbiByZXF1ZXN0IGlzIGNvbXBsZXRlLlxuICogQGV2ZW50IFJlcXVlc3QjZG9uZVxuICovXG5cbi8qKlxuICogRGlzcGF0Y2hlZCBvbiBlcnJvci5cbiAqIEBldmVudCBSZXF1ZXN0I2Vycm9yXG4gKi9cbiJdLCJuYW1lcyI6WyJDb25uZWN0aW9uUG9vbCIsInJlcXVpcmUiLCJQcmVwYXJlZFN0YXRlbWVudCIsIlJlcXVlc3QiLCJUcmFuc2FjdGlvbiIsIkNvbm5lY3Rpb25FcnJvciIsIlRyYW5zYWN0aW9uRXJyb3IiLCJSZXF1ZXN0RXJyb3IiLCJQcmVwYXJlZFN0YXRlbWVudEVycm9yIiwiTVNTUUxFcnJvciIsInNoYXJlZCIsIlRhYmxlIiwiSVNPTEFUSU9OX0xFVkVMIiwiVFlQRVMiLCJjb25uZWN0IiwiY2xvc2UiLCJvbiIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicXVlcnkiLCJiYXRjaCIsIm1vZHVsZSIsImV4cG9ydHMiLCJkcml2ZXIiLCJNQVgiLCJtYXAiLCJnZXRUeXBlQnlWYWx1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIlByb21pc2UiLCJzZXQiLCJ2YWx1ZSIsInZhbHVlSGFuZGxlciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwia2V5IiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/prepared-statement.js":
/*!***********************************************************!*\
  !*** ./node_modules/mssql/lib/base/prepared-statement.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"mssql:base\");\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\");\nconst { IDS, objectHasProperty } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\");\nconst globalConnection = __webpack_require__(/*! ../global-connection */ \"(rsc)/./node_modules/mssql/lib/global-connection.js\");\nconst { TransactionError, PreparedStatementError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\");\nconst { TYPES, declare } = __webpack_require__(/*! ../datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\");\n/**\n * Class PreparedStatement.\n *\n * IMPORTANT: Rememeber that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n *\n * @property {String} statement Prepared SQL statement.\n */ class PreparedStatement extends EventEmitter {\n    /**\n   * Creates a new Prepared Statement.\n   *\n   * @param {ConnectionPool|Transaction} [holder]\n   */ constructor(parent){\n        super();\n        IDS.add(this, \"PreparedStatement\");\n        debug(\"ps(%d): created\", IDS.get(this));\n        this.parent = parent || globalConnection.pool;\n        this._handle = 0;\n        this.prepared = false;\n        this.parameters = {};\n    }\n    get config() {\n        return this.parent.config;\n    }\n    get connected() {\n        return this.parent.connected;\n    }\n    /**\n   * Acquire connection from connection pool.\n   *\n   * @param {Request} request Request.\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */ acquire(request, callback) {\n        if (!this._acquiredConnection) {\n            setImmediate(callback, new PreparedStatementError(\"Statement is not prepared. Call prepare() first.\", \"ENOTPREPARED\"));\n            return this;\n        }\n        if (this._activeRequest) {\n            setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", \"EREQINPROG\"));\n            return this;\n        }\n        this._activeRequest = request;\n        setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig);\n        return this;\n    }\n    /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {PreparedStatement}\n   */ release(connection) {\n        if (connection === this._acquiredConnection) {\n            this._activeRequest = null;\n        }\n        return this;\n    }\n    /**\n   * Add an input parameter to the prepared statement.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} type SQL data type of input parameter.\n   * @return {PreparedStatement}\n   */ input(name, type) {\n        if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n            throw new PreparedStatementError(`SQL injection warning for param '${name}'`, \"EINJECT\");\n        }\n        if (arguments.length < 2) {\n            throw new PreparedStatementError(\"Invalid number of arguments. 2 arguments expected.\", \"EARGS\");\n        }\n        if (type instanceof Function) {\n            type = type();\n        }\n        if (objectHasProperty(this.parameters, name)) {\n            throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, \"EDUPEPARAM\");\n        }\n        this.parameters[name] = {\n            name,\n            type: type.type,\n            io: 1,\n            length: type.length,\n            scale: type.scale,\n            precision: type.precision,\n            tvpType: type.tvpType\n        };\n        return this;\n    }\n    /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */ replaceInput(name, type, value) {\n        delete this.parameters[name];\n        return this.input(name, type, value);\n    }\n    /**\n   * Add an output parameter to the prepared statement.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @return {PreparedStatement}\n   */ output(name, type) {\n        if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n            throw new PreparedStatementError(`SQL injection warning for param '${name}'`, \"EINJECT\");\n        }\n        if (arguments.length < 2) {\n            throw new PreparedStatementError(\"Invalid number of arguments. 2 arguments expected.\", \"EARGS\");\n        }\n        if (type instanceof Function) type = type();\n        if (objectHasProperty(this.parameters, name)) {\n            throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, \"EDUPEPARAM\");\n        }\n        this.parameters[name] = {\n            name,\n            type: type.type,\n            io: 2,\n            length: type.length,\n            scale: type.scale,\n            precision: type.precision\n        };\n        return this;\n    }\n    /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @return {PreparedStatement}\n   */ replaceOutput(name, type) {\n        delete this.parameters[name];\n        return this.output(name, type);\n    }\n    /**\n   * Prepare a statement.\n   *\n   * @param {String} statement SQL statement to prepare.\n   * @param {basicCallback} [callback] A callback which is called after preparation has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */ prepare(statement, callback) {\n        if (typeof callback === \"function\") {\n            this._prepare(statement, callback);\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._prepare(statement, (err)=>{\n                if (err) return reject(err);\n                resolve(this);\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {String} statement\n   * @param {basicCallback} callback\n   */ _prepare(statement, callback) {\n        debug(\"ps(%d): prepare\", IDS.get(this));\n        if (typeof statement === \"function\") {\n            callback = statement;\n            statement = undefined;\n        }\n        if (this.prepared) {\n            return setImmediate(callback, new PreparedStatementError(\"Statement is already prepared.\", \"EALREADYPREPARED\"));\n        }\n        this.statement = statement || this.statement;\n        this.parent.acquire(this, (err, connection, config)=>{\n            if (err) return callback(err);\n            this._acquiredConnection = connection;\n            this._acquiredConfig = config;\n            const req = new shared.driver.Request(this);\n            req.stream = false;\n            req.output(\"handle\", TYPES.Int);\n            req.input(\"params\", TYPES.NVarChar, (()=>{\n                const result = [];\n                for(const name in this.parameters){\n                    if (!objectHasProperty(this.parameters, name)) {\n                        continue;\n                    }\n                    const param = this.parameters[name];\n                    result.push(`@${name} ${declare(param.type, param)}${param.io === 2 ? \" output\" : \"\"}`);\n                }\n                return result;\n            })().join(\",\"));\n            req.input(\"stmt\", TYPES.NVarChar, this.statement);\n            req.execute(\"sp_prepare\", (err, result)=>{\n                if (err) {\n                    this.parent.release(this._acquiredConnection);\n                    this._acquiredConnection = null;\n                    this._acquiredConfig = null;\n                    return callback(err);\n                }\n                debug(\"ps(%d): prepared\", IDS.get(this));\n                this._handle = result.output.handle;\n                this.prepared = true;\n                callback(null);\n            });\n        });\n    }\n    /**\n   * Execute a prepared statement.\n   *\n   * @param {Object} values An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n   * @param {basicCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */ execute(values, callback) {\n        if (this.stream || typeof callback === \"function\") {\n            return this._execute(values, callback);\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._execute(values, (err, recordset)=>{\n                if (err) return reject(err);\n                resolve(recordset);\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {Object} values\n   * @param {basicCallback} callback\n   */ _execute(values, callback) {\n        const req = new shared.driver.Request(this);\n        req.stream = this.stream;\n        req.arrayRowMode = this.arrayRowMode;\n        req.input(\"handle\", TYPES.Int, this._handle);\n        // copy parameters with new values\n        for(const name in this.parameters){\n            if (!objectHasProperty(this.parameters, name)) {\n                continue;\n            }\n            const param = this.parameters[name];\n            req.parameters[name] = {\n                name,\n                type: param.type,\n                io: param.io,\n                value: values[name],\n                length: param.length,\n                scale: param.scale,\n                precision: param.precision\n            };\n        }\n        req.execute(\"sp_execute\", (err, result)=>{\n            if (err) return callback(err);\n            callback(null, result);\n        });\n        return req;\n    }\n    /**\n   * Unprepare a prepared statement.\n   *\n   * @param {basicCallback} [callback] A callback which is called after unpreparation has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */ unprepare(callback) {\n        if (typeof callback === \"function\") {\n            this._unprepare(callback);\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._unprepare((err)=>{\n                if (err) return reject(err);\n                resolve();\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {basicCallback} callback\n   */ _unprepare(callback) {\n        debug(\"ps(%d): unprepare\", IDS.get(this));\n        if (!this.prepared) {\n            return setImmediate(callback, new PreparedStatementError(\"Statement is not prepared. Call prepare() first.\", \"ENOTPREPARED\"));\n        }\n        if (this._activeRequest) {\n            return setImmediate(callback, new TransactionError(\"Can't unprepare the statement. There is a request in progress.\", \"EREQINPROG\"));\n        }\n        const req = new shared.driver.Request(this);\n        req.stream = false;\n        req.input(\"handle\", TYPES.Int, this._handle);\n        req.execute(\"sp_unprepare\", (err)=>{\n            if (err) return callback(err);\n            this.parent.release(this._acquiredConnection);\n            this._acquiredConnection = null;\n            this._acquiredConfig = null;\n            this._handle = 0;\n            this.prepared = false;\n            debug(\"ps(%d): unprepared\", IDS.get(this));\n            return callback(null);\n        });\n    }\n}\nmodule.exports = PreparedStatement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/prepared-statement.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/request.js":
/*!************************************************!*\
  !*** ./node_modules/mssql/lib/base/request.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"mssql:base\");\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\");\nconst { Readable } = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst { IDS, objectHasProperty } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\");\nconst globalConnection = __webpack_require__(/*! ../global-connection */ \"(rsc)/./node_modules/mssql/lib/global-connection.js\");\nconst { RequestError, ConnectionError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\");\nconst { TYPES } = __webpack_require__(/*! ../datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\");\n/**\n * Class Request.\n *\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\n * @property {*} parameters Collection of input and output parameters.\n * @property {Boolean} canceled `true` if request was canceled.\n *\n * @fires Request#recordset\n * @fires Request#row\n * @fires Request#done\n * @fires Request#error\n */ class Request extends EventEmitter {\n    /**\n   * Create new Request.\n   *\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\n   */ constructor(parent){\n        super();\n        IDS.add(this, \"Request\");\n        debug(\"request(%d): created\", IDS.get(this));\n        this.canceled = false;\n        this._paused = false;\n        this.parent = parent || globalConnection.pool;\n        this.parameters = {};\n        this.stream = null;\n        this.arrayRowMode = null;\n    }\n    get paused() {\n        return this._paused;\n    }\n    /**\n   * Generate sql string and set input parameters from tagged template string.\n   *\n   * @param {Template literal} template\n   * @return {String}\n   */ template() {\n        const values = Array.prototype.slice.call(arguments);\n        const strings = values.shift();\n        return this._template(strings, values);\n    }\n    /**\n   * Fetch request from tagged template string.\n   *\n   * @private\n   * @param {Array} strings\n   * @param {Array} values\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\n   * @return {Request}\n   */ _template(strings, values, method) {\n        const command = [\n            strings[0]\n        ];\n        for(let index = 0; index < values.length; index++){\n            const value = values[index];\n            // if value is an array, prepare each items as it's own comma separated parameter\n            if (Array.isArray(value)) {\n                for(let parameterIndex = 0; parameterIndex < value.length; parameterIndex++){\n                    this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex]);\n                    command.push(`@param${index + 1}_${parameterIndex}`);\n                    if (parameterIndex < value.length - 1) {\n                        command.push(\", \");\n                    }\n                }\n                command.push(strings[index + 1]);\n            } else {\n                this.input(`param${index + 1}`, value);\n                command.push(`@param${index + 1}`, strings[index + 1]);\n            }\n        }\n        if (method) {\n            return this[method](command.join(\"\"));\n        } else {\n            return command.join(\"\");\n        }\n    }\n    /**\n   * Add an input parameter to the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */ input(name, type, value) {\n        if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n            throw new RequestError(`SQL injection warning for param '${name}'`, \"EINJECT\");\n        }\n        if (arguments.length < 2) {\n            throw new RequestError(\"Invalid number of arguments. At least 2 arguments expected.\", \"EARGS\");\n        } else if (arguments.length === 2) {\n            value = type;\n            type = shared.getTypeByValue(value);\n        }\n        // support for custom data types\n        if (value && typeof value.valueOf === \"function\" && !(value instanceof Date)) value = value.valueOf();\n        if (value === undefined) value = null // undefined to null\n        ;\n        if (typeof value === \"number\" && isNaN(value)) value = null // NaN to null\n        ;\n        if (type instanceof Function) type = type();\n        if (objectHasProperty(this.parameters, name)) {\n            throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, \"EDUPEPARAM\");\n        }\n        this.parameters[name] = {\n            name,\n            type: type.type,\n            io: 1,\n            value,\n            length: type.length,\n            scale: type.scale,\n            precision: type.precision,\n            tvpType: type.tvpType\n        };\n        return this;\n    }\n    /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */ replaceInput(name, type, value) {\n        delete this.parameters[name];\n        return this.input(name, type, value);\n    }\n    /**\n   * Add an output parameter to the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */ output(name, type, value) {\n        if (!type) {\n            type = TYPES.NVarChar;\n        }\n        if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n            throw new RequestError(`SQL injection warning for param '${name}'`, \"EINJECT\");\n        }\n        if (type === TYPES.Text || type === TYPES.NText || type === TYPES.Image) {\n            throw new RequestError(\"Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.\", \"EDEPRECATED\");\n        }\n        // support for custom data types\n        if (value && typeof value.valueOf === \"function\" && !(value instanceof Date)) value = value.valueOf();\n        if (value === undefined) value = null // undefined to null\n        ;\n        if (typeof value === \"number\" && isNaN(value)) value = null // NaN to null\n        ;\n        if (type instanceof Function) type = type();\n        if (objectHasProperty(this.parameters, name)) {\n            throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, \"EDUPEPARAM\");\n        }\n        this.parameters[name] = {\n            name,\n            type: type.type,\n            io: 2,\n            value,\n            length: type.length,\n            scale: type.scale,\n            precision: type.precision\n        };\n        return this;\n    }\n    /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */ replaceOutput(name, type, value) {\n        delete this.parameters[name];\n        return this.output(name, type, value);\n    }\n    /**\n   * Execute the SQL batch.\n   *\n   * @param {String} batch T-SQL batch to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */ batch(batch, callback) {\n        if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n        if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n        this.rowsAffected = 0;\n        if (typeof callback === \"function\") {\n            this._batch(batch, (err, recordsets, output, rowsAffected)=>{\n                if (this.stream) {\n                    if (err) this.emit(\"error\", err);\n                    err = null;\n                    this.emit(\"done\", {\n                        output,\n                        rowsAffected\n                    });\n                }\n                if (err) return callback(err);\n                callback(null, {\n                    recordsets,\n                    recordset: recordsets && recordsets[0],\n                    output,\n                    rowsAffected\n                });\n            });\n            return this;\n        }\n        // Check is method was called as tagged template\n        if (typeof batch === \"object\") {\n            const values = Array.prototype.slice.call(arguments);\n            const strings = values.shift();\n            batch = this._template(strings, values);\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._batch(batch, (err, recordsets, output, rowsAffected)=>{\n                if (this.stream) {\n                    if (err) this.emit(\"error\", err);\n                    err = null;\n                    this.emit(\"done\", {\n                        output,\n                        rowsAffected\n                    });\n                }\n                if (err) return reject(err);\n                resolve({\n                    recordsets,\n                    recordset: recordsets && recordsets[0],\n                    output,\n                    rowsAffected\n                });\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {String} batch\n   * @param {Request~requestCallback} callback\n   */ _batch(batch, callback) {\n        if (!this.parent) {\n            return setImmediate(callback, new RequestError(\"No connection is specified for that request.\", \"ENOCONN\"));\n        }\n        if (!this.parent.connected) {\n            return setImmediate(callback, new ConnectionError(\"Connection is closed.\", \"ECONNCLOSED\"));\n        }\n        this.canceled = false;\n        setImmediate(callback);\n    }\n    /**\n   * Bulk load.\n   *\n   * @param {Table} table SQL table.\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */ bulk(table, options, callback) {\n        if (typeof options === \"function\") {\n            callback = options;\n            options = {};\n        } else if (typeof options === \"undefined\") {\n            options = {};\n        }\n        if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n        if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n        if (this.stream || typeof callback === \"function\") {\n            this._bulk(table, options, (err, rowsAffected)=>{\n                if (this.stream) {\n                    if (err) this.emit(\"error\", err);\n                    return this.emit(\"done\", {\n                        rowsAffected\n                    });\n                }\n                if (err) return callback(err);\n                callback(null, {\n                    rowsAffected\n                });\n            });\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._bulk(table, options, (err, rowsAffected)=>{\n                if (err) return reject(err);\n                resolve({\n                    rowsAffected\n                });\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {Table} table\n   * @param {object} options\n   * @param {Request~bulkCallback} callback\n   */ _bulk(table, options, callback) {\n        if (!this.parent) {\n            return setImmediate(callback, new RequestError(\"No connection is specified for that request.\", \"ENOCONN\"));\n        }\n        if (!this.parent.connected) {\n            return setImmediate(callback, new ConnectionError(\"Connection is closed.\", \"ECONNCLOSED\"));\n        }\n        this.canceled = false;\n        setImmediate(callback);\n    }\n    /**\n   * Wrap original request in a Readable stream that supports back pressure and return.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\n   * @return {Stream}\n   */ toReadableStream(streamOptions = {}) {\n        this.stream = true;\n        this.pause();\n        const readableStream = new Readable({\n            ...streamOptions,\n            objectMode: true,\n            read: ()=>{\n                this.resume();\n            }\n        });\n        this.on(\"row\", (row)=>{\n            if (!readableStream.push(row)) {\n                this.pause();\n            }\n        });\n        this.on(\"error\", (error)=>{\n            readableStream.emit(\"error\", error);\n        });\n        this.on(\"done\", ()=>{\n            readableStream.push(null);\n        });\n        return readableStream;\n    }\n    /**\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Stream} stream Stream to pipe data into.\n   * @return {Stream}\n   */ pipe(writableStream) {\n        const readableStream = this.toReadableStream();\n        return readableStream.pipe(writableStream);\n    }\n    /**\n   * Execute the SQL command.\n   *\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */ query(command, callback) {\n        if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n        if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n        this.rowsAffected = 0;\n        if (typeof callback === \"function\") {\n            this._query(command, (err, recordsets, output, rowsAffected, columns)=>{\n                if (this.stream) {\n                    if (err) this.emit(\"error\", err);\n                    err = null;\n                    this.emit(\"done\", {\n                        output,\n                        rowsAffected\n                    });\n                }\n                if (err) return callback(err);\n                const result = {\n                    recordsets,\n                    recordset: recordsets && recordsets[0],\n                    output,\n                    rowsAffected\n                };\n                if (this.arrayRowMode) result.columns = columns;\n                callback(null, result);\n            });\n            return this;\n        }\n        // Check is method was called as tagged template\n        if (typeof command === \"object\") {\n            const values = Array.prototype.slice.call(arguments);\n            const strings = values.shift();\n            command = this._template(strings, values);\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._query(command, (err, recordsets, output, rowsAffected, columns)=>{\n                if (this.stream) {\n                    if (err) this.emit(\"error\", err);\n                    err = null;\n                    this.emit(\"done\", {\n                        output,\n                        rowsAffected\n                    });\n                }\n                if (err) return reject(err);\n                const result = {\n                    recordsets,\n                    recordset: recordsets && recordsets[0],\n                    output,\n                    rowsAffected\n                };\n                if (this.arrayRowMode) result.columns = columns;\n                resolve(result);\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {String} command\n   * @param {Request~bulkCallback} callback\n   */ _query(command, callback) {\n        if (!this.parent) {\n            return setImmediate(callback, new RequestError(\"No connection is specified for that request.\", \"ENOCONN\"));\n        }\n        if (!this.parent.connected) {\n            return setImmediate(callback, new ConnectionError(\"Connection is closed.\", \"ECONNCLOSED\"));\n        }\n        this.canceled = false;\n        setImmediate(callback);\n    }\n    /**\n   * Call a stored procedure.\n   *\n   * @param {String} procedure Name of the stored procedure to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */ execute(command, callback) {\n        if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n        if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n        this.rowsAffected = 0;\n        if (typeof callback === \"function\") {\n            this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns)=>{\n                if (this.stream) {\n                    if (err) this.emit(\"error\", err);\n                    err = null;\n                    this.emit(\"done\", {\n                        output,\n                        rowsAffected,\n                        returnValue\n                    });\n                }\n                if (err) return callback(err);\n                const result = {\n                    recordsets,\n                    recordset: recordsets && recordsets[0],\n                    output,\n                    rowsAffected,\n                    returnValue\n                };\n                if (this.arrayRowMode) result.columns = columns;\n                callback(null, result);\n            });\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns)=>{\n                if (this.stream) {\n                    if (err) this.emit(\"error\", err);\n                    err = null;\n                    this.emit(\"done\", {\n                        output,\n                        rowsAffected,\n                        returnValue\n                    });\n                }\n                if (err) return reject(err);\n                const result = {\n                    recordsets,\n                    recordset: recordsets && recordsets[0],\n                    output,\n                    rowsAffected,\n                    returnValue\n                };\n                if (this.arrayRowMode) result.columns = columns;\n                resolve(result);\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {String} procedure\n   * @param {Request~bulkCallback} callback\n   */ _execute(procedure, callback) {\n        if (!this.parent) {\n            return setImmediate(callback, new RequestError(\"No connection is specified for that request.\", \"ENOCONN\"));\n        }\n        if (!this.parent.connected) {\n            return setImmediate(callback, new ConnectionError(\"Connection is closed.\", \"ECONNCLOSED\"));\n        }\n        this.canceled = false;\n        setImmediate(callback);\n    }\n    /**\n   * Cancel currently executed request.\n   *\n   * @return {Boolean}\n   */ cancel() {\n        this._cancel();\n        return true;\n    }\n    /**\n   * @private\n   */ _cancel() {\n        this.canceled = true;\n    }\n    pause() {\n        if (this.stream) {\n            this._pause();\n            return true;\n        }\n        return false;\n    }\n    _pause() {\n        this._paused = true;\n    }\n    resume() {\n        if (this.stream) {\n            this._resume();\n            return true;\n        }\n        return false;\n    }\n    _resume() {\n        this._paused = false;\n    }\n    _setCurrentRequest(request) {\n        this._currentRequest = request;\n        if (this._paused) {\n            this.pause();\n        }\n        return this;\n    }\n}\nmodule.exports = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/transaction.js":
/*!****************************************************!*\
  !*** ./node_modules/mssql/lib/base/transaction.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"mssql:base\");\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\");\nconst { IDS } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\");\nconst globalConnection = __webpack_require__(/*! ../global-connection */ \"(rsc)/./node_modules/mssql/lib/global-connection.js\");\nconst { TransactionError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\");\nconst ISOLATION_LEVEL = __webpack_require__(/*! ../isolationlevel */ \"(rsc)/./node_modules/mssql/lib/isolationlevel.js\");\n/**\n * Class Transaction.\n *\n * @property {Number} isolationLevel Controls the locking and row versioning behavior of TSQL statements issued by a connection. READ_COMMITTED by default.\n * @property {String} name Transaction name. Empty string by default.\n *\n * @fires Transaction#begin\n * @fires Transaction#commit\n * @fires Transaction#rollback\n */ class Transaction extends EventEmitter {\n    /**\n   * Create new Transaction.\n   *\n   * @param {Connection} [parent] If ommited, global connection is used instead.\n   */ constructor(parent){\n        super();\n        IDS.add(this, \"Transaction\");\n        debug(\"transaction(%d): created\", IDS.get(this));\n        this.parent = parent || globalConnection.pool;\n        this.isolationLevel = Transaction.defaultIsolationLevel;\n        this.name = \"\";\n    }\n    get config() {\n        return this.parent.config;\n    }\n    get connected() {\n        return this.parent.connected;\n    }\n    /**\n   * Acquire connection from connection pool.\n   *\n   * @param {Request} request Request.\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */ acquire(request, callback) {\n        if (!this._acquiredConnection) {\n            setImmediate(callback, new TransactionError(\"Transaction has not begun. Call begin() first.\", \"ENOTBEGUN\"));\n            return this;\n        }\n        if (this._activeRequest) {\n            setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", \"EREQINPROG\"));\n            return this;\n        }\n        this._activeRequest = request;\n        setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig);\n        return this;\n    }\n    /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {Transaction}\n   */ release(connection) {\n        if (connection === this._acquiredConnection) {\n            this._activeRequest = null;\n        }\n        return this;\n    }\n    /**\n   * Begin a transaction.\n   *\n   * @param {Number} [isolationLevel] Controls the locking and row versioning behavior of TSQL statements issued by a connection.\n   * @param {basicCallback} [callback] A callback which is called after transaction has began, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */ begin(isolationLevel, callback) {\n        if (isolationLevel instanceof Function) {\n            callback = isolationLevel;\n            isolationLevel = undefined;\n        }\n        if (typeof callback === \"function\") {\n            this._begin(isolationLevel, (err)=>{\n                if (!err) {\n                    this.emit(\"begin\");\n                }\n                callback(err);\n            });\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._begin(isolationLevel, (err)=>{\n                if (err) return reject(err);\n                this.emit(\"begin\");\n                resolve(this);\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {Number} [isolationLevel]\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */ _begin(isolationLevel, callback) {\n        if (this._acquiredConnection) {\n            return setImmediate(callback, new TransactionError(\"Transaction has already begun.\", \"EALREADYBEGUN\"));\n        }\n        this._aborted = false;\n        this._rollbackRequested = false;\n        if (isolationLevel) {\n            if (Object.keys(ISOLATION_LEVEL).some((key)=>{\n                return ISOLATION_LEVEL[key] === isolationLevel;\n            })) {\n                this.isolationLevel = isolationLevel;\n            } else {\n                throw new TransactionError(\"Invalid isolation level.\");\n            }\n        }\n        setImmediate(callback);\n    }\n    /**\n   * Commit a transaction.\n   *\n   * @param {basicCallback} [callback] A callback which is called after transaction has commited, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */ commit(callback) {\n        if (typeof callback === \"function\") {\n            this._commit((err)=>{\n                if (!err) {\n                    this.emit(\"commit\");\n                }\n                callback(err);\n            });\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            this._commit((err)=>{\n                if (err) return reject(err);\n                this.emit(\"commit\");\n                resolve();\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */ _commit(callback) {\n        if (this._aborted) {\n            return setImmediate(callback, new TransactionError(\"Transaction has been aborted.\", \"EABORT\"));\n        }\n        if (!this._acquiredConnection) {\n            return setImmediate(callback, new TransactionError(\"Transaction has not begun. Call begin() first.\", \"ENOTBEGUN\"));\n        }\n        if (this._activeRequest) {\n            return setImmediate(callback, new TransactionError(\"Can't commit transaction. There is a request in progress.\", \"EREQINPROG\"));\n        }\n        setImmediate(callback);\n    }\n    /**\n   * Returns new request using this transaction.\n   *\n   * @return {Request}\n   */ request() {\n        return new shared.driver.Request(this);\n    }\n    /**\n   * Rollback a transaction.\n   *\n   * @param {basicCallback} [callback] A callback which is called after transaction has rolled back, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */ rollback(callback) {\n        if (typeof callback === \"function\") {\n            this._rollback((err)=>{\n                if (!err) {\n                    this.emit(\"rollback\", this._aborted);\n                }\n                callback(err);\n            });\n            return this;\n        }\n        return new shared.Promise((resolve, reject)=>{\n            return this._rollback((err)=>{\n                if (err) return reject(err);\n                this.emit(\"rollback\", this._aborted);\n                resolve();\n            });\n        });\n    }\n    /**\n   * @private\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */ _rollback(callback) {\n        if (this._aborted) {\n            return setImmediate(callback, new TransactionError(\"Transaction has been aborted.\", \"EABORT\"));\n        }\n        if (!this._acquiredConnection) {\n            return setImmediate(callback, new TransactionError(\"Transaction has not begun. Call begin() first.\", \"ENOTBEGUN\"));\n        }\n        if (this._activeRequest) {\n            return setImmediate(callback, new TransactionError(\"Can't rollback transaction. There is a request in progress.\", \"EREQINPROG\"));\n        }\n        this._rollbackRequested = true;\n        setImmediate(callback);\n    }\n}\n/**\n * Default isolation level used for any transactions that don't explicitly specify an isolation level.\n *\n * @type {number}\n */ Transaction.defaultIsolationLevel = ISOLATION_LEVEL.READ_COMMITTED;\nmodule.exports = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/transaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/datatypes.js":
/*!*********************************************!*\
  !*** ./node_modules/mssql/lib/datatypes.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst objectHasProperty = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\").objectHasProperty);\nconst inspect = Symbol.for(\"nodejs.util.inspect.custom\");\nconst TYPES = {\n    VarChar (length) {\n        return {\n            type: TYPES.VarChar,\n            length\n        };\n    },\n    NVarChar (length) {\n        return {\n            type: TYPES.NVarChar,\n            length\n        };\n    },\n    Text () {\n        return {\n            type: TYPES.Text\n        };\n    },\n    Int () {\n        return {\n            type: TYPES.Int\n        };\n    },\n    BigInt () {\n        return {\n            type: TYPES.BigInt\n        };\n    },\n    TinyInt () {\n        return {\n            type: TYPES.TinyInt\n        };\n    },\n    SmallInt () {\n        return {\n            type: TYPES.SmallInt\n        };\n    },\n    Bit () {\n        return {\n            type: TYPES.Bit\n        };\n    },\n    Float () {\n        return {\n            type: TYPES.Float\n        };\n    },\n    Numeric (precision, scale) {\n        return {\n            type: TYPES.Numeric,\n            precision,\n            scale\n        };\n    },\n    Decimal (precision, scale) {\n        return {\n            type: TYPES.Decimal,\n            precision,\n            scale\n        };\n    },\n    Real () {\n        return {\n            type: TYPES.Real\n        };\n    },\n    Date () {\n        return {\n            type: TYPES.Date\n        };\n    },\n    DateTime () {\n        return {\n            type: TYPES.DateTime\n        };\n    },\n    DateTime2 (scale) {\n        return {\n            type: TYPES.DateTime2,\n            scale\n        };\n    },\n    DateTimeOffset (scale) {\n        return {\n            type: TYPES.DateTimeOffset,\n            scale\n        };\n    },\n    SmallDateTime () {\n        return {\n            type: TYPES.SmallDateTime\n        };\n    },\n    Time (scale) {\n        return {\n            type: TYPES.Time,\n            scale\n        };\n    },\n    UniqueIdentifier () {\n        return {\n            type: TYPES.UniqueIdentifier\n        };\n    },\n    SmallMoney () {\n        return {\n            type: TYPES.SmallMoney\n        };\n    },\n    Money () {\n        return {\n            type: TYPES.Money\n        };\n    },\n    Binary (length) {\n        return {\n            type: TYPES.Binary,\n            length\n        };\n    },\n    VarBinary (length) {\n        return {\n            type: TYPES.VarBinary,\n            length\n        };\n    },\n    Image () {\n        return {\n            type: TYPES.Image\n        };\n    },\n    Xml () {\n        return {\n            type: TYPES.Xml\n        };\n    },\n    Char (length) {\n        return {\n            type: TYPES.Char,\n            length\n        };\n    },\n    NChar (length) {\n        return {\n            type: TYPES.NChar,\n            length\n        };\n    },\n    NText () {\n        return {\n            type: TYPES.NText\n        };\n    },\n    TVP (tvpType) {\n        return {\n            type: TYPES.TVP,\n            tvpType\n        };\n    },\n    UDT () {\n        return {\n            type: TYPES.UDT\n        };\n    },\n    Geography () {\n        return {\n            type: TYPES.Geography\n        };\n    },\n    Geometry () {\n        return {\n            type: TYPES.Geometry\n        };\n    },\n    Variant () {\n        return {\n            type: TYPES.Variant\n        };\n    }\n};\nmodule.exports.TYPES = TYPES;\nmodule.exports.DECLARATIONS = {};\nconst zero = function(value, length) {\n    if (length == null) length = 2;\n    value = String(value);\n    if (value.length < length) {\n        for(let i = 1; i <= length - value.length; i++){\n            value = `0${value}`;\n        }\n    }\n    return value;\n};\nfor(const key in TYPES){\n    if (objectHasProperty(TYPES, key)) {\n        const value = TYPES[key];\n        value.declaration = key.toLowerCase();\n        module.exports.DECLARATIONS[value.declaration] = value;\n        ((key, value)=>{\n            value[inspect] = ()=>`[sql.${key}]`;\n        })(key, value);\n    }\n}\nmodule.exports.declare = (type, options)=>{\n    switch(type){\n        case TYPES.VarChar:\n        case TYPES.VarBinary:\n            return `${type.declaration} (${options.length > 8000 ? \"MAX\" : options.length == null ? \"MAX\" : options.length})`;\n        case TYPES.NVarChar:\n            return `${type.declaration} (${options.length > 4000 ? \"MAX\" : options.length == null ? \"MAX\" : options.length})`;\n        case TYPES.Char:\n        case TYPES.NChar:\n        case TYPES.Binary:\n            return `${type.declaration} (${options.length == null ? 1 : options.length})`;\n        case TYPES.Decimal:\n        case TYPES.Numeric:\n            return `${type.declaration} (${options.precision == null ? 18 : options.precision}, ${options.scale == null ? 0 : options.scale})`;\n        case TYPES.Time:\n        case TYPES.DateTime2:\n        case TYPES.DateTimeOffset:\n            return `${type.declaration} (${options.scale == null ? 7 : options.scale})`;\n        case TYPES.TVP:\n            return `${options.tvpType} readonly`;\n        default:\n            return type.declaration;\n    }\n};\nmodule.exports.cast = (value, type, options)=>{\n    if (value == null) {\n        return null;\n    }\n    switch(typeof value){\n        case \"string\":\n            return `N'${value.replace(/'/g, \"''\")}'`;\n        case \"number\":\n            return value;\n        case \"boolean\":\n            return value ? 1 : 0;\n        case \"object\":\n            if (value instanceof Date) {\n                let ns = value.getUTCMilliseconds() / 1000;\n                if (value.nanosecondDelta != null) {\n                    ns += value.nanosecondDelta;\n                }\n                const scale = options.scale == null ? 7 : options.scale;\n                if (scale > 0) {\n                    ns = String(ns).substr(1, scale + 1);\n                } else {\n                    ns = \"\";\n                }\n                return `N'${value.getUTCFullYear()}-${zero(value.getUTCMonth() + 1)}-${zero(value.getUTCDate())} ${zero(value.getUTCHours())}:${zero(value.getUTCMinutes())}:${zero(value.getUTCSeconds())}${ns}'`;\n            } else if (Buffer.isBuffer(value)) {\n                return `0x${value.toString(\"hex\")}`;\n            }\n            return null;\n        default:\n            return null;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/datatypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/connection-error.js":
/*!**********************************************************!*\
  !*** ./node_modules/mssql/lib/error/connection-error.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\");\n/**\n * Class ConnectionError.\n */ class ConnectionError extends MSSQLError {\n    /**\n   * Creates a new ConnectionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */ constructor(message, code){\n        super(message, code);\n        this.name = \"ConnectionError\";\n    }\n}\nmodule.exports = ConnectionError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL2Nvbm5lY3Rpb24tZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUUzQjs7Q0FFQyxHQUVELE1BQU1DLHdCQUF3QkY7SUFDNUI7Ozs7O0dBS0MsR0FFREcsWUFBYUMsT0FBTyxFQUFFQyxJQUFJLENBQUU7UUFDMUIsS0FBSyxDQUFDRCxTQUFTQztRQUVmLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL2Nvbm5lY3Rpb24tZXJyb3IuanM/MzQ3MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgTVNTUUxFcnJvciA9IHJlcXVpcmUoJy4vbXNzcWwtZXJyb3InKVxuXG4vKipcbiAqIENsYXNzIENvbm5lY3Rpb25FcnJvci5cbiAqL1xuXG5jbGFzcyBDb25uZWN0aW9uRXJyb3IgZXh0ZW5kcyBNU1NRTEVycm9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQ29ubmVjdGlvbkVycm9yLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBFcnJvciBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvZGVdIEVycm9yIGNvZGUuXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlLCBjb2RlKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgY29kZSlcblxuICAgIHRoaXMubmFtZSA9ICdDb25uZWN0aW9uRXJyb3InXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25uZWN0aW9uRXJyb3JcbiJdLCJuYW1lcyI6WyJNU1NRTEVycm9yIiwicmVxdWlyZSIsIkNvbm5lY3Rpb25FcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImNvZGUiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/connection-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/index.js":
/*!***********************************************!*\
  !*** ./node_modules/mssql/lib/error/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ConnectionError = __webpack_require__(/*! ./connection-error */ \"(rsc)/./node_modules/mssql/lib/error/connection-error.js\");\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\");\nconst PreparedStatementError = __webpack_require__(/*! ./prepared-statement-error */ \"(rsc)/./node_modules/mssql/lib/error/prepared-statement-error.js\");\nconst RequestError = __webpack_require__(/*! ./request-error */ \"(rsc)/./node_modules/mssql/lib/error/request-error.js\");\nconst TransactionError = __webpack_require__(/*! ./transaction-error */ \"(rsc)/./node_modules/mssql/lib/error/transaction-error.js\");\nmodule.exports = {\n    ConnectionError,\n    MSSQLError,\n    PreparedStatementError,\n    RequestError,\n    TransactionError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsa0JBQWtCQyxtQkFBT0EsQ0FBQztBQUNoQyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQztBQUMzQixNQUFNRSx5QkFBeUJGLG1CQUFPQSxDQUFDO0FBQ3ZDLE1BQU1HLGVBQWVILG1CQUFPQSxDQUFDO0FBQzdCLE1BQU1JLG1CQUFtQkosbUJBQU9BLENBQUM7QUFFakNLLE9BQU9DLE9BQU8sR0FBRztJQUNmUDtJQUNBRTtJQUNBQztJQUNBQztJQUNBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL2luZGV4LmpzPzNlYzAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IENvbm5lY3Rpb25FcnJvciA9IHJlcXVpcmUoJy4vY29ubmVjdGlvbi1lcnJvcicpXG5jb25zdCBNU1NRTEVycm9yID0gcmVxdWlyZSgnLi9tc3NxbC1lcnJvcicpXG5jb25zdCBQcmVwYXJlZFN0YXRlbWVudEVycm9yID0gcmVxdWlyZSgnLi9wcmVwYXJlZC1zdGF0ZW1lbnQtZXJyb3InKVxuY29uc3QgUmVxdWVzdEVycm9yID0gcmVxdWlyZSgnLi9yZXF1ZXN0LWVycm9yJylcbmNvbnN0IFRyYW5zYWN0aW9uRXJyb3IgPSByZXF1aXJlKCcuL3RyYW5zYWN0aW9uLWVycm9yJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbm5lY3Rpb25FcnJvcixcbiAgTVNTUUxFcnJvcixcbiAgUHJlcGFyZWRTdGF0ZW1lbnRFcnJvcixcbiAgUmVxdWVzdEVycm9yLFxuICBUcmFuc2FjdGlvbkVycm9yXG59XG4iXSwibmFtZXMiOlsiQ29ubmVjdGlvbkVycm9yIiwicmVxdWlyZSIsIk1TU1FMRXJyb3IiLCJQcmVwYXJlZFN0YXRlbWVudEVycm9yIiwiUmVxdWVzdEVycm9yIiwiVHJhbnNhY3Rpb25FcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/mssql-error.js":
/*!*****************************************************!*\
  !*** ./node_modules/mssql/lib/error/mssql-error.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nclass MSSQLError extends Error {\n    /**\n   * Creates a new ConnectionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */ constructor(message, code){\n        if (message instanceof Error) {\n            super(message.message);\n            this.code = message.code || code;\n            Error.captureStackTrace(this, this.constructor);\n            Object.defineProperty(this, \"originalError\", {\n                enumerable: true,\n                value: message\n            });\n        } else {\n            super(message);\n            this.code = code;\n        }\n        this.name = \"MSSQLError\";\n    }\n}\nmodule.exports = MSSQLError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL21zc3FsLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsbUJBQW1CQztJQUN2Qjs7Ozs7R0FLQyxHQUVEQyxZQUFhQyxPQUFPLEVBQUVDLElBQUksQ0FBRTtRQUMxQixJQUFJRCxtQkFBbUJGLE9BQU87WUFDNUIsS0FBSyxDQUFDRSxRQUFRQSxPQUFPO1lBQ3JCLElBQUksQ0FBQ0MsSUFBSSxHQUFHRCxRQUFRQyxJQUFJLElBQUlBO1lBRTVCSCxNQUFNSSxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDSCxXQUFXO1lBQzlDSSxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGlCQUFpQjtnQkFBRUMsWUFBWTtnQkFBTUMsT0FBT047WUFBUTtRQUNsRixPQUFPO1lBQ0wsS0FBSyxDQUFDQTtZQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtRQUNkO1FBRUEsSUFBSSxDQUFDTSxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9tc3NxbC9saWIvZXJyb3IvbXNzcWwtZXJyb3IuanM/NDY5YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY2xhc3MgTVNTUUxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQ29ubmVjdGlvbkVycm9yLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBFcnJvciBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvZGVdIEVycm9yIGNvZGUuXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlLCBjb2RlKSB7XG4gICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgc3VwZXIobWVzc2FnZS5tZXNzYWdlKVxuICAgICAgdGhpcy5jb2RlID0gbWVzc2FnZS5jb2RlIHx8IGNvZGVcblxuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3RvcilcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnb3JpZ2luYWxFcnJvcicsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IG1lc3NhZ2UgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIobWVzc2FnZSlcbiAgICAgIHRoaXMuY29kZSA9IGNvZGVcbiAgICB9XG5cbiAgICB0aGlzLm5hbWUgPSAnTVNTUUxFcnJvcidcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1TU1FMRXJyb3JcbiJdLCJuYW1lcyI6WyJNU1NRTEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJjb2RlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJ2YWx1ZSIsIm5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/mssql-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/prepared-statement-error.js":
/*!******************************************************************!*\
  !*** ./node_modules/mssql/lib/error/prepared-statement-error.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\");\n/**\n * Class PreparedStatementError.\n */ class PreparedStatementError extends MSSQLError {\n    /**\n   * Creates a new PreparedStatementError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */ constructor(message, code){\n        super(message, code);\n        this.name = \"PreparedStatementError\";\n    }\n}\nmodule.exports = PreparedStatementError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL3ByZXBhcmVkLXN0YXRlbWVudC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLGFBQWFDLG1CQUFPQSxDQUFDO0FBRTNCOztDQUVDLEdBRUQsTUFBTUMsK0JBQStCRjtJQUNuQzs7Ozs7R0FLQyxHQUVERyxZQUFhQyxPQUFPLEVBQUVDLElBQUksQ0FBRTtRQUMxQixLQUFLLENBQUNELFNBQVNDO1FBRWYsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBRUFDLE9BQU9DLE9BQU8sR0FBR04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9tc3NxbC9saWIvZXJyb3IvcHJlcGFyZWQtc3RhdGVtZW50LWVycm9yLmpzP2I4YWUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IE1TU1FMRXJyb3IgPSByZXF1aXJlKCcuL21zc3FsLWVycm9yJylcblxuLyoqXG4gKiBDbGFzcyBQcmVwYXJlZFN0YXRlbWVudEVycm9yLlxuICovXG5cbmNsYXNzIFByZXBhcmVkU3RhdGVtZW50RXJyb3IgZXh0ZW5kcyBNU1NRTEVycm9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUHJlcGFyZWRTdGF0ZW1lbnRFcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtjb2RlXSBFcnJvciBjb2RlLlxuICAgKi9cblxuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgY29kZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIGNvZGUpXG5cbiAgICB0aGlzLm5hbWUgPSAnUHJlcGFyZWRTdGF0ZW1lbnRFcnJvcidcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByZXBhcmVkU3RhdGVtZW50RXJyb3JcbiJdLCJuYW1lcyI6WyJNU1NRTEVycm9yIiwicmVxdWlyZSIsIlByZXBhcmVkU3RhdGVtZW50RXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJjb2RlIiwibmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/prepared-statement-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/request-error.js":
/*!*******************************************************!*\
  !*** ./node_modules/mssql/lib/error/request-error.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\");\n/**\n * Class RequestError.\n *\n * @property {String} number Error number.\n * @property {Number} lineNumber Line number.\n * @property {String} state Error state.\n * @property {String} class Error class.\n * @property {String} serverName Server name.\n * @property {String} procName Procedure name.\n */ class RequestError extends MSSQLError {\n    /**\n   * Creates a new RequestError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */ constructor(message, code){\n        super(message, code);\n        if (message instanceof Error) {\n            if (message.info) {\n                this.number = message.info.number || message.code // err.code is returned by msnodesql driver\n                ;\n                this.lineNumber = message.info.lineNumber;\n                this.state = message.info.state || message.sqlstate // err.sqlstate is returned by msnodesql driver\n                ;\n                this.class = message.info.class;\n                this.serverName = message.info.serverName;\n                this.procName = message.info.procName;\n            } else {\n                // Use err attributes returned by msnodesql driver\n                this.number = message.code;\n                this.lineNumber = message.lineNumber;\n                this.state = message.sqlstate;\n                this.class = message.severity;\n                this.serverName = message.serverName;\n                this.procName = message.procName;\n            }\n        }\n        this.name = \"RequestError\";\n        const parsedMessage = /^\\[Microsoft\\]\\[SQL Server Native Client 11\\.0\\](?:\\[SQL Server\\])?([\\s\\S]*)$/.exec(this.message);\n        if (parsedMessage) {\n            this.message = parsedMessage[1];\n        }\n    }\n}\nmodule.exports = RequestError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL3JlcXVlc3QtZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUUzQjs7Ozs7Ozs7O0NBU0MsR0FFRCxNQUFNQyxxQkFBcUJGO0lBQ3pCOzs7OztHQUtDLEdBRURHLFlBQWFDLE9BQU8sRUFBRUMsSUFBSSxDQUFFO1FBQzFCLEtBQUssQ0FBQ0QsU0FBU0M7UUFDZixJQUFJRCxtQkFBbUJFLE9BQU87WUFDNUIsSUFBSUYsUUFBUUcsSUFBSSxFQUFFO2dCQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBR0osUUFBUUcsSUFBSSxDQUFDQyxNQUFNLElBQUlKLFFBQVFDLElBQUksQ0FBQywyQ0FBMkM7O2dCQUM3RixJQUFJLENBQUNJLFVBQVUsR0FBR0wsUUFBUUcsSUFBSSxDQUFDRSxVQUFVO2dCQUN6QyxJQUFJLENBQUNDLEtBQUssR0FBR04sUUFBUUcsSUFBSSxDQUFDRyxLQUFLLElBQUlOLFFBQVFPLFFBQVEsQ0FBQywrQ0FBK0M7O2dCQUNuRyxJQUFJLENBQUNDLEtBQUssR0FBR1IsUUFBUUcsSUFBSSxDQUFDSyxLQUFLO2dCQUMvQixJQUFJLENBQUNDLFVBQVUsR0FBR1QsUUFBUUcsSUFBSSxDQUFDTSxVQUFVO2dCQUN6QyxJQUFJLENBQUNDLFFBQVEsR0FBR1YsUUFBUUcsSUFBSSxDQUFDTyxRQUFRO1lBQ3ZDLE9BQU87Z0JBQ0wsa0RBQWtEO2dCQUNsRCxJQUFJLENBQUNOLE1BQU0sR0FBR0osUUFBUUMsSUFBSTtnQkFDMUIsSUFBSSxDQUFDSSxVQUFVLEdBQUdMLFFBQVFLLFVBQVU7Z0JBQ3BDLElBQUksQ0FBQ0MsS0FBSyxHQUFHTixRQUFRTyxRQUFRO2dCQUM3QixJQUFJLENBQUNDLEtBQUssR0FBR1IsUUFBUVcsUUFBUTtnQkFDN0IsSUFBSSxDQUFDRixVQUFVLEdBQUdULFFBQVFTLFVBQVU7Z0JBQ3BDLElBQUksQ0FBQ0MsUUFBUSxHQUFHVixRQUFRVSxRQUFRO1lBQ2xDO1FBQ0Y7UUFFQSxJQUFJLENBQUNFLElBQUksR0FBRztRQUNaLE1BQU1DLGdCQUFnQixnRkFBa0ZDLElBQUksQ0FBQyxJQUFJLENBQUNkLE9BQU87UUFDekgsSUFBSWEsZUFBZTtZQUNqQixJQUFJLENBQUNiLE9BQU8sR0FBR2EsYUFBYSxDQUFDLEVBQUU7UUFDakM7SUFDRjtBQUNGO0FBRUFFLE9BQU9DLE9BQU8sR0FBR2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL3JlcXVlc3QtZXJyb3IuanM/YjYwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgTVNTUUxFcnJvciA9IHJlcXVpcmUoJy4vbXNzcWwtZXJyb3InKVxuXG4vKipcbiAqIENsYXNzIFJlcXVlc3RFcnJvci5cbiAqXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbnVtYmVyIEVycm9yIG51bWJlci5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsaW5lTnVtYmVyIExpbmUgbnVtYmVyLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHN0YXRlIEVycm9yIHN0YXRlLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGNsYXNzIEVycm9yIGNsYXNzLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHNlcnZlck5hbWUgU2VydmVyIG5hbWUuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcHJvY05hbWUgUHJvY2VkdXJlIG5hbWUuXG4gKi9cblxuY2xhc3MgUmVxdWVzdEVycm9yIGV4dGVuZHMgTVNTUUxFcnJvciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFJlcXVlc3RFcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtjb2RlXSBFcnJvciBjb2RlLlxuICAgKi9cblxuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgY29kZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIGNvZGUpXG4gICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgaWYgKG1lc3NhZ2UuaW5mbykge1xuICAgICAgICB0aGlzLm51bWJlciA9IG1lc3NhZ2UuaW5mby5udW1iZXIgfHwgbWVzc2FnZS5jb2RlIC8vIGVyci5jb2RlIGlzIHJldHVybmVkIGJ5IG1zbm9kZXNxbCBkcml2ZXJcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbWVzc2FnZS5pbmZvLmxpbmVOdW1iZXJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG1lc3NhZ2UuaW5mby5zdGF0ZSB8fCBtZXNzYWdlLnNxbHN0YXRlIC8vIGVyci5zcWxzdGF0ZSBpcyByZXR1cm5lZCBieSBtc25vZGVzcWwgZHJpdmVyXG4gICAgICAgIHRoaXMuY2xhc3MgPSBtZXNzYWdlLmluZm8uY2xhc3NcbiAgICAgICAgdGhpcy5zZXJ2ZXJOYW1lID0gbWVzc2FnZS5pbmZvLnNlcnZlck5hbWVcbiAgICAgICAgdGhpcy5wcm9jTmFtZSA9IG1lc3NhZ2UuaW5mby5wcm9jTmFtZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVXNlIGVyciBhdHRyaWJ1dGVzIHJldHVybmVkIGJ5IG1zbm9kZXNxbCBkcml2ZXJcbiAgICAgICAgdGhpcy5udW1iZXIgPSBtZXNzYWdlLmNvZGVcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbWVzc2FnZS5saW5lTnVtYmVyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBtZXNzYWdlLnNxbHN0YXRlXG4gICAgICAgIHRoaXMuY2xhc3MgPSBtZXNzYWdlLnNldmVyaXR5XG4gICAgICAgIHRoaXMuc2VydmVyTmFtZSA9IG1lc3NhZ2Uuc2VydmVyTmFtZVxuICAgICAgICB0aGlzLnByb2NOYW1lID0gbWVzc2FnZS5wcm9jTmFtZVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubmFtZSA9ICdSZXF1ZXN0RXJyb3InXG4gICAgY29uc3QgcGFyc2VkTWVzc2FnZSA9ICgvXlxcW01pY3Jvc29mdFxcXVxcW1NRTCBTZXJ2ZXIgTmF0aXZlIENsaWVudCAxMVxcLjBcXF0oPzpcXFtTUUwgU2VydmVyXFxdKT8oW1xcc1xcU10qKSQvKS5leGVjKHRoaXMubWVzc2FnZSlcbiAgICBpZiAocGFyc2VkTWVzc2FnZSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gcGFyc2VkTWVzc2FnZVsxXVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3RFcnJvclxuIl0sIm5hbWVzIjpbIk1TU1FMRXJyb3IiLCJyZXF1aXJlIiwiUmVxdWVzdEVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiY29kZSIsIkVycm9yIiwiaW5mbyIsIm51bWJlciIsImxpbmVOdW1iZXIiLCJzdGF0ZSIsInNxbHN0YXRlIiwiY2xhc3MiLCJzZXJ2ZXJOYW1lIiwicHJvY05hbWUiLCJzZXZlcml0eSIsIm5hbWUiLCJwYXJzZWRNZXNzYWdlIiwiZXhlYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/request-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/transaction-error.js":
/*!***********************************************************!*\
  !*** ./node_modules/mssql/lib/error/transaction-error.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\");\n/**\n * Class TransactionError.\n */ class TransactionError extends MSSQLError {\n    /**\n   * Creates a new TransactionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */ constructor(message, code){\n        super(message, code);\n        this.name = \"TransactionError\";\n    }\n}\nmodule.exports = TransactionError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL3RyYW5zYWN0aW9uLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFM0I7O0NBRUMsR0FFRCxNQUFNQyx5QkFBeUJGO0lBQzdCOzs7OztHQUtDLEdBRURHLFlBQWFDLE9BQU8sRUFBRUMsSUFBSSxDQUFFO1FBQzFCLEtBQUssQ0FBQ0QsU0FBU0M7UUFFZixJQUFJLENBQUNDLElBQUksR0FBRztJQUNkO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHTiIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL21zc3FsL2xpYi9lcnJvci90cmFuc2FjdGlvbi1lcnJvci5qcz9lYzFkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBNU1NRTEVycm9yID0gcmVxdWlyZSgnLi9tc3NxbC1lcnJvcicpXG5cbi8qKlxuICogQ2xhc3MgVHJhbnNhY3Rpb25FcnJvci5cbiAqL1xuXG5jbGFzcyBUcmFuc2FjdGlvbkVycm9yIGV4dGVuZHMgTVNTUUxFcnJvciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFRyYW5zYWN0aW9uRXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIEVycm9yIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbY29kZV0gRXJyb3IgY29kZS5cbiAgICovXG5cbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UsIGNvZGUpIHtcbiAgICBzdXBlcihtZXNzYWdlLCBjb2RlKVxuXG4gICAgdGhpcy5uYW1lID0gJ1RyYW5zYWN0aW9uRXJyb3InXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbkVycm9yXG4iXSwibmFtZXMiOlsiTVNTUUxFcnJvciIsInJlcXVpcmUiLCJUcmFuc2FjdGlvbkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiY29kZSIsIm5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/transaction-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/global-connection.js":
/*!*****************************************************!*\
  !*** ./node_modules/mssql/lib/global-connection.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst shared = __webpack_require__(/*! ./shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\");\nlet globalConnection = null;\nconst globalConnectionHandlers = {};\n/**\n * Open global connection pool.\n *\n * @param {Object|String} config Connection configuration object or connection string.\n * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n * @return {Promise.<ConnectionPool>}\n */ function connect(config, callback) {\n    if (!globalConnection) {\n        globalConnection = new shared.driver.ConnectionPool(config);\n        for(const event in globalConnectionHandlers){\n            for(let i = 0, l = globalConnectionHandlers[event].length; i < l; i++){\n                globalConnection.on(event, globalConnectionHandlers[event][i]);\n            }\n        }\n        const ogClose = globalConnection.close;\n        const globalClose = function(callback) {\n            // remove event handlers from the global connection\n            for(const event in globalConnectionHandlers){\n                for(let i = 0, l = globalConnectionHandlers[event].length; i < l; i++){\n                    this.removeListener(event, globalConnectionHandlers[event][i]);\n                }\n            }\n            // attach error handler to prevent process crash in case of error\n            this.on(\"error\", (err)=>{\n                if (globalConnectionHandlers.error) {\n                    for(let i = 0, l = globalConnectionHandlers.error.length; i < l; i++){\n                        globalConnectionHandlers.error[i].call(this, err);\n                    }\n                }\n            });\n            globalConnection = null;\n            return ogClose.call(this, callback);\n        };\n        globalConnection.close = globalClose.bind(globalConnection);\n    }\n    if (typeof callback === \"function\") {\n        return globalConnection.connect((err, connection)=>{\n            if (err) {\n                globalConnection = null;\n            }\n            callback(err, connection);\n        });\n    }\n    return globalConnection.connect().catch((err)=>{\n        globalConnection = null;\n        return shared.Promise.reject(err);\n    });\n}\n/**\n * Close all active connections in the global pool.\n *\n * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n * @return {ConnectionPool|Promise}\n */ function close(callback) {\n    if (globalConnection) {\n        const gc = globalConnection;\n        globalConnection = null;\n        return gc.close(callback);\n    }\n    if (typeof callback === \"function\") {\n        setImmediate(callback);\n        return null;\n    }\n    return new shared.Promise((resolve)=>{\n        resolve(globalConnection);\n    });\n}\n/**\n * Attach event handler to global connection pool.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */ function on(event, handler) {\n    if (!globalConnectionHandlers[event]) globalConnectionHandlers[event] = [];\n    globalConnectionHandlers[event].push(handler);\n    if (globalConnection) globalConnection.on(event, handler);\n    return globalConnection;\n}\n/**\n * Detach event handler from global connection.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */ function removeListener(event, handler) {\n    if (!globalConnectionHandlers[event]) return globalConnection;\n    const index = globalConnectionHandlers[event].indexOf(handler);\n    if (index === -1) return globalConnection;\n    globalConnectionHandlers[event].splice(index, 1);\n    if (globalConnectionHandlers[event].length === 0) globalConnectionHandlers[event] = undefined;\n    if (globalConnection) globalConnection.removeListener(event, handler);\n    return globalConnection;\n}\n/**\n * Creates a new query using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array|String} strings Array of string literals or sql command.\n * @param {...*} keys Values.\n * @return {Request}\n */ /**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */ function query() {\n    if (typeof arguments[0] === \"string\") {\n        return new shared.driver.Request().query(arguments[0], arguments[1]);\n    }\n    const values = Array.prototype.slice.call(arguments);\n    const strings = values.shift();\n    return new shared.driver.Request()._template(strings, values, \"query\");\n}\n/**\n * Creates a new batch using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array} strings Array of string literals.\n * @param {...*} keys Values.\n * @return {Request}\n */ /**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */ function batch() {\n    if (typeof arguments[0] === \"string\") {\n        return new shared.driver.Request().batch(arguments[0], arguments[1]);\n    }\n    const values = Array.prototype.slice.call(arguments);\n    const strings = values.shift();\n    return new shared.driver.Request()._template(strings, values, \"batch\");\n}\nmodule.exports = {\n    batch,\n    close,\n    connect,\n    off: removeListener,\n    on,\n    query,\n    removeListener\n};\nObject.defineProperty(module.exports, \"pool\", ({\n    get: ()=>{\n        return globalConnection;\n    },\n    set: ()=>{}\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/global-connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/isolationlevel.js":
/*!**************************************************!*\
  !*** ./node_modules/mssql/lib/isolationlevel.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    READ_UNCOMMITTED: 0x01,\n    READ_COMMITTED: 0x02,\n    REPEATABLE_READ: 0x03,\n    SERIALIZABLE: 0x04,\n    SNAPSHOT: 0x05\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2lzb2xhdGlvbmxldmVsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxrQkFBa0I7SUFDbEJDLGdCQUFnQjtJQUNoQkMsaUJBQWlCO0lBQ2pCQyxjQUFjO0lBQ2RDLFVBQVU7QUFDWiIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL21zc3FsL2xpYi9pc29sYXRpb25sZXZlbC5qcz9iNTlhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUkVBRF9VTkNPTU1JVFRFRDogMHgwMSxcbiAgUkVBRF9DT01NSVRURUQ6IDB4MDIsXG4gIFJFUEVBVEFCTEVfUkVBRDogMHgwMyxcbiAgU0VSSUFMSVpBQkxFOiAweDA0LFxuICBTTkFQU0hPVDogMHgwNVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJSRUFEX1VOQ09NTUlUVEVEIiwiUkVBRF9DT01NSVRURUQiLCJSRVBFQVRBQkxFX1JFQUQiLCJTRVJJQUxJWkFCTEUiLCJTTkFQU0hPVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/isolationlevel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/shared.js":
/*!******************************************!*\
  !*** ./node_modules/mssql/lib/shared.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst TYPES = (__webpack_require__(/*! ./datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\").TYPES);\nconst Table = __webpack_require__(/*! ./table */ \"(rsc)/./node_modules/mssql/lib/table.js\");\nlet PromiseLibrary = Promise;\nconst driver = {};\nconst map = [];\n/**\n * Register you own type map.\n *\n * @path module.exports.map\n * @param {*} jstype JS data type.\n * @param {*} sqltype SQL data type.\n */ map.register = function(jstype, sqltype) {\n    for(let index = 0; index < this.length; index++){\n        const item = this[index];\n        if (item.js === jstype) {\n            this.splice(index, 1);\n            break;\n        }\n    }\n    this.push({\n        js: jstype,\n        sql: sqltype\n    });\n    return null;\n};\nmap.register(String, TYPES.NVarChar);\nmap.register(Number, TYPES.Int);\nmap.register(Boolean, TYPES.Bit);\nmap.register(Date, TYPES.DateTime);\nmap.register(Buffer, TYPES.VarBinary);\nmap.register(Table, TYPES.TVP);\n/**\n * @ignore\n */ const getTypeByValue = function(value) {\n    if (value === null || value === undefined) {\n        return TYPES.NVarChar;\n    }\n    switch(typeof value){\n        case \"string\":\n            for (const item of Array.from(map)){\n                if (item.js === String) {\n                    return item.sql;\n                }\n            }\n            return TYPES.NVarChar;\n        case \"number\":\n        case \"bigint\":\n            if (value % 1 === 0) {\n                if (value < -2147483648 || value > 2147483647) {\n                    return TYPES.BigInt;\n                } else {\n                    return TYPES.Int;\n                }\n            } else {\n                return TYPES.Float;\n            }\n        case \"boolean\":\n            for (const item of Array.from(map)){\n                if (item.js === Boolean) {\n                    return item.sql;\n                }\n            }\n            return TYPES.Bit;\n        case \"object\":\n            for (const item of Array.from(map)){\n                if (value instanceof item.js) {\n                    return item.sql;\n                }\n            }\n            return TYPES.NVarChar;\n        default:\n            return TYPES.NVarChar;\n    }\n};\nmodule.exports = {\n    driver,\n    getTypeByValue,\n    map\n};\nObject.defineProperty(module.exports, \"Promise\", ({\n    get: ()=>{\n        return PromiseLibrary;\n    },\n    set: (value)=>{\n        PromiseLibrary = value;\n    }\n}));\nObject.defineProperty(module.exports, \"valueHandler\", ({\n    enumerable: true,\n    value: new Map(),\n    writable: false,\n    configurable: false\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3NoYXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFFBQVFDLDZGQUE0QjtBQUMxQyxNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUV0QixJQUFJRSxpQkFBaUJDO0FBQ3JCLE1BQU1DLFNBQVMsQ0FBQztBQUNoQixNQUFNQyxNQUFNLEVBQUU7QUFFZDs7Ozs7O0NBTUMsR0FFREEsSUFBSUMsUUFBUSxHQUFHLFNBQVVDLE1BQU0sRUFBRUMsT0FBTztJQUN0QyxJQUFLLElBQUlDLFFBQVEsR0FBR0EsUUFBUSxJQUFJLENBQUNDLE1BQU0sRUFBRUQsUUFBUztRQUNoRCxNQUFNRSxPQUFPLElBQUksQ0FBQ0YsTUFBTTtRQUN4QixJQUFJRSxLQUFLQyxFQUFFLEtBQUtMLFFBQVE7WUFDdEIsSUFBSSxDQUFDTSxNQUFNLENBQUNKLE9BQU87WUFDbkI7UUFDRjtJQUNGO0lBRUEsSUFBSSxDQUFDSyxJQUFJLENBQUM7UUFDUkYsSUFBSUw7UUFDSlEsS0FBS1A7SUFDUDtJQUVBLE9BQU87QUFDVDtBQUVBSCxJQUFJQyxRQUFRLENBQUNVLFFBQVFqQixNQUFNa0IsUUFBUTtBQUNuQ1osSUFBSUMsUUFBUSxDQUFDWSxRQUFRbkIsTUFBTW9CLEdBQUc7QUFDOUJkLElBQUlDLFFBQVEsQ0FBQ2MsU0FBU3JCLE1BQU1zQixHQUFHO0FBQy9CaEIsSUFBSUMsUUFBUSxDQUFDZ0IsTUFBTXZCLE1BQU13QixRQUFRO0FBQ2pDbEIsSUFBSUMsUUFBUSxDQUFDa0IsUUFBUXpCLE1BQU0wQixTQUFTO0FBQ3BDcEIsSUFBSUMsUUFBUSxDQUFDTCxPQUFPRixNQUFNMkIsR0FBRztBQUU3Qjs7Q0FFQyxHQUVELE1BQU1DLGlCQUFpQixTQUFVQyxLQUFLO0lBQ3BDLElBQUksVUFBVyxRQUFVQSxVQUFVQyxXQUFZO1FBQUUsT0FBTzlCLE1BQU1rQixRQUFRO0lBQUM7SUFFdkUsT0FBUSxPQUFPVztRQUNiLEtBQUs7WUFDSCxLQUFLLE1BQU1qQixRQUFRbUIsTUFBTUMsSUFBSSxDQUFDMUIsS0FBTTtnQkFDbEMsSUFBSU0sS0FBS0MsRUFBRSxLQUFLSSxRQUFRO29CQUN0QixPQUFPTCxLQUFLSSxHQUFHO2dCQUNqQjtZQUNGO1lBRUEsT0FBT2hCLE1BQU1rQixRQUFRO1FBRXZCLEtBQUs7UUFDTCxLQUFLO1lBQ0gsSUFBSVcsUUFBUSxNQUFNLEdBQUc7Z0JBQ25CLElBQUlBLFFBQVEsQ0FBQyxjQUFjQSxRQUFRLFlBQVk7b0JBQzdDLE9BQU83QixNQUFNaUMsTUFBTTtnQkFDckIsT0FBTztvQkFDTCxPQUFPakMsTUFBTW9CLEdBQUc7Z0JBQ2xCO1lBQ0YsT0FBTztnQkFDTCxPQUFPcEIsTUFBTWtDLEtBQUs7WUFDcEI7UUFFRixLQUFLO1lBQ0gsS0FBSyxNQUFNdEIsUUFBUW1CLE1BQU1DLElBQUksQ0FBQzFCLEtBQU07Z0JBQ2xDLElBQUlNLEtBQUtDLEVBQUUsS0FBS1EsU0FBUztvQkFDdkIsT0FBT1QsS0FBS0ksR0FBRztnQkFDakI7WUFDRjtZQUVBLE9BQU9oQixNQUFNc0IsR0FBRztRQUVsQixLQUFLO1lBQ0gsS0FBSyxNQUFNVixRQUFRbUIsTUFBTUMsSUFBSSxDQUFDMUIsS0FBTTtnQkFDbEMsSUFBSXVCLGlCQUFpQmpCLEtBQUtDLEVBQUUsRUFBRTtvQkFDNUIsT0FBT0QsS0FBS0ksR0FBRztnQkFDakI7WUFDRjtZQUVBLE9BQU9oQixNQUFNa0IsUUFBUTtRQUV2QjtZQUNFLE9BQU9sQixNQUFNa0IsUUFBUTtJQUN6QjtBQUNGO0FBRUFpQixPQUFPQyxPQUFPLEdBQUc7SUFDZi9CO0lBQ0F1QjtJQUNBdEI7QUFDRjtBQUVBK0Isa0RBQWlEO0lBQy9DRSxLQUFLO1FBQ0gsT0FBT3BDO0lBQ1Q7SUFDQXFDLEtBQUssQ0FBQ1g7UUFDSjFCLGlCQUFpQjBCO0lBQ25CO0FBQ0YsQ0FBQyxFQUFDO0FBRUZRLHVEQUFzRDtJQUNwREksWUFBWTtJQUNaWixPQUFPLElBQUlhO0lBQ1hDLFVBQVU7SUFDVkMsY0FBYztBQUNoQixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9tc3NxbC9saWIvc2hhcmVkLmpzP2Q2YjciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IFRZUEVTID0gcmVxdWlyZSgnLi9kYXRhdHlwZXMnKS5UWVBFU1xuY29uc3QgVGFibGUgPSByZXF1aXJlKCcuL3RhYmxlJylcblxubGV0IFByb21pc2VMaWJyYXJ5ID0gUHJvbWlzZVxuY29uc3QgZHJpdmVyID0ge31cbmNvbnN0IG1hcCA9IFtdXG5cbi8qKlxuICogUmVnaXN0ZXIgeW91IG93biB0eXBlIG1hcC5cbiAqXG4gKiBAcGF0aCBtb2R1bGUuZXhwb3J0cy5tYXBcbiAqIEBwYXJhbSB7Kn0ganN0eXBlIEpTIGRhdGEgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gc3FsdHlwZSBTUUwgZGF0YSB0eXBlLlxuICovXG5cbm1hcC5yZWdpc3RlciA9IGZ1bmN0aW9uIChqc3R5cGUsIHNxbHR5cGUpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXNbaW5kZXhdXG4gICAgaWYgKGl0ZW0uanMgPT09IGpzdHlwZSkge1xuICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHRoaXMucHVzaCh7XG4gICAganM6IGpzdHlwZSxcbiAgICBzcWw6IHNxbHR5cGVcbiAgfSlcblxuICByZXR1cm4gbnVsbFxufVxuXG5tYXAucmVnaXN0ZXIoU3RyaW5nLCBUWVBFUy5OVmFyQ2hhcilcbm1hcC5yZWdpc3RlcihOdW1iZXIsIFRZUEVTLkludClcbm1hcC5yZWdpc3RlcihCb29sZWFuLCBUWVBFUy5CaXQpXG5tYXAucmVnaXN0ZXIoRGF0ZSwgVFlQRVMuRGF0ZVRpbWUpXG5tYXAucmVnaXN0ZXIoQnVmZmVyLCBUWVBFUy5WYXJCaW5hcnkpXG5tYXAucmVnaXN0ZXIoVGFibGUsIFRZUEVTLlRWUClcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cblxuY29uc3QgZ2V0VHlwZUJ5VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKCh2YWx1ZSA9PT0gbnVsbCkgfHwgKHZhbHVlID09PSB1bmRlZmluZWQpKSB7IHJldHVybiBUWVBFUy5OVmFyQ2hhciB9XG5cbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIEFycmF5LmZyb20obWFwKSkge1xuICAgICAgICBpZiAoaXRlbS5qcyA9PT0gU3RyaW5nKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0uc3FsXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFRZUEVTLk5WYXJDaGFyXG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgICBpZiAodmFsdWUgJSAxID09PSAwKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IC0yMTQ3NDgzNjQ4IHx8IHZhbHVlID4gMjE0NzQ4MzY0Nykge1xuICAgICAgICAgIHJldHVybiBUWVBFUy5CaWdJbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gVFlQRVMuSW50XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBUWVBFUy5GbG9hdFxuICAgICAgfVxuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgQXJyYXkuZnJvbShtYXApKSB7XG4gICAgICAgIGlmIChpdGVtLmpzID09PSBCb29sZWFuKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0uc3FsXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFRZUEVTLkJpdFxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBBcnJheS5mcm9tKG1hcCkpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgaXRlbS5qcykge1xuICAgICAgICAgIHJldHVybiBpdGVtLnNxbFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBUWVBFUy5OVmFyQ2hhclxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBUWVBFUy5OVmFyQ2hhclxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkcml2ZXIsXG4gIGdldFR5cGVCeVZhbHVlLFxuICBtYXBcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnUHJvbWlzZScsIHtcbiAgZ2V0OiAoKSA9PiB7XG4gICAgcmV0dXJuIFByb21pc2VMaWJyYXJ5XG4gIH0sXG4gIHNldDogKHZhbHVlKSA9PiB7XG4gICAgUHJvbWlzZUxpYnJhcnkgPSB2YWx1ZVxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICd2YWx1ZUhhbmRsZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHZhbHVlOiBuZXcgTWFwKCksXG4gIHdyaXRhYmxlOiBmYWxzZSxcbiAgY29uZmlndXJhYmxlOiBmYWxzZVxufSlcbiJdLCJuYW1lcyI6WyJUWVBFUyIsInJlcXVpcmUiLCJUYWJsZSIsIlByb21pc2VMaWJyYXJ5IiwiUHJvbWlzZSIsImRyaXZlciIsIm1hcCIsInJlZ2lzdGVyIiwianN0eXBlIiwic3FsdHlwZSIsImluZGV4IiwibGVuZ3RoIiwiaXRlbSIsImpzIiwic3BsaWNlIiwicHVzaCIsInNxbCIsIlN0cmluZyIsIk5WYXJDaGFyIiwiTnVtYmVyIiwiSW50IiwiQm9vbGVhbiIsIkJpdCIsIkRhdGUiLCJEYXRlVGltZSIsIkJ1ZmZlciIsIlZhckJpbmFyeSIsIlRWUCIsImdldFR5cGVCeVZhbHVlIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJBcnJheSIsImZyb20iLCJCaWdJbnQiLCJGbG9hdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInNldCIsImVudW1lcmFibGUiLCJNYXAiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/shared.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/table.js":
/*!*****************************************!*\
  !*** ./node_modules/mssql/lib/table.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst TYPES = (__webpack_require__(/*! ./datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\").TYPES);\nconst declareType = (__webpack_require__(/*! ./datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\").declare);\nconst objectHasProperty = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\").objectHasProperty);\nconst MAX = 65535 // (1 << 16) - 1\n;\nconst JSON_COLUMN_ID = \"JSON_F52E2B61-18A1-11d1-B105-00805F49916B\";\nfunction Table(name) {\n    if (name) {\n        const parsed = Table.parseName(name);\n        this.name = parsed.name;\n        this.schema = parsed.schema;\n        this.database = parsed.database;\n        this.path = (this.database ? `[${this.database}].` : \"\") + (this.schema ? `[${this.schema}].` : \"\") + `[${this.name}]`;\n        this.temporary = this.name.charAt(0) === \"#\";\n    }\n    this.columns = [];\n    this.rows = [];\n    Object.defineProperty(this.columns, \"add\", {\n        value (name, column, options) {\n            if (column == null) {\n                throw new Error(\"Column data type is not defined.\");\n            }\n            if (column instanceof Function) {\n                column = column();\n            }\n            options = options || {};\n            column.name = name;\n            [\n                \"nullable\",\n                \"primary\",\n                \"identity\",\n                \"readOnly\",\n                \"length\"\n            ].forEach((prop)=>{\n                if (objectHasProperty(options, prop)) {\n                    column[prop] = options[prop];\n                }\n            });\n            return this.push(column);\n        }\n    });\n    Object.defineProperty(this.rows, \"add\", {\n        value () {\n            return this.push(Array.prototype.slice.call(arguments));\n        }\n    });\n    Object.defineProperty(this.rows, \"clear\", {\n        value () {\n            return this.splice(0, this.length);\n        }\n    });\n}\n/*\n@private\n*/ Table.prototype._makeBulk = function _makeBulk() {\n    for(let i = 0; i < this.columns.length; i++){\n        const col = this.columns[i];\n        switch(col.type){\n            case TYPES.Date:\n            case TYPES.DateTime:\n            case TYPES.DateTime2:\n                for(let j = 0; j < this.rows.length; j++){\n                    const dateValue = this.rows[j][i];\n                    if (typeof dateValue === \"string\" || typeof dateValue === \"number\") {\n                        const date = new Date(dateValue);\n                        if (isNaN(date.getDate())) {\n                            throw new TypeError(\"Invalid date value passed to bulk rows\");\n                        }\n                        this.rows[j][i] = date;\n                    }\n                }\n                break;\n            case TYPES.Xml:\n                col.type = TYPES.NVarChar(MAX).type;\n                break;\n            case TYPES.UDT:\n            case TYPES.Geography:\n            case TYPES.Geometry:\n                col.type = TYPES.VarBinary(MAX).type;\n                break;\n            default:\n                break;\n        }\n    }\n    return this;\n};\nTable.prototype.declare = function declare() {\n    const pkey = this.columns.filter((col)=>col.primary === true).map((col)=>`[${col.name}]`);\n    const cols = this.columns.map((col)=>{\n        const def = [\n            `[${col.name}] ${declareType(col.type, col)}`\n        ];\n        if (col.nullable === true) {\n            def.push(\"null\");\n        } else if (col.nullable === false) {\n            def.push(\"not null\");\n        }\n        if (col.primary === true && pkey.length === 1) {\n            def.push(\"primary key\");\n        }\n        return def.join(\" \");\n    });\n    const constraint = pkey.length > 1 ? `, constraint [PK_${this.temporary ? this.name.substr(1) : this.name}] primary key (${pkey.join(\", \")})` : \"\";\n    return `create table ${this.path} (${cols.join(\", \")}${constraint})`;\n};\nTable.fromRecordset = function fromRecordset(recordset, name) {\n    const t = new this(name);\n    for(const colName in recordset.columns){\n        if (objectHasProperty(recordset.columns, colName)) {\n            const col = recordset.columns[colName];\n            t.columns.add(colName, {\n                type: col.type,\n                length: col.length,\n                scale: col.scale,\n                precision: col.precision\n            }, {\n                nullable: col.nullable,\n                identity: col.identity,\n                readOnly: col.readOnly\n            });\n        }\n    }\n    if (t.columns.length === 1 && t.columns[0].name === JSON_COLUMN_ID) {\n        for(let i = 0; i < recordset.length; i++){\n            t.rows.add(JSON.stringify(recordset[i]));\n        }\n    } else {\n        for(let i = 0; i < recordset.length; i++){\n            t.rows.add.apply(t.rows, t.columns.map((col)=>recordset[i][col.name]));\n        }\n    }\n    return t;\n};\nTable.parseName = function parseName(name) {\n    const length = name.length;\n    let cursor = -1;\n    let buffer = \"\";\n    let escaped = false;\n    const path = [];\n    while(++cursor < length){\n        const char = name.charAt(cursor);\n        if (char === \"[\") {\n            if (escaped) {\n                buffer += char;\n            } else {\n                escaped = true;\n            }\n        } else if (char === \"]\") {\n            if (escaped) {\n                escaped = false;\n            } else {\n                throw new Error(\"Invalid table name.\");\n            }\n        } else if (char === \".\") {\n            if (escaped) {\n                buffer += char;\n            } else {\n                path.push(buffer);\n                buffer = \"\";\n            }\n        } else {\n            buffer += char;\n        }\n    }\n    if (buffer) {\n        path.push(buffer);\n    }\n    switch(path.length){\n        case 1:\n            return {\n                name: path[0],\n                schema: null,\n                database: null\n            };\n        case 2:\n            return {\n                name: path[1],\n                schema: path[0],\n                database: null\n            };\n        case 3:\n            return {\n                name: path[2],\n                schema: path[1],\n                database: path[0]\n            };\n        default:\n            throw new Error(\"Invalid table name.\");\n    }\n};\nmodule.exports = Table;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/table.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/tedious/connection-pool.js":
/*!***********************************************************!*\
  !*** ./node_modules/mssql/lib/tedious/connection-pool.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst tds = __webpack_require__(/*! tedious */ \"(rsc)/./node_modules/tedious/lib/tedious.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"mssql:tedi\");\nconst BaseConnectionPool = __webpack_require__(/*! ../base/connection-pool */ \"(rsc)/./node_modules/mssql/lib/base/connection-pool.js\");\nconst { IDS } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\");\nconst ConnectionError = __webpack_require__(/*! ../error/connection-error */ \"(rsc)/./node_modules/mssql/lib/error/connection-error.js\");\nclass ConnectionPool extends BaseConnectionPool {\n    _config() {\n        const cfg = {\n            server: this.config.server,\n            options: Object.assign({\n                encrypt: typeof this.config.encrypt === \"boolean\" ? this.config.encrypt : true,\n                trustServerCertificate: typeof this.config.trustServerCertificate === \"boolean\" ? this.config.trustServerCertificate : false\n            }, this.config.options),\n            authentication: Object.assign({\n                type: this.config.domain !== undefined ? \"ntlm\" : this.config.authentication_type !== undefined ? this.config.authentication_type : \"default\",\n                options: Object.entries({\n                    userName: this.config.user,\n                    password: this.config.password,\n                    domain: this.config.domain,\n                    clientId: this.config.clientId,\n                    clientSecret: this.config.clientSecret,\n                    tenantId: this.config.tenantId,\n                    token: this.config.token,\n                    msiEndpoint: this.config.msiEndpoint,\n                    msiSecret: this.config.msiSecret\n                }).reduce((acc, [key, val])=>{\n                    if (typeof val !== \"undefined\") {\n                        return {\n                            ...acc,\n                            [key]: val\n                        };\n                    }\n                    return acc;\n                }, {})\n            }, this.config.authentication)\n        };\n        cfg.options.database = cfg.options.database || this.config.database;\n        cfg.options.port = cfg.options.port || this.config.port;\n        cfg.options.connectTimeout = cfg.options.connectTimeout ?? this.config.connectionTimeout ?? this.config.timeout ?? 15000;\n        cfg.options.requestTimeout = cfg.options.requestTimeout ?? this.config.requestTimeout ?? this.config.timeout ?? 15000;\n        cfg.options.tdsVersion = cfg.options.tdsVersion || \"7_4\";\n        cfg.options.rowCollectionOnDone = cfg.options.rowCollectionOnDone || false;\n        cfg.options.rowCollectionOnRequestCompletion = cfg.options.rowCollectionOnRequestCompletion || false;\n        cfg.options.useColumnNames = cfg.options.useColumnNames || false;\n        cfg.options.appName = cfg.options.appName || \"node-mssql\";\n        // tedious always connect via tcp when port is specified\n        if (cfg.options.instanceName) delete cfg.options.port;\n        if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n        if (cfg.options.requestTimeout === Infinity || cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n        if (!cfg.options.debug && this.config.debug) {\n            cfg.options.debug = {\n                packet: true,\n                token: true,\n                data: true,\n                payload: true\n            };\n        }\n        return cfg;\n    }\n    _poolCreate() {\n        return new shared.Promise((resolve, reject)=>{\n            const resolveOnce = (v)=>{\n                resolve(v);\n                resolve = reject = ()=>{};\n            };\n            const rejectOnce = (e)=>{\n                reject(e);\n                resolve = reject = ()=>{};\n            };\n            let tedious;\n            try {\n                tedious = new tds.Connection(this._config());\n            } catch (err) {\n                rejectOnce(err);\n                return;\n            }\n            tedious.connect((err)=>{\n                if (err) {\n                    err = new ConnectionError(err);\n                    return rejectOnce(err);\n                }\n                debug(\"connection(%d): established\", IDS.get(tedious));\n                this.collation = tedious.databaseCollation;\n                resolveOnce(tedious);\n            });\n            IDS.add(tedious, \"Connection\");\n            debug(\"pool(%d): connection #%d created\", IDS.get(this), IDS.get(tedious));\n            debug(\"connection(%d): establishing\", IDS.get(tedious));\n            tedious.on(\"end\", ()=>{\n                const err = new ConnectionError(\"The connection ended without ever completing the connection\");\n                rejectOnce(err);\n            });\n            tedious.on(\"error\", (err)=>{\n                if (err.code === \"ESOCKET\") {\n                    tedious.hasError = true;\n                } else {\n                    this.emit(\"error\", err);\n                }\n                rejectOnce(err);\n            });\n            if (this.config.debug) {\n                tedious.on(\"debug\", this.emit.bind(this, \"debug\", tedious));\n            }\n            if (typeof this.config.beforeConnect === \"function\") {\n                this.config.beforeConnect(tedious);\n            }\n        });\n    }\n    _poolValidate(tedious) {\n        if (tedious && !tedious.closed && !tedious.hasError) {\n            return !this.config.validateConnection || new shared.Promise((resolve)=>{\n                const req = new tds.Request(\"SELECT 1;\", (err)=>{\n                    resolve(!err);\n                });\n                tedious.execSql(req);\n            });\n        }\n        return false;\n    }\n    _poolDestroy(tedious) {\n        return new shared.Promise((resolve, reject)=>{\n            if (!tedious) {\n                resolve();\n                return;\n            }\n            debug(\"connection(%d): destroying\", IDS.get(tedious));\n            if (tedious.closed) {\n                debug(\"connection(%d): already closed\", IDS.get(tedious));\n                resolve();\n            } else {\n                tedious.once(\"end\", ()=>{\n                    debug(\"connection(%d): destroyed\", IDS.get(tedious));\n                    resolve();\n                });\n                tedious.close();\n            }\n        });\n    }\n}\nmodule.exports = ConnectionPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/tedious/connection-pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/tedious/index.js":
/*!*************************************************!*\
  !*** ./node_modules/mssql/lib/tedious/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst base = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/mssql/lib/base/index.js\");\nconst ConnectionPool = __webpack_require__(/*! ./connection-pool */ \"(rsc)/./node_modules/mssql/lib/tedious/connection-pool.js\");\nconst Transaction = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/mssql/lib/tedious/transaction.js\");\nconst Request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/mssql/lib/tedious/request.js\");\nmodule.exports = Object.assign({\n    ConnectionPool,\n    Transaction,\n    Request,\n    PreparedStatement: base.PreparedStatement\n}, base.exports);\nObject.defineProperty(module.exports, \"Promise\", ({\n    enumerable: true,\n    get: ()=>{\n        return base.Promise;\n    },\n    set: (value)=>{\n        base.Promise = value;\n    }\n}));\nObject.defineProperty(module.exports, \"valueHandler\", ({\n    enumerable: true,\n    value: base.valueHandler,\n    writable: false,\n    configurable: false\n}));\nbase.driver.name = \"tedious\";\nbase.driver.ConnectionPool = ConnectionPool;\nbase.driver.Transaction = Transaction;\nbase.driver.Request = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3RlZGlvdXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNyQixNQUFNQyxpQkFBaUJELG1CQUFPQSxDQUFDO0FBQy9CLE1BQU1FLGNBQWNGLG1CQUFPQSxDQUFDO0FBQzVCLE1BQU1HLFVBQVVILG1CQUFPQSxDQUFDO0FBRXhCSSxPQUFPQyxPQUFPLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQztJQUM3Qk47SUFDQUM7SUFDQUM7SUFDQUssbUJBQW1CVCxLQUFLUyxpQkFBaUI7QUFDM0MsR0FBR1QsS0FBS00sT0FBTztBQUVmQyxrREFBaUQ7SUFDL0NJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9aLEtBQUthLE9BQU87SUFDckI7SUFDQUMsS0FBSyxDQUFDQztRQUNKZixLQUFLYSxPQUFPLEdBQUdFO0lBQ2pCO0FBQ0YsQ0FBQyxFQUFDO0FBRUZSLHVEQUFzRDtJQUNwREksWUFBWTtJQUNaSSxPQUFPZixLQUFLZ0IsWUFBWTtJQUN4QkMsVUFBVTtJQUNWQyxjQUFjO0FBQ2hCLENBQUMsRUFBQztBQUVGbEIsS0FBS21CLE1BQU0sQ0FBQ0MsSUFBSSxHQUFHO0FBQ25CcEIsS0FBS21CLE1BQU0sQ0FBQ2pCLGNBQWMsR0FBR0E7QUFDN0JGLEtBQUttQixNQUFNLENBQUNoQixXQUFXLEdBQUdBO0FBQzFCSCxLQUFLbUIsTUFBTSxDQUFDZixPQUFPLEdBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3RlZGlvdXMvaW5kZXguanM/N2RjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZSA9IHJlcXVpcmUoJy4uL2Jhc2UnKVxuY29uc3QgQ29ubmVjdGlvblBvb2wgPSByZXF1aXJlKCcuL2Nvbm5lY3Rpb24tcG9vbCcpXG5jb25zdCBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKVxuY29uc3QgUmVxdWVzdCA9IHJlcXVpcmUoJy4vcmVxdWVzdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbih7XG4gIENvbm5lY3Rpb25Qb29sLFxuICBUcmFuc2FjdGlvbixcbiAgUmVxdWVzdCxcbiAgUHJlcGFyZWRTdGF0ZW1lbnQ6IGJhc2UuUHJlcGFyZWRTdGF0ZW1lbnRcbn0sIGJhc2UuZXhwb3J0cylcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnUHJvbWlzZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiAoKSA9PiB7XG4gICAgcmV0dXJuIGJhc2UuUHJvbWlzZVxuICB9LFxuICBzZXQ6ICh2YWx1ZSkgPT4ge1xuICAgIGJhc2UuUHJvbWlzZSA9IHZhbHVlXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ3ZhbHVlSGFuZGxlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgdmFsdWU6IGJhc2UudmFsdWVIYW5kbGVyLFxuICB3cml0YWJsZTogZmFsc2UsXG4gIGNvbmZpZ3VyYWJsZTogZmFsc2Vcbn0pXG5cbmJhc2UuZHJpdmVyLm5hbWUgPSAndGVkaW91cydcbmJhc2UuZHJpdmVyLkNvbm5lY3Rpb25Qb29sID0gQ29ubmVjdGlvblBvb2xcbmJhc2UuZHJpdmVyLlRyYW5zYWN0aW9uID0gVHJhbnNhY3Rpb25cbmJhc2UuZHJpdmVyLlJlcXVlc3QgPSBSZXF1ZXN0XG4iXSwibmFtZXMiOlsiYmFzZSIsInJlcXVpcmUiLCJDb25uZWN0aW9uUG9vbCIsIlRyYW5zYWN0aW9uIiwiUmVxdWVzdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJPYmplY3QiLCJhc3NpZ24iLCJQcmVwYXJlZFN0YXRlbWVudCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIlByb21pc2UiLCJzZXQiLCJ2YWx1ZSIsInZhbHVlSGFuZGxlciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZHJpdmVyIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/tedious/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/tedious/request.js":
/*!***************************************************!*\
  !*** ./node_modules/mssql/lib/tedious/request.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst tds = __webpack_require__(/*! tedious */ \"(rsc)/./node_modules/tedious/lib/tedious.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"mssql:tedi\");\nconst BaseRequest = __webpack_require__(/*! ../base/request */ \"(rsc)/./node_modules/mssql/lib/base/request.js\");\nconst RequestError = __webpack_require__(/*! ../error/request-error */ \"(rsc)/./node_modules/mssql/lib/error/request-error.js\");\nconst { IDS, objectHasProperty } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\");\nconst { TYPES, DECLARATIONS, declare, cast } = __webpack_require__(/*! ../datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\");\nconst Table = __webpack_require__(/*! ../table */ \"(rsc)/./node_modules/mssql/lib/table.js\");\nconst { PARSERS: UDT } = __webpack_require__(/*! ../udt */ \"(rsc)/./node_modules/mssql/lib/udt.js\");\nconst { valueHandler } = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\");\nconst JSON_COLUMN_ID = \"JSON_F52E2B61-18A1-11d1-B105-00805F49916B\";\nconst XML_COLUMN_ID = \"XML_F52E2B61-18A1-11d1-B105-00805F49916B\";\nconst N_TYPES = {\n    BitN: 0x68,\n    DateTimeN: 0x6F,\n    DecimalN: 0x6A,\n    FloatN: 0x6D,\n    IntN: 0x26,\n    MoneyN: 0x6E,\n    NumericN: 0x6C\n};\nconst getTediousType = function(type) {\n    switch(type){\n        case TYPES.VarChar:\n            return tds.TYPES.VarChar;\n        case TYPES.NVarChar:\n            return tds.TYPES.NVarChar;\n        case TYPES.Text:\n            return tds.TYPES.Text;\n        case TYPES.Int:\n            return tds.TYPES.Int;\n        case TYPES.BigInt:\n            return tds.TYPES.BigInt;\n        case TYPES.TinyInt:\n            return tds.TYPES.TinyInt;\n        case TYPES.SmallInt:\n            return tds.TYPES.SmallInt;\n        case TYPES.Bit:\n            return tds.TYPES.Bit;\n        case TYPES.Float:\n            return tds.TYPES.Float;\n        case TYPES.Decimal:\n            return tds.TYPES.Decimal;\n        case TYPES.Numeric:\n            return tds.TYPES.Numeric;\n        case TYPES.Real:\n            return tds.TYPES.Real;\n        case TYPES.Money:\n            return tds.TYPES.Money;\n        case TYPES.SmallMoney:\n            return tds.TYPES.SmallMoney;\n        case TYPES.Time:\n            return tds.TYPES.Time;\n        case TYPES.Date:\n            return tds.TYPES.Date;\n        case TYPES.DateTime:\n            return tds.TYPES.DateTime;\n        case TYPES.DateTime2:\n            return tds.TYPES.DateTime2;\n        case TYPES.DateTimeOffset:\n            return tds.TYPES.DateTimeOffset;\n        case TYPES.SmallDateTime:\n            return tds.TYPES.SmallDateTime;\n        case TYPES.UniqueIdentifier:\n            return tds.TYPES.UniqueIdentifier;\n        case TYPES.Xml:\n            return tds.TYPES.NVarChar;\n        case TYPES.Char:\n            return tds.TYPES.Char;\n        case TYPES.NChar:\n            return tds.TYPES.NChar;\n        case TYPES.NText:\n            return tds.TYPES.NVarChar;\n        case TYPES.Image:\n            return tds.TYPES.Image;\n        case TYPES.Binary:\n            return tds.TYPES.Binary;\n        case TYPES.VarBinary:\n            return tds.TYPES.VarBinary;\n        case TYPES.UDT:\n        case TYPES.Geography:\n        case TYPES.Geometry:\n            return tds.TYPES.UDT;\n        case TYPES.TVP:\n            return tds.TYPES.TVP;\n        case TYPES.Variant:\n            return tds.TYPES.Variant;\n        default:\n            return type;\n    }\n};\nconst getMssqlType = function(type, length) {\n    if (typeof type !== \"object\") return undefined;\n    switch(type){\n        case tds.TYPES.Char:\n            return TYPES.Char;\n        case tds.TYPES.NChar:\n            return TYPES.NChar;\n        case tds.TYPES.VarChar:\n            return TYPES.VarChar;\n        case tds.TYPES.NVarChar:\n            return TYPES.NVarChar;\n        case tds.TYPES.Text:\n            return TYPES.Text;\n        case tds.TYPES.NText:\n            return TYPES.NText;\n        case tds.TYPES.Int:\n            return TYPES.Int;\n        case tds.TYPES.BigInt:\n            return TYPES.BigInt;\n        case tds.TYPES.TinyInt:\n            return TYPES.TinyInt;\n        case tds.TYPES.SmallInt:\n            return TYPES.SmallInt;\n        case tds.TYPES.Bit:\n            return TYPES.Bit;\n        case tds.TYPES.Float:\n            return TYPES.Float;\n        case tds.TYPES.Real:\n            return TYPES.Real;\n        case tds.TYPES.Money:\n            return TYPES.Money;\n        case tds.TYPES.SmallMoney:\n            return TYPES.SmallMoney;\n        case tds.TYPES.Numeric:\n            return TYPES.Numeric;\n        case tds.TYPES.Decimal:\n            return TYPES.Decimal;\n        case tds.TYPES.DateTime:\n            return TYPES.DateTime;\n        case tds.TYPES.Time:\n            return TYPES.Time;\n        case tds.TYPES.Date:\n            return TYPES.Date;\n        case tds.TYPES.DateTime2:\n            return TYPES.DateTime2;\n        case tds.TYPES.DateTimeOffset:\n            return TYPES.DateTimeOffset;\n        case tds.TYPES.SmallDateTime:\n            return TYPES.SmallDateTime;\n        case tds.TYPES.UniqueIdentifier:\n            return TYPES.UniqueIdentifier;\n        case tds.TYPES.Image:\n            return TYPES.Image;\n        case tds.TYPES.Binary:\n            return TYPES.Binary;\n        case tds.TYPES.VarBinary:\n            return TYPES.VarBinary;\n        case tds.TYPES.Xml:\n            return TYPES.Xml;\n        case tds.TYPES.UDT:\n            return TYPES.UDT;\n        case tds.TYPES.TVP:\n            return TYPES.TVP;\n        case tds.TYPES.Variant:\n            return TYPES.Variant;\n        default:\n            switch(type.id){\n                case N_TYPES.BitN:\n                    return TYPES.Bit;\n                case N_TYPES.NumericN:\n                    return TYPES.Numeric;\n                case N_TYPES.DecimalN:\n                    return TYPES.Decimal;\n                case N_TYPES.IntN:\n                    if (length === 8) return TYPES.BigInt;\n                    if (length === 4) return TYPES.Int;\n                    if (length === 2) return TYPES.SmallInt;\n                    return TYPES.TinyInt;\n                case N_TYPES.FloatN:\n                    if (length === 8) return TYPES.Float;\n                    return TYPES.Real;\n                case N_TYPES.MoneyN:\n                    if (length === 8) return TYPES.Money;\n                    return TYPES.SmallMoney;\n                case N_TYPES.DateTimeN:\n                    if (length === 8) return TYPES.DateTime;\n                    return TYPES.SmallDateTime;\n            }\n    }\n};\nconst createColumns = function(metadata, arrayRowMode) {\n    let out = {};\n    if (arrayRowMode) out = [];\n    for(let index = 0, length = metadata.length; index < length; index++){\n        const column = metadata[index];\n        const outColumn = {\n            index,\n            name: column.colName,\n            length: column.dataLength,\n            type: getMssqlType(column.type, column.dataLength),\n            scale: column.scale,\n            precision: column.precision,\n            nullable: !!(column.flags & 0x01),\n            caseSensitive: !!(column.flags & 0x02),\n            identity: !!(column.flags & 0x10),\n            readOnly: !(column.flags & 0x0C)\n        };\n        if (column.udtInfo) {\n            outColumn.udt = {\n                name: column.udtInfo.typeName,\n                database: column.udtInfo.dbname,\n                schema: column.udtInfo.owningSchema,\n                assembly: column.udtInfo.assemblyName\n            };\n            if (DECLARATIONS[column.udtInfo.typeName]) {\n                outColumn.type = DECLARATIONS[column.udtInfo.typeName];\n            }\n        }\n        if (arrayRowMode) {\n            out.push(outColumn);\n        } else {\n            out[column.colName] = outColumn;\n        }\n    }\n    return out;\n};\nconst valueCorrection = function(value, metadata) {\n    const type = getMssqlType(metadata.type);\n    if (valueHandler.has(type)) {\n        return valueHandler.get(type)(value);\n    } else if (metadata.type === tds.TYPES.UDT && value != null) {\n        if (UDT[metadata.udtInfo.typeName]) {\n            return UDT[metadata.udtInfo.typeName](value);\n        } else {\n            return value;\n        }\n    } else {\n        return value;\n    }\n};\nconst parameterCorrection = function(value) {\n    if (value instanceof Table) {\n        const tvp = {\n            name: value.name,\n            schema: value.schema,\n            columns: [],\n            rows: value.rows\n        };\n        for (const col of value.columns){\n            tvp.columns.push({\n                name: col.name,\n                type: getTediousType(col.type),\n                length: col.length,\n                scale: col.scale,\n                precision: col.precision\n            });\n        }\n        return tvp;\n    } else {\n        return value;\n    }\n};\nclass Request extends BaseRequest {\n    /*\n  Execute specified sql batch.\n  */ _batch(batch, callback) {\n        this._isBatch = true;\n        this._query(batch, callback);\n    }\n    /*\n  Bulk load.\n  */ _bulk(table, options, callback) {\n        super._bulk(table, options, (err)=>{\n            if (err) return callback(err);\n            try {\n                table._makeBulk();\n            } catch (e) {\n                return callback(new RequestError(e, \"EREQUEST\"));\n            }\n            if (!table.name) {\n                return callback(new RequestError(\"Table name must be specified for bulk insert.\", \"ENAME\"));\n            }\n            if (table.name.charAt(0) === \"@\") {\n                return callback(new RequestError(\"You can't use table variables for bulk insert.\", \"ENAME\"));\n            }\n            const errors = [];\n            const errorHandlers = {};\n            let hasReturned = false;\n            const handleError = (doReturn, connection, info)=>{\n                let err = new Error(info.message);\n                err.info = info;\n                err = new RequestError(err, \"EREQUEST\");\n                if (this.stream) {\n                    this.emit(\"error\", err);\n                } else {\n                    if (doReturn && !hasReturned) {\n                        if (connection) {\n                            for(const event in errorHandlers){\n                                connection.removeListener(event, errorHandlers[event]);\n                            }\n                            this.parent.release(connection);\n                        }\n                        hasReturned = true;\n                        callback(err);\n                    }\n                }\n                // we must collect errors even in stream mode\n                errors.push(err);\n            };\n            const handleInfo = (msg)=>{\n                this.emit(\"info\", {\n                    message: msg.message,\n                    number: msg.number,\n                    state: msg.state,\n                    class: msg.class,\n                    lineNumber: msg.lineNumber,\n                    serverName: msg.serverName,\n                    procName: msg.procName\n                });\n            };\n            this.parent.acquire(this, (err, connection)=>{\n                const callbackWithRelease = (err, ...args)=>{\n                    try {\n                        this.parent.release(connection);\n                    } catch (e) {\n                    // noop\n                    }\n                    callback(err, ...args);\n                };\n                if (err) return callbackWithRelease(err);\n                debug(\"connection(%d): borrowed to request #%d\", IDS.get(connection), IDS.get(this));\n                if (this.canceled) {\n                    debug(\"request(%d): canceled\", IDS.get(this));\n                    return callbackWithRelease(new RequestError(\"Canceled.\", \"ECANCEL\"));\n                }\n                this._cancel = ()=>{\n                    debug(\"request(%d): cancel\", IDS.get(this));\n                    connection.cancel();\n                };\n                // attach handler to handle multiple error messages\n                connection.on(\"infoMessage\", errorHandlers.infoMessage = handleInfo);\n                connection.on(\"errorMessage\", errorHandlers.errorMessage = handleError.bind(null, false, connection));\n                connection.on(\"error\", errorHandlers.error = handleError.bind(null, true, connection));\n                const done = (err, rowCount)=>{\n                    // to make sure we handle no-sql errors as well\n                    if (err && (!errors.length || errors.length && err.message !== errors[errors.length - 1].message)) {\n                        err = new RequestError(err, \"EREQUEST\");\n                        if (this.stream) this.emit(\"error\", err);\n                        errors.push(err);\n                    }\n                    delete this._cancel;\n                    let error;\n                    if (errors.length && !this.stream) {\n                        error = errors.pop();\n                        error.precedingErrors = errors;\n                    }\n                    if (!hasReturned) {\n                        for(const event in errorHandlers){\n                            connection.removeListener(event, errorHandlers[event]);\n                        }\n                        hasReturned = true;\n                        if (this.stream) {\n                            callbackWithRelease(null, rowCount);\n                        } else {\n                            callbackWithRelease(error, rowCount);\n                        }\n                    }\n                };\n                const bulk = connection.newBulkLoad(table.path, options, done);\n                for (const col of table.columns){\n                    bulk.addColumn(col.name, getTediousType(col.type), {\n                        nullable: col.nullable,\n                        length: col.length,\n                        scale: col.scale,\n                        precision: col.precision\n                    });\n                }\n                if (table.create) {\n                    const objectid = table.temporary ? `tempdb..[${table.name}]` : table.path;\n                    const req = new tds.Request(`if object_id('${objectid.replace(/'/g, \"''\")}') is null ${table.declare()}`, (err)=>{\n                        if (err) return done(err);\n                        connection.execBulkLoad(bulk, table.rows);\n                    });\n                    this._setCurrentRequest(req);\n                    connection.execSqlBatch(req);\n                } else {\n                    connection.execBulkLoad(bulk, table.rows);\n                }\n            });\n        });\n    }\n    /*\n  Execute specified sql command.\n  */ _query(command, callback) {\n        super._query(command, (err)=>{\n            if (err) return callback(err);\n            const recordsets = [];\n            const recordsetcolumns = [];\n            const errors = [];\n            const errorHandlers = {};\n            const output = {};\n            const rowsAffected = [];\n            let columns = {};\n            let recordset = [];\n            let batchLastRow = null;\n            let batchHasOutput = false;\n            let isChunkedRecordset = false;\n            let chunksBuffer = null;\n            let hasReturned = false;\n            const handleError = (doReturn, connection, info)=>{\n                let err = new Error(info.message);\n                err.info = info;\n                err = new RequestError(err, \"EREQUEST\");\n                if (this.stream) {\n                    this.emit(\"error\", err);\n                } else {\n                    if (doReturn && !hasReturned) {\n                        if (connection) {\n                            for(const event in errorHandlers){\n                                connection.removeListener(event, errorHandlers[event]);\n                            }\n                            this.parent.release(connection);\n                        }\n                        hasReturned = true;\n                        callback(err);\n                    }\n                }\n                // we must collect errors even in stream mode\n                errors.push(err);\n            };\n            const handleInfo = (msg)=>{\n                this.emit(\"info\", {\n                    message: msg.message,\n                    number: msg.number,\n                    state: msg.state,\n                    class: msg.class,\n                    lineNumber: msg.lineNumber,\n                    serverName: msg.serverName,\n                    procName: msg.procName\n                });\n            };\n            this.parent.acquire(this, (err, connection, config)=>{\n                if (err) return callback(err);\n                debug(\"connection(%d): borrowed to request #%d\", IDS.get(connection), IDS.get(this));\n                let row;\n                if (this.canceled) {\n                    debug(\"request(%d): canceled\", IDS.get(this));\n                    this.parent.release(connection);\n                    return callback(new RequestError(\"Canceled.\", \"ECANCEL\"));\n                }\n                this._cancel = ()=>{\n                    debug(\"request(%d): cancel\", IDS.get(this));\n                    connection.cancel();\n                };\n                // attach handler to handle multiple error messages\n                connection.on(\"infoMessage\", errorHandlers.infoMessage = handleInfo);\n                connection.on(\"errorMessage\", errorHandlers.errorMessage = handleError.bind(null, false, connection));\n                connection.on(\"error\", errorHandlers.error = handleError.bind(null, true, connection));\n                debug(\"request(%d): query\", IDS.get(this), command);\n                const req = new tds.Request(command, (err)=>{\n                    // tedious v15 has started using AggregateErrors to wrap multiple errors into single error objects\n                    (err?.errors ? err.errors : [\n                        err\n                    ]).forEach((e, i, { length })=>{\n                        // to make sure we handle no-sql errors as well\n                        if (e && (!errors.length || errors.length && errors.length >= length && e.message !== errors[errors.length - length + i].message)) {\n                            e = new RequestError(e, \"EREQUEST\");\n                            if (this.stream) this.emit(\"error\", e);\n                            errors.push(e);\n                        }\n                    });\n                    // process batch outputs\n                    if (batchHasOutput) {\n                        if (!this.stream) batchLastRow = recordsets.pop()[0];\n                        for(const name in batchLastRow){\n                            const value = batchLastRow[name];\n                            if (name !== \"___return___\") {\n                                output[name] = value;\n                            }\n                        }\n                    }\n                    delete this._cancel;\n                    let error;\n                    if (errors.length && !this.stream) {\n                        error = errors.pop();\n                        error.precedingErrors = errors;\n                    }\n                    if (!hasReturned) {\n                        for(const event in errorHandlers){\n                            connection.removeListener(event, errorHandlers[event]);\n                        }\n                        this.parent.release(connection);\n                        hasReturned = true;\n                        if (error) {\n                            debug(\"request(%d): failed\", IDS.get(this), error);\n                        } else {\n                            debug(\"request(%d): completed\", IDS.get(this));\n                        }\n                        if (this.stream) {\n                            callback(null, null, output, rowsAffected, recordsetcolumns);\n                        } else {\n                            callback(error, recordsets, output, rowsAffected, recordsetcolumns);\n                        }\n                    }\n                });\n                this._setCurrentRequest(req);\n                req.on(\"columnMetadata\", (metadata)=>{\n                    columns = createColumns(metadata, this.arrayRowMode);\n                    isChunkedRecordset = false;\n                    if (metadata.length === 1 && (metadata[0].colName === JSON_COLUMN_ID || metadata[0].colName === XML_COLUMN_ID)) {\n                        isChunkedRecordset = true;\n                        chunksBuffer = [];\n                    }\n                    if (this.stream) {\n                        if (this._isBatch) {\n                            // don't stream recordset with output values in batches\n                            if (!columns.___return___) {\n                                this.emit(\"recordset\", columns);\n                            }\n                        } else {\n                            this.emit(\"recordset\", columns);\n                        }\n                    }\n                    if (this.arrayRowMode) recordsetcolumns.push(columns);\n                });\n                const doneHandler = (rowCount, more)=>{\n                    if (rowCount != null) {\n                        rowsAffected.push(rowCount);\n                        if (this.stream) {\n                            this.emit(\"rowsaffected\", rowCount);\n                        }\n                    }\n                    // this function is called even when select only set variables so we should skip adding a new recordset\n                    if (Object.keys(columns).length === 0) return;\n                    if (isChunkedRecordset) {\n                        const concatenatedChunks = chunksBuffer.join(\"\");\n                        if (columns[JSON_COLUMN_ID] && config.parseJSON === true) {\n                            try {\n                                if (concatenatedChunks === \"\") {\n                                    row = null;\n                                } else {\n                                    row = JSON.parse(concatenatedChunks);\n                                }\n                            } catch (ex) {\n                                row = null;\n                                const ex2 = new RequestError(new Error(`Failed to parse incoming JSON. ${ex.message}`), \"EJSON\");\n                                if (this.stream) this.emit(\"error\", ex2);\n                                // we must collect errors even in stream mode\n                                errors.push(ex2);\n                            }\n                        } else {\n                            row = {};\n                            row[Object.keys(columns)[0]] = concatenatedChunks;\n                        }\n                        chunksBuffer = null;\n                        if (this.stream) {\n                            this.emit(\"row\", row);\n                        } else {\n                            recordset.push(row);\n                        }\n                    }\n                    if (!this.stream) {\n                        // all rows of current recordset loaded\n                        Object.defineProperty(recordset, \"columns\", {\n                            enumerable: false,\n                            configurable: true,\n                            value: columns\n                        });\n                        Object.defineProperty(recordset, \"toTable\", {\n                            enumerable: false,\n                            configurable: true,\n                            value (name) {\n                                return Table.fromRecordset(this, name);\n                            }\n                        });\n                        recordsets.push(recordset);\n                    }\n                    recordset = [];\n                    columns = {};\n                };\n                req.on(\"doneInProc\", doneHandler) // doneInProc handlers are used in both queries and batches\n                ;\n                req.on(\"done\", doneHandler) // done handlers are used in batches\n                ;\n                req.on(\"returnValue\", (parameterName, value, metadata)=>{\n                    output[parameterName] = value;\n                });\n                req.on(\"row\", (columns)=>{\n                    if (!recordset) recordset = [];\n                    if (isChunkedRecordset) {\n                        return chunksBuffer.push(columns[0].value);\n                    }\n                    if (this.arrayRowMode) {\n                        row = [];\n                    } else {\n                        row = {};\n                    }\n                    for (const col of columns){\n                        col.value = valueCorrection(col.value, col.metadata);\n                        if (this.arrayRowMode) {\n                            row.push(col.value);\n                        } else {\n                            const exi = row[col.metadata.colName];\n                            if (exi !== undefined) {\n                                if (exi instanceof Array) {\n                                    exi.push(col.value);\n                                } else {\n                                    row[col.metadata.colName] = [\n                                        exi,\n                                        col.value\n                                    ];\n                                }\n                            } else {\n                                row[col.metadata.colName] = col.value;\n                            }\n                        }\n                    }\n                    if (this.stream) {\n                        if (this._isBatch) {\n                            // dont stream recordset with output values in batches\n                            if (row.___return___) {\n                                batchLastRow = row;\n                            } else {\n                                this.emit(\"row\", row);\n                            }\n                        } else {\n                            this.emit(\"row\", row);\n                        }\n                    } else {\n                        recordset.push(row);\n                    }\n                });\n                if (this._isBatch) {\n                    if (Object.keys(this.parameters).length) {\n                        for(const name in this.parameters){\n                            if (!objectHasProperty(this.parameters, name)) {\n                                continue;\n                            }\n                            const param = this.parameters[name];\n                            try {\n                                param.value = getTediousType(param.type).validate(param.value, this.parent.collation);\n                            } catch (e) {\n                                e.message = `Validation failed for parameter '${name}'. ${e.message}`;\n                                const err = new RequestError(e, \"EPARAM\");\n                                this.parent.release(connection);\n                                return callback(err);\n                            }\n                        }\n                        const declarations = [];\n                        for(const name in this.parameters){\n                            if (!objectHasProperty(this.parameters, name)) {\n                                continue;\n                            }\n                            const param = this.parameters[name];\n                            declarations.push(`@${name} ${declare(param.type, param)}`);\n                        }\n                        const assigns = [];\n                        for(const name in this.parameters){\n                            if (!objectHasProperty(this.parameters, name)) {\n                                continue;\n                            }\n                            const param = this.parameters[name];\n                            assigns.push(`@${name} = ${cast(param.value, param.type, param)}`);\n                        }\n                        const selects = [];\n                        for(const name in this.parameters){\n                            if (!objectHasProperty(this.parameters, name)) {\n                                continue;\n                            }\n                            const param = this.parameters[name];\n                            if (param.io === 2) {\n                                selects.push(`@${name} as [${name}]`);\n                            }\n                        }\n                        batchHasOutput = selects.length > 0;\n                        req.sqlTextOrProcedure = `declare ${declarations.join(\", \")};select ${assigns.join(\", \")};${req.sqlTextOrProcedure};${batchHasOutput ? `select 1 as [___return___], ${selects.join(\", \")}` : \"\"}`;\n                    }\n                } else {\n                    for(const name in this.parameters){\n                        if (!objectHasProperty(this.parameters, name)) {\n                            continue;\n                        }\n                        const param = this.parameters[name];\n                        if (param.io === 1) {\n                            req.addParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), {\n                                length: param.length,\n                                scale: param.scale,\n                                precision: param.precision\n                            });\n                        } else {\n                            req.addOutputParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), {\n                                length: param.length,\n                                scale: param.scale,\n                                precision: param.precision\n                            });\n                        }\n                    }\n                }\n                try {\n                    connection[this._isBatch ? \"execSqlBatch\" : \"execSql\"](req);\n                } catch (error) {\n                    handleError(true, connection, error);\n                }\n            });\n        });\n    }\n    /*\n  Execute stored procedure with specified parameters.\n  */ _execute(procedure, callback) {\n        super._execute(procedure, (err)=>{\n            if (err) return callback(err);\n            const recordsets = [];\n            const recordsetcolumns = [];\n            const errors = [];\n            const errorHandlers = {};\n            const output = {};\n            const rowsAffected = [];\n            let columns = {};\n            let recordset = [];\n            let returnValue = 0;\n            let isChunkedRecordset = false;\n            let chunksBuffer = null;\n            let hasReturned = false;\n            const handleError = (doReturn, connection, info)=>{\n                let err = new Error(info.message);\n                err.info = info;\n                err = new RequestError(err, \"EREQUEST\");\n                if (this.stream) {\n                    this.emit(\"error\", err);\n                } else {\n                    if (doReturn && !hasReturned) {\n                        if (connection) {\n                            for(const event in errorHandlers){\n                                connection.removeListener(event, errorHandlers[event]);\n                            }\n                            this.parent.release(connection);\n                        }\n                        hasReturned = true;\n                        callback(err);\n                    }\n                }\n                // we must collect errors even in stream mode\n                errors.push(err);\n            };\n            const handleInfo = (msg)=>{\n                this.emit(\"info\", {\n                    message: msg.message,\n                    number: msg.number,\n                    state: msg.state,\n                    class: msg.class,\n                    lineNumber: msg.lineNumber,\n                    serverName: msg.serverName,\n                    procName: msg.procName\n                });\n            };\n            this.parent.acquire(this, (err, connection, config)=>{\n                if (err) return callback(err);\n                debug(\"connection(%d): borrowed to request #%d\", IDS.get(connection), IDS.get(this));\n                let row;\n                if (this.canceled) {\n                    debug(\"request(%d): canceled\", IDS.get(this));\n                    this.parent.release(connection);\n                    return callback(new RequestError(\"Canceled.\", \"ECANCEL\"));\n                }\n                this._cancel = ()=>{\n                    debug(\"request(%d): cancel\", IDS.get(this));\n                    connection.cancel();\n                };\n                // attach handler to handle multiple error messages\n                connection.on(\"infoMessage\", errorHandlers.infoMessage = handleInfo);\n                connection.on(\"errorMessage\", errorHandlers.errorMessage = handleError.bind(null, false, connection));\n                connection.on(\"error\", errorHandlers.error = handleError.bind(null, true, connection));\n                if (debug.enabled) {\n                    // log stored procedure executions and provided parameters\n                    const params = Object.keys(this.parameters).map((k)=>this.parameters[k]);\n                    // cut long string parameters short to keep log somewhat clean\n                    const logValue = (s)=>typeof s === \"string\" && s.length > 50 ? s.substring(0, 47) + \"...\" : s;\n                    // format parameter names as 'my_parameter [sql.Int]'\n                    const logName = (param)=>param.name + \" [sql.\" + param.type.name + \"]\";\n                    const logParams = {};\n                    params.forEach((p)=>{\n                        logParams[logName(p)] = logValue(p.value);\n                    });\n                    debug(\"request(%d): execute %s %O\", IDS.get(this), procedure, logParams);\n                }\n                const req = new tds.Request(procedure, (err)=>{\n                    // to make sure we handle no-sql errors as well\n                    if (err && (!errors.length || errors.length && err.message !== errors[errors.length - 1].message)) {\n                        err = new RequestError(err, \"EREQUEST\");\n                        if (this.stream) this.emit(\"error\", err);\n                        errors.push(err);\n                    }\n                    delete this._cancel;\n                    let error;\n                    if (errors.length && !this.stream) {\n                        error = errors.pop();\n                        error.precedingErrors = errors;\n                    }\n                    if (!hasReturned) {\n                        for(const event in errorHandlers){\n                            connection.removeListener(event, errorHandlers[event]);\n                        }\n                        this.parent.release(connection);\n                        hasReturned = true;\n                        if (error) {\n                            debug(\"request(%d): failed\", IDS.get(this), error);\n                        } else {\n                            debug(\"request(%d): complete\", IDS.get(this));\n                        }\n                        if (this.stream) {\n                            callback(null, null, output, returnValue, rowsAffected, recordsetcolumns);\n                        } else {\n                            callback(error, recordsets, output, returnValue, rowsAffected, recordsetcolumns);\n                        }\n                    }\n                });\n                this._setCurrentRequest(req);\n                req.on(\"columnMetadata\", (metadata)=>{\n                    columns = createColumns(metadata, this.arrayRowMode);\n                    isChunkedRecordset = false;\n                    if (metadata.length === 1 && (metadata[0].colName === JSON_COLUMN_ID || metadata[0].colName === XML_COLUMN_ID)) {\n                        isChunkedRecordset = true;\n                        chunksBuffer = [];\n                    }\n                    if (this.stream) this.emit(\"recordset\", columns);\n                    if (this.arrayRowMode) recordsetcolumns.push(columns);\n                });\n                req.on(\"row\", (columns)=>{\n                    if (!recordset) recordset = [];\n                    if (isChunkedRecordset) {\n                        return chunksBuffer.push(columns[0].value);\n                    }\n                    if (this.arrayRowMode) {\n                        row = [];\n                    } else {\n                        row = {};\n                    }\n                    for (const col of columns){\n                        col.value = valueCorrection(col.value, col.metadata);\n                        if (this.arrayRowMode) {\n                            row.push(col.value);\n                        } else {\n                            const exi = row[col.metadata.colName];\n                            if (exi != null) {\n                                if (exi instanceof Array) {\n                                    exi.push(col.value);\n                                } else {\n                                    row[col.metadata.colName] = [\n                                        exi,\n                                        col.value\n                                    ];\n                                }\n                            } else {\n                                row[col.metadata.colName] = col.value;\n                            }\n                        }\n                    }\n                    if (this.stream) {\n                        this.emit(\"row\", row);\n                    } else {\n                        recordset.push(row);\n                    }\n                });\n                req.on(\"doneInProc\", (rowCount, more)=>{\n                    if (rowCount != null) {\n                        rowsAffected.push(rowCount);\n                        if (this.stream) {\n                            this.emit(\"rowsaffected\", rowCount);\n                        }\n                    }\n                    // filter empty recordsets when NOCOUNT is OFF\n                    if (Object.keys(columns).length === 0) return;\n                    if (isChunkedRecordset) {\n                        if (columns[JSON_COLUMN_ID] && config.parseJSON === true) {\n                            try {\n                                if (chunksBuffer.length === 0) {\n                                    row = null;\n                                } else {\n                                    row = JSON.parse(chunksBuffer.join(\"\"));\n                                }\n                            } catch (ex) {\n                                row = null;\n                                const ex2 = new RequestError(new Error(`Failed to parse incoming JSON. ${ex.message}`), \"EJSON\");\n                                if (this.stream) this.emit(\"error\", ex2);\n                                // we must collect errors even in stream mode\n                                errors.push(ex2);\n                            }\n                        } else {\n                            row = {};\n                            row[Object.keys(columns)[0]] = chunksBuffer.join(\"\");\n                        }\n                        chunksBuffer = null;\n                        if (this.stream) {\n                            this.emit(\"row\", row);\n                        } else {\n                            recordset.push(row);\n                        }\n                    }\n                    if (!this.stream) {\n                        // all rows of current recordset loaded\n                        Object.defineProperty(recordset, \"columns\", {\n                            enumerable: false,\n                            configurable: true,\n                            value: columns\n                        });\n                        Object.defineProperty(recordset, \"toTable\", {\n                            enumerable: false,\n                            configurable: true,\n                            value (name) {\n                                return Table.fromRecordset(this, name);\n                            }\n                        });\n                        recordsets.push(recordset);\n                    }\n                    recordset = [];\n                    columns = {};\n                });\n                req.on(\"doneProc\", (rowCount, more, returnStatus)=>{\n                    returnValue = returnStatus;\n                });\n                req.on(\"returnValue\", (parameterName, value, metadata)=>{\n                    output[parameterName] = value;\n                });\n                for(const name in this.parameters){\n                    if (!objectHasProperty(this.parameters, name)) {\n                        continue;\n                    }\n                    const param = this.parameters[name];\n                    if (param.io === 1) {\n                        req.addParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), {\n                            length: param.length,\n                            scale: param.scale,\n                            precision: param.precision\n                        });\n                    } else {\n                        req.addOutputParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), {\n                            length: param.length,\n                            scale: param.scale,\n                            precision: param.precision\n                        });\n                    }\n                }\n                connection.callProcedure(req);\n            });\n        });\n    }\n    _pause() {\n        super._pause();\n        if (this._currentRequest) {\n            this._currentRequest.pause();\n        }\n    }\n    _resume() {\n        super._resume();\n        if (this._currentRequest) {\n            this._currentRequest.resume();\n        }\n    }\n}\nmodule.exports = Request;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/tedious/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/tedious/transaction.js":
/*!*******************************************************!*\
  !*** ./node_modules/mssql/lib/tedious/transaction.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")(\"mssql:tedi\");\nconst BaseTransaction = __webpack_require__(/*! ../base/transaction */ \"(rsc)/./node_modules/mssql/lib/base/transaction.js\");\nconst { IDS } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\");\nconst TransactionError = __webpack_require__(/*! ../error/transaction-error */ \"(rsc)/./node_modules/mssql/lib/error/transaction-error.js\");\nclass Transaction extends BaseTransaction {\n    constructor(parent){\n        super(parent);\n        this._abort = ()=>{\n            if (!this._rollbackRequested) {\n                // transaction interrupted because of XACT_ABORT\n                const pc = this._acquiredConnection;\n                // defer releasing so connection can switch from SentClientRequest to LoggedIn state\n                setImmediate(this.parent.release.bind(this.parent), pc);\n                this._acquiredConnection.removeListener(\"rollbackTransaction\", this._abort);\n                this._acquiredConnection = null;\n                this._acquiredConfig = null;\n                this._aborted = true;\n                this.emit(\"rollback\", true);\n            }\n        };\n    }\n    _begin(isolationLevel, callback) {\n        super._begin(isolationLevel, (err)=>{\n            if (err) return callback(err);\n            debug(\"transaction(%d): begin\", IDS.get(this));\n            this.parent.acquire(this, (err, connection, config)=>{\n                if (err) return callback(err);\n                this._acquiredConnection = connection;\n                this._acquiredConnection.on(\"rollbackTransaction\", this._abort);\n                this._acquiredConfig = config;\n                connection.beginTransaction((err)=>{\n                    if (err) err = new TransactionError(err);\n                    debug(\"transaction(%d): begun\", IDS.get(this));\n                    callback(err);\n                }, this.name, this.isolationLevel);\n            });\n        });\n    }\n    _commit(callback) {\n        super._commit((err)=>{\n            if (err) return callback(err);\n            debug(\"transaction(%d): commit\", IDS.get(this));\n            this._acquiredConnection.commitTransaction((err)=>{\n                if (err) err = new TransactionError(err);\n                this._acquiredConnection.removeListener(\"rollbackTransaction\", this._abort);\n                this.parent.release(this._acquiredConnection);\n                this._acquiredConnection = null;\n                this._acquiredConfig = null;\n                if (!err) debug(\"transaction(%d): commited\", IDS.get(this));\n                callback(err);\n            });\n        });\n    }\n    _rollback(callback) {\n        super._rollback((err)=>{\n            if (err) return callback(err);\n            debug(\"transaction(%d): rollback\", IDS.get(this));\n            this._acquiredConnection.rollbackTransaction((err)=>{\n                if (err) err = new TransactionError(err);\n                this._acquiredConnection.removeListener(\"rollbackTransaction\", this._abort);\n                this.parent.release(this._acquiredConnection);\n                this._acquiredConnection = null;\n                this._acquiredConfig = null;\n                if (!err) debug(\"transaction(%d): rolled back\", IDS.get(this));\n                callback(err);\n            });\n        });\n    }\n}\nmodule.exports = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3RlZGlvdXMvdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQyx3REFBUztBQUMvQixNQUFNQyxrQkFBa0JELG1CQUFPQSxDQUFDO0FBQ2hDLE1BQU0sRUFBRUUsR0FBRyxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1HLG1CQUFtQkgsbUJBQU9BLENBQUM7QUFFakMsTUFBTUksb0JBQW9CSDtJQUN4QkksWUFBYUMsTUFBTSxDQUFFO1FBQ25CLEtBQUssQ0FBQ0E7UUFFTixJQUFJLENBQUNDLE1BQU0sR0FBRztZQUNaLElBQUksQ0FBQyxJQUFJLENBQUNDLGtCQUFrQixFQUFFO2dCQUM1QixnREFBZ0Q7Z0JBRWhELE1BQU1DLEtBQUssSUFBSSxDQUFDQyxtQkFBbUI7Z0JBRW5DLG9GQUFvRjtnQkFDcEZDLGFBQWEsSUFBSSxDQUFDTCxNQUFNLENBQUNNLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQ1AsTUFBTSxHQUFHRztnQkFFcEQsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0ksY0FBYyxDQUFDLHVCQUF1QixJQUFJLENBQUNQLE1BQU07Z0JBQzFFLElBQUksQ0FBQ0csbUJBQW1CLEdBQUc7Z0JBQzNCLElBQUksQ0FBQ0ssZUFBZSxHQUFHO2dCQUN2QixJQUFJLENBQUNDLFFBQVEsR0FBRztnQkFFaEIsSUFBSSxDQUFDQyxJQUFJLENBQUMsWUFBWTtZQUN4QjtRQUNGO0lBQ0Y7SUFFQUMsT0FBUUMsY0FBYyxFQUFFQyxRQUFRLEVBQUU7UUFDaEMsS0FBSyxDQUFDRixPQUFPQyxnQkFBZ0JFLENBQUFBO1lBQzNCLElBQUlBLEtBQUssT0FBT0QsU0FBU0M7WUFFekJ0QixNQUFNLDBCQUEwQkcsSUFBSW9CLEdBQUcsQ0FBQyxJQUFJO1lBRTVDLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQ2lCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQ0YsS0FBS0csWUFBWUM7Z0JBQzFDLElBQUlKLEtBQUssT0FBT0QsU0FBU0M7Z0JBRXpCLElBQUksQ0FBQ1gsbUJBQW1CLEdBQUdjO2dCQUMzQixJQUFJLENBQUNkLG1CQUFtQixDQUFDZ0IsRUFBRSxDQUFDLHVCQUF1QixJQUFJLENBQUNuQixNQUFNO2dCQUM5RCxJQUFJLENBQUNRLGVBQWUsR0FBR1U7Z0JBRXZCRCxXQUFXRyxnQkFBZ0IsQ0FBQ04sQ0FBQUE7b0JBQzFCLElBQUlBLEtBQUtBLE1BQU0sSUFBSWxCLGlCQUFpQmtCO29CQUVwQ3RCLE1BQU0sMEJBQTBCRyxJQUFJb0IsR0FBRyxDQUFDLElBQUk7b0JBRTVDRixTQUFTQztnQkFDWCxHQUFHLElBQUksQ0FBQ08sSUFBSSxFQUFFLElBQUksQ0FBQ1QsY0FBYztZQUNuQztRQUNGO0lBQ0Y7SUFFQVUsUUFBU1QsUUFBUSxFQUFFO1FBQ2pCLEtBQUssQ0FBQ1MsUUFBUVIsQ0FBQUE7WUFDWixJQUFJQSxLQUFLLE9BQU9ELFNBQVNDO1lBRXpCdEIsTUFBTSwyQkFBMkJHLElBQUlvQixHQUFHLENBQUMsSUFBSTtZQUU3QyxJQUFJLENBQUNaLG1CQUFtQixDQUFDb0IsaUJBQWlCLENBQUNULENBQUFBO2dCQUN6QyxJQUFJQSxLQUFLQSxNQUFNLElBQUlsQixpQkFBaUJrQjtnQkFFcEMsSUFBSSxDQUFDWCxtQkFBbUIsQ0FBQ0ksY0FBYyxDQUFDLHVCQUF1QixJQUFJLENBQUNQLE1BQU07Z0JBQzFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDTSxPQUFPLENBQUMsSUFBSSxDQUFDRixtQkFBbUI7Z0JBQzVDLElBQUksQ0FBQ0EsbUJBQW1CLEdBQUc7Z0JBQzNCLElBQUksQ0FBQ0ssZUFBZSxHQUFHO2dCQUV2QixJQUFJLENBQUNNLEtBQUt0QixNQUFNLDZCQUE2QkcsSUFBSW9CLEdBQUcsQ0FBQyxJQUFJO2dCQUV6REYsU0FBU0M7WUFDWDtRQUNGO0lBQ0Y7SUFFQVUsVUFBV1gsUUFBUSxFQUFFO1FBQ25CLEtBQUssQ0FBQ1csVUFBVVYsQ0FBQUE7WUFDZCxJQUFJQSxLQUFLLE9BQU9ELFNBQVNDO1lBRXpCdEIsTUFBTSw2QkFBNkJHLElBQUlvQixHQUFHLENBQUMsSUFBSTtZQUUvQyxJQUFJLENBQUNaLG1CQUFtQixDQUFDc0IsbUJBQW1CLENBQUNYLENBQUFBO2dCQUMzQyxJQUFJQSxLQUFLQSxNQUFNLElBQUlsQixpQkFBaUJrQjtnQkFFcEMsSUFBSSxDQUFDWCxtQkFBbUIsQ0FBQ0ksY0FBYyxDQUFDLHVCQUF1QixJQUFJLENBQUNQLE1BQU07Z0JBQzFFLElBQUksQ0FBQ0QsTUFBTSxDQUFDTSxPQUFPLENBQUMsSUFBSSxDQUFDRixtQkFBbUI7Z0JBQzVDLElBQUksQ0FBQ0EsbUJBQW1CLEdBQUc7Z0JBQzNCLElBQUksQ0FBQ0ssZUFBZSxHQUFHO2dCQUV2QixJQUFJLENBQUNNLEtBQUt0QixNQUFNLGdDQUFnQ0csSUFBSW9CLEdBQUcsQ0FBQyxJQUFJO2dCQUU1REYsU0FBU0M7WUFDWDtRQUNGO0lBQ0Y7QUFDRjtBQUVBWSxPQUFPQyxPQUFPLEdBQUc5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL21zc3FsL2xpYi90ZWRpb3VzL3RyYW5zYWN0aW9uLmpzP2QwM2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnbXNzcWw6dGVkaScpXG5jb25zdCBCYXNlVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuLi9iYXNlL3RyYW5zYWN0aW9uJylcbmNvbnN0IHsgSURTIH0gPSByZXF1aXJlKCcuLi91dGlscycpXG5jb25zdCBUcmFuc2FjdGlvbkVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvdHJhbnNhY3Rpb24tZXJyb3InKVxuXG5jbGFzcyBUcmFuc2FjdGlvbiBleHRlbmRzIEJhc2VUcmFuc2FjdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChwYXJlbnQpIHtcbiAgICBzdXBlcihwYXJlbnQpXG5cbiAgICB0aGlzLl9hYm9ydCA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fcm9sbGJhY2tSZXF1ZXN0ZWQpIHtcbiAgICAgICAgLy8gdHJhbnNhY3Rpb24gaW50ZXJydXB0ZWQgYmVjYXVzZSBvZiBYQUNUX0FCT1JUXG5cbiAgICAgICAgY29uc3QgcGMgPSB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb25cblxuICAgICAgICAvLyBkZWZlciByZWxlYXNpbmcgc28gY29ubmVjdGlvbiBjYW4gc3dpdGNoIGZyb20gU2VudENsaWVudFJlcXVlc3QgdG8gTG9nZ2VkSW4gc3RhdGVcbiAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMucGFyZW50LnJlbGVhc2UuYmluZCh0aGlzLnBhcmVudCksIHBjKVxuXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29ubmVjdGlvbi5yZW1vdmVMaXN0ZW5lcigncm9sbGJhY2tUcmFuc2FjdGlvbicsIHRoaXMuX2Fib3J0KVxuICAgICAgICB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb24gPSBudWxsXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29uZmlnID0gbnVsbFxuICAgICAgICB0aGlzLl9hYm9ydGVkID0gdHJ1ZVxuXG4gICAgICAgIHRoaXMuZW1pdCgncm9sbGJhY2snLCB0cnVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9iZWdpbiAoaXNvbGF0aW9uTGV2ZWwsIGNhbGxiYWNrKSB7XG4gICAgc3VwZXIuX2JlZ2luKGlzb2xhdGlvbkxldmVsLCBlcnIgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcblxuICAgICAgZGVidWcoJ3RyYW5zYWN0aW9uKCVkKTogYmVnaW4nLCBJRFMuZ2V0KHRoaXMpKVxuXG4gICAgICB0aGlzLnBhcmVudC5hY3F1aXJlKHRoaXMsIChlcnIsIGNvbm5lY3Rpb24sIGNvbmZpZykgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKVxuXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29ubmVjdGlvbiA9IGNvbm5lY3Rpb25cbiAgICAgICAgdGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uLm9uKCdyb2xsYmFja1RyYW5zYWN0aW9uJywgdGhpcy5fYWJvcnQpXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29uZmlnID0gY29uZmlnXG5cbiAgICAgICAgY29ubmVjdGlvbi5iZWdpblRyYW5zYWN0aW9uKGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikgZXJyID0gbmV3IFRyYW5zYWN0aW9uRXJyb3IoZXJyKVxuXG4gICAgICAgICAgZGVidWcoJ3RyYW5zYWN0aW9uKCVkKTogYmVndW4nLCBJRFMuZ2V0KHRoaXMpKVxuXG4gICAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgICB9LCB0aGlzLm5hbWUsIHRoaXMuaXNvbGF0aW9uTGV2ZWwpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBfY29tbWl0IChjYWxsYmFjaykge1xuICAgIHN1cGVyLl9jb21taXQoZXJyID0+IHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG5cbiAgICAgIGRlYnVnKCd0cmFuc2FjdGlvbiglZCk6IGNvbW1pdCcsIElEUy5nZXQodGhpcykpXG5cbiAgICAgIHRoaXMuX2FjcXVpcmVkQ29ubmVjdGlvbi5jb21taXRUcmFuc2FjdGlvbihlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyKSBlcnIgPSBuZXcgVHJhbnNhY3Rpb25FcnJvcihlcnIpXG5cbiAgICAgICAgdGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uLnJlbW92ZUxpc3RlbmVyKCdyb2xsYmFja1RyYW5zYWN0aW9uJywgdGhpcy5fYWJvcnQpXG4gICAgICAgIHRoaXMucGFyZW50LnJlbGVhc2UodGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uKVxuICAgICAgICB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb24gPSBudWxsXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29uZmlnID0gbnVsbFxuXG4gICAgICAgIGlmICghZXJyKSBkZWJ1ZygndHJhbnNhY3Rpb24oJWQpOiBjb21taXRlZCcsIElEUy5nZXQodGhpcykpXG5cbiAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgX3JvbGxiYWNrIChjYWxsYmFjaykge1xuICAgIHN1cGVyLl9yb2xsYmFjayhlcnIgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcblxuICAgICAgZGVidWcoJ3RyYW5zYWN0aW9uKCVkKTogcm9sbGJhY2snLCBJRFMuZ2V0KHRoaXMpKVxuXG4gICAgICB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb24ucm9sbGJhY2tUcmFuc2FjdGlvbihlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyKSBlcnIgPSBuZXcgVHJhbnNhY3Rpb25FcnJvcihlcnIpXG5cbiAgICAgICAgdGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uLnJlbW92ZUxpc3RlbmVyKCdyb2xsYmFja1RyYW5zYWN0aW9uJywgdGhpcy5fYWJvcnQpXG4gICAgICAgIHRoaXMucGFyZW50LnJlbGVhc2UodGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uKVxuICAgICAgICB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb24gPSBudWxsXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29uZmlnID0gbnVsbFxuXG4gICAgICAgIGlmICghZXJyKSBkZWJ1ZygndHJhbnNhY3Rpb24oJWQpOiByb2xsZWQgYmFjaycsIElEUy5nZXQodGhpcykpXG5cbiAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb25cbiJdLCJuYW1lcyI6WyJkZWJ1ZyIsInJlcXVpcmUiLCJCYXNlVHJhbnNhY3Rpb24iLCJJRFMiLCJUcmFuc2FjdGlvbkVycm9yIiwiVHJhbnNhY3Rpb24iLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsIl9hYm9ydCIsIl9yb2xsYmFja1JlcXVlc3RlZCIsInBjIiwiX2FjcXVpcmVkQ29ubmVjdGlvbiIsInNldEltbWVkaWF0ZSIsInJlbGVhc2UiLCJiaW5kIiwicmVtb3ZlTGlzdGVuZXIiLCJfYWNxdWlyZWRDb25maWciLCJfYWJvcnRlZCIsImVtaXQiLCJfYmVnaW4iLCJpc29sYXRpb25MZXZlbCIsImNhbGxiYWNrIiwiZXJyIiwiZ2V0IiwiYWNxdWlyZSIsImNvbm5lY3Rpb24iLCJjb25maWciLCJvbiIsImJlZ2luVHJhbnNhY3Rpb24iLCJuYW1lIiwiX2NvbW1pdCIsImNvbW1pdFRyYW5zYWN0aW9uIiwiX3JvbGxiYWNrIiwicm9sbGJhY2tUcmFuc2FjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/tedious/transaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/udt.js":
/*!***************************************!*\
  !*** ./node_modules/mssql/lib/udt.js ***!
  \***************************************/
/***/ ((module) => {

eval("\n/* const FIGURE = {\n  INTERIOR_RING: 0x00,\n  STROKE: 0x01,\n  EXTERIOR_RING: 0x02\n};\n\nconst FIGURE_V2 = {\n  POINT: 0x00,\n  LINE: 0x01,\n  ARC: 0x02,\n  COMPOSITE_CURVE: 0x03\n};\n\nconst SHAPE = {\n  POINT: 0x01,\n  LINESTRING: 0x02,\n  POLYGON: 0x03,\n  MULTIPOINT: 0x04,\n  MULTILINESTRING: 0x05,\n  MULTIPOLYGON: 0x06,\n  GEOMETRY_COLLECTION: 0x07\n};\n\nconst SHAPE_V2 = {\n  POINT: 0x01,\n  LINESTRING: 0x02,\n  POLYGON: 0x03,\n  MULTIPOINT: 0x04,\n  MULTILINESTRING: 0x05,\n  MULTIPOLYGON: 0x06,\n  GEOMETRY_COLLECTION: 0x07,\n  CIRCULAR_STRING: 0x08,\n  COMPOUND_CURVE: 0x09,\n  CURVE_POLYGON: 0x0A,\n  FULL_GLOBE: 0x0B\n};\n\nconst SEGMENT = {\n  LINE: 0x00,\n  ARC: 0x01,\n  FIRST_LINE: 0x02,\n  FIRST_ARC: 0x03\n}; */ class Point {\n    constructor(){\n        this.x = 0;\n        this.y = 0;\n        this.z = null;\n        this.m = null;\n    }\n}\nconst parsePoints = (buffer, count, isGeometryPoint)=>{\n    // s2.1.5 + s2.1.6\n    // The key distinction for parsing is that a GEOGRAPHY POINT is ordered Lat (y) then Long (x),\n    // while a GEOMETRY POINT is ordered x then y.\n    // Further, there are additional range constraints on GEOGRAPHY POINT that are useful for testing that the coordinate order has not been flipped, such as that Lat must be in the range [-90, +90].\n    const points = [];\n    if (count < 1) {\n        return points;\n    }\n    if (isGeometryPoint) {\n        // GEOMETRY POINT (s2.1.6): x then y.\n        for(let i = 1; i <= count; i++){\n            const point = new Point();\n            points.push(point);\n            point.x = buffer.readDoubleLE(buffer.position);\n            point.y = buffer.readDoubleLE(buffer.position + 8);\n            buffer.position += 16;\n        }\n    } else {\n        // GEOGRAPHY POINT (s2.1.5): Lat (y) then Long (x).\n        for(let i = 1; i <= count; i++){\n            const point = new Point();\n            points.push(point);\n            point.lat = buffer.readDoubleLE(buffer.position);\n            point.lng = buffer.readDoubleLE(buffer.position + 8);\n            // For backwards compatibility, preserve the coordinate inversion in x and y.\n            // A future breaking change likely eliminate x and y for geography points in favor of just the lat and lng fields, as they've proven marvelously confusing.\n            // See discussion at: https://github.com/tediousjs/node-mssql/pull/1282#discussion_r677769531\n            point.x = point.lat;\n            point.y = point.lng;\n            buffer.position += 16;\n        }\n    }\n    return points;\n};\nconst parseZ = (buffer, points)=>{\n    // s2.1.1 + s.2.1.2\n    if (points < 1) {\n        return;\n    }\n    points.forEach((point)=>{\n        point.z = buffer.readDoubleLE(buffer.position);\n        buffer.position += 8;\n    });\n};\nconst parseM = (buffer, points)=>{\n    // s2.1.1 + s.2.1.2\n    if (points < 1) {\n        return;\n    }\n    points.forEach((point)=>{\n        point.m = buffer.readDoubleLE(buffer.position);\n        buffer.position += 8;\n    });\n};\nconst parseFigures = (buffer, count, properties)=>{\n    // s2.1.3\n    const figures = [];\n    if (count < 1) {\n        return figures;\n    }\n    if (properties.P) {\n        figures.push({\n            attribute: 0x01,\n            pointOffset: 0\n        });\n    } else if (properties.L) {\n        figures.push({\n            attribute: 0x01,\n            pointOffset: 0\n        });\n    } else {\n        for(let i = 1; i <= count; i++){\n            figures.push({\n                attribute: buffer.readUInt8(buffer.position),\n                pointOffset: buffer.readInt32LE(buffer.position + 1)\n            });\n            buffer.position += 5;\n        }\n    }\n    return figures;\n};\nconst parseShapes = (buffer, count, properties)=>{\n    // s2.1.4\n    const shapes = [];\n    if (count < 1) {\n        return shapes;\n    }\n    if (properties.P) {\n        shapes.push({\n            parentOffset: -1,\n            figureOffset: 0,\n            type: 0x01\n        });\n    } else if (properties.L) {\n        shapes.push({\n            parentOffset: -1,\n            figureOffset: 0,\n            type: 0x02\n        });\n    } else {\n        for(let i = 1; i <= count; i++){\n            shapes.push({\n                parentOffset: buffer.readInt32LE(buffer.position),\n                figureOffset: buffer.readInt32LE(buffer.position + 4),\n                type: buffer.readUInt8(buffer.position + 8)\n            });\n            buffer.position += 9;\n        }\n    }\n    return shapes;\n};\nconst parseSegments = (buffer, count)=>{\n    // s2.1.7\n    const segments = [];\n    if (count < 1) {\n        return segments;\n    }\n    for(let i = 1; i <= count; i++){\n        segments.push({\n            type: buffer.readUInt8(buffer.position)\n        });\n        buffer.position++;\n    }\n    return segments;\n};\nconst parseGeography = (buffer, isUsingGeometryPoints)=>{\n    // s2.1.1 + s.2.1.2\n    const srid = buffer.readInt32LE(0);\n    if (srid === -1) {\n        return null;\n    }\n    const value = {\n        srid,\n        version: buffer.readUInt8(4)\n    };\n    const flags = buffer.readUInt8(5);\n    buffer.position = 6;\n    // console.log(\"srid\", srid)\n    // console.log(\"version\", version)\n    const properties = {\n        Z: (flags & 1 << 0) > 0,\n        M: (flags & 1 << 1) > 0,\n        V: (flags & 1 << 2) > 0,\n        P: (flags & 1 << 3) > 0,\n        L: (flags & 1 << 4) > 0\n    };\n    if (value.version === 2) {\n        properties.H = (flags & 1 << 3) > 0;\n    }\n    // console.log(\"properties\", properties);\n    let numberOfPoints;\n    if (properties.P) {\n        numberOfPoints = 1;\n    } else if (properties.L) {\n        numberOfPoints = 2;\n    } else {\n        numberOfPoints = buffer.readUInt32LE(buffer.position);\n        buffer.position += 4;\n    }\n    // console.log(\"numberOfPoints\", numberOfPoints)\n    value.points = parsePoints(buffer, numberOfPoints, isUsingGeometryPoints);\n    if (properties.Z) {\n        parseZ(buffer, value.points);\n    }\n    if (properties.M) {\n        parseM(buffer, value.points);\n    }\n    // console.log(\"points\", points)\n    let numberOfFigures;\n    if (properties.P) {\n        numberOfFigures = 1;\n    } else if (properties.L) {\n        numberOfFigures = 1;\n    } else {\n        numberOfFigures = buffer.readUInt32LE(buffer.position);\n        buffer.position += 4;\n    }\n    // console.log(\"numberOfFigures\", numberOfFigures)\n    value.figures = parseFigures(buffer, numberOfFigures, properties);\n    // console.log(\"figures\", figures)\n    let numberOfShapes;\n    if (properties.P) {\n        numberOfShapes = 1;\n    } else if (properties.L) {\n        numberOfShapes = 1;\n    } else {\n        numberOfShapes = buffer.readUInt32LE(buffer.position);\n        buffer.position += 4;\n    }\n    // console.log(\"numberOfShapes\", numberOfShapes)\n    value.shapes = parseShapes(buffer, numberOfShapes, properties);\n    // console.log( \"shapes\", shapes)\n    if (value.version === 2 && buffer.position < buffer.length) {\n        const numberOfSegments = buffer.readUInt32LE(buffer.position);\n        buffer.position += 4;\n        // console.log(\"numberOfSegments\", numberOfSegments)\n        value.segments = parseSegments(buffer, numberOfSegments);\n    // console.log(\"segments\", segments)\n    } else {\n        value.segments = [];\n    }\n    return value;\n};\nmodule.exports.PARSERS = {\n    geography (buffer) {\n        return parseGeography(buffer, /* isUsingGeometryPoints: */ false);\n    },\n    geometry (buffer) {\n        return parseGeography(buffer, /* isUsingGeometryPoints: */ true);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/udt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/mssql/lib/utils.js ***!
  \*****************************************/
/***/ ((module) => {

eval("\nconst IDS = new WeakMap();\nconst INCREMENT = {\n    Connection: 1,\n    ConnectionPool: 1,\n    Request: 1,\n    Transaction: 1,\n    PreparedStatement: 1\n};\nmodule.exports = {\n    objectHasProperty: (object, property)=>Object.prototype.hasOwnProperty.call(object, property),\n    INCREMENT,\n    IDS: {\n        get: IDS.get.bind(IDS),\n        add: (object, type, id)=>{\n            if (id) return IDS.set(object, id);\n            IDS.set(object, INCREMENT[type]++);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxNQUFNLElBQUlDO0FBQ2hCLE1BQU1DLFlBQVk7SUFDaEJDLFlBQVk7SUFDWkMsZ0JBQWdCO0lBQ2hCQyxTQUFTO0lBQ1RDLGFBQWE7SUFDYkMsbUJBQW1CO0FBQ3JCO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxtQkFBbUIsQ0FBQ0MsUUFBUUMsV0FBYUMsT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0wsUUFBUUM7SUFDdEZWO0lBQ0FGLEtBQUs7UUFDSGlCLEtBQUtqQixJQUFJaUIsR0FBRyxDQUFDQyxJQUFJLENBQUNsQjtRQUNsQm1CLEtBQUssQ0FBQ1IsUUFBUVMsTUFBTUM7WUFDbEIsSUFBSUEsSUFBSSxPQUFPckIsSUFBSXNCLEdBQUcsQ0FBQ1gsUUFBUVU7WUFDL0JyQixJQUFJc0IsR0FBRyxDQUFDWCxRQUFRVCxTQUFTLENBQUNrQixLQUFLO1FBQ2pDO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL21zc3FsL2xpYi91dGlscy5qcz9jZWQ1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IElEUyA9IG5ldyBXZWFrTWFwKClcbmNvbnN0IElOQ1JFTUVOVCA9IHtcbiAgQ29ubmVjdGlvbjogMSxcbiAgQ29ubmVjdGlvblBvb2w6IDEsXG4gIFJlcXVlc3Q6IDEsXG4gIFRyYW5zYWN0aW9uOiAxLFxuICBQcmVwYXJlZFN0YXRlbWVudDogMVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgb2JqZWN0SGFzUHJvcGVydHk6IChvYmplY3QsIHByb3BlcnR5KSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSksXG4gIElOQ1JFTUVOVCxcbiAgSURTOiB7XG4gICAgZ2V0OiBJRFMuZ2V0LmJpbmQoSURTKSxcbiAgICBhZGQ6IChvYmplY3QsIHR5cGUsIGlkKSA9PiB7XG4gICAgICBpZiAoaWQpIHJldHVybiBJRFMuc2V0KG9iamVjdCwgaWQpXG4gICAgICBJRFMuc2V0KG9iamVjdCwgSU5DUkVNRU5UW3R5cGVdKyspXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiSURTIiwiV2Vha01hcCIsIklOQ1JFTUVOVCIsIkNvbm5lY3Rpb24iLCJDb25uZWN0aW9uUG9vbCIsIlJlcXVlc3QiLCJUcmFuc2FjdGlvbiIsIlByZXBhcmVkU3RhdGVtZW50IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9iamVjdEhhc1Byb3BlcnR5Iiwib2JqZWN0IiwicHJvcGVydHkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJnZXQiLCJiaW5kIiwiYWRkIiwidHlwZSIsImlkIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/utils.js\n");

/***/ })

};
;