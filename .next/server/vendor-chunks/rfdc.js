"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rfdc";
exports.ids = ["vendor-chunks/rfdc"];
exports.modules = {

/***/ "(rsc)/./node_modules/rfdc/default.js":
/*!**************************************!*\
  !*** ./node_modules/rfdc/default.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./index.js */ \"(rsc)/./node_modules/rfdc/index.js\")();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmZkYy9kZWZhdWx0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0MsbUJBQU9BLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9yZmRjL2RlZmF1bHQuanM/YjRkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2luZGV4LmpzJykoKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rfdc/default.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/rfdc/index.js":
/*!************************************!*\
  !*** ./node_modules/rfdc/index.js ***!
  \************************************/
/***/ ((module) => {

eval("\nmodule.exports = rfdc;\nfunction copyBuffer(cur) {\n    if (cur instanceof Buffer) {\n        return Buffer.from(cur);\n    }\n    return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length);\n}\nfunction rfdc(opts) {\n    opts = opts || {};\n    if (opts.circles) return rfdcCircles(opts);\n    const constructorHandlers = new Map();\n    constructorHandlers.set(Date, (o)=>new Date(o));\n    constructorHandlers.set(Map, (o, fn)=>new Map(cloneArray(Array.from(o), fn)));\n    constructorHandlers.set(Set, (o, fn)=>new Set(cloneArray(Array.from(o), fn)));\n    if (opts.constructorHandlers) {\n        for (const handler of opts.constructorHandlers){\n            constructorHandlers.set(handler[0], handler[1]);\n        }\n    }\n    let handler = null;\n    return opts.proto ? cloneProto : clone;\n    function cloneArray(a, fn) {\n        const keys = Object.keys(a);\n        const a2 = new Array(keys.length);\n        for(let i = 0; i < keys.length; i++){\n            const k = keys[i];\n            const cur = a[k];\n            if (typeof cur !== \"object\" || cur === null) {\n                a2[k] = cur;\n            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n                a2[k] = handler(cur, fn);\n            } else if (ArrayBuffer.isView(cur)) {\n                a2[k] = copyBuffer(cur);\n            } else {\n                a2[k] = fn(cur);\n            }\n        }\n        return a2;\n    }\n    function clone(o) {\n        if (typeof o !== \"object\" || o === null) return o;\n        if (Array.isArray(o)) return cloneArray(o, clone);\n        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n            return handler(o, clone);\n        }\n        const o2 = {};\n        for(const k in o){\n            if (Object.hasOwnProperty.call(o, k) === false) continue;\n            const cur = o[k];\n            if (typeof cur !== \"object\" || cur === null) {\n                o2[k] = cur;\n            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n                o2[k] = handler(cur, clone);\n            } else if (ArrayBuffer.isView(cur)) {\n                o2[k] = copyBuffer(cur);\n            } else {\n                o2[k] = clone(cur);\n            }\n        }\n        return o2;\n    }\n    function cloneProto(o) {\n        if (typeof o !== \"object\" || o === null) return o;\n        if (Array.isArray(o)) return cloneArray(o, cloneProto);\n        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n            return handler(o, cloneProto);\n        }\n        const o2 = {};\n        for(const k in o){\n            const cur = o[k];\n            if (typeof cur !== \"object\" || cur === null) {\n                o2[k] = cur;\n            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n                o2[k] = handler(cur, cloneProto);\n            } else if (ArrayBuffer.isView(cur)) {\n                o2[k] = copyBuffer(cur);\n            } else {\n                o2[k] = cloneProto(cur);\n            }\n        }\n        return o2;\n    }\n}\nfunction rfdcCircles(opts) {\n    const refs = [];\n    const refsNew = [];\n    const constructorHandlers = new Map();\n    constructorHandlers.set(Date, (o)=>new Date(o));\n    constructorHandlers.set(Map, (o, fn)=>new Map(cloneArray(Array.from(o), fn)));\n    constructorHandlers.set(Set, (o, fn)=>new Set(cloneArray(Array.from(o), fn)));\n    if (opts.constructorHandlers) {\n        for (const handler of opts.constructorHandlers){\n            constructorHandlers.set(handler[0], handler[1]);\n        }\n    }\n    let handler = null;\n    return opts.proto ? cloneProto : clone;\n    function cloneArray(a, fn) {\n        const keys = Object.keys(a);\n        const a2 = new Array(keys.length);\n        for(let i = 0; i < keys.length; i++){\n            const k = keys[i];\n            const cur = a[k];\n            if (typeof cur !== \"object\" || cur === null) {\n                a2[k] = cur;\n            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n                a2[k] = handler(cur, fn);\n            } else if (ArrayBuffer.isView(cur)) {\n                a2[k] = copyBuffer(cur);\n            } else {\n                const index = refs.indexOf(cur);\n                if (index !== -1) {\n                    a2[k] = refsNew[index];\n                } else {\n                    a2[k] = fn(cur);\n                }\n            }\n        }\n        return a2;\n    }\n    function clone(o) {\n        if (typeof o !== \"object\" || o === null) return o;\n        if (Array.isArray(o)) return cloneArray(o, clone);\n        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n            return handler(o, clone);\n        }\n        const o2 = {};\n        refs.push(o);\n        refsNew.push(o2);\n        for(const k in o){\n            if (Object.hasOwnProperty.call(o, k) === false) continue;\n            const cur = o[k];\n            if (typeof cur !== \"object\" || cur === null) {\n                o2[k] = cur;\n            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n                o2[k] = handler(cur, clone);\n            } else if (ArrayBuffer.isView(cur)) {\n                o2[k] = copyBuffer(cur);\n            } else {\n                const i = refs.indexOf(cur);\n                if (i !== -1) {\n                    o2[k] = refsNew[i];\n                } else {\n                    o2[k] = clone(cur);\n                }\n            }\n        }\n        refs.pop();\n        refsNew.pop();\n        return o2;\n    }\n    function cloneProto(o) {\n        if (typeof o !== \"object\" || o === null) return o;\n        if (Array.isArray(o)) return cloneArray(o, cloneProto);\n        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n            return handler(o, cloneProto);\n        }\n        const o2 = {};\n        refs.push(o);\n        refsNew.push(o2);\n        for(const k in o){\n            const cur = o[k];\n            if (typeof cur !== \"object\" || cur === null) {\n                o2[k] = cur;\n            } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n                o2[k] = handler(cur, cloneProto);\n            } else if (ArrayBuffer.isView(cur)) {\n                o2[k] = copyBuffer(cur);\n            } else {\n                const i = refs.indexOf(cur);\n                if (i !== -1) {\n                    o2[k] = refsNew[i];\n                } else {\n                    o2[k] = cloneProto(cur);\n                }\n            }\n        }\n        refs.pop();\n        refsNew.pop();\n        return o2;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/rfdc/index.js\n");

/***/ })

};
;