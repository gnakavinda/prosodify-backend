"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tarn";
exports.ids = ["vendor-chunks/tarn"];
exports.modules = {

/***/ "(rsc)/./node_modules/tarn/dist/PendingOperation.js":
/*!****************************************************!*\
  !*** ./node_modules/tarn/dist/PendingOperation.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst TimeoutError_1 = __webpack_require__(/*! ./TimeoutError */ \"(rsc)/./node_modules/tarn/dist/TimeoutError.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/tarn/dist/utils.js\");\nclass PendingOperation {\n    constructor(timeoutMillis){\n        this.timeoutMillis = timeoutMillis;\n        this.deferred = utils_1.defer();\n        this.possibleTimeoutCause = null;\n        this.isRejected = false;\n        this.promise = timeout(this.deferred.promise, timeoutMillis).catch((err)=>{\n            if (err instanceof TimeoutError_1.TimeoutError) {\n                if (this.possibleTimeoutCause) {\n                    err = new TimeoutError_1.TimeoutError(this.possibleTimeoutCause.message);\n                } else {\n                    err = new TimeoutError_1.TimeoutError(\"operation timed out for an unknown reason\");\n                }\n            }\n            this.isRejected = true;\n            return Promise.reject(err);\n        });\n    }\n    abort() {\n        this.reject(new Error(\"aborted\"));\n    }\n    reject(err) {\n        this.deferred.reject(err);\n    }\n    resolve(value) {\n        this.deferred.resolve(value);\n    }\n}\nexports.PendingOperation = PendingOperation;\nfunction timeout(promise, time) {\n    return new Promise((resolve, reject)=>{\n        const timeoutHandle = setTimeout(()=>reject(new TimeoutError_1.TimeoutError()), time);\n        promise.then((result)=>{\n            clearTimeout(timeoutHandle);\n            resolve(result);\n        }).catch((err)=>{\n            clearTimeout(timeoutHandle);\n            reject(err);\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L1BlbmRpbmdPcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsaUJBQWlCQyxtQkFBT0EsQ0FBQyxzRUFBZ0I7QUFDL0MsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsd0RBQVM7QUFDakMsTUFBTUU7SUFDRkMsWUFBWUMsYUFBYSxDQUFFO1FBQ3ZCLElBQUksQ0FBQ0EsYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNDLFFBQVEsR0FBR0osUUFBUUssS0FBSztRQUM3QixJQUFJLENBQUNDLG9CQUFvQixHQUFHO1FBQzVCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQyxRQUFRLElBQUksQ0FBQ0wsUUFBUSxDQUFDSSxPQUFPLEVBQUVMLGVBQWVPLEtBQUssQ0FBQ0MsQ0FBQUE7WUFDL0QsSUFBSUEsZUFBZWIsZUFBZWMsWUFBWSxFQUFFO2dCQUM1QyxJQUFJLElBQUksQ0FBQ04sb0JBQW9CLEVBQUU7b0JBQzNCSyxNQUFNLElBQUliLGVBQWVjLFlBQVksQ0FBQyxJQUFJLENBQUNOLG9CQUFvQixDQUFDTyxPQUFPO2dCQUMzRSxPQUNLO29CQUNERixNQUFNLElBQUliLGVBQWVjLFlBQVksQ0FBQztnQkFDMUM7WUFDSjtZQUNBLElBQUksQ0FBQ0wsVUFBVSxHQUFHO1lBQ2xCLE9BQU9PLFFBQVFDLE1BQU0sQ0FBQ0o7UUFDMUI7SUFDSjtJQUNBSyxRQUFRO1FBQ0osSUFBSSxDQUFDRCxNQUFNLENBQUMsSUFBSUUsTUFBTTtJQUMxQjtJQUNBRixPQUFPSixHQUFHLEVBQUU7UUFDUixJQUFJLENBQUNQLFFBQVEsQ0FBQ1csTUFBTSxDQUFDSjtJQUN6QjtJQUNBTyxRQUFRckIsS0FBSyxFQUFFO1FBQ1gsSUFBSSxDQUFDTyxRQUFRLENBQUNjLE9BQU8sQ0FBQ3JCO0lBQzFCO0FBQ0o7QUFDQUQsd0JBQXdCLEdBQUdLO0FBQzNCLFNBQVNRLFFBQVFELE9BQU8sRUFBRVcsSUFBSTtJQUMxQixPQUFPLElBQUlMLFFBQVEsQ0FBQ0ksU0FBU0g7UUFDekIsTUFBTUssZ0JBQWdCQyxXQUFXLElBQU1OLE9BQU8sSUFBSWpCLGVBQWVjLFlBQVksS0FBS087UUFDbEZYLFFBQ0tjLElBQUksQ0FBQ0MsQ0FBQUE7WUFDTkMsYUFBYUo7WUFDYkYsUUFBUUs7UUFDWixHQUNLYixLQUFLLENBQUNDLENBQUFBO1lBQ1BhLGFBQWFKO1lBQ2JMLE9BQU9KO1FBQ1g7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L1BlbmRpbmdPcGVyYXRpb24uanM/MjAxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBUaW1lb3V0RXJyb3JfMSA9IHJlcXVpcmUoXCIuL1RpbWVvdXRFcnJvclwiKTtcclxuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xyXG5jbGFzcyBQZW5kaW5nT3BlcmF0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHRpbWVvdXRNaWxsaXMpIHtcclxuICAgICAgICB0aGlzLnRpbWVvdXRNaWxsaXMgPSB0aW1lb3V0TWlsbGlzO1xyXG4gICAgICAgIHRoaXMuZGVmZXJyZWQgPSB1dGlsc18xLmRlZmVyKCk7XHJcbiAgICAgICAgdGhpcy5wb3NzaWJsZVRpbWVvdXRDYXVzZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc1JlamVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gdGltZW91dCh0aGlzLmRlZmVycmVkLnByb21pc2UsIHRpbWVvdXRNaWxsaXMpLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBUaW1lb3V0RXJyb3JfMS5UaW1lb3V0RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBvc3NpYmxlVGltZW91dENhdXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gbmV3IFRpbWVvdXRFcnJvcl8xLlRpbWVvdXRFcnJvcih0aGlzLnBvc3NpYmxlVGltZW91dENhdXNlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gbmV3IFRpbWVvdXRFcnJvcl8xLlRpbWVvdXRFcnJvcignb3BlcmF0aW9uIHRpbWVkIG91dCBmb3IgYW4gdW5rbm93biByZWFzb24nKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmlzUmVqZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFib3J0KCkge1xyXG4gICAgICAgIHRoaXMucmVqZWN0KG5ldyBFcnJvcignYWJvcnRlZCcpKTtcclxuICAgIH1cclxuICAgIHJlamVjdChlcnIpIHtcclxuICAgICAgICB0aGlzLmRlZmVycmVkLnJlamVjdChlcnIpO1xyXG4gICAgfVxyXG4gICAgcmVzb2x2ZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5QZW5kaW5nT3BlcmF0aW9uID0gUGVuZGluZ09wZXJhdGlvbjtcclxuZnVuY3Rpb24gdGltZW91dChwcm9taXNlLCB0aW1lKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgVGltZW91dEVycm9yXzEuVGltZW91dEVycm9yKCkpLCB0aW1lKTtcclxuICAgICAgICBwcm9taXNlXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVGltZW91dEVycm9yXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsIlBlbmRpbmdPcGVyYXRpb24iLCJjb25zdHJ1Y3RvciIsInRpbWVvdXRNaWxsaXMiLCJkZWZlcnJlZCIsImRlZmVyIiwicG9zc2libGVUaW1lb3V0Q2F1c2UiLCJpc1JlamVjdGVkIiwicHJvbWlzZSIsInRpbWVvdXQiLCJjYXRjaCIsImVyciIsIlRpbWVvdXRFcnJvciIsIm1lc3NhZ2UiLCJQcm9taXNlIiwicmVqZWN0IiwiYWJvcnQiLCJFcnJvciIsInJlc29sdmUiLCJ0aW1lIiwidGltZW91dEhhbmRsZSIsInNldFRpbWVvdXQiLCJ0aGVuIiwicmVzdWx0IiwiY2xlYXJUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tarn/dist/PendingOperation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tarn/dist/Pool.js":
/*!****************************************!*\
  !*** ./node_modules/tarn/dist/Pool.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst PendingOperation_1 = __webpack_require__(/*! ./PendingOperation */ \"(rsc)/./node_modules/tarn/dist/PendingOperation.js\");\nconst Resource_1 = __webpack_require__(/*! ./Resource */ \"(rsc)/./node_modules/tarn/dist/Resource.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/tarn/dist/utils.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nclass Pool {\n    constructor(opt){\n        this.destroyed = false;\n        this.emitter = new events_1.EventEmitter();\n        opt = opt || {};\n        if (!opt.create) {\n            throw new Error(\"Tarn: opt.create function most be provided\");\n        }\n        if (!opt.destroy) {\n            throw new Error(\"Tarn: opt.destroy function most be provided\");\n        }\n        if (typeof opt.min !== \"number\" || opt.min < 0 || opt.min !== Math.round(opt.min)) {\n            throw new Error(\"Tarn: opt.min must be an integer >= 0\");\n        }\n        if (typeof opt.max !== \"number\" || opt.max <= 0 || opt.max !== Math.round(opt.max)) {\n            throw new Error(\"Tarn: opt.max must be an integer > 0\");\n        }\n        if (opt.min > opt.max) {\n            throw new Error(\"Tarn: opt.max is smaller than opt.min\");\n        }\n        if (!utils_1.checkOptionalTime(opt.acquireTimeoutMillis)) {\n            throw new Error(\"Tarn: invalid opt.acquireTimeoutMillis \" + JSON.stringify(opt.acquireTimeoutMillis));\n        }\n        if (!utils_1.checkOptionalTime(opt.createTimeoutMillis)) {\n            throw new Error(\"Tarn: invalid opt.createTimeoutMillis \" + JSON.stringify(opt.createTimeoutMillis));\n        }\n        if (!utils_1.checkOptionalTime(opt.destroyTimeoutMillis)) {\n            throw new Error(\"Tarn: invalid opt.destroyTimeoutMillis \" + JSON.stringify(opt.destroyTimeoutMillis));\n        }\n        if (!utils_1.checkOptionalTime(opt.idleTimeoutMillis)) {\n            throw new Error(\"Tarn: invalid opt.idleTimeoutMillis \" + JSON.stringify(opt.idleTimeoutMillis));\n        }\n        if (!utils_1.checkOptionalTime(opt.reapIntervalMillis)) {\n            throw new Error(\"Tarn: invalid opt.reapIntervalMillis \" + JSON.stringify(opt.reapIntervalMillis));\n        }\n        if (!utils_1.checkOptionalTime(opt.createRetryIntervalMillis)) {\n            throw new Error(\"Tarn: invalid opt.createRetryIntervalMillis \" + JSON.stringify(opt.createRetryIntervalMillis));\n        }\n        const allowedKeys = {\n            create: true,\n            validate: true,\n            destroy: true,\n            log: true,\n            min: true,\n            max: true,\n            acquireTimeoutMillis: true,\n            createTimeoutMillis: true,\n            destroyTimeoutMillis: true,\n            idleTimeoutMillis: true,\n            reapIntervalMillis: true,\n            createRetryIntervalMillis: true,\n            propagateCreateError: true\n        };\n        for (const key of Object.keys(opt)){\n            if (!allowedKeys[key]) {\n                throw new Error(`Tarn: unsupported option opt.${key}`);\n            }\n        }\n        this.creator = opt.create;\n        this.destroyer = opt.destroy;\n        this.validate = typeof opt.validate === \"function\" ? opt.validate : ()=>true;\n        this.log = opt.log || (()=>{});\n        this.acquireTimeoutMillis = opt.acquireTimeoutMillis || 30000;\n        this.createTimeoutMillis = opt.createTimeoutMillis || 30000;\n        this.destroyTimeoutMillis = opt.destroyTimeoutMillis || 5000;\n        this.idleTimeoutMillis = opt.idleTimeoutMillis || 30000;\n        this.reapIntervalMillis = opt.reapIntervalMillis || 1000;\n        this.createRetryIntervalMillis = opt.createRetryIntervalMillis || 200;\n        this.propagateCreateError = !!opt.propagateCreateError;\n        this.min = opt.min;\n        this.max = opt.max;\n        // All the resources, which are either already acquired or which are\n        // considered for being passed to acquire in async validation phase.\n        this.used = [];\n        // All the resources, which are either just created and free or returned\n        // back to pool after using.\n        this.free = [];\n        this.pendingCreates = [];\n        this.pendingAcquires = [];\n        this.pendingDestroys = [];\n        // When acquire is pending, but also still in validation phase\n        this.pendingValidations = [];\n        this.destroyed = false;\n        this.interval = null;\n        this.eventId = 1;\n    }\n    numUsed() {\n        return this.used.length;\n    }\n    numFree() {\n        return this.free.length;\n    }\n    numPendingAcquires() {\n        return this.pendingAcquires.length;\n    }\n    numPendingValidations() {\n        return this.pendingValidations.length;\n    }\n    numPendingCreates() {\n        return this.pendingCreates.length;\n    }\n    acquire() {\n        const eventId = this.eventId++;\n        this._executeEventHandlers(\"acquireRequest\", eventId);\n        const pendingAcquire = new PendingOperation_1.PendingOperation(this.acquireTimeoutMillis);\n        this.pendingAcquires.push(pendingAcquire);\n        // If the acquire fails for whatever reason\n        // remove it from the pending queue.\n        pendingAcquire.promise = pendingAcquire.promise.then((resource)=>{\n            this._executeEventHandlers(\"acquireSuccess\", eventId, resource);\n            return resource;\n        }).catch((err)=>{\n            this._executeEventHandlers(\"acquireFail\", eventId, err);\n            remove(this.pendingAcquires, pendingAcquire);\n            return Promise.reject(err);\n        });\n        this._tryAcquireOrCreate();\n        return pendingAcquire;\n    }\n    release(resource) {\n        this._executeEventHandlers(\"release\", resource);\n        for(let i = 0, l = this.used.length; i < l; ++i){\n            const used = this.used[i];\n            if (used.resource === resource) {\n                this.used.splice(i, 1);\n                this.free.push(used.resolve());\n                this._tryAcquireOrCreate();\n                return true;\n            }\n        }\n        return false;\n    }\n    isEmpty() {\n        return [\n            this.numFree(),\n            this.numUsed(),\n            this.numPendingAcquires(),\n            this.numPendingValidations(),\n            this.numPendingCreates()\n        ].reduce((total, value)=>total + value) === 0;\n    }\n    /**\r\n     * Reaping cycle.\r\n     */ check() {\n        const timestamp = utils_1.now();\n        const newFree = [];\n        const minKeep = this.min - this.used.length;\n        const maxDestroy = this.free.length - minKeep;\n        let numDestroyed = 0;\n        this.free.forEach((free)=>{\n            if (utils_1.duration(timestamp, free.timestamp) >= this.idleTimeoutMillis && numDestroyed < maxDestroy) {\n                numDestroyed++;\n                this._destroy(free.resource);\n            } else {\n                newFree.push(free);\n            }\n        });\n        this.free = newFree;\n        // Pool is completely empty, stop reaping.\n        // Next .acquire will start reaping interval again.\n        if (this.isEmpty()) {\n            this._stopReaping();\n        }\n    }\n    destroy() {\n        const eventId = this.eventId++;\n        this._executeEventHandlers(\"poolDestroyRequest\", eventId);\n        this._stopReaping();\n        this.destroyed = true;\n        // First wait for all the pending creates get ready.\n        return utils_1.reflect(Promise.all(this.pendingCreates.map((create)=>utils_1.reflect(create.promise))).then(()=>{\n            // eslint-disable-next-line\n            return new Promise((resolve, reject)=>{\n                // poll every 100ms and wait that all validations are ready\n                if (this.numPendingValidations() === 0) {\n                    resolve();\n                    return;\n                }\n                const interval = setInterval(()=>{\n                    if (this.numPendingValidations() === 0) {\n                        timers_1.clearInterval(interval);\n                        resolve();\n                    }\n                }, 100);\n            });\n        }).then(()=>{\n            // Wait for all the used resources to be freed.\n            return Promise.all(this.used.map((used)=>utils_1.reflect(used.promise)));\n        }).then(()=>{\n            // Abort all pending acquires.\n            return Promise.all(this.pendingAcquires.map((acquire)=>{\n                acquire.abort();\n                return utils_1.reflect(acquire.promise);\n            }));\n        }).then(()=>{\n            // Now we can destroy all the freed resources.\n            return Promise.all(this.free.map((free)=>utils_1.reflect(this._destroy(free.resource))));\n        }).then(()=>{\n            // Also wait rest of the pending destroys to finish\n            return Promise.all(this.pendingDestroys.map((pd)=>pd.promise));\n        }).then(()=>{\n            this.free = [];\n            this.pendingAcquires = [];\n        })).then((res)=>{\n            this._executeEventHandlers(\"poolDestroySuccess\", eventId);\n            this.emitter.removeAllListeners();\n            return res;\n        });\n    }\n    on(event, listener) {\n        this.emitter.on(event, listener);\n    }\n    removeListener(event, listener) {\n        this.emitter.removeListener(event, listener);\n    }\n    removeAllListeners(event) {\n        this.emitter.removeAllListeners(event);\n    }\n    /**\r\n     * The most important method that is called always when resources\r\n     * are created / destroyed / acquired / released. In other words\r\n     * every time when resources are moved from used to free or vice\r\n     * versa.\r\n     *\r\n     * Either assigns free resources to pendingAcquires or creates new\r\n     * resources if there is room for it in the pool.\r\n     */ _tryAcquireOrCreate() {\n        if (this.destroyed) {\n            return;\n        }\n        if (this._hasFreeResources()) {\n            this._doAcquire();\n        } else if (this._shouldCreateMoreResources()) {\n            this._doCreate();\n        }\n    }\n    _hasFreeResources() {\n        return this.free.length > 0;\n    }\n    _doAcquire() {\n        // Acquire as many pending acquires as possible concurrently\n        while(this._canAcquire()){\n            // To allow async validation, we actually need to move free resource\n            // and pending acquire temporary from their respective arrays and depending\n            // on validation result to either leave the free resource to used resources array\n            // or destroy the free resource if validation did fail.\n            const pendingAcquire = this.pendingAcquires.shift();\n            const free = this.free.pop();\n            if (free === undefined || pendingAcquire === undefined) {\n                const errMessage = \"this.free was empty while trying to acquire resource\";\n                this.log(`Tarn: ${errMessage}`, \"warn\");\n                throw new Error(`Internal error, should never happen. ${errMessage}`);\n            }\n            // Make sure that pendingAcquire that is being validated is not lost and\n            // can be freed when pool is destroyed.\n            this.pendingValidations.push(pendingAcquire);\n            // Must be added here pre-emptively to prevent logic that decides\n            // if new resources are created will keep on working correctly.\n            this.used.push(free);\n            // if acquire fails also pending validation, must be aborted so that pre reserved\n            // resource will be returned to free resources immediately\n            const abortAbleValidation = new PendingOperation_1.PendingOperation(this.acquireTimeoutMillis);\n            // eslint-disable-next-line\n            pendingAcquire.promise.catch((err)=>{\n                abortAbleValidation.abort();\n            });\n            abortAbleValidation.promise.catch((err)=>{\n                // There's nothing we can do here but log the error. This would otherwise\n                // leak out as an unhandled exception.\n                this.log(\"Tarn: resource validator threw an exception \" + err.stack, \"warn\");\n                return false;\n            }).then((validationSuccess)=>{\n                try {\n                    if (validationSuccess && !pendingAcquire.isRejected) {\n                        // At least one active resource exist, start reaping.\n                        this._startReaping();\n                        pendingAcquire.resolve(free.resource);\n                    } else {\n                        remove(this.used, free);\n                        // Only destroy the resource if the validation has failed\n                        if (!validationSuccess) {\n                            this._destroy(free.resource);\n                            // Since we destroyed an invalid resource and were not able to fulfill\n                            // all the pending acquires, we may need to create new ones or at\n                            // least run this acquire loop again to verify it. But not immediately\n                            // to prevent starving event loop.\n                            setTimeout(()=>{\n                                this._tryAcquireOrCreate();\n                            }, 0);\n                        } else {\n                            this.free.push(free);\n                        }\n                        // is acquire was canceled, failed or timed out already\n                        // no need to return it to pending queries\n                        if (!pendingAcquire.isRejected) {\n                            this.pendingAcquires.unshift(pendingAcquire);\n                        }\n                    }\n                } finally{\n                    remove(this.pendingValidations, pendingAcquire);\n                }\n            });\n            // try to validate\n            this._validateResource(free.resource).then((validationSuccess)=>{\n                abortAbleValidation.resolve(validationSuccess);\n            }).catch((err)=>{\n                abortAbleValidation.reject(err);\n            });\n        }\n    }\n    _canAcquire() {\n        return this.free.length > 0 && this.pendingAcquires.length > 0;\n    }\n    _validateResource(resource) {\n        try {\n            return Promise.resolve(this.validate(resource));\n        } catch (err) {\n            // prevent leaking of sync exception\n            return Promise.reject(err);\n        }\n    }\n    _shouldCreateMoreResources() {\n        return this.used.length + this.pendingCreates.length < this.max && this.pendingCreates.length < this.pendingAcquires.length;\n    }\n    _doCreate() {\n        const pendingAcquiresBeforeCreate = this.pendingAcquires.slice();\n        const pendingCreate = this._create();\n        pendingCreate.promise.then(()=>{\n            // Not returned on purpose.\n            this._tryAcquireOrCreate();\n            return null;\n        }).catch((err)=>{\n            if (this.propagateCreateError && this.pendingAcquires.length !== 0) {\n                // If propagateCreateError is true, we don't retry the create\n                // but reject the first pending acquire immediately. Intentionally\n                // use `this.pendingAcquires` instead of `pendingAcquiresBeforeCreate`\n                // in case some acquires in pendingAcquiresBeforeCreate have already\n                // been resolved.\n                this.pendingAcquires[0].reject(err);\n            }\n            // Save the create error to all pending acquires so that we can use it\n            // as the error to reject the acquire if it times out.\n            pendingAcquiresBeforeCreate.forEach((pendingAcquire)=>{\n                pendingAcquire.possibleTimeoutCause = err;\n            });\n            // Not returned on purpose.\n            utils_1.delay(this.createRetryIntervalMillis).then(()=>this._tryAcquireOrCreate());\n        });\n    }\n    _create() {\n        const eventId = this.eventId++;\n        this._executeEventHandlers(\"createRequest\", eventId);\n        const pendingCreate = new PendingOperation_1.PendingOperation(this.createTimeoutMillis);\n        // If an error occurs (likely a create timeout) remove this creation from\n        // the list of pending creations so we try to create a new one.\n        pendingCreate.promise = pendingCreate.promise.catch((err)=>{\n            if (remove(this.pendingCreates, pendingCreate)) {\n                // TODO: figure out more consistent way for different error handlers in next rewrite\n                this._executeEventHandlers(\"createFail\", eventId, err);\n            }\n            throw err;\n        });\n        this.pendingCreates.push(pendingCreate);\n        callbackOrPromise(this.creator).then((resource)=>{\n            if (pendingCreate.isRejected) {\n                this.destroyer(resource);\n                return null;\n            }\n            remove(this.pendingCreates, pendingCreate);\n            this.free.push(new Resource_1.Resource(resource));\n            // Not returned on purpose.\n            pendingCreate.resolve(resource);\n            this._executeEventHandlers(\"createSuccess\", eventId, resource);\n            return null;\n        }).catch((err)=>{\n            if (pendingCreate.isRejected) {\n                return null;\n            }\n            if (remove(this.pendingCreates, pendingCreate)) {\n                this._executeEventHandlers(\"createFail\", eventId, err);\n            }\n            // Not returned on purpose.\n            pendingCreate.reject(err);\n            return null;\n        });\n        return pendingCreate;\n    }\n    _destroy(resource) {\n        const eventId = this.eventId++;\n        this._executeEventHandlers(\"destroyRequest\", eventId, resource);\n        // this.destroyer can be both synchronous and asynchronous.\n        // so we wrap it to promise to get all exceptions through same pipeline\n        const pendingDestroy = new PendingOperation_1.PendingOperation(this.destroyTimeoutMillis);\n        const retVal = Promise.resolve().then(()=>this.destroyer(resource));\n        retVal.then(()=>{\n            pendingDestroy.resolve(resource);\n        }).catch((err)=>{\n            pendingDestroy.reject(err);\n        });\n        this.pendingDestroys.push(pendingDestroy);\n        // In case of an error there's nothing we can do here but log it.\n        return pendingDestroy.promise.then((res)=>{\n            this._executeEventHandlers(\"destroySuccess\", eventId, resource);\n            return res;\n        }).catch((err)=>this._logDestroyerError(eventId, resource, err)).then((res)=>{\n            const index = this.pendingDestroys.findIndex((pd)=>pd === pendingDestroy);\n            this.pendingDestroys.splice(index, 1);\n            return res;\n        });\n    }\n    _logDestroyerError(eventId, resource, err) {\n        this._executeEventHandlers(\"destroyFail\", eventId, resource, err);\n        this.log(\"Tarn: resource destroyer threw an exception \" + err.stack, \"warn\");\n    }\n    _startReaping() {\n        if (!this.interval) {\n            this._executeEventHandlers(\"startReaping\");\n            this.interval = setInterval(()=>this.check(), this.reapIntervalMillis);\n        }\n    }\n    _stopReaping() {\n        if (this.interval !== null) {\n            this._executeEventHandlers(\"stopReaping\");\n            timers_1.clearInterval(this.interval);\n        }\n        this.interval = null;\n    }\n    _executeEventHandlers(eventName, ...args) {\n        const listeners = this.emitter.listeners(eventName);\n        // just calling .emit() would stop running rest of the listeners if one them fails\n        listeners.forEach((listener)=>{\n            try {\n                listener(...args);\n            } catch (err) {\n                // There's nothing we can do here but log the error. This would otherwise\n                // leak out as an unhandled exception.\n                this.log(`Tarn: event handler \"${eventName}\" threw an exception ${err.stack}`, \"warn\");\n            }\n        });\n    }\n}\nexports.Pool = Pool;\nfunction remove(arr, item) {\n    const idx = arr.indexOf(item);\n    if (idx === -1) {\n        return false;\n    } else {\n        arr.splice(idx, 1);\n        return true;\n    }\n}\nfunction callbackOrPromise(func) {\n    return new Promise((resolve, reject)=>{\n        const callback = (err, resource)=>{\n            if (err) {\n                reject(err);\n            } else {\n                resolve(resource);\n            }\n        };\n        utils_1.tryPromise(()=>func(callback)).then((res)=>{\n            // If the result is falsy, we assume that the callback will\n            // be called instead of interpreting the falsy value as a\n            // result value.\n            if (res) {\n                resolve(res);\n            }\n        }).catch((err)=>{\n            reject(err);\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tarn/dist/Pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tarn/dist/PromiseInspection.js":
/*!*****************************************************!*\
  !*** ./node_modules/tarn/dist/PromiseInspection.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass PromiseInspection {\n    constructor(args){\n        this._value = args.value;\n        this._error = args.error;\n    }\n    value() {\n        return this._value;\n    }\n    reason() {\n        return this._error;\n    }\n    isRejected() {\n        return !!this._error;\n    }\n    isFulfilled() {\n        return !!this._value;\n    }\n}\nexports.PromiseInspection = PromiseInspection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L1Byb21pc2VJbnNwZWN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DO0lBQ0ZDLFlBQVlDLElBQUksQ0FBRTtRQUNkLElBQUksQ0FBQ0MsTUFBTSxHQUFHRCxLQUFLSCxLQUFLO1FBQ3hCLElBQUksQ0FBQ0ssTUFBTSxHQUFHRixLQUFLRyxLQUFLO0lBQzVCO0lBQ0FOLFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQ0ksTUFBTTtJQUN0QjtJQUNBRyxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUNGLE1BQU07SUFDdEI7SUFDQUcsYUFBYTtRQUNULE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQ0gsTUFBTTtJQUN4QjtJQUNBSSxjQUFjO1FBQ1YsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDTCxNQUFNO0lBQ3hCO0FBQ0o7QUFDQUwseUJBQXlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L1Byb21pc2VJbnNwZWN0aW9uLmpzPzIyZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY2xhc3MgUHJvbWlzZUluc3BlY3Rpb24ge1xyXG4gICAgY29uc3RydWN0b3IoYXJncykge1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gYXJncy52YWx1ZTtcclxuICAgICAgICB0aGlzLl9lcnJvciA9IGFyZ3MuZXJyb3I7XHJcbiAgICB9XHJcbiAgICB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZWFzb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xyXG4gICAgfVxyXG4gICAgaXNSZWplY3RlZCgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLl9lcnJvcjtcclxuICAgIH1cclxuICAgIGlzRnVsZmlsbGVkKCkge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUHJvbWlzZUluc3BlY3Rpb24gPSBQcm9taXNlSW5zcGVjdGlvbjtcclxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHJvbWlzZUluc3BlY3Rpb24iLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJfdmFsdWUiLCJfZXJyb3IiLCJlcnJvciIsInJlYXNvbiIsImlzUmVqZWN0ZWQiLCJpc0Z1bGZpbGxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tarn/dist/PromiseInspection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tarn/dist/Resource.js":
/*!********************************************!*\
  !*** ./node_modules/tarn/dist/Resource.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/tarn/dist/utils.js\");\nclass Resource {\n    constructor(resource){\n        this.resource = resource;\n        this.resource = resource;\n        this.timestamp = utils_1.now();\n        this.deferred = utils_1.defer();\n    }\n    get promise() {\n        return this.deferred.promise;\n    }\n    resolve() {\n        this.deferred.resolve(undefined);\n        return new Resource(this.resource);\n    }\n}\nexports.Resource = Resource;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L1Jlc291cmNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVVDLG1CQUFPQSxDQUFDLHdEQUFTO0FBQ2pDLE1BQU1DO0lBQ0ZDLFlBQVlDLFFBQVEsQ0FBRTtRQUNsQixJQUFJLENBQUNBLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQSxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsU0FBUyxHQUFHTCxRQUFRTSxHQUFHO1FBQzVCLElBQUksQ0FBQ0MsUUFBUSxHQUFHUCxRQUFRUSxLQUFLO0lBQ2pDO0lBQ0EsSUFBSUMsVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDRixRQUFRLENBQUNFLE9BQU87SUFDaEM7SUFDQUMsVUFBVTtRQUNOLElBQUksQ0FBQ0gsUUFBUSxDQUFDRyxPQUFPLENBQUNDO1FBQ3RCLE9BQU8sSUFBSVQsU0FBUyxJQUFJLENBQUNFLFFBQVE7SUFDckM7QUFDSjtBQUNBTixnQkFBZ0IsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy90YXJuL2Rpc3QvUmVzb3VyY2UuanM/OGU4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XHJcbmNsYXNzIFJlc291cmNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHJlc291cmNlKSB7XHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xyXG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTtcclxuICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IHV0aWxzXzEubm93KCk7XHJcbiAgICAgICAgdGhpcy5kZWZlcnJlZCA9IHV0aWxzXzEuZGVmZXIoKTtcclxuICAgIH1cclxuICAgIGdldCBwcm9taXNlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlZmVycmVkLnByb21pc2U7XHJcbiAgICB9XHJcbiAgICByZXNvbHZlKCkge1xyXG4gICAgICAgIHRoaXMuZGVmZXJyZWQucmVzb2x2ZSh1bmRlZmluZWQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2UodGhpcy5yZXNvdXJjZSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5SZXNvdXJjZSA9IFJlc291cmNlO1xyXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1dGlsc18xIiwicmVxdWlyZSIsIlJlc291cmNlIiwiY29uc3RydWN0b3IiLCJyZXNvdXJjZSIsInRpbWVzdGFtcCIsIm5vdyIsImRlZmVycmVkIiwiZGVmZXIiLCJwcm9taXNlIiwicmVzb2x2ZSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tarn/dist/Resource.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tarn/dist/TimeoutError.js":
/*!************************************************!*\
  !*** ./node_modules/tarn/dist/TimeoutError.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nclass TimeoutError extends Error {\n}\nexports.TimeoutError = TimeoutError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L1RpbWVvdXRFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxxQkFBcUJDO0FBQzNCO0FBQ0FILG9CQUFvQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL3Rhcm4vZGlzdC9UaW1lb3V0RXJyb3IuanM/Nzg1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbn1cclxuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3I7XHJcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlRpbWVvdXRFcnJvciIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tarn/dist/TimeoutError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tarn/dist/tarn.js":
/*!****************************************!*\
  !*** ./node_modules/tarn/dist/tarn.js ***!
  \****************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst Pool_1 = __webpack_require__(/*! ./Pool */ \"(rsc)/./node_modules/tarn/dist/Pool.js\");\nexports.Pool = Pool_1.Pool;\nconst TimeoutError_1 = __webpack_require__(/*! ./TimeoutError */ \"(rsc)/./node_modules/tarn/dist/TimeoutError.js\");\nexports.TimeoutError = TimeoutError_1.TimeoutError;\nmodule.exports = {\n    Pool: Pool_1.Pool,\n    TimeoutError: TimeoutError_1.TimeoutError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L3Rhcm4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsU0FBU0MsbUJBQU9BLENBQUMsc0RBQVE7QUFDL0JILFlBQVksR0FBR0UsT0FBT0UsSUFBSTtBQUMxQixNQUFNQyxpQkFBaUJGLG1CQUFPQSxDQUFDLHNFQUFnQjtBQUMvQ0gsb0JBQW9CLEdBQUdLLGVBQWVDLFlBQVk7QUFDbERDLE9BQU9QLE9BQU8sR0FBRztJQUNiSSxNQUFNRixPQUFPRSxJQUFJO0lBQ2pCRSxjQUFjRCxlQUFlQyxZQUFZO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L3Rhcm4uanM/YmY5NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBQb29sXzEgPSByZXF1aXJlKFwiLi9Qb29sXCIpO1xyXG5leHBvcnRzLlBvb2wgPSBQb29sXzEuUG9vbDtcclxuY29uc3QgVGltZW91dEVycm9yXzEgPSByZXF1aXJlKFwiLi9UaW1lb3V0RXJyb3JcIik7XHJcbmV4cG9ydHMuVGltZW91dEVycm9yID0gVGltZW91dEVycm9yXzEuVGltZW91dEVycm9yO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIFBvb2w6IFBvb2xfMS5Qb29sLFxyXG4gICAgVGltZW91dEVycm9yOiBUaW1lb3V0RXJyb3JfMS5UaW1lb3V0RXJyb3JcclxufTtcclxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUG9vbF8xIiwicmVxdWlyZSIsIlBvb2wiLCJUaW1lb3V0RXJyb3JfMSIsIlRpbWVvdXRFcnJvciIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tarn/dist/tarn.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/tarn/dist/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/tarn/dist/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst PromiseInspection_1 = __webpack_require__(/*! ./PromiseInspection */ \"(rsc)/./node_modules/tarn/dist/PromiseInspection.js\");\nfunction defer() {\n    let resolve = null;\n    let reject = null;\n    const promise = new Promise((resolver, rejecter)=>{\n        resolve = resolver;\n        reject = rejecter;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\nexports.defer = defer;\nfunction now() {\n    return Date.now();\n}\nexports.now = now;\nfunction duration(t1, t2) {\n    return Math.abs(t2 - t1);\n}\nexports.duration = duration;\nfunction checkOptionalTime(time) {\n    if (typeof time === \"undefined\") {\n        return true;\n    }\n    return checkRequiredTime(time);\n}\nexports.checkOptionalTime = checkOptionalTime;\nfunction checkRequiredTime(time) {\n    return typeof time === \"number\" && time === Math.round(time) && time > 0;\n}\nexports.checkRequiredTime = checkRequiredTime;\nfunction delay(millis) {\n    return new Promise((resolve)=>setTimeout(resolve, millis));\n}\nexports.delay = delay;\nfunction reflect(promise) {\n    return promise.then((value)=>{\n        return new PromiseInspection_1.PromiseInspection({\n            value\n        });\n    }).catch((error)=>{\n        return new PromiseInspection_1.PromiseInspection({\n            error\n        });\n    });\n}\nexports.reflect = reflect;\nfunction tryPromise(cb) {\n    try {\n        const result = cb();\n        return Promise.resolve(result);\n    } catch (err) {\n        return Promise.reject(err);\n    }\n}\nexports.tryPromise = tryPromise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdGFybi9kaXN0L3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLHNCQUFzQkMsbUJBQU9BLENBQUMsZ0ZBQXFCO0FBQ3pELFNBQVNDO0lBQ0wsSUFBSUMsVUFBVTtJQUNkLElBQUlDLFNBQVM7SUFDYixNQUFNQyxVQUFVLElBQUlDLFFBQVEsQ0FBQ0MsVUFBVUM7UUFDbkNMLFVBQVVJO1FBQ1ZILFNBQVNJO0lBQ2I7SUFDQSxPQUFPO1FBQ0hIO1FBQ0FGO1FBQ0FDO0lBQ0o7QUFDSjtBQUNBTixhQUFhLEdBQUdJO0FBQ2hCLFNBQVNPO0lBQ0wsT0FBT0MsS0FBS0QsR0FBRztBQUNuQjtBQUNBWCxXQUFXLEdBQUdXO0FBQ2QsU0FBU0UsU0FBU0MsRUFBRSxFQUFFQyxFQUFFO0lBQ3BCLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ0YsS0FBS0Q7QUFDekI7QUFDQWQsZ0JBQWdCLEdBQUdhO0FBQ25CLFNBQVNLLGtCQUFrQkMsSUFBSTtJQUMzQixJQUFJLE9BQU9BLFNBQVMsYUFBYTtRQUM3QixPQUFPO0lBQ1g7SUFDQSxPQUFPQyxrQkFBa0JEO0FBQzdCO0FBQ0FuQix5QkFBeUIsR0FBR2tCO0FBQzVCLFNBQVNFLGtCQUFrQkQsSUFBSTtJQUMzQixPQUFPLE9BQU9BLFNBQVMsWUFBWUEsU0FBU0gsS0FBS0ssS0FBSyxDQUFDRixTQUFTQSxPQUFPO0FBQzNFO0FBQ0FuQix5QkFBeUIsR0FBR29CO0FBQzVCLFNBQVNFLE1BQU1DLE1BQU07SUFDakIsT0FBTyxJQUFJZixRQUFRSCxDQUFBQSxVQUFXbUIsV0FBV25CLFNBQVNrQjtBQUN0RDtBQUNBdkIsYUFBYSxHQUFHc0I7QUFDaEIsU0FBU0csUUFBUWxCLE9BQU87SUFDcEIsT0FBT0EsUUFDRm1CLElBQUksQ0FBQ3pCLENBQUFBO1FBQ04sT0FBTyxJQUFJQyxvQkFBb0J5QixpQkFBaUIsQ0FBQztZQUFFMUI7UUFBTTtJQUM3RCxHQUNLMkIsS0FBSyxDQUFDQyxDQUFBQTtRQUNQLE9BQU8sSUFBSTNCLG9CQUFvQnlCLGlCQUFpQixDQUFDO1lBQUVFO1FBQU07SUFDN0Q7QUFDSjtBQUNBN0IsZUFBZSxHQUFHeUI7QUFDbEIsU0FBU0ssV0FBV0MsRUFBRTtJQUNsQixJQUFJO1FBQ0EsTUFBTUMsU0FBU0Q7UUFDZixPQUFPdkIsUUFBUUgsT0FBTyxDQUFDMkI7SUFDM0IsRUFDQSxPQUFPQyxLQUFLO1FBQ1IsT0FBT3pCLFFBQVFGLE1BQU0sQ0FBQzJCO0lBQzFCO0FBQ0o7QUFDQWpDLGtCQUFrQixHQUFHOEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy90YXJuL2Rpc3QvdXRpbHMuanM/NWQzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBQcm9taXNlSW5zcGVjdGlvbl8xID0gcmVxdWlyZShcIi4vUHJvbWlzZUluc3BlY3Rpb25cIik7XHJcbmZ1bmN0aW9uIGRlZmVyKCkge1xyXG4gICAgbGV0IHJlc29sdmUgPSBudWxsO1xyXG4gICAgbGV0IHJlamVjdCA9IG51bGw7XHJcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmVyLCByZWplY3RlcikgPT4ge1xyXG4gICAgICAgIHJlc29sdmUgPSByZXNvbHZlcjtcclxuICAgICAgICByZWplY3QgPSByZWplY3RlcjtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwcm9taXNlLFxyXG4gICAgICAgIHJlc29sdmUsXHJcbiAgICAgICAgcmVqZWN0XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydHMuZGVmZXIgPSBkZWZlcjtcclxuZnVuY3Rpb24gbm93KCkge1xyXG4gICAgcmV0dXJuIERhdGUubm93KCk7XHJcbn1cclxuZXhwb3J0cy5ub3cgPSBub3c7XHJcbmZ1bmN0aW9uIGR1cmF0aW9uKHQxLCB0Mikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKHQyIC0gdDEpO1xyXG59XHJcbmV4cG9ydHMuZHVyYXRpb24gPSBkdXJhdGlvbjtcclxuZnVuY3Rpb24gY2hlY2tPcHRpb25hbFRpbWUodGltZSkge1xyXG4gICAgaWYgKHR5cGVvZiB0aW1lID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoZWNrUmVxdWlyZWRUaW1lKHRpbWUpO1xyXG59XHJcbmV4cG9ydHMuY2hlY2tPcHRpb25hbFRpbWUgPSBjaGVja09wdGlvbmFsVGltZTtcclxuZnVuY3Rpb24gY2hlY2tSZXF1aXJlZFRpbWUodGltZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB0aW1lID09PSAnbnVtYmVyJyAmJiB0aW1lID09PSBNYXRoLnJvdW5kKHRpbWUpICYmIHRpbWUgPiAwO1xyXG59XHJcbmV4cG9ydHMuY2hlY2tSZXF1aXJlZFRpbWUgPSBjaGVja1JlcXVpcmVkVGltZTtcclxuZnVuY3Rpb24gZGVsYXkobWlsbGlzKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1pbGxpcykpO1xyXG59XHJcbmV4cG9ydHMuZGVsYXkgPSBkZWxheTtcclxuZnVuY3Rpb24gcmVmbGVjdChwcm9taXNlKSB7XHJcbiAgICByZXR1cm4gcHJvbWlzZVxyXG4gICAgICAgIC50aGVuKHZhbHVlID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbnNwZWN0aW9uXzEuUHJvbWlzZUluc3BlY3Rpb24oeyB2YWx1ZSB9KTtcclxuICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbnNwZWN0aW9uXzEuUHJvbWlzZUluc3BlY3Rpb24oeyBlcnJvciB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMucmVmbGVjdCA9IHJlZmxlY3Q7XHJcbmZ1bmN0aW9uIHRyeVByb21pc2UoY2IpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY2IoKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy50cnlQcm9taXNlID0gdHJ5UHJvbWlzZTtcclxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHJvbWlzZUluc3BlY3Rpb25fMSIsInJlcXVpcmUiLCJkZWZlciIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmVyIiwicmVqZWN0ZXIiLCJub3ciLCJEYXRlIiwiZHVyYXRpb24iLCJ0MSIsInQyIiwiTWF0aCIsImFicyIsImNoZWNrT3B0aW9uYWxUaW1lIiwidGltZSIsImNoZWNrUmVxdWlyZWRUaW1lIiwicm91bmQiLCJkZWxheSIsIm1pbGxpcyIsInNldFRpbWVvdXQiLCJyZWZsZWN0IiwidGhlbiIsIlByb21pc2VJbnNwZWN0aW9uIiwiY2F0Y2giLCJlcnJvciIsInRyeVByb21pc2UiLCJjYiIsInJlc3VsdCIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tarn/dist/utils.js\n");

/***/ })

};
;