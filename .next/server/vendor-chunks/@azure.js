"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@azure";
exports.ids = ["vendor-chunks/@azure"];
exports.modules = {

/***/ "(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortController: () => (/* binding */ AbortController),\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n/* harmony import */ var _AbortSignal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortSignal */ \"(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */ class AbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */ class AbortController {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    constructor(parentSignals){\n        this._signal = new _AbortSignal__WEBPACK_IMPORTED_MODULE_0__.AbortSignal();\n        if (!parentSignals) {\n            return;\n        }\n        // coerce parentSignals into an array\n        if (!Array.isArray(parentSignals)) {\n            // eslint-disable-next-line prefer-rest-params\n            parentSignals = arguments;\n        }\n        for (const parentSignal of parentSignals){\n            // if the parent signal has already had abort() called,\n            // then call abort on this signal as well.\n            if (parentSignal.aborted) {\n                this.abort();\n            } else {\n                // when the parent signal aborts, this signal should as well.\n                parentSignal.addEventListener(\"abort\", ()=>{\n                    this.abort();\n                });\n            }\n        }\n    }\n    /**\n     * The AbortSignal associated with this controller that will signal aborted\n     * when the abort method is called on this controller.\n     *\n     * @readonly\n     */ get signal() {\n        return this._signal;\n    }\n    /**\n     * Signal that any operations passed this controller's associated abort signal\n     * to cancel any remaining work and throw an `AbortError`.\n     */ abort() {\n        (0,_AbortSignal__WEBPACK_IMPORTED_MODULE_0__.abortSignal)(this._signal);\n    }\n    /**\n     * Creates a new AbortSignal instance that will abort after the provided ms.\n     * @param ms - Elapsed time in milliseconds to trigger an abort.\n     */ static timeout(ms) {\n        const signal = new _AbortSignal__WEBPACK_IMPORTED_MODULE_0__.AbortSignal();\n        const timer = setTimeout(_AbortSignal__WEBPACK_IMPORTED_MODULE_0__.abortSignal, ms, signal);\n        // Prevent the active Timer from keeping the Node.js event loop active.\n        if (typeof timer.unref === \"function\") {\n            timer.unref();\n        }\n        return signal;\n    }\n} //# sourceMappingURL=AbortController.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC1lc20vc3JjL0Fib3J0Q29udHJvbGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ3VCO0FBQ3pEOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNNLE1BQU1FLG1CQUFtQkM7SUFDNUJDLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEI7QUFDSjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQ0MsR0FDTSxNQUFNQztJQUNULDZFQUE2RTtJQUM3RUgsWUFBWUksYUFBYSxDQUFFO1FBQ3ZCLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlULHFEQUFXQTtRQUM5QixJQUFJLENBQUNRLGVBQWU7WUFDaEI7UUFDSjtRQUNBLHFDQUFxQztRQUNyQyxJQUFJLENBQUNFLE1BQU1DLE9BQU8sQ0FBQ0gsZ0JBQWdCO1lBQy9CLDhDQUE4QztZQUM5Q0EsZ0JBQWdCSTtRQUNwQjtRQUNBLEtBQUssTUFBTUMsZ0JBQWdCTCxjQUFlO1lBQ3RDLHVEQUF1RDtZQUN2RCwwQ0FBMEM7WUFDMUMsSUFBSUssYUFBYUMsT0FBTyxFQUFFO2dCQUN0QixJQUFJLENBQUNDLEtBQUs7WUFDZCxPQUNLO2dCQUNELDZEQUE2RDtnQkFDN0RGLGFBQWFHLGdCQUFnQixDQUFDLFNBQVM7b0JBQ25DLElBQUksQ0FBQ0QsS0FBSztnQkFDZDtZQUNKO1FBQ0o7SUFDSjtJQUNBOzs7OztLQUtDLEdBQ0QsSUFBSUUsU0FBUztRQUNULE9BQU8sSUFBSSxDQUFDUixPQUFPO0lBQ3ZCO0lBQ0E7OztLQUdDLEdBQ0RNLFFBQVE7UUFDSmQseURBQVdBLENBQUMsSUFBSSxDQUFDUSxPQUFPO0lBQzVCO0lBQ0E7OztLQUdDLEdBQ0QsT0FBT1MsUUFBUUMsRUFBRSxFQUFFO1FBQ2YsTUFBTUYsU0FBUyxJQUFJakIscURBQVdBO1FBQzlCLE1BQU1vQixRQUFRQyxXQUFXcEIscURBQVdBLEVBQUVrQixJQUFJRjtRQUMxQyx1RUFBdUU7UUFDdkUsSUFBSSxPQUFPRyxNQUFNRSxLQUFLLEtBQUssWUFBWTtZQUNuQ0YsTUFBTUUsS0FBSztRQUNmO1FBQ0EsT0FBT0w7SUFDWDtBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC1lc20vc3JjL0Fib3J0Q29udHJvbGxlci5qcz9lNGQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQWJvcnRTaWduYWwsIGFib3J0U2lnbmFsIH0gZnJvbSBcIi4vQWJvcnRTaWduYWxcIjtcbi8qKlxuICogVGhpcyBlcnJvciBpcyB0aHJvd24gd2hlbiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uIGhhcyBiZWVuIGFib3J0ZWQuXG4gKiBDaGVjayBmb3IgdGhpcyBlcnJvciBieSB0ZXN0aW5nIHRoZSBgbmFtZWAgdGhhdCB0aGUgbmFtZSBwcm9wZXJ0eSBvZiB0aGVcbiAqIGVycm9yIG1hdGNoZXMgYFwiQWJvcnRFcnJvclwiYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gKiBjb250cm9sbGVyLmFib3J0KCk7XG4gKiB0cnkge1xuICogICBkb0FzeW5jV29yayhjb250cm9sbGVyLnNpZ25hbClcbiAqIH0gY2F0Y2ggKGUpIHtcbiAqICAgaWYgKGUubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gKiAgICAgLy8gaGFuZGxlIGFib3J0IGVycm9yIGhlcmUuXG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICB9XG59XG4vKipcbiAqIEFuIEFib3J0Q29udHJvbGxlciBwcm92aWRlcyBhbiBBYm9ydFNpZ25hbCBhbmQgdGhlIGFzc29jaWF0ZWQgY29udHJvbHMgdG8gc2lnbmFsXG4gKiB0aGF0IGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24gc2hvdWxkIGJlIGFib3J0ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIEFib3J0IGFuIG9wZXJhdGlvbiB3aGVuIGFub3RoZXIgZXZlbnQgZmlyZXNcbiAqIGBgYHRzXG4gKiBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogY29uc3Qgc2lnbmFsID0gY29udHJvbGxlci5zaWduYWw7XG4gKiBkb0FzeW5jV29yayhzaWduYWwpO1xuICogYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gY29udHJvbGxlci5hYm9ydCgpKTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBTaGFyZSBhYm9ydGVyIGNyb3NzIG11bHRpcGxlIG9wZXJhdGlvbnMgaW4gMzBzXG4gKiBgYGB0c1xuICogLy8gVXBsb2FkIHRoZSBzYW1lIGRhdGEgdG8gMiBkaWZmZXJlbnQgZGF0YSBjZW50ZXJzIGF0IHRoZSBzYW1lIHRpbWUsXG4gKiAvLyBhYm9ydCBhbm90aGVyIHdoZW4gYW55IG9mIHRoZW0gaXMgZmluaXNoZWRcbiAqIGNvbnN0IGNvbnRyb2xsZXIgPSBBYm9ydENvbnRyb2xsZXIud2l0aFRpbWVvdXQoMzAgKiAxMDAwKTtcbiAqIGRvQXN5bmNXb3JrKGNvbnRyb2xsZXIuc2lnbmFsKS50aGVuKGNvbnRyb2xsZXIuYWJvcnQpO1xuICogZG9Bc3luY1dvcmsoY29udHJvbGxlci5zaWduYWwpLnRoZW4oY29udHJvbGxlci5hYm9ydCk7XG4gKmBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBDYXNjYWRlZCBhYm9ydGluZ1xuICogYGBgdHNcbiAqIC8vIEFsbCBvcGVyYXRpb25zIGNhbid0IHRha2UgbW9yZSB0aGFuIDMwIHNlY29uZHNcbiAqIGNvbnN0IGFib3J0ZXIgPSBBYm9ydGVyLnRpbWVvdXQoMzAgKiAxMDAwKTtcbiAqXG4gKiAvLyBGb2xsb3dpbmcgMiBvcGVyYXRpb25zIGNhbid0IHRha2UgbW9yZSB0aGFuIDI1IHNlY29uZHNcbiAqIGF3YWl0IGRvQXN5bmNXb3JrKGFib3J0ZXIud2l0aFRpbWVvdXQoMjUgKiAxMDAwKSk7XG4gKiBhd2FpdCBkb0FzeW5jV29yayhhYm9ydGVyLndpdGhUaW1lb3V0KDI1ICogMTAwMCkpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBBYm9ydENvbnRyb2xsZXIge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG4gICAgY29uc3RydWN0b3IocGFyZW50U2lnbmFscykge1xuICAgICAgICB0aGlzLl9zaWduYWwgPSBuZXcgQWJvcnRTaWduYWwoKTtcbiAgICAgICAgaWYgKCFwYXJlbnRTaWduYWxzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29lcmNlIHBhcmVudFNpZ25hbHMgaW50byBhbiBhcnJheVxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFyZW50U2lnbmFscykpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgICAgIHBhcmVudFNpZ25hbHMgPSBhcmd1bWVudHM7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwYXJlbnRTaWduYWwgb2YgcGFyZW50U2lnbmFscykge1xuICAgICAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBzaWduYWwgaGFzIGFscmVhZHkgaGFkIGFib3J0KCkgY2FsbGVkLFxuICAgICAgICAgICAgLy8gdGhlbiBjYWxsIGFib3J0IG9uIHRoaXMgc2lnbmFsIGFzIHdlbGwuXG4gICAgICAgICAgICBpZiAocGFyZW50U2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBwYXJlbnQgc2lnbmFsIGFib3J0cywgdGhpcyBzaWduYWwgc2hvdWxkIGFzIHdlbGwuXG4gICAgICAgICAgICAgICAgcGFyZW50U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgQWJvcnRTaWduYWwgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29udHJvbGxlciB0aGF0IHdpbGwgc2lnbmFsIGFib3J0ZWRcbiAgICAgKiB3aGVuIHRoZSBhYm9ydCBtZXRob2QgaXMgY2FsbGVkIG9uIHRoaXMgY29udHJvbGxlci5cbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGdldCBzaWduYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduYWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25hbCB0aGF0IGFueSBvcGVyYXRpb25zIHBhc3NlZCB0aGlzIGNvbnRyb2xsZXIncyBhc3NvY2lhdGVkIGFib3J0IHNpZ25hbFxuICAgICAqIHRvIGNhbmNlbCBhbnkgcmVtYWluaW5nIHdvcmsgYW5kIHRocm93IGFuIGBBYm9ydEVycm9yYC5cbiAgICAgKi9cbiAgICBhYm9ydCgpIHtcbiAgICAgICAgYWJvcnRTaWduYWwodGhpcy5fc2lnbmFsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBBYm9ydFNpZ25hbCBpbnN0YW5jZSB0aGF0IHdpbGwgYWJvcnQgYWZ0ZXIgdGhlIHByb3ZpZGVkIG1zLlxuICAgICAqIEBwYXJhbSBtcyAtIEVsYXBzZWQgdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gdHJpZ2dlciBhbiBhYm9ydC5cbiAgICAgKi9cbiAgICBzdGF0aWMgdGltZW91dChtcykge1xuICAgICAgICBjb25zdCBzaWduYWwgPSBuZXcgQWJvcnRTaWduYWwoKTtcbiAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KGFib3J0U2lnbmFsLCBtcywgc2lnbmFsKTtcbiAgICAgICAgLy8gUHJldmVudCB0aGUgYWN0aXZlIFRpbWVyIGZyb20ga2VlcGluZyB0aGUgTm9kZS5qcyBldmVudCBsb29wIGFjdGl2ZS5cbiAgICAgICAgaWYgKHR5cGVvZiB0aW1lci51bnJlZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aW1lci51bnJlZigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWduYWw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJvcnRDb250cm9sbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJBYm9ydFNpZ25hbCIsImFib3J0U2lnbmFsIiwiQWJvcnRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibmFtZSIsIkFib3J0Q29udHJvbGxlciIsInBhcmVudFNpZ25hbHMiLCJfc2lnbmFsIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJndW1lbnRzIiwicGFyZW50U2lnbmFsIiwiYWJvcnRlZCIsImFib3J0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNpZ25hbCIsInRpbWVvdXQiLCJtcyIsInRpbWVyIiwic2V0VGltZW91dCIsInVucmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortSignal: () => (/* binding */ AbortSignal),\n/* harmony export */   abortSignal: () => (/* binding */ abortSignal)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/// <reference path=\"../shims-public.d.ts\" />\nconst listenersMap = new WeakMap();\nconst abortedMap = new WeakMap();\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */ class AbortSignal {\n    constructor(){\n        /**\n         * onabort event listener.\n         */ this.onabort = null;\n        listenersMap.set(this, []);\n        abortedMap.set(this, false);\n    }\n    /**\n     * Status of whether aborted or not.\n     *\n     * @readonly\n     */ get aborted() {\n        if (!abortedMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        return abortedMap.get(this);\n    }\n    /**\n     * Creates a new AbortSignal instance that will never be aborted.\n     *\n     * @readonly\n     */ static get none() {\n        return new AbortSignal();\n    }\n    /**\n     * Added new \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be added\n     */ addEventListener(// tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        const listeners = listenersMap.get(this);\n        listeners.push(listener);\n    }\n    /**\n     * Remove \"abort\" event listener, only support \"abort\" event.\n     *\n     * @param _type - Only support \"abort\" event\n     * @param listener - The listener to be removed\n     */ removeEventListener(// tslint:disable-next-line:variable-name\n    _type, listener) {\n        if (!listenersMap.has(this)) {\n            throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n        }\n        const listeners = listenersMap.get(this);\n        const index = listeners.indexOf(listener);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n    }\n    /**\n     * Dispatches a synthetic event to the AbortSignal.\n     */ dispatchEvent(_event) {\n        throw new Error(\"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\");\n    }\n}\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */ // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nfunction abortSignal(signal) {\n    if (signal.aborted) {\n        return;\n    }\n    if (signal.onabort) {\n        signal.onabort.call(signal);\n    }\n    const listeners = listenersMap.get(signal);\n    if (listeners) {\n        // Create a copy of listeners so mutations to the array\n        // (e.g. via removeListener calls) don't affect the listeners\n        // we invoke.\n        listeners.slice().forEach((listener)=>{\n            listener.call(signal, {\n                type: \"abort\"\n            });\n        });\n    }\n    abortedMap.set(signal, true);\n} //# sourceMappingURL=AbortSignal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC1lc20vc3JjL0Fib3J0U2lnbmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNsQyw2Q0FBNkM7QUFDN0MsTUFBTUEsZUFBZSxJQUFJQztBQUN6QixNQUFNQyxhQUFhLElBQUlEO0FBQ3ZCOzs7Ozs7Ozs7Ozs7Q0FZQyxHQUNNLE1BQU1FO0lBQ1RDLGFBQWM7UUFDVjs7U0FFQyxHQUNELElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2ZMLGFBQWFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUN6QkosV0FBV0ksR0FBRyxDQUFDLElBQUksRUFBRTtJQUN6QjtJQUNBOzs7O0tBSUMsR0FDRCxJQUFJQyxVQUFVO1FBQ1YsSUFBSSxDQUFDTCxXQUFXTSxHQUFHLENBQUMsSUFBSSxHQUFHO1lBQ3ZCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBLE9BQU9QLFdBQVdRLEdBQUcsQ0FBQyxJQUFJO0lBQzlCO0lBQ0E7Ozs7S0FJQyxHQUNELFdBQVdDLE9BQU87UUFDZCxPQUFPLElBQUlSO0lBQ2Y7SUFDQTs7Ozs7S0FLQyxHQUNEUyxpQkFDQSx5Q0FBeUM7SUFDekNDLEtBQUssRUFBRUMsUUFBUSxFQUFFO1FBQ2IsSUFBSSxDQUFDZCxhQUFhUSxHQUFHLENBQUMsSUFBSSxHQUFHO1lBQ3pCLE1BQU0sSUFBSUMsVUFBVTtRQUN4QjtRQUNBLE1BQU1NLFlBQVlmLGFBQWFVLEdBQUcsQ0FBQyxJQUFJO1FBQ3ZDSyxVQUFVQyxJQUFJLENBQUNGO0lBQ25CO0lBQ0E7Ozs7O0tBS0MsR0FDREcsb0JBQ0EseUNBQXlDO0lBQ3pDSixLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUNiLElBQUksQ0FBQ2QsYUFBYVEsR0FBRyxDQUFDLElBQUksR0FBRztZQUN6QixNQUFNLElBQUlDLFVBQVU7UUFDeEI7UUFDQSxNQUFNTSxZQUFZZixhQUFhVSxHQUFHLENBQUMsSUFBSTtRQUN2QyxNQUFNUSxRQUFRSCxVQUFVSSxPQUFPLENBQUNMO1FBQ2hDLElBQUlJLFFBQVEsQ0FBQyxHQUFHO1lBQ1pILFVBQVVLLE1BQU0sQ0FBQ0YsT0FBTztRQUM1QjtJQUNKO0lBQ0E7O0tBRUMsR0FDREcsY0FBY0MsTUFBTSxFQUFFO1FBQ2xCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtBQUNKO0FBQ0E7Ozs7Ozs7O0NBUUMsR0FDRCx3RUFBd0U7QUFDakUsU0FBU0MsWUFBWUMsTUFBTTtJQUM5QixJQUFJQSxPQUFPbEIsT0FBTyxFQUFFO1FBQ2hCO0lBQ0o7SUFDQSxJQUFJa0IsT0FBT3BCLE9BQU8sRUFBRTtRQUNoQm9CLE9BQU9wQixPQUFPLENBQUNxQixJQUFJLENBQUNEO0lBQ3hCO0lBQ0EsTUFBTVYsWUFBWWYsYUFBYVUsR0FBRyxDQUFDZTtJQUNuQyxJQUFJVixXQUFXO1FBQ1gsdURBQXVEO1FBQ3ZELDZEQUE2RDtRQUM3RCxhQUFhO1FBQ2JBLFVBQVVZLEtBQUssR0FBR0MsT0FBTyxDQUFDLENBQUNkO1lBQ3ZCQSxTQUFTWSxJQUFJLENBQUNELFFBQVE7Z0JBQUVJLE1BQU07WUFBUTtRQUMxQztJQUNKO0lBQ0EzQixXQUFXSSxHQUFHLENBQUNtQixRQUFRO0FBQzNCLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC1lc20vc3JjL0Fib3J0U2lnbmFsLmpzPzg2YWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vc2hpbXMtcHVibGljLmQudHNcIiAvPlxuY29uc3QgbGlzdGVuZXJzTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGFib3J0ZWRNYXAgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBBbiBhYm9ydGVyIGluc3RhbmNlIGltcGxlbWVudHMgQWJvcnRTaWduYWwgaW50ZXJmYWNlLCBjYW4gYWJvcnQgSFRUUCByZXF1ZXN0cy5cbiAqXG4gKiAtIENhbGwgQWJvcnRTaWduYWwubm9uZSB0byBjcmVhdGUgYSBuZXcgQWJvcnRTaWduYWwgaW5zdGFuY2UgdGhhdCBjYW5ub3QgYmUgY2FuY2VsbGVkLlxuICogVXNlIGBBYm9ydFNpZ25hbC5ub25lYCB3aGVuIHlvdSBhcmUgcmVxdWlyZWQgdG8gcGFzcyBhIGNhbmNlbGxhdGlvbiB0b2tlbiBidXQgdGhlIG9wZXJhdGlvblxuICogY2Fubm90IG9yIHdpbGwgbm90IGV2ZXIgYmUgY2FuY2VsbGVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBBYm9ydCB3aXRob3V0IHRpbWVvdXRcbiAqIGBgYHRzXG4gKiBhd2FpdCBkb0FzeW5jV29yayhBYm9ydFNpZ25hbC5ub25lKTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgQWJvcnRTaWduYWwge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogb25hYm9ydCBldmVudCBsaXN0ZW5lci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25hYm9ydCA9IG51bGw7XG4gICAgICAgIGxpc3RlbmVyc01hcC5zZXQodGhpcywgW10pO1xuICAgICAgICBhYm9ydGVkTWFwLnNldCh0aGlzLCBmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXR1cyBvZiB3aGV0aGVyIGFib3J0ZWQgb3Igbm90LlxuICAgICAqXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZ2V0IGFib3J0ZWQoKSB7XG4gICAgICAgIGlmICghYWJvcnRlZE1hcC5oYXModGhpcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBgdGhpc2AgdG8gYmUgYW4gaW5zdGFuY2Ugb2YgQWJvcnRTaWduYWwuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhYm9ydGVkTWFwLmdldCh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBBYm9ydFNpZ25hbCBpbnN0YW5jZSB0aGF0IHdpbGwgbmV2ZXIgYmUgYWJvcnRlZC5cbiAgICAgKlxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgbm9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBYm9ydFNpZ25hbCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRlZCBuZXcgXCJhYm9ydFwiIGV2ZW50IGxpc3RlbmVyLCBvbmx5IHN1cHBvcnQgXCJhYm9ydFwiIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIF90eXBlIC0gT25seSBzdXBwb3J0IFwiYWJvcnRcIiBldmVudFxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciB0byBiZSBhZGRlZFxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbiAgICBfdHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCFsaXN0ZW5lcnNNYXAuaGFzKHRoaXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYHRoaXNgIHRvIGJlIGFuIGluc3RhbmNlIG9mIEFib3J0U2lnbmFsLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnNNYXAuZ2V0KHRoaXMpO1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBcImFib3J0XCIgZXZlbnQgbGlzdGVuZXIsIG9ubHkgc3VwcG9ydCBcImFib3J0XCIgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gX3R5cGUgLSBPbmx5IHN1cHBvcnQgXCJhYm9ydFwiIGV2ZW50XG4gICAgICogQHBhcmFtIGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIHRvIGJlIHJlbW92ZWRcbiAgICAgKi9cbiAgICByZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXG4gICAgX3R5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghbGlzdGVuZXJzTWFwLmhhcyh0aGlzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGB0aGlzYCB0byBiZSBhbiBpbnN0YW5jZSBvZiBBYm9ydFNpZ25hbC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gbGlzdGVuZXJzTWFwLmdldCh0aGlzKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaGVzIGEgc3ludGhldGljIGV2ZW50IHRvIHRoZSBBYm9ydFNpZ25hbC5cbiAgICAgKi9cbiAgICBkaXNwYXRjaEV2ZW50KF9ldmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGlzIGEgc3R1YiBkaXNwYXRjaEV2ZW50IGltcGxlbWVudGF0aW9uIHRoYXQgc2hvdWxkIG5vdCBiZSB1c2VkLiAgSXQgb25seSBleGlzdHMgZm9yIHR5cGUtY2hlY2tpbmcgcHVycG9zZXMuXCIpO1xuICAgIH1cbn1cbi8qKlxuICogSGVscGVyIHRvIHRyaWdnZXIgYW4gYWJvcnQgZXZlbnQgaW1tZWRpYXRlbHksIHRoZSBvbmFib3J0IGFuZCBhbGwgYWJvcnQgZXZlbnQgbGlzdGVuZXJzIHdpbGwgYmUgdHJpZ2dlcmVkLlxuICogV2lsbCB0cnkgdG8gdHJpZ2dlciBhYm9ydCBldmVudCBmb3IgYWxsIGxpbmtlZCBBYm9ydFNpZ25hbCBub2Rlcy5cbiAqXG4gKiAtIElmIHRoZXJlIGlzIGEgdGltZW91dCwgdGhlIHRpbWVyIHdpbGwgYmUgY2FuY2VsbGVkLlxuICogLSBJZiBhYm9ydGVkIGlzIHRydWUsIG5vdGhpbmcgd2lsbCBoYXBwZW4uXG4gKlxuICogQGludGVybmFsXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYXp1cmUvYXp1cmUtc2RrL3RzLXVzZS1pbnRlcmZhY2UtcGFyYW1ldGVyc1xuZXhwb3J0IGZ1bmN0aW9uIGFib3J0U2lnbmFsKHNpZ25hbCkge1xuICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzaWduYWwub25hYm9ydCkge1xuICAgICAgICBzaWduYWwub25hYm9ydC5jYWxsKHNpZ25hbCk7XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IGxpc3RlbmVyc01hcC5nZXQoc2lnbmFsKTtcbiAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGNvcHkgb2YgbGlzdGVuZXJzIHNvIG11dGF0aW9ucyB0byB0aGUgYXJyYXlcbiAgICAgICAgLy8gKGUuZy4gdmlhIHJlbW92ZUxpc3RlbmVyIGNhbGxzKSBkb24ndCBhZmZlY3QgdGhlIGxpc3RlbmVyc1xuICAgICAgICAvLyB3ZSBpbnZva2UuXG4gICAgICAgIGxpc3RlbmVycy5zbGljZSgpLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHNpZ25hbCwgeyB0eXBlOiBcImFib3J0XCIgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhYm9ydGVkTWFwLnNldChzaWduYWwsIHRydWUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJvcnRTaWduYWwuanMubWFwIl0sIm5hbWVzIjpbImxpc3RlbmVyc01hcCIsIldlYWtNYXAiLCJhYm9ydGVkTWFwIiwiQWJvcnRTaWduYWwiLCJjb25zdHJ1Y3RvciIsIm9uYWJvcnQiLCJzZXQiLCJhYm9ydGVkIiwiaGFzIiwiVHlwZUVycm9yIiwiZ2V0Iiwibm9uZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfdHlwZSIsImxpc3RlbmVyIiwibGlzdGVuZXJzIiwicHVzaCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJkaXNwYXRjaEV2ZW50IiwiX2V2ZW50IiwiRXJyb3IiLCJhYm9ydFNpZ25hbCIsInNpZ25hbCIsImNhbGwiLCJzbGljZSIsImZvckVhY2giLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/client/identityClient.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/client/identityClient.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IdentityClient: () => (/* binding */ IdentityClient),\n/* harmony export */   getIdentityClientAuthorityHost: () => (/* binding */ getIdentityClientAuthorityHost)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_identityTokenEndpoint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/identityTokenEndpoint */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/identityTokenEndpoint.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _credentials_managedIdentityCredential_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../credentials/managedIdentityCredential/utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\nconst noCorrelationId = \"noCorrelationId\";\n/**\n * @internal\n */ function getIdentityClientAuthorityHost(options) {\n    // The authorityHost can come from options or from the AZURE_AUTHORITY_HOST environment variable.\n    let authorityHost = options === null || options === void 0 ? void 0 : options.authorityHost;\n    // The AZURE_AUTHORITY_HOST environment variable can only be provided in Node.js.\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode) {\n        authorityHost = authorityHost !== null && authorityHost !== void 0 ? authorityHost : process.env.AZURE_AUTHORITY_HOST;\n    }\n    // If the authorityHost is not provided, we use the default one from the public cloud: https://login.microsoftonline.com\n    return authorityHost !== null && authorityHost !== void 0 ? authorityHost : _constants__WEBPACK_IMPORTED_MODULE_3__.DefaultAuthorityHost;\n}\n/**\n * The network module used by the Identity credentials.\n *\n * It allows for credentials to abort any pending request independently of the MSAL flow,\n * by calling to the `abortRequests()` method.\n *\n */ class IdentityClient extends _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.ServiceClient {\n    constructor(options){\n        var _a, _b;\n        const packageDetails = `azsdk-js-identity/${_constants__WEBPACK_IMPORTED_MODULE_3__.SDK_VERSION}`;\n        const userAgentPrefix = ((_a = options === null || options === void 0 ? void 0 : options.userAgentOptions) === null || _a === void 0 ? void 0 : _a.userAgentPrefix) ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}` : `${packageDetails}`;\n        const baseUri = getIdentityClientAuthorityHost(options);\n        if (!baseUri.startsWith(\"https:\")) {\n            throw new Error(\"The authorityHost address must use the 'https' protocol.\");\n        }\n        super(Object.assign(Object.assign({\n            requestContentType: \"application/json; charset=utf-8\",\n            retryOptions: {\n                maxRetries: 3\n            }\n        }, options), {\n            userAgentOptions: {\n                userAgentPrefix\n            },\n            baseUri\n        }));\n        this.authorityHost = baseUri;\n        this.abortControllers = new Map();\n        this.allowLoggingAccountIdentifiers = (_b = options === null || options === void 0 ? void 0 : options.loggingOptions) === null || _b === void 0 ? void 0 : _b.allowLoggingAccountIdentifiers;\n        // used for WorkloadIdentity\n        this.tokenCredentialOptions = Object.assign({}, options);\n    }\n    async sendTokenRequest(request) {\n        _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.info(`IdentityClient: sending token request to [${request.url}]`);\n        const response = await this.sendRequest(request);\n        if (response.bodyAsText && (response.status === 200 || response.status === 201)) {\n            const parsedBody = JSON.parse(response.bodyAsText);\n            if (!parsedBody.access_token) {\n                return null;\n            }\n            this.logIdentifiers(response);\n            const token = {\n                accessToken: {\n                    token: parsedBody.access_token,\n                    expiresOnTimestamp: (0,_credentials_managedIdentityCredential_utils__WEBPACK_IMPORTED_MODULE_5__.parseExpirationTimestamp)(parsedBody)\n                },\n                refreshToken: parsedBody.refresh_token\n            };\n            _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.info(`IdentityClient: [${request.url}] token acquired, expires on ${token.accessToken.expiresOnTimestamp}`);\n            return token;\n        } else {\n            const error = new _errors__WEBPACK_IMPORTED_MODULE_6__.AuthenticationError(response.status, response.bodyAsText);\n            _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.warning(`IdentityClient: authentication error. HTTP status: ${response.status}, ${error.errorResponse.errorDescription}`);\n            throw error;\n        }\n    }\n    async refreshAccessToken(tenantId, clientId, scopes, refreshToken, clientSecret, options = {}) {\n        if (refreshToken === undefined) {\n            return null;\n        }\n        _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.info(`IdentityClient: refreshing access token with client ID: ${clientId}, scopes: ${scopes} started`);\n        const refreshParams = {\n            grant_type: \"refresh_token\",\n            client_id: clientId,\n            refresh_token: refreshToken,\n            scope: scopes\n        };\n        if (clientSecret !== undefined) {\n            refreshParams.client_secret = clientSecret;\n        }\n        const query = new URLSearchParams(refreshParams);\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_7__.tracingClient.withSpan(\"IdentityClient.refreshAccessToken\", options, async (updatedOptions)=>{\n            try {\n                const urlSuffix = (0,_util_identityTokenEndpoint__WEBPACK_IMPORTED_MODULE_8__.getIdentityTokenEndpointSuffix)(tenantId);\n                const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createPipelineRequest)({\n                    url: `${this.authorityHost}/${tenantId}/${urlSuffix}`,\n                    method: \"POST\",\n                    body: query.toString(),\n                    abortSignal: options.abortSignal,\n                    headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createHttpHeaders)({\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/x-www-form-urlencoded\"\n                    }),\n                    tracingOptions: updatedOptions.tracingOptions\n                });\n                const response = await this.sendTokenRequest(request);\n                _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.info(`IdentityClient: refreshed token for client ID: ${clientId}`);\n                return response;\n            } catch (err) {\n                if (err.name === _errors__WEBPACK_IMPORTED_MODULE_6__.AuthenticationErrorName && err.errorResponse.error === \"interaction_required\") {\n                    // It's likely that the refresh token has expired, so\n                    // return null so that the credential implementation will\n                    // initiate the authentication flow again.\n                    _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.info(`IdentityClient: interaction required for client ID: ${clientId}`);\n                    return null;\n                } else {\n                    _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.warning(`IdentityClient: failed refreshing token for client ID: ${clientId}: ${err}`);\n                    throw err;\n                }\n            }\n        });\n    }\n    // Here is a custom layer that allows us to abort requests that go through MSAL,\n    // since MSAL doesn't allow us to pass options all the way through.\n    generateAbortSignal(correlationId) {\n        const controller = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_9__.AbortController();\n        const controllers = this.abortControllers.get(correlationId) || [];\n        controllers.push(controller);\n        this.abortControllers.set(correlationId, controllers);\n        const existingOnAbort = controller.signal.onabort;\n        controller.signal.onabort = (...params)=>{\n            this.abortControllers.set(correlationId, undefined);\n            if (existingOnAbort) {\n                existingOnAbort(...params);\n            }\n        };\n        return controller.signal;\n    }\n    abortRequests(correlationId) {\n        const key = correlationId || noCorrelationId;\n        const controllers = [\n            ...this.abortControllers.get(key) || [],\n            // MSAL passes no correlation ID to the get requests...\n            ...this.abortControllers.get(noCorrelationId) || []\n        ];\n        if (!controllers.length) {\n            return;\n        }\n        for (const controller of controllers){\n            controller.abort();\n        }\n        this.abortControllers.set(key, undefined);\n    }\n    getCorrelationId(options) {\n        var _a;\n        const parameter = (_a = options === null || options === void 0 ? void 0 : options.body) === null || _a === void 0 ? void 0 : _a.split(\"&\").map((part)=>part.split(\"=\")).find(([key])=>key === \"client-request-id\");\n        return parameter && parameter.length ? parameter[1] || noCorrelationId : noCorrelationId;\n    }\n    // The MSAL network module methods follow\n    async sendGetRequestAsync(url, options) {\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createPipelineRequest)({\n            url,\n            method: \"GET\",\n            body: options === null || options === void 0 ? void 0 : options.body,\n            headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createHttpHeaders)(options === null || options === void 0 ? void 0 : options.headers),\n            abortSignal: this.generateAbortSignal(noCorrelationId)\n        });\n        const response = await this.sendRequest(request);\n        this.logIdentifiers(response);\n        return {\n            body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n            headers: response.headers.toJSON(),\n            status: response.status\n        };\n    }\n    async sendPostRequestAsync(url, options) {\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createPipelineRequest)({\n            url,\n            method: \"POST\",\n            body: options === null || options === void 0 ? void 0 : options.body,\n            headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createHttpHeaders)(options === null || options === void 0 ? void 0 : options.headers),\n            // MSAL doesn't send the correlation ID on the get requests.\n            abortSignal: this.generateAbortSignal(this.getCorrelationId(options))\n        });\n        const response = await this.sendRequest(request);\n        this.logIdentifiers(response);\n        return {\n            body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n            headers: response.headers.toJSON(),\n            status: response.status\n        };\n    }\n    /**\n     *\n     * @internal\n     */ getTokenCredentialOptions() {\n        return this.tokenCredentialOptions;\n    }\n    /**\n     * If allowLoggingAccountIdentifiers was set on the constructor options\n     * we try to log the account identifiers by parsing the received access token.\n     *\n     * The account identifiers we try to log are:\n     * - `appid`: The application or Client Identifier.\n     * - `upn`: User Principal Name.\n     *   - It might not be available in some authentication scenarios.\n     *   - If it's not available, we put a placeholder: \"No User Principal Name available\".\n     * - `tid`: Tenant Identifier.\n     * - `oid`: Object Identifier of the authenticated user.\n     */ logIdentifiers(response) {\n        if (!this.allowLoggingAccountIdentifiers || !response.bodyAsText) {\n            return;\n        }\n        const unavailableUpn = \"No User Principal Name available\";\n        try {\n            const parsed = response.parsedBody || JSON.parse(response.bodyAsText);\n            const accessToken = parsed.access_token;\n            if (!accessToken) {\n                // Without an access token allowLoggingAccountIdentifiers isn't useful.\n                return;\n            }\n            const base64Metadata = accessToken.split(\".\")[1];\n            const { appid, upn, tid, oid } = JSON.parse(Buffer.from(base64Metadata, \"base64\").toString(\"utf8\"));\n            _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.info(`[Authenticated account] Client ID: ${appid}. Tenant ID: ${tid}. User Principal Name: ${upn || unavailableUpn}. Object ID (user): ${oid}`);\n        } catch (e) {\n            _util_logging__WEBPACK_IMPORTED_MODULE_4__.logger.warning(\"allowLoggingAccountIdentifiers was set, but we couldn't log the account information. Error:\", e.message);\n        }\n    }\n} //# sourceMappingURL=identityClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/client/identityClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/constants.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALL_TENANTS: () => (/* binding */ ALL_TENANTS),\n/* harmony export */   AzureAuthorityHosts: () => (/* binding */ AzureAuthorityHosts),\n/* harmony export */   CACHE_CAE_SUFFIX: () => (/* binding */ CACHE_CAE_SUFFIX),\n/* harmony export */   CACHE_NON_CAE_SUFFIX: () => (/* binding */ CACHE_NON_CAE_SUFFIX),\n/* harmony export */   DefaultAuthorityHost: () => (/* binding */ DefaultAuthorityHost),\n/* harmony export */   DefaultTenantId: () => (/* binding */ DefaultTenantId),\n/* harmony export */   DeveloperSignOnClientId: () => (/* binding */ DeveloperSignOnClientId),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Current version of the `@azure/identity` package.\n */ const SDK_VERSION = `3.4.2`;\n/**\n * The default client ID for authentication\n * @internal\n */ // TODO: temporary - this is the Azure CLI clientID - we'll replace it when\n// Developer Sign On application is available\n// https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/Constants.cs#L9\nconst DeveloperSignOnClientId = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";\n/**\n * The default tenant for authentication\n * @internal\n */ const DefaultTenantId = \"common\";\n/**\n * A list of known Azure authority hosts\n */ var AzureAuthorityHosts;\n(function(AzureAuthorityHosts) {\n    /**\n     * China-based Azure Authority Host\n     */ AzureAuthorityHosts[\"AzureChina\"] = \"https://login.chinacloudapi.cn\";\n    /**\n     * Germany-based Azure Authority Host\n     */ AzureAuthorityHosts[\"AzureGermany\"] = \"https://login.microsoftonline.de\";\n    /**\n     * US Government Azure Authority Host\n     */ AzureAuthorityHosts[\"AzureGovernment\"] = \"https://login.microsoftonline.us\";\n    /**\n     * Public Cloud Azure Authority Host\n     */ AzureAuthorityHosts[\"AzurePublicCloud\"] = \"https://login.microsoftonline.com\";\n})(AzureAuthorityHosts || (AzureAuthorityHosts = {}));\n/**\n * The default authority host.\n */ const DefaultAuthorityHost = AzureAuthorityHosts.AzurePublicCloud;\n/**\n * Allow acquiring tokens for any tenant for multi-tentant auth.\n */ const ALL_TENANTS = [\n    \"*\"\n];\nconst CACHE_CAE_SUFFIX = \".cae\";\nconst CACHE_NON_CAE_SUFFIX = \".nocae\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2xDOztDQUVDLEdBQ00sTUFBTUEsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DOzs7Q0FHQyxHQUNELDJFQUEyRTtBQUMzRSw2Q0FBNkM7QUFDN0MsdUdBQXVHO0FBQ2hHLE1BQU1DLDBCQUEwQix1Q0FBdUM7QUFDOUU7OztDQUdDLEdBQ00sTUFBTUMsa0JBQWtCLFNBQVM7QUFDeEM7O0NBRUMsR0FDTSxJQUFJQyxvQkFBb0I7QUFDOUIsVUFBVUEsbUJBQW1CO0lBQzFCOztLQUVDLEdBQ0RBLG1CQUFtQixDQUFDLGFBQWEsR0FBRztJQUNwQzs7S0FFQyxHQUNEQSxtQkFBbUIsQ0FBQyxlQUFlLEdBQUc7SUFDdEM7O0tBRUMsR0FDREEsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUc7SUFDekM7O0tBRUMsR0FDREEsbUJBQW1CLENBQUMsbUJBQW1CLEdBQUc7QUFDOUMsR0FBR0EsdUJBQXdCQSxDQUFBQSxzQkFBc0IsQ0FBQztBQUNsRDs7Q0FFQyxHQUNNLE1BQU1DLHVCQUF1QkQsb0JBQW9CRSxnQkFBZ0IsQ0FBQztBQUN6RTs7Q0FFQyxHQUNNLE1BQU1DLGNBQWM7SUFBQztDQUFJLENBQUM7QUFDMUIsTUFBTUMsbUJBQW1CLE9BQU87QUFDaEMsTUFBTUMsdUJBQXVCLFNBQVMsQ0FDN0MscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jb25zdGFudHMuanM/NmRmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogQ3VycmVudCB2ZXJzaW9uIG9mIHRoZSBgQGF6dXJlL2lkZW50aXR5YCBwYWNrYWdlLlxuICovXG5leHBvcnQgY29uc3QgU0RLX1ZFUlNJT04gPSBgMy40LjJgO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBjbGllbnQgSUQgZm9yIGF1dGhlbnRpY2F0aW9uXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gVE9ETzogdGVtcG9yYXJ5IC0gdGhpcyBpcyB0aGUgQXp1cmUgQ0xJIGNsaWVudElEIC0gd2UnbGwgcmVwbGFjZSBpdCB3aGVuXG4vLyBEZXZlbG9wZXIgU2lnbiBPbiBhcHBsaWNhdGlvbiBpcyBhdmFpbGFibGVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZS9henVyZS1zZGstZm9yLW5ldC9ibG9iL21haW4vc2RrL2lkZW50aXR5L0F6dXJlLklkZW50aXR5L3NyYy9Db25zdGFudHMuY3MjTDlcbmV4cG9ydCBjb25zdCBEZXZlbG9wZXJTaWduT25DbGllbnRJZCA9IFwiMDRiMDc3OTUtOGRkYi00NjFhLWJiZWUtMDJmOWUxYmY3YjQ2XCI7XG4vKipcbiAqIFRoZSBkZWZhdWx0IHRlbmFudCBmb3IgYXV0aGVudGljYXRpb25cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgRGVmYXVsdFRlbmFudElkID0gXCJjb21tb25cIjtcbi8qKlxuICogQSBsaXN0IG9mIGtub3duIEF6dXJlIGF1dGhvcml0eSBob3N0c1xuICovXG5leHBvcnQgdmFyIEF6dXJlQXV0aG9yaXR5SG9zdHM7XG4oZnVuY3Rpb24gKEF6dXJlQXV0aG9yaXR5SG9zdHMpIHtcbiAgICAvKipcbiAgICAgKiBDaGluYS1iYXNlZCBBenVyZSBBdXRob3JpdHkgSG9zdFxuICAgICAqL1xuICAgIEF6dXJlQXV0aG9yaXR5SG9zdHNbXCJBenVyZUNoaW5hXCJdID0gXCJodHRwczovL2xvZ2luLmNoaW5hY2xvdWRhcGkuY25cIjtcbiAgICAvKipcbiAgICAgKiBHZXJtYW55LWJhc2VkIEF6dXJlIEF1dGhvcml0eSBIb3N0XG4gICAgICovXG4gICAgQXp1cmVBdXRob3JpdHlIb3N0c1tcIkF6dXJlR2VybWFueVwiXSA9IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuZGVcIjtcbiAgICAvKipcbiAgICAgKiBVUyBHb3Zlcm5tZW50IEF6dXJlIEF1dGhvcml0eSBIb3N0XG4gICAgICovXG4gICAgQXp1cmVBdXRob3JpdHlIb3N0c1tcIkF6dXJlR292ZXJubWVudFwiXSA9IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUudXNcIjtcbiAgICAvKipcbiAgICAgKiBQdWJsaWMgQ2xvdWQgQXp1cmUgQXV0aG9yaXR5IEhvc3RcbiAgICAgKi9cbiAgICBBenVyZUF1dGhvcml0eUhvc3RzW1wiQXp1cmVQdWJsaWNDbG91ZFwiXSA9IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUuY29tXCI7XG59KShBenVyZUF1dGhvcml0eUhvc3RzIHx8IChBenVyZUF1dGhvcml0eUhvc3RzID0ge30pKTtcbi8qKlxuICogVGhlIGRlZmF1bHQgYXV0aG9yaXR5IGhvc3QuXG4gKi9cbmV4cG9ydCBjb25zdCBEZWZhdWx0QXV0aG9yaXR5SG9zdCA9IEF6dXJlQXV0aG9yaXR5SG9zdHMuQXp1cmVQdWJsaWNDbG91ZDtcbi8qKlxuICogQWxsb3cgYWNxdWlyaW5nIHRva2VucyBmb3IgYW55IHRlbmFudCBmb3IgbXVsdGktdGVudGFudCBhdXRoLlxuICovXG5leHBvcnQgY29uc3QgQUxMX1RFTkFOVFMgPSBbXCIqXCJdO1xuZXhwb3J0IGNvbnN0IENBQ0hFX0NBRV9TVUZGSVggPSBcIi5jYWVcIjtcbmV4cG9ydCBjb25zdCBDQUNIRV9OT05fQ0FFX1NVRkZJWCA9IFwiLm5vY2FlXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIlNES19WRVJTSU9OIiwiRGV2ZWxvcGVyU2lnbk9uQ2xpZW50SWQiLCJEZWZhdWx0VGVuYW50SWQiLCJBenVyZUF1dGhvcml0eUhvc3RzIiwiRGVmYXVsdEF1dGhvcml0eUhvc3QiLCJBenVyZVB1YmxpY0Nsb3VkIiwiQUxMX1RFTkFOVFMiLCJDQUNIRV9DQUVfU1VGRklYIiwiQ0FDSEVfTk9OX0NBRV9TVUZGSVgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/authorizationCodeCredential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/authorizationCodeCredential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthorizationCodeCredential: () => (/* binding */ AuthorizationCodeCredential)\n/* harmony export */ });\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _msal_nodeFlows_msalAuthorizationCode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../msal/nodeFlows/msalAuthorizationCode */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalAuthorizationCode.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(\"AuthorizationCodeCredential\");\n/**\n * Enables authentication to Azure Active Directory using an authorization code\n * that was obtained through the authorization code flow, described in more detail\n * in the Azure Active Directory documentation:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow\n */ class AuthorizationCodeCredential {\n    /**\n     * @hidden\n     * @internal\n     */ constructor(tenantId, clientId, clientSecretOrAuthorizationCode, authorizationCodeOrRedirectUri, redirectUriOrOptions, options){\n        (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.checkTenantId)(logger, tenantId);\n        let clientSecret = clientSecretOrAuthorizationCode;\n        if (typeof redirectUriOrOptions === \"string\") {\n            // the clientId+clientSecret constructor\n            this.authorizationCode = authorizationCodeOrRedirectUri;\n            this.redirectUri = redirectUriOrOptions;\n        // in this case, options are good as they come\n        } else {\n            // clientId only\n            this.authorizationCode = clientSecretOrAuthorizationCode;\n            this.redirectUri = authorizationCodeOrRedirectUri;\n            clientSecret = undefined;\n            options = redirectUriOrOptions;\n        }\n        // TODO: Validate tenant if provided\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.msalFlow = new _msal_nodeFlows_msalAuthorizationCode__WEBPACK_IMPORTED_MODULE_2__.MsalAuthorizationCode(Object.assign(Object.assign({}, options), {\n            clientSecret,\n            clientId,\n            tenantId,\n            tokenCredentialOptions: options || {},\n            logger,\n            redirectUri: this.redirectUri,\n            authorizationCode: this.authorizationCode\n        }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{\n            const tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds);\n            newOptions.tenantId = tenantId;\n            const arrayScopes = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureScopes)(scopes);\n            return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n                disableAutomaticAuthentication: this.disableAutomaticAuthentication\n            }));\n        });\n    }\n} //# sourceMappingURL=authorizationCodeCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9hdXRob3JpemF0aW9uQ29kZUNyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDc0U7QUFDeEI7QUFDMUI7QUFDSDtBQUNEO0FBQ0Y7QUFDaEQsTUFBTU8sU0FBU0gsK0RBQWdCQSxDQUFDO0FBQ2hDOzs7Ozs7Q0FNQyxHQUNNLE1BQU1JO0lBQ1Q7OztLQUdDLEdBQ0RDLFlBQVlDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQywrQkFBK0IsRUFBRUMsOEJBQThCLEVBQUVDLG9CQUFvQixFQUFFQyxPQUFPLENBQUU7UUFDNUhaLGtFQUFhQSxDQUFDSSxRQUFRRztRQUN0QixJQUFJTSxlQUFlSjtRQUNuQixJQUFJLE9BQU9FLHlCQUF5QixVQUFVO1lBQzFDLHdDQUF3QztZQUN4QyxJQUFJLENBQUNHLGlCQUFpQixHQUFHSjtZQUN6QixJQUFJLENBQUNLLFdBQVcsR0FBR0o7UUFDbkIsOENBQThDO1FBQ2xELE9BQ0s7WUFDRCxnQkFBZ0I7WUFDaEIsSUFBSSxDQUFDRyxpQkFBaUIsR0FBR0w7WUFDekIsSUFBSSxDQUFDTSxXQUFXLEdBQUdMO1lBQ25CRyxlQUFlRztZQUNmSixVQUFVRDtRQUNkO1FBQ0Esb0NBQW9DO1FBQ3BDLElBQUksQ0FBQ0osUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNVLDRCQUE0QixHQUFHbkIsd0ZBQW1DQSxDQUFDYyxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUU0sMEJBQTBCO1FBQzVKLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlwQix3RkFBcUJBLENBQUNxQixPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdULFVBQVU7WUFBRUM7WUFDbEZMO1lBQ0FEO1lBQVVlLHdCQUF3QlYsV0FBVyxDQUFDO1lBQUdSO1lBQVFXLGFBQWEsSUFBSSxDQUFDQSxXQUFXO1lBQUVELG1CQUFtQixJQUFJLENBQUNBLGlCQUFpQjtRQUFDO0lBQzFJO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE1BQU1TLFNBQVNDLE1BQU0sRUFBRVosVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNqQyxPQUFPVCx3REFBYUEsQ0FBQ3NCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDbkIsV0FBVyxDQUFDb0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFZCxTQUFTLE9BQU9lO1lBQy9FLE1BQU1wQixXQUFXViw4RUFBeUJBLENBQUMsSUFBSSxDQUFDVSxRQUFRLEVBQUVvQixZQUFZLElBQUksQ0FBQ1YsNEJBQTRCO1lBQ3ZHVSxXQUFXcEIsUUFBUSxHQUFHQTtZQUN0QixNQUFNcUIsY0FBYzFCLDhEQUFZQSxDQUFDc0I7WUFDakMsT0FBTyxJQUFJLENBQUNMLFFBQVEsQ0FBQ0ksUUFBUSxDQUFDSyxhQUFhUixPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdNLGFBQWE7Z0JBQUVFLGdDQUFnQyxJQUFJLENBQUNBLDhCQUE4QjtZQUFDO1FBQ2xLO0lBQ0o7QUFDSixFQUNBLHVEQUF1RCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvY3JlZGVudGlhbHMvYXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsLmpzP2VhZTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0LCByZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcywgfSBmcm9tIFwiLi4vdXRpbC90ZW5hbnRJZFV0aWxzXCI7XG5pbXBvcnQgeyBNc2FsQXV0aG9yaXphdGlvbkNvZGUgfSBmcm9tIFwiLi4vbXNhbC9ub2RlRmxvd3MvbXNhbEF1dGhvcml6YXRpb25Db2RlXCI7XG5pbXBvcnQgeyBjaGVja1RlbmFudElkIH0gZnJvbSBcIi4uL3V0aWwvdGVuYW50SWRVdGlsc1wiO1xuaW1wb3J0IHsgY3JlZGVudGlhbExvZ2dlciB9IGZyb20gXCIuLi91dGlsL2xvZ2dpbmdcIjtcbmltcG9ydCB7IGVuc3VyZVNjb3BlcyB9IGZyb20gXCIuLi91dGlsL3Njb3BlVXRpbHNcIjtcbmltcG9ydCB7IHRyYWNpbmdDbGllbnQgfSBmcm9tIFwiLi4vdXRpbC90cmFjaW5nXCI7XG5jb25zdCBsb2dnZXIgPSBjcmVkZW50aWFsTG9nZ2VyKFwiQXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsXCIpO1xuLyoqXG4gKiBFbmFibGVzIGF1dGhlbnRpY2F0aW9uIHRvIEF6dXJlIEFjdGl2ZSBEaXJlY3RvcnkgdXNpbmcgYW4gYXV0aG9yaXphdGlvbiBjb2RlXG4gKiB0aGF0IHdhcyBvYnRhaW5lZCB0aHJvdWdoIHRoZSBhdXRob3JpemF0aW9uIGNvZGUgZmxvdywgZGVzY3JpYmVkIGluIG1vcmUgZGV0YWlsXG4gKiBpbiB0aGUgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBkb2N1bWVudGF0aW9uOlxuICpcbiAqIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2FjdGl2ZS1kaXJlY3RvcnkvZGV2ZWxvcC92Mi1vYXV0aDItYXV0aC1jb2RlLWZsb3dcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbCB7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRlbmFudElkLCBjbGllbnRJZCwgY2xpZW50U2VjcmV0T3JBdXRob3JpemF0aW9uQ29kZSwgYXV0aG9yaXphdGlvbkNvZGVPclJlZGlyZWN0VXJpLCByZWRpcmVjdFVyaU9yT3B0aW9ucywgb3B0aW9ucykge1xuICAgICAgICBjaGVja1RlbmFudElkKGxvZ2dlciwgdGVuYW50SWQpO1xuICAgICAgICBsZXQgY2xpZW50U2VjcmV0ID0gY2xpZW50U2VjcmV0T3JBdXRob3JpemF0aW9uQ29kZTtcbiAgICAgICAgaWYgKHR5cGVvZiByZWRpcmVjdFVyaU9yT3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gdGhlIGNsaWVudElkK2NsaWVudFNlY3JldCBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgdGhpcy5hdXRob3JpemF0aW9uQ29kZSA9IGF1dGhvcml6YXRpb25Db2RlT3JSZWRpcmVjdFVyaTtcbiAgICAgICAgICAgIHRoaXMucmVkaXJlY3RVcmkgPSByZWRpcmVjdFVyaU9yT3B0aW9ucztcbiAgICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSwgb3B0aW9ucyBhcmUgZ29vZCBhcyB0aGV5IGNvbWVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNsaWVudElkIG9ubHlcbiAgICAgICAgICAgIHRoaXMuYXV0aG9yaXphdGlvbkNvZGUgPSBjbGllbnRTZWNyZXRPckF1dGhvcml6YXRpb25Db2RlO1xuICAgICAgICAgICAgdGhpcy5yZWRpcmVjdFVyaSA9IGF1dGhvcml6YXRpb25Db2RlT3JSZWRpcmVjdFVyaTtcbiAgICAgICAgICAgIGNsaWVudFNlY3JldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZWRpcmVjdFVyaU9yT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBWYWxpZGF0ZSB0ZW5hbnQgaWYgcHJvdmlkZWRcbiAgICAgICAgdGhpcy50ZW5hbnRJZCA9IHRlbmFudElkO1xuICAgICAgICB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMgPSByZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyhvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMpO1xuICAgICAgICB0aGlzLm1zYWxGbG93ID0gbmV3IE1zYWxBdXRob3JpemF0aW9uQ29kZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNsaWVudFNlY3JldCxcbiAgICAgICAgICAgIGNsaWVudElkLFxuICAgICAgICAgICAgdGVuYW50SWQsIHRva2VuQ3JlZGVudGlhbE9wdGlvbnM6IG9wdGlvbnMgfHwge30sIGxvZ2dlciwgcmVkaXJlY3RVcmk6IHRoaXMucmVkaXJlY3RVcmksIGF1dGhvcml6YXRpb25Db2RlOiB0aGlzLmF1dGhvcml6YXRpb25Db2RlIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXV0aGVudGljYXRlcyB3aXRoIEF6dXJlIEFjdGl2ZSBEaXJlY3RvcnkgYW5kIHJldHVybnMgYW4gYWNjZXNzIHRva2VuIGlmIHN1Y2Nlc3NmdWwuXG4gICAgICogSWYgYXV0aGVudGljYXRpb24gZmFpbHMsIGEge0BsaW5rIENyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yfSB3aWxsIGJlIHRocm93biB3aXRoIHRoZSBkZXRhaWxzIG9mIHRoZSBmYWlsdXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlcyAtIFRoZSBsaXN0IG9mIHNjb3BlcyBmb3Igd2hpY2ggdGhlIHRva2VuIHdpbGwgaGF2ZSBhY2Nlc3MuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB1c2VkIHRvIGNvbmZpZ3VyZSBhbnkgcmVxdWVzdHMgdGhpc1xuICAgICAqICAgICAgICAgICAgICAgIFRva2VuQ3JlZGVudGlhbCBpbXBsZW1lbnRhdGlvbiBtaWdodCBtYWtlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKHNjb3Blcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0uZ2V0VG9rZW5gLCBvcHRpb25zLCBhc3luYyAobmV3T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGVuYW50SWQgPSBwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0KHRoaXMudGVuYW50SWQsIG5ld09wdGlvbnMsIHRoaXMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyk7XG4gICAgICAgICAgICBuZXdPcHRpb25zLnRlbmFudElkID0gdGVuYW50SWQ7XG4gICAgICAgICAgICBjb25zdCBhcnJheVNjb3BlcyA9IGVuc3VyZVNjb3BlcyhzY29wZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXNhbEZsb3cuZ2V0VG9rZW4oYXJyYXlTY29wZXMsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbmV3T3B0aW9ucyksIHsgZGlzYWJsZUF1dG9tYXRpY0F1dGhlbnRpY2F0aW9uOiB0aGlzLmRpc2FibGVBdXRvbWF0aWNBdXRoZW50aWNhdGlvbiB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOlsicHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdCIsInJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzIiwiTXNhbEF1dGhvcml6YXRpb25Db2RlIiwiY2hlY2tUZW5hbnRJZCIsImNyZWRlbnRpYWxMb2dnZXIiLCJlbnN1cmVTY29wZXMiLCJ0cmFjaW5nQ2xpZW50IiwibG9nZ2VyIiwiQXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsIiwiY29uc3RydWN0b3IiLCJ0ZW5hbnRJZCIsImNsaWVudElkIiwiY2xpZW50U2VjcmV0T3JBdXRob3JpemF0aW9uQ29kZSIsImF1dGhvcml6YXRpb25Db2RlT3JSZWRpcmVjdFVyaSIsInJlZGlyZWN0VXJpT3JPcHRpb25zIiwib3B0aW9ucyIsImNsaWVudFNlY3JldCIsImF1dGhvcml6YXRpb25Db2RlIiwicmVkaXJlY3RVcmkiLCJ1bmRlZmluZWQiLCJhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzIiwiYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMiLCJtc2FsRmxvdyIsIk9iamVjdCIsImFzc2lnbiIsInRva2VuQ3JlZGVudGlhbE9wdGlvbnMiLCJnZXRUb2tlbiIsInNjb3BlcyIsIndpdGhTcGFuIiwibmFtZSIsIm5ld09wdGlvbnMiLCJhcnJheVNjb3BlcyIsImRpc2FibGVBdXRvbWF0aWNBdXRoZW50aWNhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/authorizationCodeCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azureCliCredential.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/azureCliCredential.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureCliCredential: () => (/* binding */ AzureCliCredential),\n/* harmony export */   cliCredentialInternals: () => (/* binding */ cliCredentialInternals)\n/* harmony export */ });\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n/**\n * Mockable reference to the CLI credential cliCredentialFunctions\n * @internal\n */ const cliCredentialInternals = {\n    /**\n     * @internal\n     */ getSafeWorkingDir () {\n        if (process.platform === \"win32\") {\n            if (!process.env.SystemRoot) {\n                throw new Error(\"Azure CLI credential expects a 'SystemRoot' environment variable\");\n            }\n            return process.env.SystemRoot;\n        } else {\n            return \"/bin\";\n        }\n    },\n    /**\n     * Gets the access token from Azure CLI\n     * @param resource - The resource to use when getting the token\n     * @internal\n     */ async getAzureCliAccessToken (resource, tenantId, timeout) {\n        let tenantSection = [];\n        if (tenantId) {\n            tenantSection = [\n                \"--tenant\",\n                tenantId\n            ];\n        }\n        return new Promise((resolve, reject)=>{\n            try {\n                child_process__WEBPACK_IMPORTED_MODULE_0___default().execFile(\"az\", [\n                    \"account\",\n                    \"get-access-token\",\n                    \"--output\",\n                    \"json\",\n                    \"--resource\",\n                    resource,\n                    ...tenantSection\n                ], {\n                    cwd: cliCredentialInternals.getSafeWorkingDir(),\n                    shell: true,\n                    timeout\n                }, (error, stdout, stderr)=>{\n                    resolve({\n                        stdout: stdout,\n                        stderr: stderr,\n                        error\n                    });\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n};\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.credentialLogger)(\"AzureCliCredential\");\n/**\n * This credential will use the currently logged-in user login information\n * via the Azure CLI ('az') commandline tool.\n * To do so, it will read the user access token and expire time\n * with Azure CLI command \"az account get-access-token\".\n */ class AzureCliCredential {\n    /**\n     * Creates an instance of the {@link AzureCliCredential}.\n     *\n     * To use this credential, ensure that you have already logged\n     * in via the 'az' tool using the command \"az login\" from the commandline.\n     *\n     * @param options - Options, to optionally allow multi-tenant requests.\n     */ constructor(options){\n        if (options === null || options === void 0 ? void 0 : options.tenantId) {\n            (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.checkTenantId)(logger, options === null || options === void 0 ? void 0 : options.tenantId);\n            this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;\n        }\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.timeout = options === null || options === void 0 ? void 0 : options.processTimeoutInMs;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        const tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_3__.processMultiTenantRequest)(this.tenantId, options, this.additionallyAllowedTenantIds);\n        if (tenantId) {\n            (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.checkTenantId)(logger, tenantId);\n        }\n        const scope = typeof scopes === \"string\" ? scopes : scopes[0];\n        logger.getToken.info(`Using the scope ${scope}`);\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_4__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async ()=>{\n            var _a, _b, _c, _d;\n            try {\n                (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureValidScopeForDevTimeCreds)(scope, logger);\n                const resource = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.getScopeResource)(scope);\n                const obj = await cliCredentialInternals.getAzureCliAccessToken(resource, tenantId, this.timeout);\n                const specificScope = (_a = obj.stderr) === null || _a === void 0 ? void 0 : _a.match(\"(.*)az login --scope(.*)\");\n                const isLoginError = ((_b = obj.stderr) === null || _b === void 0 ? void 0 : _b.match(\"(.*)az login(.*)\")) && !specificScope;\n                const isNotInstallError = ((_c = obj.stderr) === null || _c === void 0 ? void 0 : _c.match(\"az:(.*)not found\")) || ((_d = obj.stderr) === null || _d === void 0 ? void 0 : _d.startsWith(\"'az' is not recognized\"));\n                if (isNotInstallError) {\n                    const error = new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(\"Azure CLI could not be found. Please visit https://aka.ms/azure-cli for installation instructions and then, once installed, authenticate to your Azure account using 'az login'.\");\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.formatError)(scopes, error));\n                    throw error;\n                }\n                if (isLoginError) {\n                    const error = new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(\"Please run 'az login' from a command prompt to authenticate before using this credential.\");\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.formatError)(scopes, error));\n                    throw error;\n                }\n                try {\n                    const responseData = obj.stdout;\n                    const response = JSON.parse(responseData);\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.formatSuccess)(scopes));\n                    const returnValue = {\n                        token: response.accessToken,\n                        expiresOnTimestamp: new Date(response.expiresOn).getTime()\n                    };\n                    return returnValue;\n                } catch (e) {\n                    if (obj.stderr) {\n                        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(obj.stderr);\n                    }\n                    throw e;\n                }\n            } catch (err) {\n                const error = err.name === \"CredentialUnavailableError\" ? err : new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(err.message || \"Unknown error while trying to retrieve the access token\");\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.formatError)(scopes, error));\n                throw error;\n            }\n        });\n    }\n} //# sourceMappingURL=azureCliCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azureCliCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azureDeveloperCliCredential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/azureDeveloperCliCredential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureDeveloperCliCredential: () => (/* binding */ AzureDeveloperCliCredential),\n/* harmony export */   developerCliCredentialInternals: () => (/* binding */ developerCliCredentialInternals)\n/* harmony export */ });\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n/**\n * Mockable reference to the Developer CLI credential cliCredentialFunctions\n * @internal\n */ const developerCliCredentialInternals = {\n    /**\n     * @internal\n     */ getSafeWorkingDir () {\n        if (process.platform === \"win32\") {\n            if (!process.env.SystemRoot) {\n                throw new Error(\"Azure Developer CLI credential expects a 'SystemRoot' environment variable\");\n            }\n            return process.env.SystemRoot;\n        } else {\n            return \"/bin\";\n        }\n    },\n    /**\n     * Gets the access token from Azure Developer CLI\n     * @param scopes - The scopes to use when getting the token\n     * @internal\n     */ async getAzdAccessToken (scopes, tenantId, timeout) {\n        let tenantSection = [];\n        if (tenantId) {\n            tenantSection = [\n                \"--tenant-id\",\n                tenantId\n            ];\n        }\n        return new Promise((resolve, reject)=>{\n            try {\n                child_process__WEBPACK_IMPORTED_MODULE_0___default().execFile(\"azd\", [\n                    \"auth\",\n                    \"token\",\n                    \"--output\",\n                    \"json\",\n                    ...scopes.reduce((previous, current)=>previous.concat(\"--scope\", current), []),\n                    ...tenantSection\n                ], {\n                    cwd: developerCliCredentialInternals.getSafeWorkingDir(),\n                    timeout\n                }, (error, stdout, stderr)=>{\n                    resolve({\n                        stdout,\n                        stderr,\n                        error\n                    });\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n};\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.credentialLogger)(\"AzureDeveloperCliCredential\");\n/**\n * Azure Developer CLI is a command-line interface tool that allows developers to create, manage, and deploy\n * resources in Azure. It's built on top of the Azure CLI and provides additional functionality specific\n * to Azure developers. It allows users to authenticate as a user and/or a service principal against\n * <a href=\"https://learn.microsoft.com/azure/active-directory/fundamentals/\">Azure Active Directory (Azure AD)\n * </a>. The AzureDeveloperCliCredential authenticates in a development environment and acquires a token on behalf of\n * the logged-in user or service principal in the Azure Developer CLI. It acts as the Azure Developer CLI logged in user or\n * service principal and executes an Azure CLI command underneath to authenticate the application against\n * Azure Active Directory.\n *\n * <h2> Configure AzureDeveloperCliCredential </h2>\n *\n * To use this credential, the developer needs to authenticate locally in Azure Developer CLI using one of the\n * commands below:\n *\n * <ol>\n *     <li>Run \"azd auth login\" in Azure Developer CLI to authenticate interactively as a user.</li>\n *     <li>Run \"azd auth login --client-id clientID --client-secret clientSecret\n *     --tenant-id tenantID\" to authenticate as a service principal.</li>\n * </ol>\n *\n * You may need to repeat this process after a certain time period, depending on the refresh token validity in your\n * organization. Generally, the refresh token validity period is a few weeks to a few months.\n * AzureDeveloperCliCredential will prompt you to sign in again.\n */ class AzureDeveloperCliCredential {\n    /**\n     * Creates an instance of the {@link AzureDeveloperCliCredential}.\n     *\n     * To use this credential, ensure that you have already logged\n     * in via the 'azd' tool using the command \"azd auth login\" from the commandline.\n     *\n     * @param options - Options, to optionally allow multi-tenant requests.\n     */ constructor(options){\n        if (options === null || options === void 0 ? void 0 : options.tenantId) {\n            (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.checkTenantId)(logger, options === null || options === void 0 ? void 0 : options.tenantId);\n            this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;\n        }\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.timeout = options === null || options === void 0 ? void 0 : options.processTimeoutInMs;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        const tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_3__.processMultiTenantRequest)(this.tenantId, options, this.additionallyAllowedTenantIds);\n        if (tenantId) {\n            (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.checkTenantId)(logger, tenantId);\n        }\n        let scopeList;\n        if (typeof scopes === \"string\") {\n            scopeList = [\n                scopes\n            ];\n        } else {\n            scopeList = scopes;\n        }\n        logger.getToken.info(`Using the scopes ${scopes}`);\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_4__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async ()=>{\n            var _a, _b, _c, _d;\n            try {\n                scopeList.forEach((scope)=>{\n                    (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureValidScopeForDevTimeCreds)(scope, logger);\n                });\n                const obj = await developerCliCredentialInternals.getAzdAccessToken(scopeList, tenantId, this.timeout);\n                const isNotLoggedInError = ((_a = obj.stderr) === null || _a === void 0 ? void 0 : _a.match(\"not logged in, run `azd login` to login\")) || ((_b = obj.stderr) === null || _b === void 0 ? void 0 : _b.match(\"not logged in, run `azd auth login` to login\"));\n                const isNotInstallError = ((_c = obj.stderr) === null || _c === void 0 ? void 0 : _c.match(\"azd:(.*)not found\")) || ((_d = obj.stderr) === null || _d === void 0 ? void 0 : _d.startsWith(\"'azd' is not recognized\"));\n                if (isNotInstallError || obj.error && obj.error.code === \"ENOENT\") {\n                    const error = new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(\"Azure Developer CLI couldn't be found. To mitigate this issue, see the troubleshooting guidelines at https://aka.ms/azsdk/js/identity/azdevclicredential/troubleshoot.\");\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.formatError)(scopes, error));\n                    throw error;\n                }\n                if (isNotLoggedInError) {\n                    const error = new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(\"Please run 'azd auth login' from a command prompt to authenticate before using this credential. For more information, see the troubleshooting guidelines at https://aka.ms/azsdk/js/identity/azdevclicredential/troubleshoot.\");\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.formatError)(scopes, error));\n                    throw error;\n                }\n                try {\n                    const resp = JSON.parse(obj.stdout);\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.formatSuccess)(scopes));\n                    return {\n                        token: resp.token,\n                        expiresOnTimestamp: new Date(resp.expiresOn).getTime()\n                    };\n                } catch (e) {\n                    if (obj.stderr) {\n                        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(obj.stderr);\n                    }\n                    throw e;\n                }\n            } catch (err) {\n                const error = err.name === \"CredentialUnavailableError\" ? err : new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(err.message || \"Unknown error while trying to retrieve the access token\");\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.formatError)(scopes, error));\n                throw error;\n            }\n        });\n    }\n} //# sourceMappingURL=azureDeveloperCliCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azureDeveloperCliCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azurePowerShellCredential.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/azurePowerShellCredential.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzurePowerShellCredential: () => (/* binding */ AzurePowerShellCredential),\n/* harmony export */   commandStack: () => (/* binding */ commandStack),\n/* harmony export */   formatCommand: () => (/* binding */ formatCommand),\n/* harmony export */   powerShellErrors: () => (/* binding */ powerShellErrors),\n/* harmony export */   powerShellPublicErrorMessages: () => (/* binding */ powerShellPublicErrorMessages)\n/* harmony export */ });\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _util_processUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/processUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processUtils.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(\"AzurePowerShellCredential\");\nconst isWindows = process.platform === \"win32\";\n/**\n * Returns a platform-appropriate command name by appending \".exe\" on Windows.\n *\n * @internal\n */ function formatCommand(commandName) {\n    if (isWindows) {\n        return `${commandName}.exe`;\n    } else {\n        return commandName;\n    }\n}\n/**\n * Receives a list of commands to run, executes them, then returns the outputs.\n * If anything fails, an error is thrown.\n * @internal\n */ async function runCommands(commands, timeout) {\n    const results = [];\n    for (const command of commands){\n        const [file, ...parameters] = command;\n        const result = await _util_processUtils__WEBPACK_IMPORTED_MODULE_1__.processUtils.execFile(file, parameters, {\n            encoding: \"utf8\",\n            timeout\n        });\n        results.push(result);\n    }\n    return results;\n}\n/**\n * Known PowerShell errors\n * @internal\n */ const powerShellErrors = {\n    login: \"Run Connect-AzAccount to login\",\n    installed: \"The specified module 'Az.Accounts' with version '2.2.0' was not loaded because no valid module file was found in any module directory\"\n};\n/**\n * Messages to use when throwing in this credential.\n * @internal\n */ const powerShellPublicErrorMessages = {\n    login: \"Please run 'Connect-AzAccount' from PowerShell to authenticate before using this credential.\",\n    installed: `The 'Az.Account' module >= 2.2.0 is not installed. Install the Azure Az PowerShell module with: \"Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force\".`,\n    troubleshoot: `To troubleshoot, visit https://aka.ms/azsdk/js/identity/powershellcredential/troubleshoot.`\n};\n// PowerShell Azure User not logged in error check.\nconst isLoginError = (err)=>err.message.match(`(.*)${powerShellErrors.login}(.*)`);\n// Az Module not Installed in Azure PowerShell check.\nconst isNotInstalledError = (err)=>err.message.match(powerShellErrors.installed);\n/**\n * The PowerShell commands to be tried, in order.\n *\n * @internal\n */ const commandStack = [\n    formatCommand(\"pwsh\")\n];\nif (isWindows) {\n    commandStack.push(formatCommand(\"powershell\"));\n}\n/**\n * This credential will use the currently logged-in user information from the\n * Azure PowerShell module. To do so, it will read the user access token and\n * expire time with Azure PowerShell command `Get-AzAccessToken -ResourceUrl {ResourceScope}`\n */ class AzurePowerShellCredential {\n    /**\n     * Creates an instance of the {@link AzurePowerShellCredential}.\n     *\n     * To use this credential:\n     * - Install the Azure Az PowerShell module with:\n     *   `Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force`.\n     * - You have already logged in to Azure PowerShell using the command\n     * `Connect-AzAccount` from the command line.\n     *\n     * @param options - Options, to optionally allow multi-tenant requests.\n     */ constructor(options){\n        if (options === null || options === void 0 ? void 0 : options.tenantId) {\n            (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.checkTenantId)(logger, options === null || options === void 0 ? void 0 : options.tenantId);\n            this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;\n        }\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.timeout = options === null || options === void 0 ? void 0 : options.processTimeoutInMs;\n    }\n    /**\n     * Gets the access token from Azure PowerShell\n     * @param resource - The resource to use when getting the token\n     */ async getAzurePowerShellAccessToken(resource, tenantId, timeout) {\n        // Clone the stack to avoid mutating it while iterating\n        for (const powerShellCommand of [\n            ...commandStack\n        ]){\n            try {\n                await runCommands([\n                    [\n                        powerShellCommand,\n                        \"/?\"\n                    ]\n                ], timeout);\n            } catch (e) {\n                // Remove this credential from the original stack so that we don't try it again.\n                commandStack.shift();\n                continue;\n            }\n            let tenantSection = \"\";\n            if (tenantId) {\n                tenantSection = `-TenantId \"${tenantId}\"`;\n            }\n            const results = await runCommands([\n                [\n                    powerShellCommand,\n                    \"-NoProfile\",\n                    \"-NonInteractive\",\n                    \"-Command\",\n                    \"Import-Module Az.Accounts -MinimumVersion 2.2.0 -PassThru\"\n                ],\n                [\n                    powerShellCommand,\n                    \"-NoProfile\",\n                    \"-NonInteractive\",\n                    \"-Command\",\n                    `Get-AzAccessToken ${tenantSection} -ResourceUrl \"${resource}\" | ConvertTo-Json`\n                ]\n            ]);\n            const result = results[1];\n            try {\n                return JSON.parse(result);\n            } catch (e) {\n                throw new Error(`Unable to parse the output of PowerShell. Received output: ${result}`);\n            }\n        }\n        throw new Error(`Unable to execute PowerShell. Ensure that it is installed in your system`);\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If the authentication cannot be performed through PowerShell, a {@link CredentialUnavailableError} will be thrown.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async ()=>{\n            const tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, options, this.additionallyAllowedTenantIds);\n            const scope = typeof scopes === \"string\" ? scopes : scopes[0];\n            if (tenantId) {\n                (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.checkTenantId)(logger, tenantId);\n            }\n            try {\n                (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureValidScopeForDevTimeCreds)(scope, logger);\n                logger.getToken.info(`Using the scope ${scope}`);\n                const resource = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.getScopeResource)(scope);\n                const response = await this.getAzurePowerShellAccessToken(resource, tenantId, this.timeout);\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatSuccess)(scopes));\n                return {\n                    token: response.Token,\n                    expiresOnTimestamp: new Date(response.ExpiresOn).getTime()\n                };\n            } catch (err) {\n                if (isNotInstalledError(err)) {\n                    const error = new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(powerShellPublicErrorMessages.installed);\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatError)(scope, error));\n                    throw error;\n                } else if (isLoginError(err)) {\n                    const error = new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(powerShellPublicErrorMessages.login);\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatError)(scope, error));\n                    throw error;\n                }\n                const error = new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(`${err}. ${powerShellPublicErrorMessages.troubleshoot}`);\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatError)(scope, error));\n                throw error;\n            }\n        });\n    }\n} //# sourceMappingURL=azurePowerShellCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azurePowerShellCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/chainedTokenCredential.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/chainedTokenCredential.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainedTokenCredential: () => (/* binding */ ChainedTokenCredential),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * @internal\n */ const logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(\"ChainedTokenCredential\");\n/**\n * Enables multiple `TokenCredential` implementations to be tried in order\n * until one of the getToken methods returns an access token.\n */ class ChainedTokenCredential {\n    /**\n     * Creates an instance of ChainedTokenCredential using the given credentials.\n     *\n     * @param sources - `TokenCredential` implementations to be tried in order.\n     *\n     * Example usage:\n     * ```javascript\n     * const firstCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);\n     * const secondCredential = new ClientSecretCredential(tenantId, anotherClientId, anotherSecret);\n     * const credentialChain = new ChainedTokenCredential(firstCredential, secondCredential);\n     * ```\n     */ constructor(...sources){\n        this._sources = [];\n        this._sources = sources;\n    }\n    /**\n     * Returns the first access token returned by one of the chained\n     * `TokenCredential` implementations.  Throws an {@link AggregateAuthenticationError}\n     * when one or more credentials throws an {@link AuthenticationError} and\n     * no credentials have returned an access token.\n     *\n     * This method is called automatically by Azure SDK client libraries. You may call this method\n     * directly, but you must also handle token caching and token refreshing.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                `TokenCredential` implementation might make.\n     */ async getToken(scopes, options = {}) {\n        const { token } = await this.getTokenInternal(scopes, options);\n        return token;\n    }\n    async getTokenInternal(scopes, options = {}) {\n        let token = null;\n        let successfulCredential;\n        const errors = [];\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_1__.tracingClient.withSpan(\"ChainedTokenCredential.getToken\", options, async (updatedOptions)=>{\n            for(let i = 0; i < this._sources.length && token === null; i++){\n                try {\n                    token = await this._sources[i].getToken(scopes, updatedOptions);\n                    successfulCredential = this._sources[i];\n                } catch (err) {\n                    if (err.name === \"CredentialUnavailableError\" || err.name === \"AuthenticationRequiredError\") {\n                        errors.push(err);\n                    } else {\n                        logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatError)(scopes, err));\n                        throw err;\n                    }\n                }\n            }\n            if (!token && errors.length > 0) {\n                const err = new _errors__WEBPACK_IMPORTED_MODULE_2__.AggregateAuthenticationError(errors, \"ChainedTokenCredential authentication failed.\");\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatError)(scopes, err));\n                throw err;\n            }\n            logger.getToken.info(`Result for ${successfulCredential.constructor.name}: ${(0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatSuccess)(scopes)}`);\n            if (token === null) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_2__.CredentialUnavailableError(\"Failed to retrieve a valid token\");\n            }\n            return {\n                token,\n                successfulCredential\n            };\n        });\n    }\n} //# sourceMappingURL=chainedTokenCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9jaGFpbmVkVG9rZW5DcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNtRDtBQUNOO0FBQy9CO0FBQ2hEOztDQUVDLEdBQ00sTUFBTU0sU0FBU0osK0RBQWdCQSxDQUFDLDBCQUEwQjtBQUNqRTs7O0NBR0MsR0FDTSxNQUFNSztJQUNUOzs7Ozs7Ozs7OztLQVdDLEdBQ0RDLFlBQVksR0FBR0MsT0FBTyxDQUFFO1FBQ3BCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDQSxRQUFRLEdBQUdEO0lBQ3BCO0lBQ0E7Ozs7Ozs7Ozs7OztLQVlDLEdBQ0QsTUFBTUUsU0FBU0MsTUFBTSxFQUFFQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ2pDLE1BQU0sRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUNDLGdCQUFnQixDQUFDSCxRQUFRQztRQUN0RCxPQUFPQztJQUNYO0lBQ0EsTUFBTUMsaUJBQWlCSCxNQUFNLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDekMsSUFBSUMsUUFBUTtRQUNaLElBQUlFO1FBQ0osTUFBTUMsU0FBUyxFQUFFO1FBQ2pCLE9BQU9aLHdEQUFhQSxDQUFDYSxRQUFRLENBQUMsbUNBQW1DTCxTQUFTLE9BQU9NO1lBQzdFLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQ1YsUUFBUSxDQUFDVyxNQUFNLElBQUlQLFVBQVUsTUFBTU0sSUFBSztnQkFDN0QsSUFBSTtvQkFDQU4sUUFBUSxNQUFNLElBQUksQ0FBQ0osUUFBUSxDQUFDVSxFQUFFLENBQUNULFFBQVEsQ0FBQ0MsUUFBUU87b0JBQ2hESCx1QkFBdUIsSUFBSSxDQUFDTixRQUFRLENBQUNVLEVBQUU7Z0JBQzNDLEVBQ0EsT0FBT0UsS0FBSztvQkFDUixJQUFJQSxJQUFJQyxJQUFJLEtBQUssZ0NBQ2JELElBQUlDLElBQUksS0FBSywrQkFBK0I7d0JBQzVDTixPQUFPTyxJQUFJLENBQUNGO29CQUNoQixPQUNLO3dCQUNEaEIsT0FBT0ssUUFBUSxDQUFDYyxJQUFJLENBQUN0QiwwREFBV0EsQ0FBQ1MsUUFBUVU7d0JBQ3pDLE1BQU1BO29CQUNWO2dCQUNKO1lBQ0o7WUFDQSxJQUFJLENBQUNSLFNBQVNHLE9BQU9JLE1BQU0sR0FBRyxHQUFHO2dCQUM3QixNQUFNQyxNQUFNLElBQUl0QixpRUFBNEJBLENBQUNpQixRQUFRO2dCQUNyRFgsT0FBT0ssUUFBUSxDQUFDYyxJQUFJLENBQUN0QiwwREFBV0EsQ0FBQ1MsUUFBUVU7Z0JBQ3pDLE1BQU1BO1lBQ1Y7WUFDQWhCLE9BQU9LLFFBQVEsQ0FBQ2MsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFVCxxQkFBcUJSLFdBQVcsQ0FBQ2UsSUFBSSxDQUFDLEVBQUUsRUFBRW5CLDREQUFhQSxDQUFDUSxRQUFRLENBQUM7WUFDcEcsSUFBSUUsVUFBVSxNQUFNO2dCQUNoQixNQUFNLElBQUliLCtEQUEwQkEsQ0FBQztZQUN6QztZQUNBLE9BQU87Z0JBQUVhO2dCQUFPRTtZQUFxQjtRQUN6QztJQUNKO0FBQ0osRUFDQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL2NyZWRlbnRpYWxzL2NoYWluZWRUb2tlbkNyZWRlbnRpYWwuanM/MzViYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEFnZ3JlZ2F0ZUF1dGhlbnRpY2F0aW9uRXJyb3IsIENyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuaW1wb3J0IHsgY3JlZGVudGlhbExvZ2dlciwgZm9ybWF0RXJyb3IsIGZvcm1hdFN1Y2Nlc3MgfSBmcm9tIFwiLi4vdXRpbC9sb2dnaW5nXCI7XG5pbXBvcnQgeyB0cmFjaW5nQ2xpZW50IH0gZnJvbSBcIi4uL3V0aWwvdHJhY2luZ1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IGNyZWRlbnRpYWxMb2dnZXIoXCJDaGFpbmVkVG9rZW5DcmVkZW50aWFsXCIpO1xuLyoqXG4gKiBFbmFibGVzIG11bHRpcGxlIGBUb2tlbkNyZWRlbnRpYWxgIGltcGxlbWVudGF0aW9ucyB0byBiZSB0cmllZCBpbiBvcmRlclxuICogdW50aWwgb25lIG9mIHRoZSBnZXRUb2tlbiBtZXRob2RzIHJldHVybnMgYW4gYWNjZXNzIHRva2VuLlxuICovXG5leHBvcnQgY2xhc3MgQ2hhaW5lZFRva2VuQ3JlZGVudGlhbCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBDaGFpbmVkVG9rZW5DcmVkZW50aWFsIHVzaW5nIHRoZSBnaXZlbiBjcmVkZW50aWFscy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb3VyY2VzIC0gYFRva2VuQ3JlZGVudGlhbGAgaW1wbGVtZW50YXRpb25zIHRvIGJlIHRyaWVkIGluIG9yZGVyLlxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2FnZTpcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc3QgZmlyc3RDcmVkZW50aWFsID0gbmV3IENsaWVudFNlY3JldENyZWRlbnRpYWwodGVuYW50SWQsIGNsaWVudElkLCBjbGllbnRTZWNyZXQpO1xuICAgICAqIGNvbnN0IHNlY29uZENyZWRlbnRpYWwgPSBuZXcgQ2xpZW50U2VjcmV0Q3JlZGVudGlhbCh0ZW5hbnRJZCwgYW5vdGhlckNsaWVudElkLCBhbm90aGVyU2VjcmV0KTtcbiAgICAgKiBjb25zdCBjcmVkZW50aWFsQ2hhaW4gPSBuZXcgQ2hhaW5lZFRva2VuQ3JlZGVudGlhbChmaXJzdENyZWRlbnRpYWwsIHNlY29uZENyZWRlbnRpYWwpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKC4uLnNvdXJjZXMpIHtcbiAgICAgICAgdGhpcy5fc291cmNlcyA9IFtdO1xuICAgICAgICB0aGlzLl9zb3VyY2VzID0gc291cmNlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZmlyc3QgYWNjZXNzIHRva2VuIHJldHVybmVkIGJ5IG9uZSBvZiB0aGUgY2hhaW5lZFxuICAgICAqIGBUb2tlbkNyZWRlbnRpYWxgIGltcGxlbWVudGF0aW9ucy4gIFRocm93cyBhbiB7QGxpbmsgQWdncmVnYXRlQXV0aGVudGljYXRpb25FcnJvcn1cbiAgICAgKiB3aGVuIG9uZSBvciBtb3JlIGNyZWRlbnRpYWxzIHRocm93cyBhbiB7QGxpbmsgQXV0aGVudGljYXRpb25FcnJvcn0gYW5kXG4gICAgICogbm8gY3JlZGVudGlhbHMgaGF2ZSByZXR1cm5lZCBhbiBhY2Nlc3MgdG9rZW4uXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYXV0b21hdGljYWxseSBieSBBenVyZSBTREsgY2xpZW50IGxpYnJhcmllcy4gWW91IG1heSBjYWxsIHRoaXMgbWV0aG9kXG4gICAgICogZGlyZWN0bHksIGJ1dCB5b3UgbXVzdCBhbHNvIGhhbmRsZSB0b2tlbiBjYWNoaW5nIGFuZCB0b2tlbiByZWZyZXNoaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlcyAtIFRoZSBsaXN0IG9mIHNjb3BlcyBmb3Igd2hpY2ggdGhlIHRva2VuIHdpbGwgaGF2ZSBhY2Nlc3MuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB1c2VkIHRvIGNvbmZpZ3VyZSBhbnkgcmVxdWVzdHMgdGhpc1xuICAgICAqICAgICAgICAgICAgICAgIGBUb2tlbkNyZWRlbnRpYWxgIGltcGxlbWVudGF0aW9uIG1pZ2h0IG1ha2UuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oc2NvcGVzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgeyB0b2tlbiB9ID0gYXdhaXQgdGhpcy5nZXRUb2tlbkludGVybmFsKHNjb3Blcywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgYXN5bmMgZ2V0VG9rZW5JbnRlcm5hbChzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgdG9rZW4gPSBudWxsO1xuICAgICAgICBsZXQgc3VjY2Vzc2Z1bENyZWRlbnRpYWw7XG4gICAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkNoYWluZWRUb2tlbkNyZWRlbnRpYWwuZ2V0VG9rZW5cIiwgb3B0aW9ucywgYXN5bmMgKHVwZGF0ZWRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3NvdXJjZXMubGVuZ3RoICYmIHRva2VuID09PSBudWxsOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IGF3YWl0IHRoaXMuX3NvdXJjZXNbaV0uZ2V0VG9rZW4oc2NvcGVzLCB1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxDcmVkZW50aWFsID0gdGhpcy5fc291cmNlc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyLm5hbWUgPT09IFwiQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3JcIiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm5hbWUgPT09IFwiQXV0aGVudGljYXRpb25SZXF1aXJlZEVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZ2V0VG9rZW4uaW5mbyhmb3JtYXRFcnJvcihzY29wZXMsIGVycikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0b2tlbiAmJiBlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBBZ2dyZWdhdGVBdXRoZW50aWNhdGlvbkVycm9yKGVycm9ycywgXCJDaGFpbmVkVG9rZW5DcmVkZW50aWFsIGF1dGhlbnRpY2F0aW9uIGZhaWxlZC5cIik7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmdldFRva2VuLmluZm8oZm9ybWF0RXJyb3Ioc2NvcGVzLCBlcnIpKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXIuZ2V0VG9rZW4uaW5mbyhgUmVzdWx0IGZvciAke3N1Y2Nlc3NmdWxDcmVkZW50aWFsLmNvbnN0cnVjdG9yLm5hbWV9OiAke2Zvcm1hdFN1Y2Nlc3Moc2NvcGVzKX1gKTtcbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihcIkZhaWxlZCB0byByZXRyaWV2ZSBhIHZhbGlkIHRva2VuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgdG9rZW4sIHN1Y2Nlc3NmdWxDcmVkZW50aWFsIH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYWluZWRUb2tlbkNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbIkFnZ3JlZ2F0ZUF1dGhlbnRpY2F0aW9uRXJyb3IiLCJDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvciIsImNyZWRlbnRpYWxMb2dnZXIiLCJmb3JtYXRFcnJvciIsImZvcm1hdFN1Y2Nlc3MiLCJ0cmFjaW5nQ2xpZW50IiwibG9nZ2VyIiwiQ2hhaW5lZFRva2VuQ3JlZGVudGlhbCIsImNvbnN0cnVjdG9yIiwic291cmNlcyIsIl9zb3VyY2VzIiwiZ2V0VG9rZW4iLCJzY29wZXMiLCJvcHRpb25zIiwidG9rZW4iLCJnZXRUb2tlbkludGVybmFsIiwic3VjY2Vzc2Z1bENyZWRlbnRpYWwiLCJlcnJvcnMiLCJ3aXRoU3BhbiIsInVwZGF0ZWRPcHRpb25zIiwiaSIsImxlbmd0aCIsImVyciIsIm5hbWUiLCJwdXNoIiwiaW5mbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/chainedTokenCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientAssertionCredential.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/clientAssertionCredential.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientAssertionCredential: () => (/* binding */ ClientAssertionCredential)\n/* harmony export */ });\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _msal_nodeFlows_msalClientAssertion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../msal/nodeFlows/msalClientAssertion */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientAssertion.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(\"ClientAssertionCredential\");\n/**\n * Authenticates a service principal with a JWT assertion.\n */ class ClientAssertionCredential {\n    /**\n     * Creates an instance of the ClientAssertionCredential with the details\n     * needed to authenticate against Azure Active Directory with a client\n     * assertion provided by the developer through the `getAssertion` function parameter.\n     *\n     * @param tenantId - The Azure Active Directory tenant (directory) ID.\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param getAssertion - A function that retrieves the assertion for the credential to use.\n     * @param options - Options for configuring the client which makes the authentication request.\n     */ constructor(tenantId, clientId, getAssertion, options = {}){\n        if (!tenantId || !clientId || !getAssertion) {\n            throw new Error(\"ClientAssertionCredential: tenantId, clientId, and clientAssertion are required parameters.\");\n        }\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.clientId = clientId;\n        this.options = options;\n        this.msalFlow = new _msal_nodeFlows_msalClientAssertion__WEBPACK_IMPORTED_MODULE_2__.MsalClientAssertion(Object.assign(Object.assign({}, options), {\n            logger,\n            clientId: this.clientId,\n            tenantId: this.tenantId,\n            tokenCredentialOptions: this.options,\n            getAssertion\n        }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{\n            newOptions.tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = Array.isArray(scopes) ? scopes : [\n                scopes\n            ];\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n} //# sourceMappingURL=clientAssertionCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9jbGllbnRBc3NlcnRpb25DcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDc0U7QUFDNUI7QUFDekI7QUFDSDtBQUNoRCxNQUFNSyxTQUFTRiwrREFBZ0JBLENBQUM7QUFDaEM7O0NBRUMsR0FDTSxNQUFNRztJQUNUOzs7Ozs7Ozs7S0FTQyxHQUNEQyxZQUFZQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsWUFBWSxFQUFFQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ3hELElBQUksQ0FBQ0gsWUFBWSxDQUFDQyxZQUFZLENBQUNDLGNBQWM7WUFDekMsTUFBTSxJQUFJRSxNQUFNO1FBQ3BCO1FBQ0EsSUFBSSxDQUFDSixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0ssNEJBQTRCLEdBQUdaLHdGQUFtQ0EsQ0FBQ1UsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFHLDBCQUEwQjtRQUM1SixJQUFJLENBQUNMLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDRSxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDSSxRQUFRLEdBQUcsSUFBSWIsb0ZBQW1CQSxDQUFDYyxPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdOLFVBQVU7WUFBRU47WUFBUUksVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFBRUQsVUFBVSxJQUFJLENBQUNBLFFBQVE7WUFBRVUsd0JBQXdCLElBQUksQ0FBQ1AsT0FBTztZQUFFRDtRQUFhO0lBQ3JNO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE1BQU1TLFNBQVNDLE1BQU0sRUFBRVQsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNqQyxPQUFPUCx3REFBYUEsQ0FBQ2lCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDZCxXQUFXLENBQUNlLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRVgsU0FBUyxPQUFPWTtZQUMvRUEsV0FBV2YsUUFBUSxHQUFHUiw4RUFBeUJBLENBQUMsSUFBSSxDQUFDUSxRQUFRLEVBQUVlLFlBQVksSUFBSSxDQUFDViw0QkFBNEIsRUFBRVI7WUFDOUcsTUFBTW1CLGNBQWNDLE1BQU1DLE9BQU8sQ0FBQ04sVUFBVUEsU0FBUztnQkFBQ0E7YUFBTztZQUM3RCxPQUFPLElBQUksQ0FBQ0wsUUFBUSxDQUFDSSxRQUFRLENBQUNLLGFBQWFEO1FBQy9DO0lBQ0o7QUFDSixFQUNBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvY3JlZGVudGlhbHMvY2xpZW50QXNzZXJ0aW9uQ3JlZGVudGlhbC5qcz9hYWMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgcHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdCwgcmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMsIH0gZnJvbSBcIi4uL3V0aWwvdGVuYW50SWRVdGlsc1wiO1xuaW1wb3J0IHsgTXNhbENsaWVudEFzc2VydGlvbiB9IGZyb20gXCIuLi9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50QXNzZXJ0aW9uXCI7XG5pbXBvcnQgeyBjcmVkZW50aWFsTG9nZ2VyIH0gZnJvbSBcIi4uL3V0aWwvbG9nZ2luZ1wiO1xuaW1wb3J0IHsgdHJhY2luZ0NsaWVudCB9IGZyb20gXCIuLi91dGlsL3RyYWNpbmdcIjtcbmNvbnN0IGxvZ2dlciA9IGNyZWRlbnRpYWxMb2dnZXIoXCJDbGllbnRBc3NlcnRpb25DcmVkZW50aWFsXCIpO1xuLyoqXG4gKiBBdXRoZW50aWNhdGVzIGEgc2VydmljZSBwcmluY2lwYWwgd2l0aCBhIEpXVCBhc3NlcnRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRBc3NlcnRpb25DcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBDbGllbnRBc3NlcnRpb25DcmVkZW50aWFsIHdpdGggdGhlIGRldGFpbHNcbiAgICAgKiBuZWVkZWQgdG8gYXV0aGVudGljYXRlIGFnYWluc3QgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSB3aXRoIGEgY2xpZW50XG4gICAgICogYXNzZXJ0aW9uIHByb3ZpZGVkIGJ5IHRoZSBkZXZlbG9wZXIgdGhyb3VnaCB0aGUgYGdldEFzc2VydGlvbmAgZnVuY3Rpb24gcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRlbmFudElkIC0gVGhlIEF6dXJlIEFjdGl2ZSBEaXJlY3RvcnkgdGVuYW50IChkaXJlY3RvcnkpIElELlxuICAgICAqIEBwYXJhbSBjbGllbnRJZCAtIFRoZSBjbGllbnQgKGFwcGxpY2F0aW9uKSBJRCBvZiBhbiBBcHAgUmVnaXN0cmF0aW9uIGluIHRoZSB0ZW5hbnQuXG4gICAgICogQHBhcmFtIGdldEFzc2VydGlvbiAtIEEgZnVuY3Rpb24gdGhhdCByZXRyaWV2ZXMgdGhlIGFzc2VydGlvbiBmb3IgdGhlIGNyZWRlbnRpYWwgdG8gdXNlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIGNsaWVudCB3aGljaCBtYWtlcyB0aGUgYXV0aGVudGljYXRpb24gcmVxdWVzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0ZW5hbnRJZCwgY2xpZW50SWQsIGdldEFzc2VydGlvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICghdGVuYW50SWQgfHwgIWNsaWVudElkIHx8ICFnZXRBc3NlcnRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWw6IHRlbmFudElkLCBjbGllbnRJZCwgYW5kIGNsaWVudEFzc2VydGlvbiBhcmUgcmVxdWlyZWQgcGFyYW1ldGVycy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZW5hbnRJZCA9IHRlbmFudElkO1xuICAgICAgICB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMgPSByZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyhvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMpO1xuICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubXNhbEZsb3cgPSBuZXcgTXNhbENsaWVudEFzc2VydGlvbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGxvZ2dlciwgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsIHRlbmFudElkOiB0aGlzLnRlbmFudElkLCB0b2tlbkNyZWRlbnRpYWxPcHRpb25zOiB0aGlzLm9wdGlvbnMsIGdldEFzc2VydGlvbiB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZXMgd2l0aCBBenVyZSBBY3RpdmUgRGlyZWN0b3J5IGFuZCByZXR1cm5zIGFuIGFjY2VzcyB0b2tlbiBpZiBzdWNjZXNzZnVsLlxuICAgICAqIElmIGF1dGhlbnRpY2F0aW9uIGZhaWxzLCBhIHtAbGluayBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcn0gd2lsbCBiZSB0aHJvd24gd2l0aCB0aGUgZGV0YWlscyBvZiB0aGUgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZXMgLSBUaGUgbGlzdCBvZiBzY29wZXMgZm9yIHdoaWNoIHRoZSB0b2tlbiB3aWxsIGhhdmUgYWNjZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgYW55IHJlcXVlc3RzIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICBUb2tlbkNyZWRlbnRpYWwgaW1wbGVtZW50YXRpb24gbWlnaHQgbWFrZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LmdldFRva2VuYCwgb3B0aW9ucywgYXN5bmMgKG5ld09wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIG5ld09wdGlvbnMudGVuYW50SWQgPSBwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0KHRoaXMudGVuYW50SWQsIG5ld09wdGlvbnMsIHRoaXMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcywgbG9nZ2VyKTtcbiAgICAgICAgICAgIGNvbnN0IGFycmF5U2NvcGVzID0gQXJyYXkuaXNBcnJheShzY29wZXMpID8gc2NvcGVzIDogW3Njb3Blc107XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tc2FsRmxvdy5nZXRUb2tlbihhcnJheVNjb3BlcywgbmV3T3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbInByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QiLCJyZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyIsIk1zYWxDbGllbnRBc3NlcnRpb24iLCJjcmVkZW50aWFsTG9nZ2VyIiwidHJhY2luZ0NsaWVudCIsImxvZ2dlciIsIkNsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwiLCJjb25zdHJ1Y3RvciIsInRlbmFudElkIiwiY2xpZW50SWQiLCJnZXRBc3NlcnRpb24iLCJvcHRpb25zIiwiRXJyb3IiLCJhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzIiwiYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMiLCJtc2FsRmxvdyIsIk9iamVjdCIsImFzc2lnbiIsInRva2VuQ3JlZGVudGlhbE9wdGlvbnMiLCJnZXRUb2tlbiIsInNjb3BlcyIsIndpdGhTcGFuIiwibmFtZSIsIm5ld09wdGlvbnMiLCJhcnJheVNjb3BlcyIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientAssertionCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientCertificateCredential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/clientCertificateCredential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientCertificateCredential: () => (/* binding */ ClientCertificateCredential)\n/* harmony export */ });\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _msal_nodeFlows_msalClientCertificate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../msal/nodeFlows/msalClientCertificate */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientCertificate.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\nconst credentialName = \"ClientCertificateCredential\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(credentialName);\n/**\n * Enables authentication to Azure Active Directory using a PEM-encoded\n * certificate that is assigned to an App Registration. More information\n * on how to configure certificate authentication can be found here:\n *\n * https://learn.microsoft.com/en-us/azure/active-directory/develop/active-directory-certificate-credentials#register-your-certificate-with-azure-ad\n *\n */ class ClientCertificateCredential {\n    constructor(tenantId, clientId, certificatePathOrConfiguration, options = {}){\n        if (!tenantId || !clientId) {\n            throw new Error(`${credentialName}: tenantId and clientId are required parameters.`);\n        }\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        const configuration = Object.assign({}, typeof certificatePathOrConfiguration === \"string\" ? {\n            certificatePath: certificatePathOrConfiguration\n        } : certificatePathOrConfiguration);\n        const certificate = configuration.certificate;\n        const certificatePath = configuration.certificatePath;\n        if (!configuration || !(certificate || certificatePath)) {\n            throw new Error(`${credentialName}: Provide either a PEM certificate in string form, or the path to that certificate in the filesystem. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        if (certificate && certificatePath) {\n            throw new Error(`${credentialName}: To avoid unexpected behaviors, providing both the contents of a PEM certificate and the path to a PEM certificate is forbidden. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.`);\n        }\n        this.msalFlow = new _msal_nodeFlows_msalClientCertificate__WEBPACK_IMPORTED_MODULE_2__.MsalClientCertificate(Object.assign(Object.assign({}, options), {\n            configuration,\n            logger,\n            clientId,\n            tenantId,\n            sendCertificateChain: options.sendCertificateChain,\n            tokenCredentialOptions: options\n        }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${credentialName}.getToken`, options, async (newOptions)=>{\n            newOptions.tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = Array.isArray(scopes) ? scopes : [\n                scopes\n            ];\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n} //# sourceMappingURL=clientCertificateCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9jbGllbnRDZXJ0aWZpY2F0ZUNyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNzRTtBQUN4QjtBQUM3QjtBQUNIO0FBQ2hELE1BQU1LLGlCQUFpQjtBQUN2QixNQUFNQyxTQUFTSCwrREFBZ0JBLENBQUNFO0FBQ2hDOzs7Ozs7O0NBT0MsR0FDTSxNQUFNRTtJQUNUQyxZQUFZQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsOEJBQThCLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDMUUsSUFBSSxDQUFDSCxZQUFZLENBQUNDLFVBQVU7WUFDeEIsTUFBTSxJQUFJRyxNQUFNLENBQUMsRUFBRVIsZUFBZSxnREFBZ0QsQ0FBQztRQUN2RjtRQUNBLElBQUksQ0FBQ0ksUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNLLDRCQUE0QixHQUFHYix3RkFBbUNBLENBQUNXLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRRywwQkFBMEI7UUFDNUosTUFBTUMsZ0JBQWdCQyxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFJLE9BQU9QLG1DQUFtQyxXQUM3RTtZQUNFUSxpQkFBaUJSO1FBQ3JCLElBQ0VBO1FBQ04sTUFBTVMsY0FBY0osY0FDZkksV0FBVztRQUNoQixNQUFNRCxrQkFBa0JILGNBQWNHLGVBQWU7UUFDckQsSUFBSSxDQUFDSCxpQkFBaUIsQ0FBRUksQ0FBQUEsZUFBZUQsZUFBYyxHQUFJO1lBQ3JELE1BQU0sSUFBSU4sTUFBTSxDQUFDLEVBQUVSLGVBQWUsME1BQTBNLENBQUM7UUFDalA7UUFDQSxJQUFJZSxlQUFlRCxpQkFBaUI7WUFDaEMsTUFBTSxJQUFJTixNQUFNLENBQUMsRUFBRVIsZUFBZSxzT0FBc08sQ0FBQztRQUM3UTtRQUNBLElBQUksQ0FBQ2dCLFFBQVEsR0FBRyxJQUFJbkIsd0ZBQXFCQSxDQUFDZSxPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdOLFVBQVU7WUFBRUk7WUFDbEZWO1lBQ0FJO1lBQ0FEO1lBQVVhLHNCQUFzQlYsUUFBUVUsb0JBQW9CO1lBQUVDLHdCQUF3Qlg7UUFBUTtJQUN0RztJQUNBOzs7Ozs7O0tBT0MsR0FDRCxNQUFNWSxTQUFTQyxNQUFNLEVBQUViLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDakMsT0FBT1Isd0RBQWFBLENBQUNzQixRQUFRLENBQUMsQ0FBQyxFQUFFckIsZUFBZSxTQUFTLENBQUMsRUFBRU8sU0FBUyxPQUFPZTtZQUN4RUEsV0FBV2xCLFFBQVEsR0FBR1QsOEVBQXlCQSxDQUFDLElBQUksQ0FBQ1MsUUFBUSxFQUFFa0IsWUFBWSxJQUFJLENBQUNiLDRCQUE0QixFQUFFUjtZQUM5RyxNQUFNc0IsY0FBY0MsTUFBTUMsT0FBTyxDQUFDTCxVQUFVQSxTQUFTO2dCQUFDQTthQUFPO1lBQzdELE9BQU8sSUFBSSxDQUFDSixRQUFRLENBQUNHLFFBQVEsQ0FBQ0ksYUFBYUQ7UUFDL0M7SUFDSjtBQUNKLEVBQ0EsdURBQXVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9jbGllbnRDZXJ0aWZpY2F0ZUNyZWRlbnRpYWwuanM/MGNhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IHByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QsIHJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzLCB9IGZyb20gXCIuLi91dGlsL3RlbmFudElkVXRpbHNcIjtcbmltcG9ydCB7IE1zYWxDbGllbnRDZXJ0aWZpY2F0ZSB9IGZyb20gXCIuLi9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50Q2VydGlmaWNhdGVcIjtcbmltcG9ydCB7IGNyZWRlbnRpYWxMb2dnZXIgfSBmcm9tIFwiLi4vdXRpbC9sb2dnaW5nXCI7XG5pbXBvcnQgeyB0cmFjaW5nQ2xpZW50IH0gZnJvbSBcIi4uL3V0aWwvdHJhY2luZ1wiO1xuY29uc3QgY3JlZGVudGlhbE5hbWUgPSBcIkNsaWVudENlcnRpZmljYXRlQ3JlZGVudGlhbFwiO1xuY29uc3QgbG9nZ2VyID0gY3JlZGVudGlhbExvZ2dlcihjcmVkZW50aWFsTmFtZSk7XG4vKipcbiAqIEVuYWJsZXMgYXV0aGVudGljYXRpb24gdG8gQXp1cmUgQWN0aXZlIERpcmVjdG9yeSB1c2luZyBhIFBFTS1lbmNvZGVkXG4gKiBjZXJ0aWZpY2F0ZSB0aGF0IGlzIGFzc2lnbmVkIHRvIGFuIEFwcCBSZWdpc3RyYXRpb24uIE1vcmUgaW5mb3JtYXRpb25cbiAqIG9uIGhvdyB0byBjb25maWd1cmUgY2VydGlmaWNhdGUgYXV0aGVudGljYXRpb24gY2FuIGJlIGZvdW5kIGhlcmU6XG4gKlxuICogaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2FjdGl2ZS1kaXJlY3RvcnkvZGV2ZWxvcC9hY3RpdmUtZGlyZWN0b3J5LWNlcnRpZmljYXRlLWNyZWRlbnRpYWxzI3JlZ2lzdGVyLXlvdXItY2VydGlmaWNhdGUtd2l0aC1henVyZS1hZFxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIENsaWVudENlcnRpZmljYXRlQ3JlZGVudGlhbCB7XG4gICAgY29uc3RydWN0b3IodGVuYW50SWQsIGNsaWVudElkLCBjZXJ0aWZpY2F0ZVBhdGhPckNvbmZpZ3VyYXRpb24sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoIXRlbmFudElkIHx8ICFjbGllbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2NyZWRlbnRpYWxOYW1lfTogdGVuYW50SWQgYW5kIGNsaWVudElkIGFyZSByZXF1aXJlZCBwYXJhbWV0ZXJzLmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGVuYW50SWQgPSB0ZW5hbnRJZDtcbiAgICAgICAgdGhpcy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzID0gcmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzKTtcbiAgICAgICAgY29uc3QgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sICh0eXBlb2YgY2VydGlmaWNhdGVQYXRoT3JDb25maWd1cmF0aW9uID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBjZXJ0aWZpY2F0ZVBhdGg6IGNlcnRpZmljYXRlUGF0aE9yQ29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogY2VydGlmaWNhdGVQYXRoT3JDb25maWd1cmF0aW9uKSk7XG4gICAgICAgIGNvbnN0IGNlcnRpZmljYXRlID0gY29uZmlndXJhdGlvblxuICAgICAgICAgICAgLmNlcnRpZmljYXRlO1xuICAgICAgICBjb25zdCBjZXJ0aWZpY2F0ZVBhdGggPSBjb25maWd1cmF0aW9uLmNlcnRpZmljYXRlUGF0aDtcbiAgICAgICAgaWYgKCFjb25maWd1cmF0aW9uIHx8ICEoY2VydGlmaWNhdGUgfHwgY2VydGlmaWNhdGVQYXRoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2NyZWRlbnRpYWxOYW1lfTogUHJvdmlkZSBlaXRoZXIgYSBQRU0gY2VydGlmaWNhdGUgaW4gc3RyaW5nIGZvcm0sIG9yIHRoZSBwYXRoIHRvIHRoYXQgY2VydGlmaWNhdGUgaW4gdGhlIGZpbGVzeXN0ZW0uIFRvIHRyb3VibGVzaG9vdCwgdmlzaXQgaHR0cHM6Ly9ha2EubXMvYXpzZGsvanMvaWRlbnRpdHkvc2VydmljZXByaW5jaXBhbGF1dGhlbnRpY2F0aW9uL3Ryb3VibGVzaG9vdC5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2VydGlmaWNhdGUgJiYgY2VydGlmaWNhdGVQYXRoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7Y3JlZGVudGlhbE5hbWV9OiBUbyBhdm9pZCB1bmV4cGVjdGVkIGJlaGF2aW9ycywgcHJvdmlkaW5nIGJvdGggdGhlIGNvbnRlbnRzIG9mIGEgUEVNIGNlcnRpZmljYXRlIGFuZCB0aGUgcGF0aCB0byBhIFBFTSBjZXJ0aWZpY2F0ZSBpcyBmb3JiaWRkZW4uIFRvIHRyb3VibGVzaG9vdCwgdmlzaXQgaHR0cHM6Ly9ha2EubXMvYXpzZGsvanMvaWRlbnRpdHkvc2VydmljZXByaW5jaXBhbGF1dGhlbnRpY2F0aW9uL3Ryb3VibGVzaG9vdC5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1zYWxGbG93ID0gbmV3IE1zYWxDbGllbnRDZXJ0aWZpY2F0ZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICBjbGllbnRJZCxcbiAgICAgICAgICAgIHRlbmFudElkLCBzZW5kQ2VydGlmaWNhdGVDaGFpbjogb3B0aW9ucy5zZW5kQ2VydGlmaWNhdGVDaGFpbiwgdG9rZW5DcmVkZW50aWFsT3B0aW9uczogb3B0aW9ucyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZXMgd2l0aCBBenVyZSBBY3RpdmUgRGlyZWN0b3J5IGFuZCByZXR1cm5zIGFuIGFjY2VzcyB0b2tlbiBpZiBzdWNjZXNzZnVsLlxuICAgICAqIElmIGF1dGhlbnRpY2F0aW9uIGZhaWxzLCBhIHtAbGluayBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcn0gd2lsbCBiZSB0aHJvd24gd2l0aCB0aGUgZGV0YWlscyBvZiB0aGUgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZXMgLSBUaGUgbGlzdCBvZiBzY29wZXMgZm9yIHdoaWNoIHRoZSB0b2tlbiB3aWxsIGhhdmUgYWNjZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgYW55IHJlcXVlc3RzIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICBUb2tlbkNyZWRlbnRpYWwgaW1wbGVtZW50YXRpb24gbWlnaHQgbWFrZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihgJHtjcmVkZW50aWFsTmFtZX0uZ2V0VG9rZW5gLCBvcHRpb25zLCBhc3luYyAobmV3T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgbmV3T3B0aW9ucy50ZW5hbnRJZCA9IHByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QodGhpcy50ZW5hbnRJZCwgbmV3T3B0aW9ucywgdGhpcy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzLCBsb2dnZXIpO1xuICAgICAgICAgICAgY29uc3QgYXJyYXlTY29wZXMgPSBBcnJheS5pc0FycmF5KHNjb3BlcykgPyBzY29wZXMgOiBbc2NvcGVzXTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1zYWxGbG93LmdldFRva2VuKGFycmF5U2NvcGVzLCBuZXdPcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50Q2VydGlmaWNhdGVDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6WyJwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0IiwicmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMiLCJNc2FsQ2xpZW50Q2VydGlmaWNhdGUiLCJjcmVkZW50aWFsTG9nZ2VyIiwidHJhY2luZ0NsaWVudCIsImNyZWRlbnRpYWxOYW1lIiwibG9nZ2VyIiwiQ2xpZW50Q2VydGlmaWNhdGVDcmVkZW50aWFsIiwiY29uc3RydWN0b3IiLCJ0ZW5hbnRJZCIsImNsaWVudElkIiwiY2VydGlmaWNhdGVQYXRoT3JDb25maWd1cmF0aW9uIiwib3B0aW9ucyIsIkVycm9yIiwiYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyIsImFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzIiwiY29uZmlndXJhdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsImNlcnRpZmljYXRlUGF0aCIsImNlcnRpZmljYXRlIiwibXNhbEZsb3ciLCJzZW5kQ2VydGlmaWNhdGVDaGFpbiIsInRva2VuQ3JlZGVudGlhbE9wdGlvbnMiLCJnZXRUb2tlbiIsInNjb3BlcyIsIndpdGhTcGFuIiwibmV3T3B0aW9ucyIsImFycmF5U2NvcGVzIiwiQXJyYXkiLCJpc0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientCertificateCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientSecretCredential.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/clientSecretCredential.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientSecretCredential: () => (/* binding */ ClientSecretCredential)\n/* harmony export */ });\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _msal_nodeFlows_msalClientSecret__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../msal/nodeFlows/msalClientSecret */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientSecret.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(\"ClientSecretCredential\");\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration. More information on how\n * to configure a client secret can be found here:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */ class ClientSecretCredential {\n    /**\n     * Creates an instance of the ClientSecretCredential with the details\n     * needed to authenticate against Azure Active Directory with a client\n     * secret.\n     *\n     * @param tenantId - The Azure Active Directory tenant (directory) ID.\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param clientSecret - A client secret that was generated for the App Registration.\n     * @param options - Options for configuring the client which makes the authentication request.\n     */ constructor(tenantId, clientId, clientSecret, options = {}){\n        if (!tenantId || !clientId || !clientSecret) {\n            throw new Error(\"ClientSecretCredential: tenantId, clientId, and clientSecret are required parameters. To troubleshoot, visit https://aka.ms/azsdk/js/identity/serviceprincipalauthentication/troubleshoot.\");\n        }\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.msalFlow = new _msal_nodeFlows_msalClientSecret__WEBPACK_IMPORTED_MODULE_2__.MsalClientSecret(Object.assign(Object.assign({}, options), {\n            logger,\n            clientId,\n            tenantId,\n            clientSecret,\n            tokenCredentialOptions: options\n        }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{\n            newOptions.tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureScopes)(scopes);\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n} //# sourceMappingURL=clientSecretCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9jbGllbnRTZWNyZXRDcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ3NFO0FBQ2xDO0FBQ25CO0FBQ0Q7QUFDRjtBQUNoRCxNQUFNTSxTQUFTSCwrREFBZ0JBLENBQUM7QUFDaEM7Ozs7Ozs7Q0FPQyxHQUNNLE1BQU1JO0lBQ1Q7Ozs7Ozs7OztLQVNDLEdBQ0RDLFlBQVlDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxZQUFZLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDeEQsSUFBSSxDQUFDSCxZQUFZLENBQUNDLFlBQVksQ0FBQ0MsY0FBYztZQUN6QyxNQUFNLElBQUlFLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNKLFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDSyw0QkFBNEIsR0FBR2Isd0ZBQW1DQSxDQUFDVyxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUUcsMEJBQTBCO1FBQzVKLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUlkLDhFQUFnQkEsQ0FBQ2UsT0FBT0MsTUFBTSxDQUFDRCxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHTixVQUFVO1lBQUVOO1lBQzdFSTtZQUNBRDtZQUNBRTtZQUFjUSx3QkFBd0JQO1FBQVE7SUFDdEQ7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsTUFBTVEsU0FBU0MsTUFBTSxFQUFFVCxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ2pDLE9BQU9QLHdEQUFhQSxDQUFDaUIsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNkLFdBQVcsQ0FBQ2UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFWCxTQUFTLE9BQU9ZO1lBQy9FQSxXQUFXZixRQUFRLEdBQUdULDhFQUF5QkEsQ0FBQyxJQUFJLENBQUNTLFFBQVEsRUFBRWUsWUFBWSxJQUFJLENBQUNWLDRCQUE0QixFQUFFUjtZQUM5RyxNQUFNbUIsY0FBY3JCLDhEQUFZQSxDQUFDaUI7WUFDakMsT0FBTyxJQUFJLENBQUNMLFFBQVEsQ0FBQ0ksUUFBUSxDQUFDSyxhQUFhRDtRQUMvQztJQUNKO0FBQ0osRUFDQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL2NyZWRlbnRpYWxzL2NsaWVudFNlY3JldENyZWRlbnRpYWwuanM/MGIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IHByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QsIHJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzLCB9IGZyb20gXCIuLi91dGlsL3RlbmFudElkVXRpbHNcIjtcbmltcG9ydCB7IE1zYWxDbGllbnRTZWNyZXQgfSBmcm9tIFwiLi4vbXNhbC9ub2RlRmxvd3MvbXNhbENsaWVudFNlY3JldFwiO1xuaW1wb3J0IHsgY3JlZGVudGlhbExvZ2dlciB9IGZyb20gXCIuLi91dGlsL2xvZ2dpbmdcIjtcbmltcG9ydCB7IGVuc3VyZVNjb3BlcyB9IGZyb20gXCIuLi91dGlsL3Njb3BlVXRpbHNcIjtcbmltcG9ydCB7IHRyYWNpbmdDbGllbnQgfSBmcm9tIFwiLi4vdXRpbC90cmFjaW5nXCI7XG5jb25zdCBsb2dnZXIgPSBjcmVkZW50aWFsTG9nZ2VyKFwiQ2xpZW50U2VjcmV0Q3JlZGVudGlhbFwiKTtcbi8qKlxuICogRW5hYmxlcyBhdXRoZW50aWNhdGlvbiB0byBBenVyZSBBY3RpdmUgRGlyZWN0b3J5IHVzaW5nIGEgY2xpZW50IHNlY3JldFxuICogdGhhdCB3YXMgZ2VuZXJhdGVkIGZvciBhbiBBcHAgUmVnaXN0cmF0aW9uLiBNb3JlIGluZm9ybWF0aW9uIG9uIGhvd1xuICogdG8gY29uZmlndXJlIGEgY2xpZW50IHNlY3JldCBjYW4gYmUgZm91bmQgaGVyZTpcbiAqXG4gKiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9hY3RpdmUtZGlyZWN0b3J5L2RldmVsb3AvcXVpY2tzdGFydC1jb25maWd1cmUtYXBwLWFjY2Vzcy13ZWItYXBpcyNhZGQtY3JlZGVudGlhbHMtdG8teW91ci13ZWItYXBwbGljYXRpb25cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRTZWNyZXRDcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHRoZSBDbGllbnRTZWNyZXRDcmVkZW50aWFsIHdpdGggdGhlIGRldGFpbHNcbiAgICAgKiBuZWVkZWQgdG8gYXV0aGVudGljYXRlIGFnYWluc3QgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSB3aXRoIGEgY2xpZW50XG4gICAgICogc2VjcmV0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRlbmFudElkIC0gVGhlIEF6dXJlIEFjdGl2ZSBEaXJlY3RvcnkgdGVuYW50IChkaXJlY3RvcnkpIElELlxuICAgICAqIEBwYXJhbSBjbGllbnRJZCAtIFRoZSBjbGllbnQgKGFwcGxpY2F0aW9uKSBJRCBvZiBhbiBBcHAgUmVnaXN0cmF0aW9uIGluIHRoZSB0ZW5hbnQuXG4gICAgICogQHBhcmFtIGNsaWVudFNlY3JldCAtIEEgY2xpZW50IHNlY3JldCB0aGF0IHdhcyBnZW5lcmF0ZWQgZm9yIHRoZSBBcHAgUmVnaXN0cmF0aW9uLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgdGhlIGNsaWVudCB3aGljaCBtYWtlcyB0aGUgYXV0aGVudGljYXRpb24gcmVxdWVzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0ZW5hbnRJZCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICghdGVuYW50SWQgfHwgIWNsaWVudElkIHx8ICFjbGllbnRTZWNyZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNsaWVudFNlY3JldENyZWRlbnRpYWw6IHRlbmFudElkLCBjbGllbnRJZCwgYW5kIGNsaWVudFNlY3JldCBhcmUgcmVxdWlyZWQgcGFyYW1ldGVycy4gVG8gdHJvdWJsZXNob290LCB2aXNpdCBodHRwczovL2FrYS5tcy9henNkay9qcy9pZGVudGl0eS9zZXJ2aWNlcHJpbmNpcGFsYXV0aGVudGljYXRpb24vdHJvdWJsZXNob290LlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRlbmFudElkID0gdGVuYW50SWQ7XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyA9IHJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cyk7XG4gICAgICAgIHRoaXMubXNhbEZsb3cgPSBuZXcgTXNhbENsaWVudFNlY3JldChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGxvZ2dlcixcbiAgICAgICAgICAgIGNsaWVudElkLFxuICAgICAgICAgICAgdGVuYW50SWQsXG4gICAgICAgICAgICBjbGllbnRTZWNyZXQsIHRva2VuQ3JlZGVudGlhbE9wdGlvbnM6IG9wdGlvbnMgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdXRoZW50aWNhdGVzIHdpdGggQXp1cmUgQWN0aXZlIERpcmVjdG9yeSBhbmQgcmV0dXJucyBhbiBhY2Nlc3MgdG9rZW4gaWYgc3VjY2Vzc2Z1bC5cbiAgICAgKiBJZiBhdXRoZW50aWNhdGlvbiBmYWlscywgYSB7QGxpbmsgQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3J9IHdpbGwgYmUgdGhyb3duIHdpdGggdGhlIGRldGFpbHMgb2YgdGhlIGZhaWx1cmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2NvcGVzIC0gVGhlIGxpc3Qgb2Ygc2NvcGVzIGZvciB3aGljaCB0aGUgdG9rZW4gd2lsbCBoYXZlIGFjY2Vzcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHVzZWQgdG8gY29uZmlndXJlIGFueSByZXF1ZXN0cyB0aGlzXG4gICAgICogICAgICAgICAgICAgICAgVG9rZW5DcmVkZW50aWFsIGltcGxlbWVudGF0aW9uIG1pZ2h0IG1ha2UuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oc2NvcGVzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdDbGllbnQud2l0aFNwYW4oYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS5nZXRUb2tlbmAsIG9wdGlvbnMsIGFzeW5jIChuZXdPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBuZXdPcHRpb25zLnRlbmFudElkID0gcHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdCh0aGlzLnRlbmFudElkLCBuZXdPcHRpb25zLCB0aGlzLmFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMsIGxvZ2dlcik7XG4gICAgICAgICAgICBjb25zdCBhcnJheVNjb3BlcyA9IGVuc3VyZVNjb3BlcyhzY29wZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubXNhbEZsb3cuZ2V0VG9rZW4oYXJyYXlTY29wZXMsIG5ld09wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRTZWNyZXRDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6WyJwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0IiwicmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMiLCJNc2FsQ2xpZW50U2VjcmV0IiwiY3JlZGVudGlhbExvZ2dlciIsImVuc3VyZVNjb3BlcyIsInRyYWNpbmdDbGllbnQiLCJsb2dnZXIiLCJDbGllbnRTZWNyZXRDcmVkZW50aWFsIiwiY29uc3RydWN0b3IiLCJ0ZW5hbnRJZCIsImNsaWVudElkIiwiY2xpZW50U2VjcmV0Iiwib3B0aW9ucyIsIkVycm9yIiwiYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyIsImFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzIiwibXNhbEZsb3ciLCJPYmplY3QiLCJhc3NpZ24iLCJ0b2tlbkNyZWRlbnRpYWxPcHRpb25zIiwiZ2V0VG9rZW4iLCJzY29wZXMiLCJ3aXRoU3BhbiIsIm5hbWUiLCJuZXdPcHRpb25zIiwiYXJyYXlTY29wZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientSecretCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/defaultAzureCredential.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/defaultAzureCredential.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAzureCliCredential: () => (/* binding */ DefaultAzureCliCredential),\n/* harmony export */   DefaultAzureCredential: () => (/* binding */ DefaultAzureCredential),\n/* harmony export */   DefaultAzureDeveloperCliCredential: () => (/* binding */ DefaultAzureDeveloperCliCredential),\n/* harmony export */   DefaultAzurePowershellCredential: () => (/* binding */ DefaultAzurePowershellCredential),\n/* harmony export */   DefaultManagedIdentityCredential: () => (/* binding */ DefaultManagedIdentityCredential),\n/* harmony export */   DefaultWorkloadIdentityCredential: () => (/* binding */ DefaultWorkloadIdentityCredential),\n/* harmony export */   defaultCredentials: () => (/* binding */ defaultCredentials)\n/* harmony export */ });\n/* harmony import */ var _managedIdentityCredential__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./managedIdentityCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/index.js\");\n/* harmony import */ var _azureCliCredential__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./azureCliCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azureCliCredential.js\");\n/* harmony import */ var _azurePowerShellCredential__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./azurePowerShellCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azurePowerShellCredential.js\");\n/* harmony import */ var _chainedTokenCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chainedTokenCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/chainedTokenCredential.js\");\n/* harmony import */ var _environmentCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environmentCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/environmentCredential.js\");\n/* harmony import */ var _azureDeveloperCliCredential__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./azureDeveloperCliCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azureDeveloperCliCredential.js\");\n/* harmony import */ var _workloadIdentityCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./workloadIdentityCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/workloadIdentityCredential.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n/**\n * A shim around ManagedIdentityCredential that adapts it to accept\n * `DefaultAzureCredentialOptions`.\n *\n * @internal\n */ class DefaultManagedIdentityCredential extends _managedIdentityCredential__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityCredential {\n    // Constructor overload with just the other default options\n    // Last constructor overload with Union of all options not required since the above two constructor overloads have optional properties\n    constructor(options){\n        var _a, _b, _c;\n        const managedIdentityClientId = (_a = options === null || options === void 0 ? void 0 : options.managedIdentityClientId) !== null && _a !== void 0 ? _a : process.env.AZURE_CLIENT_ID;\n        const workloadIdentityClientId = (_b = options === null || options === void 0 ? void 0 : options.workloadIdentityClientId) !== null && _b !== void 0 ? _b : managedIdentityClientId;\n        const managedResourceId = options === null || options === void 0 ? void 0 : options.managedIdentityResourceId;\n        const workloadFile = process.env.AZURE_FEDERATED_TOKEN_FILE;\n        const tenantId = (_c = options === null || options === void 0 ? void 0 : options.tenantId) !== null && _c !== void 0 ? _c : process.env.AZURE_TENANT_ID;\n        // ManagedIdentityCredential throws if both the resourceId and the clientId are provided.\n        if (managedResourceId) {\n            const managedIdentityResourceIdOptions = Object.assign(Object.assign({}, options), {\n                resourceId: managedResourceId\n            });\n            super(managedIdentityResourceIdOptions);\n        } else if (workloadFile && workloadIdentityClientId) {\n            const workloadIdentityCredentialOptions = Object.assign(Object.assign({}, options), {\n                tenantId: tenantId\n            });\n            super(workloadIdentityClientId, workloadIdentityCredentialOptions);\n        } else if (managedIdentityClientId) {\n            const managedIdentityClientOptions = Object.assign(Object.assign({}, options), {\n                clientId: managedIdentityClientId\n            });\n            super(managedIdentityClientOptions);\n        } else {\n            super(options);\n        }\n    }\n}\n/**\n * A shim around WorkloadIdentityCredential that adapts it to accept\n * `DefaultAzureCredentialOptions`.\n *\n * @internal\n */ class DefaultWorkloadIdentityCredential extends _workloadIdentityCredential__WEBPACK_IMPORTED_MODULE_1__.WorkloadIdentityCredential {\n    // Constructor overload with just the other default options\n    // Last constructor overload with Union of all options not required since the above two constructor overloads have optional properties\n    constructor(options){\n        var _a, _b, _c;\n        const managedIdentityClientId = (_a = options === null || options === void 0 ? void 0 : options.managedIdentityClientId) !== null && _a !== void 0 ? _a : process.env.AZURE_CLIENT_ID;\n        const workloadIdentityClientId = (_b = options === null || options === void 0 ? void 0 : options.workloadIdentityClientId) !== null && _b !== void 0 ? _b : managedIdentityClientId;\n        const workloadFile = process.env.AZURE_FEDERATED_TOKEN_FILE;\n        const tenantId = (_c = options === null || options === void 0 ? void 0 : options.tenantId) !== null && _c !== void 0 ? _c : process.env.AZURE_TENANT_ID;\n        if (workloadFile && workloadIdentityClientId) {\n            const workloadIdentityCredentialOptions = Object.assign(Object.assign({}, options), {\n                tenantId,\n                clientId: workloadIdentityClientId,\n                tokenFilePath: workloadFile\n            });\n            super(workloadIdentityCredentialOptions);\n        } else if (tenantId) {\n            const workloadIdentityClientTenantOptions = Object.assign(Object.assign({}, options), {\n                tenantId\n            });\n            super(workloadIdentityClientTenantOptions);\n        } else {\n            super(options);\n        }\n    }\n}\nclass DefaultAzureDeveloperCliCredential extends _azureDeveloperCliCredential__WEBPACK_IMPORTED_MODULE_2__.AzureDeveloperCliCredential {\n    constructor(options){\n        super(Object.assign({\n            processTimeoutInMs: options === null || options === void 0 ? void 0 : options.processTimeoutInMs\n        }, options));\n    }\n}\nclass DefaultAzureCliCredential extends _azureCliCredential__WEBPACK_IMPORTED_MODULE_3__.AzureCliCredential {\n    constructor(options){\n        super(Object.assign({\n            processTimeoutInMs: options === null || options === void 0 ? void 0 : options.processTimeoutInMs\n        }, options));\n    }\n}\nclass DefaultAzurePowershellCredential extends _azurePowerShellCredential__WEBPACK_IMPORTED_MODULE_4__.AzurePowerShellCredential {\n    constructor(options){\n        super(Object.assign({\n            processTimeoutInMs: options === null || options === void 0 ? void 0 : options.processTimeoutInMs\n        }, options));\n    }\n}\nconst defaultCredentials = [\n    _environmentCredential__WEBPACK_IMPORTED_MODULE_5__.EnvironmentCredential,\n    DefaultWorkloadIdentityCredential,\n    DefaultManagedIdentityCredential,\n    DefaultAzureCliCredential,\n    DefaultAzurePowershellCredential,\n    DefaultAzureDeveloperCliCredential\n];\n/**\n * Provides a default {@link ChainedTokenCredential} configuration that should\n * work for most applications that use the Azure SDK.\n */ class DefaultAzureCredential extends _chainedTokenCredential__WEBPACK_IMPORTED_MODULE_6__.ChainedTokenCredential {\n    constructor(options){\n        super(...defaultCredentials.map((ctor)=>new ctor(options)));\n    }\n} //# sourceMappingURL=defaultAzureCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/defaultAzureCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/deviceCodeCredential.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/deviceCodeCredential.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeviceCodeCredential: () => (/* binding */ DeviceCodeCredential),\n/* harmony export */   defaultDeviceCodePromptCallback: () => (/* binding */ defaultDeviceCodePromptCallback)\n/* harmony export */ });\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _msal_nodeFlows_msalDeviceCode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../msal/nodeFlows/msalDeviceCode */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalDeviceCode.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(\"DeviceCodeCredential\");\n/**\n * Method that logs the user code from the DeviceCodeCredential.\n * @param deviceCodeInfo - The device code.\n */ function defaultDeviceCodePromptCallback(deviceCodeInfo) {\n    console.log(deviceCodeInfo.message);\n}\n/**\n * Enables authentication to Azure Active Directory using a device code\n * that the user can enter into https://microsoft.com/devicelogin.\n */ class DeviceCodeCredential {\n    /**\n     * Creates an instance of DeviceCodeCredential with the details needed\n     * to initiate the device code authorization flow with Azure Active Directory.\n     *\n     * A message will be logged, giving users a code that they can use to authenticate once they go to https://microsoft.com/devicelogin\n     *\n     * Developers can configure how this message is shown by passing a custom `userPromptCallback`:\n     *\n     * ```js\n     * const credential = new DeviceCodeCredential({\n     *   tenantId: env.AZURE_TENANT_ID,\n     *   clientId: env.AZURE_CLIENT_ID,\n     *   userPromptCallback: (info) => {\n     *     console.log(\"CUSTOMIZED PROMPT CALLBACK\", info.message);\n     *   }\n     * });\n     * ```\n     *\n     * @param options - Options for configuring the client which makes the authentication requests.\n     */ constructor(options){\n        this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.msalFlow = new _msal_nodeFlows_msalDeviceCode__WEBPACK_IMPORTED_MODULE_2__.MsalDeviceCode(Object.assign(Object.assign({}, options), {\n            logger,\n            userPromptCallback: (options === null || options === void 0 ? void 0 : options.userPromptCallback) || defaultDeviceCodePromptCallback,\n            tokenCredentialOptions: options || {}\n        }));\n        this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{\n            newOptions.tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureScopes)(scopes);\n            return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n                disableAutomaticAuthentication: this.disableAutomaticAuthentication\n            }));\n        });\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */ async authenticate(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.authenticate`, options, async (newOptions)=>{\n            const arrayScopes = Array.isArray(scopes) ? scopes : [\n                scopes\n            ];\n            await this.msalFlow.getToken(arrayScopes, newOptions);\n            return this.msalFlow.getActiveAccount();\n        });\n    }\n} //# sourceMappingURL=deviceCodeCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/deviceCodeCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/environmentCredential.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/environmentCredential.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AllSupportedEnvironmentVariables: () => (/* binding */ AllSupportedEnvironmentVariables),\n/* harmony export */   EnvironmentCredential: () => (/* binding */ EnvironmentCredential)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _clientCertificateCredential__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clientCertificateCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientCertificateCredential.js\");\n/* harmony import */ var _clientSecretCredential__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clientSecretCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientSecretCredential.js\");\n/* harmony import */ var _usernamePasswordCredential__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./usernamePasswordCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/usernamePasswordCredential.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n/**\n * Contains the list of all supported environment variable names so that an\n * appropriate error message can be generated when no credentials can be\n * configured.\n *\n * @internal\n */ const AllSupportedEnvironmentVariables = [\n    \"AZURE_TENANT_ID\",\n    \"AZURE_CLIENT_ID\",\n    \"AZURE_CLIENT_SECRET\",\n    \"AZURE_CLIENT_CERTIFICATE_PATH\",\n    \"AZURE_CLIENT_CERTIFICATE_PASSWORD\",\n    \"AZURE_USERNAME\",\n    \"AZURE_PASSWORD\",\n    \"AZURE_ADDITIONALLY_ALLOWED_TENANTS\"\n];\nfunction getAdditionallyAllowedTenants() {\n    var _a;\n    const additionallyAllowedValues = (_a = process.env.AZURE_ADDITIONALLY_ALLOWED_TENANTS) !== null && _a !== void 0 ? _a : \"\";\n    return additionallyAllowedValues.split(\";\");\n}\nconst credentialName = \"EnvironmentCredential\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(credentialName);\n/**\n * Enables authentication to Azure Active Directory using a client secret or certificate, or as a user\n * with a username and password.\n */ class EnvironmentCredential {\n    /**\n     * Creates an instance of the EnvironmentCredential class and decides what credential to use depending on the available environment variables.\n     *\n     * Required environment variables:\n     * - `AZURE_TENANT_ID`: The Azure Active Directory tenant (directory) ID.\n     * - `AZURE_CLIENT_ID`: The client (application) ID of an App Registration in the tenant.\n     *\n     * If setting the AZURE_TENANT_ID, then you can also set the additionally allowed tenants\n     * - `AZURE_ADDITIONALLY_ALLOWED_TENANTS`: For multi-tenant applications, specifies additional tenants for which the credential may acquire tokens with a single semicolon delimited string. Use * to allow all tenants.\n     *\n     * Environment variables used for client credential authentication:\n     * - `AZURE_CLIENT_SECRET`: A client secret that was generated for the App Registration.\n     * - `AZURE_CLIENT_CERTIFICATE_PATH`: The path to a PEM certificate to use during the authentication, instead of the client secret.\n     * - `AZURE_CLIENT_CERTIFICATE_PASSWORD`: (optional) password for the certificate file.\n     *\n     * Alternatively, users can provide environment variables for username and password authentication:\n     * - `AZURE_USERNAME`: Username to authenticate with.\n     * - `AZURE_PASSWORD`: Password to authenticate with.\n     *\n     * If the environment variables required to perform the authentication are missing, a {@link CredentialUnavailableError} will be thrown.\n     * If the authentication fails, or if there's an unknown error, an {@link AuthenticationError} will be thrown.\n     *\n     * @param options - Options for configuring the client which makes the authentication request.\n     */ constructor(options){\n        // Keep track of any missing environment variables for error details\n        this._credential = undefined;\n        const assigned = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.processEnvVars)(AllSupportedEnvironmentVariables).assigned.join(\", \");\n        logger.info(`Found the following environment variables: ${assigned}`);\n        const tenantId = process.env.AZURE_TENANT_ID, clientId = process.env.AZURE_CLIENT_ID, clientSecret = process.env.AZURE_CLIENT_SECRET;\n        const additionallyAllowedTenantIds = getAdditionallyAllowedTenants();\n        const newOptions = Object.assign(Object.assign({}, options), {\n            additionallyAllowedTenantIds\n        });\n        if (tenantId) {\n            (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.checkTenantId)(logger, tenantId);\n        }\n        if (tenantId && clientId && clientSecret) {\n            logger.info(`Invoking ClientSecretCredential with tenant ID: ${tenantId}, clientId: ${clientId} and clientSecret: [REDACTED]`);\n            this._credential = new _clientSecretCredential__WEBPACK_IMPORTED_MODULE_2__.ClientSecretCredential(tenantId, clientId, clientSecret, newOptions);\n            return;\n        }\n        const certificatePath = process.env.AZURE_CLIENT_CERTIFICATE_PATH;\n        const certificatePassword = process.env.AZURE_CLIENT_CERTIFICATE_PASSWORD;\n        if (tenantId && clientId && certificatePath) {\n            logger.info(`Invoking ClientCertificateCredential with tenant ID: ${tenantId}, clientId: ${clientId} and certificatePath: ${certificatePath}`);\n            this._credential = new _clientCertificateCredential__WEBPACK_IMPORTED_MODULE_3__.ClientCertificateCredential(tenantId, clientId, {\n                certificatePath,\n                certificatePassword\n            }, newOptions);\n            return;\n        }\n        const username = process.env.AZURE_USERNAME;\n        const password = process.env.AZURE_PASSWORD;\n        if (tenantId && clientId && username && password) {\n            logger.info(`Invoking UsernamePasswordCredential with tenant ID: ${tenantId}, clientId: ${clientId} and username: ${username}`);\n            this._credential = new _usernamePasswordCredential__WEBPACK_IMPORTED_MODULE_4__.UsernamePasswordCredential(tenantId, clientId, username, password, newOptions);\n        }\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - Optional parameters. See {@link GetTokenOptions}.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_5__.tracingClient.withSpan(`${credentialName}.getToken`, options, async (newOptions)=>{\n            if (this._credential) {\n                try {\n                    const result = await this._credential.getToken(scopes, newOptions);\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatSuccess)(scopes));\n                    return result;\n                } catch (err) {\n                    const authenticationError = new _errors__WEBPACK_IMPORTED_MODULE_6__.AuthenticationError(400, {\n                        error: `${credentialName} authentication failed. To troubleshoot, visit https://aka.ms/azsdk/js/identity/environmentcredential/troubleshoot.`,\n                        error_description: err.message.toString().split(\"More details:\").join(\"\")\n                    });\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.formatError)(scopes, authenticationError));\n                    throw authenticationError;\n                }\n            }\n            throw new _errors__WEBPACK_IMPORTED_MODULE_6__.CredentialUnavailableError(`${credentialName} is unavailable. No underlying credential could be used. To troubleshoot, visit https://aka.ms/azsdk/js/identity/environmentcredential/troubleshoot.`);\n        });\n    }\n} //# sourceMappingURL=environmentCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/environmentCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/interactiveBrowserCredential.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/interactiveBrowserCredential.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractiveBrowserCredential: () => (/* binding */ InteractiveBrowserCredential)\n/* harmony export */ });\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _msal_nodeFlows_msalOpenBrowser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../msal/nodeFlows/msalOpenBrowser */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalOpenBrowser.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */ class InteractiveBrowserCredential {\n    /**\n     * Creates an instance of InteractiveBrowserCredential with the details needed.\n     *\n     * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n     * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n     * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n     *\n     * For Node.js, if a `clientId` is provided, the Azure Active Directory application will need to be configured to have a \"Mobile and desktop applications\" redirect endpoint.\n     * Follow our guide on [setting up Redirect URIs for Desktop apps that calls to web APIs](https://docs.microsoft.com/azure/active-directory/develop/scenario-desktop-app-registration#redirect-uris).\n     *\n     * @param options - Options for configuring the client which makes the authentication requests.\n     */ constructor(options = {}){\n        const redirectUri = typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri || \"http://localhost\";\n        this.tenantId = options === null || options === void 0 ? void 0 : options.tenantId;\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.msalFlow = new _msal_nodeFlows_msalOpenBrowser__WEBPACK_IMPORTED_MODULE_2__.MsalOpenBrowser(Object.assign(Object.assign({}, options), {\n            tokenCredentialOptions: options,\n            logger,\n            redirectUri\n        }));\n        this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{\n            newOptions.tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureScopes)(scopes);\n            return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n                disableAutomaticAuthentication: this.disableAutomaticAuthentication\n            }));\n        });\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n     *\n     * On Node.js, this credential has [Proof Key for Code Exchange (PKCE)](https://datatracker.ietf.org/doc/html/rfc7636) enabled by default.\n     * PKCE is a security feature that mitigates authentication code interception attacks.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                  TokenCredential implementation might make.\n     */ async authenticate(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.authenticate`, options, async (newOptions)=>{\n            const arrayScopes = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureScopes)(scopes);\n            await this.msalFlow.getToken(arrayScopes, newOptions);\n            return this.msalFlow.getActiveAccount();\n        });\n    }\n} //# sourceMappingURL=interactiveBrowserCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/interactiveBrowserCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/appServiceMsi2017.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/appServiceMsi2017.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appServiceMsi2017: () => (/* binding */ appServiceMsi2017)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nconst msiName = \"ManagedIdentityCredential - AppServiceMSI 2017\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.credentialLogger)(msiName);\n/**\n * Generates the options used on the request for an access token.\n */ function prepareRequestOptions(scopes, clientId) {\n    const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.mapScopesToResource)(scopes);\n    if (!resource) {\n        throw new Error(`${msiName}: Multiple scopes are not supported.`);\n    }\n    const queryParameters = {\n        resource,\n        \"api-version\": \"2017-09-01\"\n    };\n    if (clientId) {\n        queryParameters.clientid = clientId;\n    }\n    const query = new URLSearchParams(queryParameters);\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.MSI_ENDPOINT) {\n        throw new Error(`${msiName}: Missing environment variable: MSI_ENDPOINT`);\n    }\n    if (!process.env.MSI_SECRET) {\n        throw new Error(`${msiName}: Missing environment variable: MSI_SECRET`);\n    }\n    return {\n        url: `${process.env.MSI_ENDPOINT}?${query.toString()}`,\n        method: \"GET\",\n        headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)({\n            Accept: \"application/json\",\n            secret: process.env.MSI_SECRET\n        })\n    };\n}\n/**\n * Defines how to determine whether the Azure App Service MSI is available, and also how to retrieve a token from the Azure App Service MSI.\n */ const appServiceMsi2017 = {\n    name: \"appServiceMsi2017\",\n    async isAvailable ({ scopes }) {\n        const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.mapScopesToResource)(scopes);\n        if (!resource) {\n            logger.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const env = process.env;\n        const result = Boolean(env.MSI_ENDPOINT && env.MSI_SECRET);\n        if (!result) {\n            logger.info(`${msiName}: Unavailable. The environment variables needed are: MSI_ENDPOINT and MSI_SECRET.`);\n        }\n        return result;\n    },\n    async getToken (configuration, getTokenOptions = {}) {\n        const { identityClient, scopes, clientId, resourceId } = configuration;\n        if (resourceId) {\n            logger.warning(`${msiName}: managed Identity by resource Id is not supported. Argument resourceId might be ignored by the service.`);\n        }\n        logger.info(`${msiName}: Using the endpoint and the secret coming form the environment variables: MSI_ENDPOINT=${process.env.MSI_ENDPOINT} and MSI_SECRET=[REDACTED].`);\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)(Object.assign(Object.assign({\n            abortSignal: getTokenOptions.abortSignal\n        }, prepareRequestOptions(scopes, clientId)), {\n            // Generally, MSI endpoints use the HTTP protocol, without transport layer security (TLS).\n            allowInsecureConnection: true\n        }));\n        const tokenResponse = await identityClient.sendTokenRequest(request);\n        return tokenResponse && tokenResponse.accessToken || null;\n    }\n}; //# sourceMappingURL=appServiceMsi2017.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL2FwcFNlcnZpY2VNc2kyMDE3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ29EO0FBQ2hDO0FBQ1I7QUFDOUMsTUFBTUksVUFBVTtBQUNoQixNQUFNQyxTQUFTSCwrREFBZ0JBLENBQUNFO0FBQ2hDOztDQUVDLEdBQ0QsU0FBU0Usc0JBQXNCQyxNQUFNLEVBQUVDLFFBQVE7SUFDM0MsTUFBTUMsV0FBV04sMkRBQW1CQSxDQUFDSTtJQUNyQyxJQUFJLENBQUNFLFVBQVU7UUFDWCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxFQUFFTixRQUFRLG9DQUFvQyxDQUFDO0lBQ3BFO0lBQ0EsTUFBTU8sa0JBQWtCO1FBQ3BCRjtRQUNBLGVBQWU7SUFDbkI7SUFDQSxJQUFJRCxVQUFVO1FBQ1ZHLGdCQUFnQkMsUUFBUSxHQUFHSjtJQUMvQjtJQUNBLE1BQU1LLFFBQVEsSUFBSUMsZ0JBQWdCSDtJQUNsQyx3SUFBd0k7SUFDeEksSUFBSSxDQUFDSSxRQUFRQyxHQUFHLENBQUNDLFlBQVksRUFBRTtRQUMzQixNQUFNLElBQUlQLE1BQU0sQ0FBQyxFQUFFTixRQUFRLDRDQUE0QyxDQUFDO0lBQzVFO0lBQ0EsSUFBSSxDQUFDVyxRQUFRQyxHQUFHLENBQUNFLFVBQVUsRUFBRTtRQUN6QixNQUFNLElBQUlSLE1BQU0sQ0FBQyxFQUFFTixRQUFRLDBDQUEwQyxDQUFDO0lBQzFFO0lBQ0EsT0FBTztRQUNIZSxLQUFLLENBQUMsRUFBRUosUUFBUUMsR0FBRyxDQUFDQyxZQUFZLENBQUMsQ0FBQyxFQUFFSixNQUFNTyxRQUFRLEdBQUcsQ0FBQztRQUN0REMsUUFBUTtRQUNSQyxTQUFTdEIsNEVBQWlCQSxDQUFDO1lBQ3ZCdUIsUUFBUTtZQUNSQyxRQUFRVCxRQUFRQyxHQUFHLENBQUNFLFVBQVU7UUFDbEM7SUFDSjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNTyxvQkFBb0I7SUFDN0JDLE1BQU07SUFDTixNQUFNQyxhQUFZLEVBQUVwQixNQUFNLEVBQUU7UUFDeEIsTUFBTUUsV0FBV04sMkRBQW1CQSxDQUFDSTtRQUNyQyxJQUFJLENBQUNFLFVBQVU7WUFDWEosT0FBT3VCLElBQUksQ0FBQyxDQUFDLEVBQUV4QixRQUFRLGlEQUFpRCxDQUFDO1lBQ3pFLE9BQU87UUFDWDtRQUNBLE1BQU1ZLE1BQU1ELFFBQVFDLEdBQUc7UUFDdkIsTUFBTWEsU0FBU0MsUUFBUWQsSUFBSUMsWUFBWSxJQUFJRCxJQUFJRSxVQUFVO1FBQ3pELElBQUksQ0FBQ1csUUFBUTtZQUNUeEIsT0FBT3VCLElBQUksQ0FBQyxDQUFDLEVBQUV4QixRQUFRLGlGQUFpRixDQUFDO1FBQzdHO1FBQ0EsT0FBT3lCO0lBQ1g7SUFDQSxNQUFNRSxVQUFTQyxhQUFhLEVBQUVDLGtCQUFrQixDQUFDLENBQUM7UUFDOUMsTUFBTSxFQUFFQyxjQUFjLEVBQUUzQixNQUFNLEVBQUVDLFFBQVEsRUFBRTJCLFVBQVUsRUFBRSxHQUFHSDtRQUN6RCxJQUFJRyxZQUFZO1lBQ1o5QixPQUFPK0IsT0FBTyxDQUFDLENBQUMsRUFBRWhDLFFBQVEsd0dBQXdHLENBQUM7UUFDdkk7UUFDQUMsT0FBT3VCLElBQUksQ0FBQyxDQUFDLEVBQUV4QixRQUFRLHdGQUF3RixFQUFFVyxRQUFRQyxHQUFHLENBQUNDLFlBQVksQ0FBQywyQkFBMkIsQ0FBQztRQUN0SyxNQUFNb0IsVUFBVXBDLGdGQUFxQkEsQ0FBQ3FDLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDO1lBQUVDLGFBQWFQLGdCQUFnQk8sV0FBVztRQUFDLEdBQUdsQyxzQkFBc0JDLFFBQVFDLFlBQVk7WUFDdEosMEZBQTBGO1lBQzFGaUMseUJBQXlCO1FBQUs7UUFDbEMsTUFBTUMsZ0JBQWdCLE1BQU1SLGVBQWVTLGdCQUFnQixDQUFDTjtRQUM1RCxPQUFPLGlCQUFrQkssY0FBY0UsV0FBVyxJQUFLO0lBQzNEO0FBQ0osRUFBRSxDQUNGLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvY3JlZGVudGlhbHMvbWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbC9hcHBTZXJ2aWNlTXNpMjAxNy5qcz9iZWMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlSHR0cEhlYWRlcnMsIGNyZWF0ZVBpcGVsaW5lUmVxdWVzdCwgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xuaW1wb3J0IHsgY3JlZGVudGlhbExvZ2dlciB9IGZyb20gXCIuLi8uLi91dGlsL2xvZ2dpbmdcIjtcbmltcG9ydCB7IG1hcFNjb3Blc1RvUmVzb3VyY2UgfSBmcm9tIFwiLi91dGlsc1wiO1xuY29uc3QgbXNpTmFtZSA9IFwiTWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbCAtIEFwcFNlcnZpY2VNU0kgMjAxN1wiO1xuY29uc3QgbG9nZ2VyID0gY3JlZGVudGlhbExvZ2dlcihtc2lOYW1lKTtcbi8qKlxuICogR2VuZXJhdGVzIHRoZSBvcHRpb25zIHVzZWQgb24gdGhlIHJlcXVlc3QgZm9yIGFuIGFjY2VzcyB0b2tlbi5cbiAqL1xuZnVuY3Rpb24gcHJlcGFyZVJlcXVlc3RPcHRpb25zKHNjb3BlcywgY2xpZW50SWQpIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1hcFNjb3Blc1RvUmVzb3VyY2Uoc2NvcGVzKTtcbiAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHttc2lOYW1lfTogTXVsdGlwbGUgc2NvcGVzIGFyZSBub3Qgc3VwcG9ydGVkLmApO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeVBhcmFtZXRlcnMgPSB7XG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICBcImFwaS12ZXJzaW9uXCI6IFwiMjAxNy0wOS0wMVwiLFxuICAgIH07XG4gICAgaWYgKGNsaWVudElkKSB7XG4gICAgICAgIHF1ZXJ5UGFyYW1ldGVycy5jbGllbnRpZCA9IGNsaWVudElkO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlQYXJhbWV0ZXJzKTtcbiAgICAvLyBUaGlzIGVycm9yIHNob3VsZCBub3QgYnViYmxlIHVwLCBzaW5jZSB3ZSB2ZXJpZnkgdGhhdCB0aGlzIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIGRlZmluZWQgaW4gdGhlIGlzQXZhaWxhYmxlKCkgbWV0aG9kIGRlZmluZWQgYmVsb3cuXG4gICAgaWYgKCFwcm9jZXNzLmVudi5NU0lfRU5EUE9JTlQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke21zaU5hbWV9OiBNaXNzaW5nIGVudmlyb25tZW50IHZhcmlhYmxlOiBNU0lfRU5EUE9JTlRgKTtcbiAgICB9XG4gICAgaWYgKCFwcm9jZXNzLmVudi5NU0lfU0VDUkVUKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHttc2lOYW1lfTogTWlzc2luZyBlbnZpcm9ubWVudCB2YXJpYWJsZTogTVNJX1NFQ1JFVGApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IGAke3Byb2Nlc3MuZW52Lk1TSV9FTkRQT0lOVH0/JHtxdWVyeS50b1N0cmluZygpfWAsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgaGVhZGVyczogY3JlYXRlSHR0cEhlYWRlcnMoe1xuICAgICAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIHNlY3JldDogcHJvY2Vzcy5lbnYuTVNJX1NFQ1JFVCxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbi8qKlxuICogRGVmaW5lcyBob3cgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIEF6dXJlIEFwcCBTZXJ2aWNlIE1TSSBpcyBhdmFpbGFibGUsIGFuZCBhbHNvIGhvdyB0byByZXRyaWV2ZSBhIHRva2VuIGZyb20gdGhlIEF6dXJlIEFwcCBTZXJ2aWNlIE1TSS5cbiAqL1xuZXhwb3J0IGNvbnN0IGFwcFNlcnZpY2VNc2kyMDE3ID0ge1xuICAgIG5hbWU6IFwiYXBwU2VydmljZU1zaTIwMTdcIixcbiAgICBhc3luYyBpc0F2YWlsYWJsZSh7IHNjb3BlcyB9KSB7XG4gICAgICAgIGNvbnN0IHJlc291cmNlID0gbWFwU2NvcGVzVG9SZXNvdXJjZShzY29wZXMpO1xuICAgICAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgJHttc2lOYW1lfTogVW5hdmFpbGFibGUuIE11bHRpcGxlIHNjb3BlcyBhcmUgbm90IHN1cHBvcnRlZC5gKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbnYgPSBwcm9jZXNzLmVudjtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gQm9vbGVhbihlbnYuTVNJX0VORFBPSU5UICYmIGVudi5NU0lfU0VDUkVUKTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGAke21zaU5hbWV9OiBVbmF2YWlsYWJsZS4gVGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBuZWVkZWQgYXJlOiBNU0lfRU5EUE9JTlQgYW5kIE1TSV9TRUNSRVQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGFzeW5jIGdldFRva2VuKGNvbmZpZ3VyYXRpb24sIGdldFRva2VuT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgaWRlbnRpdHlDbGllbnQsIHNjb3BlcywgY2xpZW50SWQsIHJlc291cmNlSWQgfSA9IGNvbmZpZ3VyYXRpb247XG4gICAgICAgIGlmIChyZXNvdXJjZUlkKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybmluZyhgJHttc2lOYW1lfTogbWFuYWdlZCBJZGVudGl0eSBieSByZXNvdXJjZSBJZCBpcyBub3Qgc3VwcG9ydGVkLiBBcmd1bWVudCByZXNvdXJjZUlkIG1pZ2h0IGJlIGlnbm9yZWQgYnkgdGhlIHNlcnZpY2UuYCk7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmluZm8oYCR7bXNpTmFtZX06IFVzaW5nIHRoZSBlbmRwb2ludCBhbmQgdGhlIHNlY3JldCBjb21pbmcgZm9ybSB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzOiBNU0lfRU5EUE9JTlQ9JHtwcm9jZXNzLmVudi5NU0lfRU5EUE9JTlR9IGFuZCBNU0lfU0VDUkVUPVtSRURBQ1RFRF0uYCk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVQaXBlbGluZVJlcXVlc3QoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgYWJvcnRTaWduYWw6IGdldFRva2VuT3B0aW9ucy5hYm9ydFNpZ25hbCB9LCBwcmVwYXJlUmVxdWVzdE9wdGlvbnMoc2NvcGVzLCBjbGllbnRJZCkpLCB7IFxuICAgICAgICAgICAgLy8gR2VuZXJhbGx5LCBNU0kgZW5kcG9pbnRzIHVzZSB0aGUgSFRUUCBwcm90b2NvbCwgd2l0aG91dCB0cmFuc3BvcnQgbGF5ZXIgc2VjdXJpdHkgKFRMUykuXG4gICAgICAgICAgICBhbGxvd0luc2VjdXJlQ29ubmVjdGlvbjogdHJ1ZSB9KSk7XG4gICAgICAgIGNvbnN0IHRva2VuUmVzcG9uc2UgPSBhd2FpdCBpZGVudGl0eUNsaWVudC5zZW5kVG9rZW5SZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gKHRva2VuUmVzcG9uc2UgJiYgdG9rZW5SZXNwb25zZS5hY2Nlc3NUb2tlbikgfHwgbnVsbDtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcFNlcnZpY2VNc2kyMDE3LmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVIdHRwSGVhZGVycyIsImNyZWF0ZVBpcGVsaW5lUmVxdWVzdCIsImNyZWRlbnRpYWxMb2dnZXIiLCJtYXBTY29wZXNUb1Jlc291cmNlIiwibXNpTmFtZSIsImxvZ2dlciIsInByZXBhcmVSZXF1ZXN0T3B0aW9ucyIsInNjb3BlcyIsImNsaWVudElkIiwicmVzb3VyY2UiLCJFcnJvciIsInF1ZXJ5UGFyYW1ldGVycyIsImNsaWVudGlkIiwicXVlcnkiLCJVUkxTZWFyY2hQYXJhbXMiLCJwcm9jZXNzIiwiZW52IiwiTVNJX0VORFBPSU5UIiwiTVNJX1NFQ1JFVCIsInVybCIsInRvU3RyaW5nIiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCIsInNlY3JldCIsImFwcFNlcnZpY2VNc2kyMDE3IiwibmFtZSIsImlzQXZhaWxhYmxlIiwiaW5mbyIsInJlc3VsdCIsIkJvb2xlYW4iLCJnZXRUb2tlbiIsImNvbmZpZ3VyYXRpb24iLCJnZXRUb2tlbk9wdGlvbnMiLCJpZGVudGl0eUNsaWVudCIsInJlc291cmNlSWQiLCJ3YXJuaW5nIiwicmVxdWVzdCIsIk9iamVjdCIsImFzc2lnbiIsImFib3J0U2lnbmFsIiwiYWxsb3dJbnNlY3VyZUNvbm5lY3Rpb24iLCJ0b2tlblJlc3BvbnNlIiwic2VuZFRva2VuUmVxdWVzdCIsImFjY2Vzc1Rva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/appServiceMsi2017.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/appServiceMsi2019.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/appServiceMsi2019.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appServiceMsi2019: () => (/* binding */ appServiceMsi2019)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nconst msiName = \"ManagedIdentityCredential - AppServiceMSI 2019\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.credentialLogger)(msiName);\n/**\n * Generates the options used on the request for an access token.\n */ function prepareRequestOptions(scopes, clientId, resourceId) {\n    const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.mapScopesToResource)(scopes);\n    if (!resource) {\n        throw new Error(`${msiName}: Multiple scopes are not supported.`);\n    }\n    const queryParameters = {\n        resource,\n        \"api-version\": \"2019-08-01\"\n    };\n    if (clientId) {\n        queryParameters.client_id = clientId;\n    }\n    if (resourceId) {\n        queryParameters.mi_res_id = resourceId;\n    }\n    const query = new URLSearchParams(queryParameters);\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.IDENTITY_ENDPOINT) {\n        throw new Error(`${msiName}: Missing environment variable: IDENTITY_ENDPOINT`);\n    }\n    if (!process.env.IDENTITY_HEADER) {\n        throw new Error(`${msiName}: Missing environment variable: IDENTITY_HEADER`);\n    }\n    return {\n        url: `${process.env.IDENTITY_ENDPOINT}?${query.toString()}`,\n        method: \"GET\",\n        headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)({\n            Accept: \"application/json\",\n            \"X-IDENTITY-HEADER\": process.env.IDENTITY_HEADER\n        })\n    };\n}\n/**\n * Defines how to determine whether the Azure App Service MSI is available, and also how to retrieve a token from the Azure App Service MSI.\n */ const appServiceMsi2019 = {\n    name: \"appServiceMsi2019\",\n    async isAvailable ({ scopes }) {\n        const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.mapScopesToResource)(scopes);\n        if (!resource) {\n            logger.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const env = process.env;\n        const result = Boolean(env.IDENTITY_ENDPOINT && env.IDENTITY_HEADER);\n        if (!result) {\n            logger.info(`${msiName}: Unavailable. The environment variables needed are: IDENTITY_ENDPOINT and IDENTITY_HEADER.`);\n        }\n        return result;\n    },\n    async getToken (configuration, getTokenOptions = {}) {\n        const { identityClient, scopes, clientId, resourceId } = configuration;\n        logger.info(`${msiName}: Using the endpoint and the secret coming form the environment variables: IDENTITY_ENDPOINT=${process.env.IDENTITY_ENDPOINT} and IDENTITY_HEADER=[REDACTED].`);\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)(Object.assign(Object.assign({\n            abortSignal: getTokenOptions.abortSignal\n        }, prepareRequestOptions(scopes, clientId, resourceId)), {\n            // Generally, MSI endpoints use the HTTP protocol, without transport layer security (TLS).\n            allowInsecureConnection: true\n        }));\n        const tokenResponse = await identityClient.sendTokenRequest(request);\n        return tokenResponse && tokenResponse.accessToken || null;\n    }\n}; //# sourceMappingURL=appServiceMsi2019.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL2FwcFNlcnZpY2VNc2kyMDE5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ29EO0FBQ2hDO0FBQ1I7QUFDOUMsTUFBTUksVUFBVTtBQUNoQixNQUFNQyxTQUFTSCwrREFBZ0JBLENBQUNFO0FBQ2hDOztDQUVDLEdBQ0QsU0FBU0Usc0JBQXNCQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsVUFBVTtJQUN2RCxNQUFNQyxXQUFXUCwyREFBbUJBLENBQUNJO0lBQ3JDLElBQUksQ0FBQ0csVUFBVTtRQUNYLE1BQU0sSUFBSUMsTUFBTSxDQUFDLEVBQUVQLFFBQVEsb0NBQW9DLENBQUM7SUFDcEU7SUFDQSxNQUFNUSxrQkFBa0I7UUFDcEJGO1FBQ0EsZUFBZTtJQUNuQjtJQUNBLElBQUlGLFVBQVU7UUFDVkksZ0JBQWdCQyxTQUFTLEdBQUdMO0lBQ2hDO0lBQ0EsSUFBSUMsWUFBWTtRQUNaRyxnQkFBZ0JFLFNBQVMsR0FBR0w7SUFDaEM7SUFDQSxNQUFNTSxRQUFRLElBQUlDLGdCQUFnQko7SUFDbEMsd0lBQXdJO0lBQ3hJLElBQUksQ0FBQ0ssUUFBUUMsR0FBRyxDQUFDQyxpQkFBaUIsRUFBRTtRQUNoQyxNQUFNLElBQUlSLE1BQU0sQ0FBQyxFQUFFUCxRQUFRLGlEQUFpRCxDQUFDO0lBQ2pGO0lBQ0EsSUFBSSxDQUFDYSxRQUFRQyxHQUFHLENBQUNFLGVBQWUsRUFBRTtRQUM5QixNQUFNLElBQUlULE1BQU0sQ0FBQyxFQUFFUCxRQUFRLCtDQUErQyxDQUFDO0lBQy9FO0lBQ0EsT0FBTztRQUNIaUIsS0FBSyxDQUFDLEVBQUVKLFFBQVFDLEdBQUcsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQyxFQUFFSixNQUFNTyxRQUFRLEdBQUcsQ0FBQztRQUMzREMsUUFBUTtRQUNSQyxTQUFTeEIsNEVBQWlCQSxDQUFDO1lBQ3ZCeUIsUUFBUTtZQUNSLHFCQUFxQlIsUUFBUUMsR0FBRyxDQUFDRSxlQUFlO1FBQ3BEO0lBQ0o7QUFDSjtBQUNBOztDQUVDLEdBQ00sTUFBTU0sb0JBQW9CO0lBQzdCQyxNQUFNO0lBQ04sTUFBTUMsYUFBWSxFQUFFckIsTUFBTSxFQUFFO1FBQ3hCLE1BQU1HLFdBQVdQLDJEQUFtQkEsQ0FBQ0k7UUFDckMsSUFBSSxDQUFDRyxVQUFVO1lBQ1hMLE9BQU93QixJQUFJLENBQUMsQ0FBQyxFQUFFekIsUUFBUSxpREFBaUQsQ0FBQztZQUN6RSxPQUFPO1FBQ1g7UUFDQSxNQUFNYyxNQUFNRCxRQUFRQyxHQUFHO1FBQ3ZCLE1BQU1ZLFNBQVNDLFFBQVFiLElBQUlDLGlCQUFpQixJQUFJRCxJQUFJRSxlQUFlO1FBQ25FLElBQUksQ0FBQ1UsUUFBUTtZQUNUekIsT0FBT3dCLElBQUksQ0FBQyxDQUFDLEVBQUV6QixRQUFRLDJGQUEyRixDQUFDO1FBQ3ZIO1FBQ0EsT0FBTzBCO0lBQ1g7SUFDQSxNQUFNRSxVQUFTQyxhQUFhLEVBQUVDLGtCQUFrQixDQUFDLENBQUM7UUFDOUMsTUFBTSxFQUFFQyxjQUFjLEVBQUU1QixNQUFNLEVBQUVDLFFBQVEsRUFBRUMsVUFBVSxFQUFFLEdBQUd3QjtRQUN6RDVCLE9BQU93QixJQUFJLENBQUMsQ0FBQyxFQUFFekIsUUFBUSw2RkFBNkYsRUFBRWEsUUFBUUMsR0FBRyxDQUFDQyxpQkFBaUIsQ0FBQyxnQ0FBZ0MsQ0FBQztRQUNyTCxNQUFNaUIsVUFBVW5DLGdGQUFxQkEsQ0FBQ29DLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDO1lBQUVDLGFBQWFMLGdCQUFnQkssV0FBVztRQUFDLEdBQUdqQyxzQkFBc0JDLFFBQVFDLFVBQVVDLGNBQWM7WUFDbEssMEZBQTBGO1lBQzFGK0IseUJBQXlCO1FBQUs7UUFDbEMsTUFBTUMsZ0JBQWdCLE1BQU1OLGVBQWVPLGdCQUFnQixDQUFDTjtRQUM1RCxPQUFPLGlCQUFrQkssY0FBY0UsV0FBVyxJQUFLO0lBQzNEO0FBQ0osRUFBRSxDQUNGLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvY3JlZGVudGlhbHMvbWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbC9hcHBTZXJ2aWNlTXNpMjAxOS5qcz80NzMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlSHR0cEhlYWRlcnMsIGNyZWF0ZVBpcGVsaW5lUmVxdWVzdCwgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xuaW1wb3J0IHsgY3JlZGVudGlhbExvZ2dlciB9IGZyb20gXCIuLi8uLi91dGlsL2xvZ2dpbmdcIjtcbmltcG9ydCB7IG1hcFNjb3Blc1RvUmVzb3VyY2UgfSBmcm9tIFwiLi91dGlsc1wiO1xuY29uc3QgbXNpTmFtZSA9IFwiTWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbCAtIEFwcFNlcnZpY2VNU0kgMjAxOVwiO1xuY29uc3QgbG9nZ2VyID0gY3JlZGVudGlhbExvZ2dlcihtc2lOYW1lKTtcbi8qKlxuICogR2VuZXJhdGVzIHRoZSBvcHRpb25zIHVzZWQgb24gdGhlIHJlcXVlc3QgZm9yIGFuIGFjY2VzcyB0b2tlbi5cbiAqL1xuZnVuY3Rpb24gcHJlcGFyZVJlcXVlc3RPcHRpb25zKHNjb3BlcywgY2xpZW50SWQsIHJlc291cmNlSWQpIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IG1hcFNjb3Blc1RvUmVzb3VyY2Uoc2NvcGVzKTtcbiAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHttc2lOYW1lfTogTXVsdGlwbGUgc2NvcGVzIGFyZSBub3Qgc3VwcG9ydGVkLmApO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeVBhcmFtZXRlcnMgPSB7XG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICBcImFwaS12ZXJzaW9uXCI6IFwiMjAxOS0wOC0wMVwiLFxuICAgIH07XG4gICAgaWYgKGNsaWVudElkKSB7XG4gICAgICAgIHF1ZXJ5UGFyYW1ldGVycy5jbGllbnRfaWQgPSBjbGllbnRJZDtcbiAgICB9XG4gICAgaWYgKHJlc291cmNlSWQpIHtcbiAgICAgICAgcXVlcnlQYXJhbWV0ZXJzLm1pX3Jlc19pZCA9IHJlc291cmNlSWQ7XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhxdWVyeVBhcmFtZXRlcnMpO1xuICAgIC8vIFRoaXMgZXJyb3Igc2hvdWxkIG5vdCBidWJibGUgdXAsIHNpbmNlIHdlIHZlcmlmeSB0aGF0IHRoaXMgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgZGVmaW5lZCBpbiB0aGUgaXNBdmFpbGFibGUoKSBtZXRob2QgZGVmaW5lZCBiZWxvdy5cbiAgICBpZiAoIXByb2Nlc3MuZW52LklERU5USVRZX0VORFBPSU5UKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHttc2lOYW1lfTogTWlzc2luZyBlbnZpcm9ubWVudCB2YXJpYWJsZTogSURFTlRJVFlfRU5EUE9JTlRgKTtcbiAgICB9XG4gICAgaWYgKCFwcm9jZXNzLmVudi5JREVOVElUWV9IRUFERVIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke21zaU5hbWV9OiBNaXNzaW5nIGVudmlyb25tZW50IHZhcmlhYmxlOiBJREVOVElUWV9IRUFERVJgKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXJsOiBgJHtwcm9jZXNzLmVudi5JREVOVElUWV9FTkRQT0lOVH0/JHtxdWVyeS50b1N0cmluZygpfWAsXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgaGVhZGVyczogY3JlYXRlSHR0cEhlYWRlcnMoe1xuICAgICAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIFwiWC1JREVOVElUWS1IRUFERVJcIjogcHJvY2Vzcy5lbnYuSURFTlRJVFlfSEVBREVSLFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuLyoqXG4gKiBEZWZpbmVzIGhvdyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgQXp1cmUgQXBwIFNlcnZpY2UgTVNJIGlzIGF2YWlsYWJsZSwgYW5kIGFsc28gaG93IHRvIHJldHJpZXZlIGEgdG9rZW4gZnJvbSB0aGUgQXp1cmUgQXBwIFNlcnZpY2UgTVNJLlxuICovXG5leHBvcnQgY29uc3QgYXBwU2VydmljZU1zaTIwMTkgPSB7XG4gICAgbmFtZTogXCJhcHBTZXJ2aWNlTXNpMjAxOVwiLFxuICAgIGFzeW5jIGlzQXZhaWxhYmxlKHsgc2NvcGVzIH0pIHtcbiAgICAgICAgY29uc3QgcmVzb3VyY2UgPSBtYXBTY29wZXNUb1Jlc291cmNlKHNjb3Blcyk7XG4gICAgICAgIGlmICghcmVzb3VyY2UpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGAke21zaU5hbWV9OiBVbmF2YWlsYWJsZS4gTXVsdGlwbGUgc2NvcGVzIGFyZSBub3Qgc3VwcG9ydGVkLmApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVudiA9IHByb2Nlc3MuZW52O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBCb29sZWFuKGVudi5JREVOVElUWV9FTkRQT0lOVCAmJiBlbnYuSURFTlRJVFlfSEVBREVSKTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGAke21zaU5hbWV9OiBVbmF2YWlsYWJsZS4gVGhlIGVudmlyb25tZW50IHZhcmlhYmxlcyBuZWVkZWQgYXJlOiBJREVOVElUWV9FTkRQT0lOVCBhbmQgSURFTlRJVFlfSEVBREVSLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBhc3luYyBnZXRUb2tlbihjb25maWd1cmF0aW9uLCBnZXRUb2tlbk9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGlkZW50aXR5Q2xpZW50LCBzY29wZXMsIGNsaWVudElkLCByZXNvdXJjZUlkIH0gPSBjb25maWd1cmF0aW9uO1xuICAgICAgICBsb2dnZXIuaW5mbyhgJHttc2lOYW1lfTogVXNpbmcgdGhlIGVuZHBvaW50IGFuZCB0aGUgc2VjcmV0IGNvbWluZyBmb3JtIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXM6IElERU5USVRZX0VORFBPSU5UPSR7cHJvY2Vzcy5lbnYuSURFTlRJVFlfRU5EUE9JTlR9IGFuZCBJREVOVElUWV9IRUFERVI9W1JFREFDVEVEXS5gKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IGNyZWF0ZVBpcGVsaW5lUmVxdWVzdChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBhYm9ydFNpZ25hbDogZ2V0VG9rZW5PcHRpb25zLmFib3J0U2lnbmFsIH0sIHByZXBhcmVSZXF1ZXN0T3B0aW9ucyhzY29wZXMsIGNsaWVudElkLCByZXNvdXJjZUlkKSksIHsgXG4gICAgICAgICAgICAvLyBHZW5lcmFsbHksIE1TSSBlbmRwb2ludHMgdXNlIHRoZSBIVFRQIHByb3RvY29sLCB3aXRob3V0IHRyYW5zcG9ydCBsYXllciBzZWN1cml0eSAoVExTKS5cbiAgICAgICAgICAgIGFsbG93SW5zZWN1cmVDb25uZWN0aW9uOiB0cnVlIH0pKTtcbiAgICAgICAgY29uc3QgdG9rZW5SZXNwb25zZSA9IGF3YWl0IGlkZW50aXR5Q2xpZW50LnNlbmRUb2tlblJlcXVlc3QocmVxdWVzdCk7XG4gICAgICAgIHJldHVybiAodG9rZW5SZXNwb25zZSAmJiB0b2tlblJlc3BvbnNlLmFjY2Vzc1Rva2VuKSB8fCBudWxsO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwU2VydmljZU1zaTIwMTkuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZUh0dHBIZWFkZXJzIiwiY3JlYXRlUGlwZWxpbmVSZXF1ZXN0IiwiY3JlZGVudGlhbExvZ2dlciIsIm1hcFNjb3Blc1RvUmVzb3VyY2UiLCJtc2lOYW1lIiwibG9nZ2VyIiwicHJlcGFyZVJlcXVlc3RPcHRpb25zIiwic2NvcGVzIiwiY2xpZW50SWQiLCJyZXNvdXJjZUlkIiwicmVzb3VyY2UiLCJFcnJvciIsInF1ZXJ5UGFyYW1ldGVycyIsImNsaWVudF9pZCIsIm1pX3Jlc19pZCIsInF1ZXJ5IiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvY2VzcyIsImVudiIsIklERU5USVRZX0VORFBPSU5UIiwiSURFTlRJVFlfSEVBREVSIiwidXJsIiwidG9TdHJpbmciLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0IiwiYXBwU2VydmljZU1zaTIwMTkiLCJuYW1lIiwiaXNBdmFpbGFibGUiLCJpbmZvIiwicmVzdWx0IiwiQm9vbGVhbiIsImdldFRva2VuIiwiY29uZmlndXJhdGlvbiIsImdldFRva2VuT3B0aW9ucyIsImlkZW50aXR5Q2xpZW50IiwicmVxdWVzdCIsIk9iamVjdCIsImFzc2lnbiIsImFib3J0U2lnbmFsIiwiYWxsb3dJbnNlY3VyZUNvbm5lY3Rpb24iLCJ0b2tlblJlc3BvbnNlIiwic2VuZFRva2VuUmVxdWVzdCIsImFjY2Vzc1Rva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/appServiceMsi2019.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/arcMsi.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/arcMsi.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arcMsi: () => (/* binding */ arcMsi)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\nconst msiName = \"ManagedIdentityCredential - Azure Arc MSI\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.credentialLogger)(msiName);\n/**\n * Generates the options used on the request for an access token.\n */ function prepareRequestOptions(scopes, clientId, resourceId) {\n    const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.mapScopesToResource)(scopes);\n    if (!resource) {\n        throw new Error(`${msiName}: Multiple scopes are not supported.`);\n    }\n    const queryParameters = {\n        resource,\n        \"api-version\": _constants__WEBPACK_IMPORTED_MODULE_4__.azureArcAPIVersion\n    };\n    if (clientId) {\n        queryParameters.client_id = clientId;\n    }\n    if (resourceId) {\n        queryParameters.msi_res_id = resourceId;\n    }\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.IDENTITY_ENDPOINT) {\n        throw new Error(`${msiName}: Missing environment variable: IDENTITY_ENDPOINT`);\n    }\n    const query = new URLSearchParams(queryParameters);\n    return (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)({\n        // Should be similar to: http://localhost:40342/metadata/identity/oauth2/token\n        url: `${process.env.IDENTITY_ENDPOINT}?${query.toString()}`,\n        method: \"GET\",\n        headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)({\n            Accept: \"application/json\",\n            Metadata: \"true\"\n        })\n    });\n}\n/**\n * Retrieves the file contents at the given path using promises.\n * Useful since `fs`'s readFileSync locks the thread, and to avoid extra dependencies.\n */ function readFileAsync(path, options) {\n    return new Promise((resolve, reject)=>(0,fs__WEBPACK_IMPORTED_MODULE_1__.readFile)(path, options, (err, data)=>{\n            if (err) {\n                reject(err);\n            }\n            resolve(data);\n        }));\n}\n/**\n * Does a request to the authentication provider that results in a file path.\n */ async function filePathRequest(identityClient, requestPrepareOptions) {\n    const response = await identityClient.sendRequest((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)(requestPrepareOptions));\n    if (response.status !== 401) {\n        let message = \"\";\n        if (response.bodyAsText) {\n            message = ` Response: ${response.bodyAsText}`;\n        }\n        throw new _errors__WEBPACK_IMPORTED_MODULE_5__.AuthenticationError(response.status, `${msiName}: To authenticate with Azure Arc MSI, status code 401 is expected on the first request. ${message}`);\n    }\n    const authHeader = response.headers.get(\"www-authenticate\") || \"\";\n    try {\n        return authHeader.split(\"=\").slice(1)[0];\n    } catch (e) {\n        throw Error(`Invalid www-authenticate header format: ${authHeader}`);\n    }\n}\n/**\n * Defines how to determine whether the Azure Arc MSI is available, and also how to retrieve a token from the Azure Arc MSI.\n */ const arcMsi = {\n    name: \"arc\",\n    async isAvailable ({ scopes }) {\n        const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.mapScopesToResource)(scopes);\n        if (!resource) {\n            logger.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const result = Boolean(process.env.IMDS_ENDPOINT && process.env.IDENTITY_ENDPOINT);\n        if (!result) {\n            logger.info(`${msiName}: The environment variables needed are: IMDS_ENDPOINT and IDENTITY_ENDPOINT`);\n        }\n        return result;\n    },\n    async getToken (configuration, getTokenOptions = {}) {\n        var _a;\n        const { identityClient, scopes, clientId, resourceId } = configuration;\n        if (clientId) {\n            logger.warning(`${msiName}: user-assigned identities not supported. The argument clientId might be ignored by the service.`);\n        }\n        if (resourceId) {\n            logger.warning(`${msiName}: user defined managed Identity by resource Id is not supported. Argument resourceId will be ignored.`);\n        }\n        logger.info(`${msiName}: Authenticating.`);\n        const requestOptions = Object.assign(Object.assign({\n            disableJsonStringifyOnBody: true,\n            deserializationMapper: undefined,\n            abortSignal: getTokenOptions.abortSignal\n        }, prepareRequestOptions(scopes, clientId, resourceId)), {\n            allowInsecureConnection: true\n        });\n        const filePath = await filePathRequest(identityClient, requestOptions);\n        if (!filePath) {\n            throw new Error(`${msiName}: Failed to find the token file.`);\n        }\n        const key = await readFileAsync(filePath, {\n            encoding: \"utf-8\"\n        });\n        (_a = requestOptions.headers) === null || _a === void 0 ? void 0 : _a.set(\"Authorization\", `Basic ${key}`);\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)(Object.assign(Object.assign({}, requestOptions), {\n            // Generally, MSI endpoints use the HTTP protocol, without transport layer security (TLS).\n            allowInsecureConnection: true\n        }));\n        const tokenResponse = await identityClient.sendTokenRequest(request);\n        return tokenResponse && tokenResponse.accessToken || null;\n    }\n}; //# sourceMappingURL=arcMsi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/arcMsi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/cloudShellMsi.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/cloudShellMsi.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cloudShellMsi: () => (/* binding */ cloudShellMsi),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nconst msiName = \"ManagedIdentityCredential - CloudShellMSI\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.credentialLogger)(msiName);\n/**\n * Generates the options used on the request for an access token.\n */ function prepareRequestOptions(scopes, clientId, resourceId) {\n    const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.mapScopesToResource)(scopes);\n    if (!resource) {\n        throw new Error(`${msiName}: Multiple scopes are not supported.`);\n    }\n    const body = {\n        resource\n    };\n    if (clientId) {\n        body.client_id = clientId;\n    }\n    if (resourceId) {\n        body.msi_res_id = resourceId;\n    }\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.MSI_ENDPOINT) {\n        throw new Error(`${msiName}: Missing environment variable: MSI_ENDPOINT`);\n    }\n    const params = new URLSearchParams(body);\n    return {\n        url: process.env.MSI_ENDPOINT,\n        method: \"POST\",\n        body: params.toString(),\n        headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)({\n            Accept: \"application/json\",\n            Metadata: \"true\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        })\n    };\n}\n/**\n * Defines how to determine whether the Azure Cloud Shell MSI is available, and also how to retrieve a token from the Azure Cloud Shell MSI.\n * Since Azure Managed Identities aren't available in the Azure Cloud Shell, we log a warning for users that try to access cloud shell using user assigned identity.\n */ const cloudShellMsi = {\n    name: \"cloudShellMsi\",\n    async isAvailable ({ scopes }) {\n        const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.mapScopesToResource)(scopes);\n        if (!resource) {\n            logger.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const result = Boolean(process.env.MSI_ENDPOINT);\n        if (!result) {\n            logger.info(`${msiName}: Unavailable. The environment variable MSI_ENDPOINT is needed.`);\n        }\n        return result;\n    },\n    async getToken (configuration, getTokenOptions = {}) {\n        const { identityClient, scopes, clientId, resourceId } = configuration;\n        if (clientId) {\n            logger.warning(`${msiName}: user-assigned identities not supported. The argument clientId might be ignored by the service.`);\n        }\n        if (resourceId) {\n            logger.warning(`${msiName}: user defined managed Identity by resource Id not supported. The argument resourceId might be ignored by the service.`);\n        }\n        logger.info(`${msiName}: Using the endpoint coming form the environment variable MSI_ENDPOINT = ${process.env.MSI_ENDPOINT}.`);\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)(Object.assign(Object.assign({\n            abortSignal: getTokenOptions.abortSignal\n        }, prepareRequestOptions(scopes, clientId, resourceId)), {\n            // Generally, MSI endpoints use the HTTP protocol, without transport layer security (TLS).\n            allowInsecureConnection: true\n        }));\n        const tokenResponse = await identityClient.sendTokenRequest(request);\n        return tokenResponse && tokenResponse.accessToken || null;\n    }\n}; //# sourceMappingURL=cloudShellMsi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/cloudShellMsi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/constants.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/constants.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultScopeSuffix: () => (/* binding */ DefaultScopeSuffix),\n/* harmony export */   azureArcAPIVersion: () => (/* binding */ azureArcAPIVersion),\n/* harmony export */   azureFabricVersion: () => (/* binding */ azureFabricVersion),\n/* harmony export */   imdsApiVersion: () => (/* binding */ imdsApiVersion),\n/* harmony export */   imdsEndpointPath: () => (/* binding */ imdsEndpointPath),\n/* harmony export */   imdsHost: () => (/* binding */ imdsHost)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst DefaultScopeSuffix = \"/.default\";\nconst imdsHost = \"http://169.254.169.254\";\nconst imdsEndpointPath = \"/metadata/identity/oauth2/token\";\nconst imdsApiVersion = \"2018-02-01\";\nconst azureArcAPIVersion = \"2019-11-01\";\nconst azureFabricVersion = \"2019-07-01-preview\"; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQzNCLE1BQU1BLHFCQUFxQixZQUFZO0FBQ3ZDLE1BQU1DLFdBQVcseUJBQXlCO0FBQzFDLE1BQU1DLG1CQUFtQixrQ0FBa0M7QUFDM0QsTUFBTUMsaUJBQWlCLGFBQWE7QUFDcEMsTUFBTUMscUJBQXFCLGFBQWE7QUFDeEMsTUFBTUMscUJBQXFCLHFCQUFxQixDQUN2RCxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL2NyZWRlbnRpYWxzL21hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwvY29uc3RhbnRzLmpzPzI2YmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgY29uc3QgRGVmYXVsdFNjb3BlU3VmZml4ID0gXCIvLmRlZmF1bHRcIjtcbmV4cG9ydCBjb25zdCBpbWRzSG9zdCA9IFwiaHR0cDovLzE2OS4yNTQuMTY5LjI1NFwiO1xuZXhwb3J0IGNvbnN0IGltZHNFbmRwb2ludFBhdGggPSBcIi9tZXRhZGF0YS9pZGVudGl0eS9vYXV0aDIvdG9rZW5cIjtcbmV4cG9ydCBjb25zdCBpbWRzQXBpVmVyc2lvbiA9IFwiMjAxOC0wMi0wMVwiO1xuZXhwb3J0IGNvbnN0IGF6dXJlQXJjQVBJVmVyc2lvbiA9IFwiMjAxOS0xMS0wMVwiO1xuZXhwb3J0IGNvbnN0IGF6dXJlRmFicmljVmVyc2lvbiA9IFwiMjAxOS0wNy0wMS1wcmV2aWV3XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIkRlZmF1bHRTY29wZVN1ZmZpeCIsImltZHNIb3N0IiwiaW1kc0VuZHBvaW50UGF0aCIsImltZHNBcGlWZXJzaW9uIiwiYXp1cmVBcmNBUElWZXJzaW9uIiwiYXp1cmVGYWJyaWNWZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/fabricMsi.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/fabricMsi.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fabricMsi: () => (/* binding */ fabricMsi)\n/* harmony export */ });\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n// This MSI can be easily tested by deploying a container to Azure Service Fabric with the Dockerfile:\n//\n//   FROM node:12\n//   RUN wget https://host.any/path/bash.sh\n//   CMD [\"bash\", \"bash.sh\"]\n//\n// Where the bash script contains:\n//\n//   curl --insecure $IDENTITY_ENDPOINT'?api-version=2019-07-01-preview&resource=https://vault.azure.net/' -H \"Secret: $IDENTITY_HEADER\"\n//\nconst msiName = \"ManagedIdentityCredential - Fabric MSI\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.credentialLogger)(msiName);\n/**\n * Generates the options used on the request for an access token.\n */ function prepareRequestOptions(scopes, clientId, resourceId) {\n    const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.mapScopesToResource)(scopes);\n    if (!resource) {\n        throw new Error(`${msiName}: Multiple scopes are not supported.`);\n    }\n    const queryParameters = {\n        resource,\n        \"api-version\": _constants__WEBPACK_IMPORTED_MODULE_4__.azureFabricVersion\n    };\n    if (clientId) {\n        queryParameters.client_id = clientId;\n    }\n    if (resourceId) {\n        queryParameters.msi_res_id = resourceId;\n    }\n    const query = new URLSearchParams(queryParameters);\n    // This error should not bubble up, since we verify that this environment variable is defined in the isAvailable() method defined below.\n    if (!process.env.IDENTITY_ENDPOINT) {\n        throw new Error(\"Missing environment variable: IDENTITY_ENDPOINT\");\n    }\n    if (!process.env.IDENTITY_HEADER) {\n        throw new Error(\"Missing environment variable: IDENTITY_HEADER\");\n    }\n    return {\n        url: `${process.env.IDENTITY_ENDPOINT}?${query.toString()}`,\n        method: \"GET\",\n        headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createHttpHeaders)({\n            Accept: \"application/json\",\n            secret: process.env.IDENTITY_HEADER\n        })\n    };\n}\n/**\n * Defines how to determine whether the Azure Service Fabric MSI is available, and also how to retrieve a token from the Azure Service Fabric MSI.\n */ const fabricMsi = {\n    name: \"fabricMsi\",\n    async isAvailable ({ scopes }) {\n        const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.mapScopesToResource)(scopes);\n        if (!resource) {\n            logger.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        const env = process.env;\n        const result = Boolean(env.IDENTITY_ENDPOINT && env.IDENTITY_HEADER && env.IDENTITY_SERVER_THUMBPRINT);\n        if (!result) {\n            logger.info(`${msiName}: Unavailable. The environment variables needed are: IDENTITY_ENDPOINT, IDENTITY_HEADER and IDENTITY_SERVER_THUMBPRINT`);\n        }\n        return result;\n    },\n    async getToken (configuration, getTokenOptions = {}) {\n        const { scopes, identityClient, clientId, resourceId } = configuration;\n        if (resourceId) {\n            logger.warning(`${msiName}: user defined managed Identity by resource Id is not supported. Argument resourceId might be ignored by the service.`);\n        }\n        logger.info([\n            `${msiName}:`,\n            \"Using the endpoint and the secret coming from the environment variables:\",\n            `IDENTITY_ENDPOINT=${process.env.IDENTITY_ENDPOINT},`,\n            \"IDENTITY_HEADER=[REDACTED] and\",\n            \"IDENTITY_SERVER_THUMBPRINT=[REDACTED].\"\n        ].join(\" \"));\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createPipelineRequest)(Object.assign({\n            abortSignal: getTokenOptions.abortSignal\n        }, prepareRequestOptions(scopes, clientId, resourceId)));\n        request.agent = new (https__WEBPACK_IMPORTED_MODULE_0___default().Agent)({\n            // This is necessary because Service Fabric provides a self-signed certificate.\n            // The alternative path is to verify the certificate using the IDENTITY_SERVER_THUMBPRINT env variable.\n            rejectUnauthorized: false\n        });\n        const tokenResponse = await identityClient.sendTokenRequest(request);\n        return tokenResponse && tokenResponse.accessToken || null;\n    }\n}; //# sourceMappingURL=fabricMsi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/fabricMsi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/imdsMsi.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/imdsMsi.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   imdsMsi: () => (/* binding */ imdsMsi),\n/* harmony export */   imdsMsiRetryConfig: () => (/* binding */ imdsMsiRetryConfig)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\nconst msiName = \"ManagedIdentityCredential - IMDS\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.credentialLogger)(msiName);\n/**\n * Generates the options used on the request for an access token.\n */ function prepareRequestOptions(scopes, clientId, resourceId, options) {\n    var _a;\n    const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.mapScopesToResource)(scopes);\n    if (!resource) {\n        throw new Error(`${msiName}: Multiple scopes are not supported.`);\n    }\n    const { skipQuery, skipMetadataHeader } = options || {};\n    let query = \"\";\n    // Pod Identity will try to process this request even if the Metadata header is missing.\n    // We can exclude the request query to ensure no IMDS endpoint tries to process the ping request.\n    if (!skipQuery) {\n        const queryParameters = {\n            resource,\n            \"api-version\": _constants__WEBPACK_IMPORTED_MODULE_4__.imdsApiVersion\n        };\n        if (clientId) {\n            queryParameters.client_id = clientId;\n        }\n        if (resourceId) {\n            queryParameters.msi_res_id = resourceId;\n        }\n        const params = new URLSearchParams(queryParameters);\n        query = `?${params.toString()}`;\n    }\n    const url = new URL(_constants__WEBPACK_IMPORTED_MODULE_4__.imdsEndpointPath, (_a = process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST) !== null && _a !== void 0 ? _a : _constants__WEBPACK_IMPORTED_MODULE_4__.imdsHost);\n    const rawHeaders = {\n        Accept: \"application/json\",\n        Metadata: \"true\"\n    };\n    // Remove the Metadata header to invoke a request error from some IMDS endpoints.\n    if (skipMetadataHeader) {\n        delete rawHeaders.Metadata;\n    }\n    return {\n        // In this case, the `?` should be added in the \"query\" variable `skipQuery` is not set.\n        url: `${url}${query}`,\n        method: \"GET\",\n        headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createHttpHeaders)(rawHeaders)\n    };\n}\n// 800ms -> 1600ms -> 3200ms\nconst imdsMsiRetryConfig = {\n    maxRetries: 3,\n    startDelayInMs: 800,\n    intervalIncrement: 2\n};\n/**\n * Defines how to determine whether the Azure IMDS MSI is available, and also how to retrieve a token from the Azure IMDS MSI.\n */ const imdsMsi = {\n    name: \"imdsMsi\",\n    async isAvailable ({ scopes, identityClient, clientId, resourceId, getTokenOptions = {} }) {\n        const resource = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.mapScopesToResource)(scopes);\n        if (!resource) {\n            logger.info(`${msiName}: Unavailable. Multiple scopes are not supported.`);\n            return false;\n        }\n        // if the PodIdentityEndpoint environment variable was set no need to probe the endpoint, it can be assumed to exist\n        if (process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST) {\n            return true;\n        }\n        if (!identityClient) {\n            throw new Error(\"Missing IdentityClient\");\n        }\n        const requestOptions = prepareRequestOptions(resource, clientId, resourceId, {\n            skipMetadataHeader: true,\n            skipQuery: true\n        });\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_5__.tracingClient.withSpan(\"ManagedIdentityCredential-pingImdsEndpoint\", getTokenOptions, async (options)=>{\n            var _a, _b;\n            requestOptions.tracingOptions = options.tracingOptions;\n            // Create a request with a timeout since we expect that\n            // not having a \"Metadata\" header should cause an error to be\n            // returned quickly from the endpoint, proving its availability.\n            const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createPipelineRequest)(requestOptions);\n            // Default to 1000 if the default of 0 is used.\n            // Negative values can still be used to disable the timeout.\n            request.timeout = ((_a = options.requestOptions) === null || _a === void 0 ? void 0 : _a.timeout) || 1000;\n            // This MSI uses the imdsEndpoint to get the token, which only uses http://\n            request.allowInsecureConnection = true;\n            let response;\n            try {\n                logger.info(`${msiName}: Pinging the Azure IMDS endpoint`);\n                response = await identityClient.sendRequest(request);\n            } catch (err) {\n                // If the request failed, or Node.js was unable to establish a connection,\n                // or the host was down, we'll assume the IMDS endpoint isn't available.\n                if ((0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isError)(err)) {\n                    logger.verbose(`${msiName}: Caught error ${err.name}: ${err.message}`);\n                }\n                // This is a special case for Docker Desktop which responds with a 403 with a message that contains \"A socket operation was attempted to an unreachable network\"\n                // rather than just timing out, as expected.\n                logger.info(`${msiName}: The Azure IMDS endpoint is unavailable`);\n                return false;\n            }\n            if (response.status === 403) {\n                if ((_b = response.bodyAsText) === null || _b === void 0 ? void 0 : _b.includes(\"A socket operation was attempted to an unreachable network\")) {\n                    logger.info(`${msiName}: The Azure IMDS endpoint is unavailable`);\n                    logger.info(`${msiName}: ${response.bodyAsText}`);\n                    return false;\n                }\n            }\n            // If we received any response, the endpoint is available\n            logger.info(`${msiName}: The Azure IMDS endpoint is available`);\n            return true;\n        });\n    },\n    async getToken (configuration, getTokenOptions = {}) {\n        const { identityClient, scopes, clientId, resourceId } = configuration;\n        if (process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST) {\n            logger.info(`${msiName}: Using the Azure IMDS endpoint coming from the environment variable AZURE_POD_IDENTITY_AUTHORITY_HOST=${process.env.AZURE_POD_IDENTITY_AUTHORITY_HOST}.`);\n        } else {\n            logger.info(`${msiName}: Using the default Azure IMDS endpoint ${_constants__WEBPACK_IMPORTED_MODULE_4__.imdsHost}.`);\n        }\n        let nextDelayInMs = imdsMsiRetryConfig.startDelayInMs;\n        for(let retries = 0; retries < imdsMsiRetryConfig.maxRetries; retries++){\n            try {\n                const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createPipelineRequest)(Object.assign(Object.assign({\n                    abortSignal: getTokenOptions.abortSignal\n                }, prepareRequestOptions(scopes, clientId, resourceId)), {\n                    allowInsecureConnection: true\n                }));\n                const tokenResponse = await identityClient.sendTokenRequest(request);\n                return tokenResponse && tokenResponse.accessToken || null;\n            } catch (error) {\n                if (error.statusCode === 404) {\n                    await (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.delay)(nextDelayInMs);\n                    nextDelayInMs *= imdsMsiRetryConfig.intervalIncrement;\n                    continue;\n                }\n                throw error;\n            }\n        }\n        throw new _errors__WEBPACK_IMPORTED_MODULE_6__.AuthenticationError(404, `${msiName}: Failed to retrieve IMDS token after ${imdsMsiRetryConfig.maxRetries} retries.`);\n    }\n}; //# sourceMappingURL=imdsMsi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL2ltZHNNc2kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNnQjtBQUNvQztBQUNoQztBQUNIO0FBQ0E7QUFDc0I7QUFDM0I7QUFDOUMsTUFBTVcsVUFBVTtBQUNoQixNQUFNQyxTQUFTUiwrREFBZ0JBLENBQUNPO0FBQ2hDOztDQUVDLEdBQ0QsU0FBU0Usc0JBQXNCQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxPQUFPO0lBQ2hFLElBQUlDO0lBQ0osTUFBTUMsV0FBV1QsMkRBQW1CQSxDQUFDSTtJQUNyQyxJQUFJLENBQUNLLFVBQVU7UUFDWCxNQUFNLElBQUlDLE1BQU0sQ0FBQyxFQUFFVCxRQUFRLG9DQUFvQyxDQUFDO0lBQ3BFO0lBQ0EsTUFBTSxFQUFFVSxTQUFTLEVBQUVDLGtCQUFrQixFQUFFLEdBQUdMLFdBQVcsQ0FBQztJQUN0RCxJQUFJTSxRQUFRO0lBQ1osd0ZBQXdGO0lBQ3hGLGlHQUFpRztJQUNqRyxJQUFJLENBQUNGLFdBQVc7UUFDWixNQUFNRyxrQkFBa0I7WUFDcEJMO1lBQ0EsZUFBZVosc0RBQWNBO1FBQ2pDO1FBQ0EsSUFBSVEsVUFBVTtZQUNWUyxnQkFBZ0JDLFNBQVMsR0FBR1Y7UUFDaEM7UUFDQSxJQUFJQyxZQUFZO1lBQ1pRLGdCQUFnQkUsVUFBVSxHQUFHVjtRQUNqQztRQUNBLE1BQU1XLFNBQVMsSUFBSUMsZ0JBQWdCSjtRQUNuQ0QsUUFBUSxDQUFDLENBQUMsRUFBRUksT0FBT0UsUUFBUSxHQUFHLENBQUM7SUFDbkM7SUFDQSxNQUFNQyxNQUFNLElBQUlDLElBQUl2Qix3REFBZ0JBLEVBQUUsQ0FBQ1UsS0FBS2MsUUFBUUMsR0FBRyxDQUFDQyxpQ0FBaUMsTUFBTSxRQUFRaEIsT0FBTyxLQUFLLElBQUlBLEtBQUtULGdEQUFRQTtJQUNwSSxNQUFNMEIsYUFBYTtRQUNmQyxRQUFRO1FBQ1JDLFVBQVU7SUFDZDtJQUNBLGlGQUFpRjtJQUNqRixJQUFJZixvQkFBb0I7UUFDcEIsT0FBT2EsV0FBV0UsUUFBUTtJQUM5QjtJQUNBLE9BQU87UUFDSCx3RkFBd0Y7UUFDeEZQLEtBQUssQ0FBQyxFQUFFQSxJQUFJLEVBQUVQLE1BQU0sQ0FBQztRQUNyQmUsUUFBUTtRQUNSQyxTQUFTckMsNEVBQWlCQSxDQUFDaUM7SUFDL0I7QUFDSjtBQUNBLDRCQUE0QjtBQUNyQixNQUFNSyxxQkFBcUI7SUFDOUJDLFlBQVk7SUFDWkMsZ0JBQWdCO0lBQ2hCQyxtQkFBbUI7QUFDdkIsRUFBRTtBQUNGOztDQUVDLEdBQ00sTUFBTUMsVUFBVTtJQUNuQkMsTUFBTTtJQUNOLE1BQU1DLGFBQVksRUFBRWhDLE1BQU0sRUFBRWlDLGNBQWMsRUFBRWhDLFFBQVEsRUFBRUMsVUFBVSxFQUFFZ0Msa0JBQWtCLENBQUMsQ0FBQyxFQUFHO1FBQ3JGLE1BQU03QixXQUFXVCwyREFBbUJBLENBQUNJO1FBQ3JDLElBQUksQ0FBQ0ssVUFBVTtZQUNYUCxPQUFPcUMsSUFBSSxDQUFDLENBQUMsRUFBRXRDLFFBQVEsaURBQWlELENBQUM7WUFDekUsT0FBTztRQUNYO1FBQ0Esb0hBQW9IO1FBQ3BILElBQUlxQixRQUFRQyxHQUFHLENBQUNDLGlDQUFpQyxFQUFFO1lBQy9DLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQ2EsZ0JBQWdCO1lBQ2pCLE1BQU0sSUFBSTNCLE1BQU07UUFDcEI7UUFDQSxNQUFNOEIsaUJBQWlCckMsc0JBQXNCTSxVQUFVSixVQUFVQyxZQUFZO1lBQ3pFTSxvQkFBb0I7WUFDcEJELFdBQVc7UUFDZjtRQUNBLE9BQU9mLHdEQUFhQSxDQUFDNkMsUUFBUSxDQUFDLDhDQUE4Q0gsaUJBQWlCLE9BQU8vQjtZQUNoRyxJQUFJQyxJQUFJa0M7WUFDUkYsZUFBZUcsY0FBYyxHQUFHcEMsUUFBUW9DLGNBQWM7WUFDdEQsdURBQXVEO1lBQ3ZELDZEQUE2RDtZQUM3RCxnRUFBZ0U7WUFDaEUsTUFBTUMsVUFBVW5ELGdGQUFxQkEsQ0FBQytDO1lBQ3RDLCtDQUErQztZQUMvQyw0REFBNEQ7WUFDNURJLFFBQVFDLE9BQU8sR0FBRyxDQUFDLENBQUNyQyxLQUFLRCxRQUFRaUMsY0FBYyxNQUFNLFFBQVFoQyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdxQyxPQUFPLEtBQUs7WUFDckcsMkVBQTJFO1lBQzNFRCxRQUFRRSx1QkFBdUIsR0FBRztZQUNsQyxJQUFJQztZQUNKLElBQUk7Z0JBQ0E3QyxPQUFPcUMsSUFBSSxDQUFDLENBQUMsRUFBRXRDLFFBQVEsaUNBQWlDLENBQUM7Z0JBQ3pEOEMsV0FBVyxNQUFNVixlQUFlVyxXQUFXLENBQUNKO1lBQ2hELEVBQ0EsT0FBT0ssS0FBSztnQkFDUiwwRUFBMEU7Z0JBQzFFLHdFQUF3RTtnQkFDeEUsSUFBSTFELHlEQUFPQSxDQUFDMEQsTUFBTTtvQkFDZC9DLE9BQU9nRCxPQUFPLENBQUMsQ0FBQyxFQUFFakQsUUFBUSxlQUFlLEVBQUVnRCxJQUFJZCxJQUFJLENBQUMsRUFBRSxFQUFFYyxJQUFJRSxPQUFPLENBQUMsQ0FBQztnQkFDekU7Z0JBQ0EsZ0tBQWdLO2dCQUNoSyw0Q0FBNEM7Z0JBQzVDakQsT0FBT3FDLElBQUksQ0FBQyxDQUFDLEVBQUV0QyxRQUFRLHdDQUF3QyxDQUFDO2dCQUNoRSxPQUFPO1lBQ1g7WUFDQSxJQUFJOEMsU0FBU0ssTUFBTSxLQUFLLEtBQUs7Z0JBQ3pCLElBQUksQ0FBQ1YsS0FBS0ssU0FBU00sVUFBVSxNQUFNLFFBQVFYLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1ksUUFBUSxDQUFDLCtEQUErRDtvQkFDM0lwRCxPQUFPcUMsSUFBSSxDQUFDLENBQUMsRUFBRXRDLFFBQVEsd0NBQXdDLENBQUM7b0JBQ2hFQyxPQUFPcUMsSUFBSSxDQUFDLENBQUMsRUFBRXRDLFFBQVEsRUFBRSxFQUFFOEMsU0FBU00sVUFBVSxDQUFDLENBQUM7b0JBQ2hELE9BQU87Z0JBQ1g7WUFDSjtZQUNBLHlEQUF5RDtZQUN6RG5ELE9BQU9xQyxJQUFJLENBQUMsQ0FBQyxFQUFFdEMsUUFBUSxzQ0FBc0MsQ0FBQztZQUM5RCxPQUFPO1FBQ1g7SUFDSjtJQUNBLE1BQU1zRCxVQUFTQyxhQUFhLEVBQUVsQixrQkFBa0IsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sRUFBRUQsY0FBYyxFQUFFakMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsRUFBRSxHQUFHa0Q7UUFDekQsSUFBSWxDLFFBQVFDLEdBQUcsQ0FBQ0MsaUNBQWlDLEVBQUU7WUFDL0N0QixPQUFPcUMsSUFBSSxDQUFDLENBQUMsRUFBRXRDLFFBQVEsdUdBQXVHLEVBQUVxQixRQUFRQyxHQUFHLENBQUNDLGlDQUFpQyxDQUFDLENBQUMsQ0FBQztRQUNwTCxPQUNLO1lBQ0R0QixPQUFPcUMsSUFBSSxDQUFDLENBQUMsRUFBRXRDLFFBQVEsd0NBQXdDLEVBQUVGLGdEQUFRQSxDQUFDLENBQUMsQ0FBQztRQUNoRjtRQUNBLElBQUkwRCxnQkFBZ0IzQixtQkFBbUJFLGNBQWM7UUFDckQsSUFBSyxJQUFJMEIsVUFBVSxHQUFHQSxVQUFVNUIsbUJBQW1CQyxVQUFVLEVBQUUyQixVQUFXO1lBQ3RFLElBQUk7Z0JBQ0EsTUFBTWQsVUFBVW5ELGdGQUFxQkEsQ0FBQ2tFLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDO29CQUFFQyxhQUFhdkIsZ0JBQWdCdUIsV0FBVztnQkFBQyxHQUFHMUQsc0JBQXNCQyxRQUFRQyxVQUFVQyxjQUFjO29CQUFFd0MseUJBQXlCO2dCQUFLO2dCQUN0TSxNQUFNZ0IsZ0JBQWdCLE1BQU16QixlQUFlMEIsZ0JBQWdCLENBQUNuQjtnQkFDNUQsT0FBTyxpQkFBa0JrQixjQUFjRSxXQUFXLElBQUs7WUFDM0QsRUFDQSxPQUFPQyxPQUFPO2dCQUNWLElBQUlBLE1BQU1DLFVBQVUsS0FBSyxLQUFLO29CQUMxQixNQUFNNUUsdURBQUtBLENBQUNtRTtvQkFDWkEsaUJBQWlCM0IsbUJBQW1CRyxpQkFBaUI7b0JBQ3JEO2dCQUNKO2dCQUNBLE1BQU1nQztZQUNWO1FBQ0o7UUFDQSxNQUFNLElBQUl0RSx3REFBbUJBLENBQUMsS0FBSyxDQUFDLEVBQUVNLFFBQVEsc0NBQXNDLEVBQUU2QixtQkFBbUJDLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDbEk7QUFDSixFQUFFLENBQ0YsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL2ltZHNNc2kuanM/MDg3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGRlbGF5LCBpc0Vycm9yIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmltcG9ydCB7IGNyZWF0ZUh0dHBIZWFkZXJzLCBjcmVhdGVQaXBlbGluZVJlcXVlc3QsIH0gZnJvbSBcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIjtcbmltcG9ydCB7IGNyZWRlbnRpYWxMb2dnZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9sb2dnaW5nXCI7XG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbkVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yc1wiO1xuaW1wb3J0IHsgdHJhY2luZ0NsaWVudCB9IGZyb20gXCIuLi8uLi91dGlsL3RyYWNpbmdcIjtcbmltcG9ydCB7IGltZHNBcGlWZXJzaW9uLCBpbWRzRW5kcG9pbnRQYXRoLCBpbWRzSG9zdCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgbWFwU2NvcGVzVG9SZXNvdXJjZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5jb25zdCBtc2lOYW1lID0gXCJNYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsIC0gSU1EU1wiO1xuY29uc3QgbG9nZ2VyID0gY3JlZGVudGlhbExvZ2dlcihtc2lOYW1lKTtcbi8qKlxuICogR2VuZXJhdGVzIHRoZSBvcHRpb25zIHVzZWQgb24gdGhlIHJlcXVlc3QgZm9yIGFuIGFjY2VzcyB0b2tlbi5cbiAqL1xuZnVuY3Rpb24gcHJlcGFyZVJlcXVlc3RPcHRpb25zKHNjb3BlcywgY2xpZW50SWQsIHJlc291cmNlSWQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBtYXBTY29wZXNUb1Jlc291cmNlKHNjb3Blcyk7XG4gICAgaWYgKCFyZXNvdXJjZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bXNpTmFtZX06IE11bHRpcGxlIHNjb3BlcyBhcmUgbm90IHN1cHBvcnRlZC5gKTtcbiAgICB9XG4gICAgY29uc3QgeyBza2lwUXVlcnksIHNraXBNZXRhZGF0YUhlYWRlciB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgICBsZXQgcXVlcnkgPSBcIlwiO1xuICAgIC8vIFBvZCBJZGVudGl0eSB3aWxsIHRyeSB0byBwcm9jZXNzIHRoaXMgcmVxdWVzdCBldmVuIGlmIHRoZSBNZXRhZGF0YSBoZWFkZXIgaXMgbWlzc2luZy5cbiAgICAvLyBXZSBjYW4gZXhjbHVkZSB0aGUgcmVxdWVzdCBxdWVyeSB0byBlbnN1cmUgbm8gSU1EUyBlbmRwb2ludCB0cmllcyB0byBwcm9jZXNzIHRoZSBwaW5nIHJlcXVlc3QuXG4gICAgaWYgKCFza2lwUXVlcnkpIHtcbiAgICAgICAgY29uc3QgcXVlcnlQYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgICAgICBcImFwaS12ZXJzaW9uXCI6IGltZHNBcGlWZXJzaW9uLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1ldGVycy5jbGllbnRfaWQgPSBjbGllbnRJZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzb3VyY2VJZCkge1xuICAgICAgICAgICAgcXVlcnlQYXJhbWV0ZXJzLm1zaV9yZXNfaWQgPSByZXNvdXJjZUlkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlQYXJhbWV0ZXJzKTtcbiAgICAgICAgcXVlcnkgPSBgPyR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChpbWRzRW5kcG9pbnRQYXRoLCAoX2EgPSBwcm9jZXNzLmVudi5BWlVSRV9QT0RfSURFTlRJVFlfQVVUSE9SSVRZX0hPU1QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGltZHNIb3N0KTtcbiAgICBjb25zdCByYXdIZWFkZXJzID0ge1xuICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBNZXRhZGF0YTogXCJ0cnVlXCIsXG4gICAgfTtcbiAgICAvLyBSZW1vdmUgdGhlIE1ldGFkYXRhIGhlYWRlciB0byBpbnZva2UgYSByZXF1ZXN0IGVycm9yIGZyb20gc29tZSBJTURTIGVuZHBvaW50cy5cbiAgICBpZiAoc2tpcE1ldGFkYXRhSGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSByYXdIZWFkZXJzLk1ldGFkYXRhO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIHRoZSBgP2Agc2hvdWxkIGJlIGFkZGVkIGluIHRoZSBcInF1ZXJ5XCIgdmFyaWFibGUgYHNraXBRdWVyeWAgaXMgbm90IHNldC5cbiAgICAgICAgdXJsOiBgJHt1cmx9JHtxdWVyeX1gLFxuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIGhlYWRlcnM6IGNyZWF0ZUh0dHBIZWFkZXJzKHJhd0hlYWRlcnMpLFxuICAgIH07XG59XG4vLyA4MDBtcyAtPiAxNjAwbXMgLT4gMzIwMG1zXG5leHBvcnQgY29uc3QgaW1kc01zaVJldHJ5Q29uZmlnID0ge1xuICAgIG1heFJldHJpZXM6IDMsXG4gICAgc3RhcnREZWxheUluTXM6IDgwMCxcbiAgICBpbnRlcnZhbEluY3JlbWVudDogMixcbn07XG4vKipcbiAqIERlZmluZXMgaG93IHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBBenVyZSBJTURTIE1TSSBpcyBhdmFpbGFibGUsIGFuZCBhbHNvIGhvdyB0byByZXRyaWV2ZSBhIHRva2VuIGZyb20gdGhlIEF6dXJlIElNRFMgTVNJLlxuICovXG5leHBvcnQgY29uc3QgaW1kc01zaSA9IHtcbiAgICBuYW1lOiBcImltZHNNc2lcIixcbiAgICBhc3luYyBpc0F2YWlsYWJsZSh7IHNjb3BlcywgaWRlbnRpdHlDbGllbnQsIGNsaWVudElkLCByZXNvdXJjZUlkLCBnZXRUb2tlbk9wdGlvbnMgPSB7fSwgfSkge1xuICAgICAgICBjb25zdCByZXNvdXJjZSA9IG1hcFNjb3Blc1RvUmVzb3VyY2Uoc2NvcGVzKTtcbiAgICAgICAgaWYgKCFyZXNvdXJjZSkge1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8oYCR7bXNpTmFtZX06IFVuYXZhaWxhYmxlLiBNdWx0aXBsZSBzY29wZXMgYXJlIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgdGhlIFBvZElkZW50aXR5RW5kcG9pbnQgZW52aXJvbm1lbnQgdmFyaWFibGUgd2FzIHNldCBubyBuZWVkIHRvIHByb2JlIHRoZSBlbmRwb2ludCwgaXQgY2FuIGJlIGFzc3VtZWQgdG8gZXhpc3RcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52LkFaVVJFX1BPRF9JREVOVElUWV9BVVRIT1JJVFlfSE9TVCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpZGVudGl0eUNsaWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBJZGVudGl0eUNsaWVudFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHByZXBhcmVSZXF1ZXN0T3B0aW9ucyhyZXNvdXJjZSwgY2xpZW50SWQsIHJlc291cmNlSWQsIHtcbiAgICAgICAgICAgIHNraXBNZXRhZGF0YUhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIHNraXBRdWVyeTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cmFjaW5nQ2xpZW50LndpdGhTcGFuKFwiTWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbC1waW5nSW1kc0VuZHBvaW50XCIsIGdldFRva2VuT3B0aW9ucywgYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICByZXF1ZXN0T3B0aW9ucy50cmFjaW5nT3B0aW9ucyA9IG9wdGlvbnMudHJhY2luZ09wdGlvbnM7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSByZXF1ZXN0IHdpdGggYSB0aW1lb3V0IHNpbmNlIHdlIGV4cGVjdCB0aGF0XG4gICAgICAgICAgICAvLyBub3QgaGF2aW5nIGEgXCJNZXRhZGF0YVwiIGhlYWRlciBzaG91bGQgY2F1c2UgYW4gZXJyb3IgdG8gYmVcbiAgICAgICAgICAgIC8vIHJldHVybmVkIHF1aWNrbHkgZnJvbSB0aGUgZW5kcG9pbnQsIHByb3ZpbmcgaXRzIGF2YWlsYWJpbGl0eS5cbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVQaXBlbGluZVJlcXVlc3QocmVxdWVzdE9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byAxMDAwIGlmIHRoZSBkZWZhdWx0IG9mIDAgaXMgdXNlZC5cbiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIHZhbHVlcyBjYW4gc3RpbGwgYmUgdXNlZCB0byBkaXNhYmxlIHRoZSB0aW1lb3V0LlxuICAgICAgICAgICAgcmVxdWVzdC50aW1lb3V0ID0gKChfYSA9IG9wdGlvbnMucmVxdWVzdE9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50aW1lb3V0KSB8fCAxMDAwO1xuICAgICAgICAgICAgLy8gVGhpcyBNU0kgdXNlcyB0aGUgaW1kc0VuZHBvaW50IHRvIGdldCB0aGUgdG9rZW4sIHdoaWNoIG9ubHkgdXNlcyBodHRwOi8vXG4gICAgICAgICAgICByZXF1ZXN0LmFsbG93SW5zZWN1cmVDb25uZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oYCR7bXNpTmFtZX06IFBpbmdpbmcgdGhlIEF6dXJlIElNRFMgZW5kcG9pbnRgKTtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IGlkZW50aXR5Q2xpZW50LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXF1ZXN0IGZhaWxlZCwgb3IgTm9kZS5qcyB3YXMgdW5hYmxlIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24sXG4gICAgICAgICAgICAgICAgLy8gb3IgdGhlIGhvc3Qgd2FzIGRvd24sIHdlJ2xsIGFzc3VtZSB0aGUgSU1EUyBlbmRwb2ludCBpc24ndCBhdmFpbGFibGUuXG4gICAgICAgICAgICAgICAgaWYgKGlzRXJyb3IoZXJyKSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudmVyYm9zZShgJHttc2lOYW1lfTogQ2F1Z2h0IGVycm9yICR7ZXJyLm5hbWV9OiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlIGZvciBEb2NrZXIgRGVza3RvcCB3aGljaCByZXNwb25kcyB3aXRoIGEgNDAzIHdpdGggYSBtZXNzYWdlIHRoYXQgY29udGFpbnMgXCJBIHNvY2tldCBvcGVyYXRpb24gd2FzIGF0dGVtcHRlZCB0byBhbiB1bnJlYWNoYWJsZSBuZXR3b3JrXCJcbiAgICAgICAgICAgICAgICAvLyByYXRoZXIgdGhhbiBqdXN0IHRpbWluZyBvdXQsIGFzIGV4cGVjdGVkLlxuICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGAke21zaU5hbWV9OiBUaGUgQXp1cmUgSU1EUyBlbmRwb2ludCBpcyB1bmF2YWlsYWJsZWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMykge1xuICAgICAgICAgICAgICAgIGlmICgoX2IgPSByZXNwb25zZS5ib2R5QXNUZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuaW5jbHVkZXMoXCJBIHNvY2tldCBvcGVyYXRpb24gd2FzIGF0dGVtcHRlZCB0byBhbiB1bnJlYWNoYWJsZSBuZXR3b3JrXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGAke21zaU5hbWV9OiBUaGUgQXp1cmUgSU1EUyBlbmRwb2ludCBpcyB1bmF2YWlsYWJsZWApO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhgJHttc2lOYW1lfTogJHtyZXNwb25zZS5ib2R5QXNUZXh0fWApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgd2UgcmVjZWl2ZWQgYW55IHJlc3BvbnNlLCB0aGUgZW5kcG9pbnQgaXMgYXZhaWxhYmxlXG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgJHttc2lOYW1lfTogVGhlIEF6dXJlIElNRFMgZW5kcG9pbnQgaXMgYXZhaWxhYmxlYCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBhc3luYyBnZXRUb2tlbihjb25maWd1cmF0aW9uLCBnZXRUb2tlbk9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGlkZW50aXR5Q2xpZW50LCBzY29wZXMsIGNsaWVudElkLCByZXNvdXJjZUlkIH0gPSBjb25maWd1cmF0aW9uO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuQVpVUkVfUE9EX0lERU5USVRZX0FVVEhPUklUWV9IT1NUKSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgJHttc2lOYW1lfTogVXNpbmcgdGhlIEF6dXJlIElNRFMgZW5kcG9pbnQgY29taW5nIGZyb20gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIEFaVVJFX1BPRF9JREVOVElUWV9BVVRIT1JJVFlfSE9TVD0ke3Byb2Nlc3MuZW52LkFaVVJFX1BPRF9JREVOVElUWV9BVVRIT1JJVFlfSE9TVH0uYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhgJHttc2lOYW1lfTogVXNpbmcgdGhlIGRlZmF1bHQgQXp1cmUgSU1EUyBlbmRwb2ludCAke2ltZHNIb3N0fS5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV4dERlbGF5SW5NcyA9IGltZHNNc2lSZXRyeUNvbmZpZy5zdGFydERlbGF5SW5NcztcbiAgICAgICAgZm9yIChsZXQgcmV0cmllcyA9IDA7IHJldHJpZXMgPCBpbWRzTXNpUmV0cnlDb25maWcubWF4UmV0cmllczsgcmV0cmllcysrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBjcmVhdGVQaXBlbGluZVJlcXVlc3QoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgYWJvcnRTaWduYWw6IGdldFRva2VuT3B0aW9ucy5hYm9ydFNpZ25hbCB9LCBwcmVwYXJlUmVxdWVzdE9wdGlvbnMoc2NvcGVzLCBjbGllbnRJZCwgcmVzb3VyY2VJZCkpLCB7IGFsbG93SW5zZWN1cmVDb25uZWN0aW9uOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlblJlc3BvbnNlID0gYXdhaXQgaWRlbnRpdHlDbGllbnQuc2VuZFRva2VuUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRva2VuUmVzcG9uc2UgJiYgdG9rZW5SZXNwb25zZS5hY2Nlc3NUb2tlbikgfHwgbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZGVsYXkobmV4dERlbGF5SW5Ncyk7XG4gICAgICAgICAgICAgICAgICAgIG5leHREZWxheUluTXMgKj0gaW1kc01zaVJldHJ5Q29uZmlnLmludGVydmFsSW5jcmVtZW50O1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEF1dGhlbnRpY2F0aW9uRXJyb3IoNDA0LCBgJHttc2lOYW1lfTogRmFpbGVkIHRvIHJldHJpZXZlIElNRFMgdG9rZW4gYWZ0ZXIgJHtpbWRzTXNpUmV0cnlDb25maWcubWF4UmV0cmllc30gcmV0cmllcy5gKTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltZHNNc2kuanMubWFwIl0sIm5hbWVzIjpbImRlbGF5IiwiaXNFcnJvciIsImNyZWF0ZUh0dHBIZWFkZXJzIiwiY3JlYXRlUGlwZWxpbmVSZXF1ZXN0IiwiY3JlZGVudGlhbExvZ2dlciIsIkF1dGhlbnRpY2F0aW9uRXJyb3IiLCJ0cmFjaW5nQ2xpZW50IiwiaW1kc0FwaVZlcnNpb24iLCJpbWRzRW5kcG9pbnRQYXRoIiwiaW1kc0hvc3QiLCJtYXBTY29wZXNUb1Jlc291cmNlIiwibXNpTmFtZSIsImxvZ2dlciIsInByZXBhcmVSZXF1ZXN0T3B0aW9ucyIsInNjb3BlcyIsImNsaWVudElkIiwicmVzb3VyY2VJZCIsIm9wdGlvbnMiLCJfYSIsInJlc291cmNlIiwiRXJyb3IiLCJza2lwUXVlcnkiLCJza2lwTWV0YWRhdGFIZWFkZXIiLCJxdWVyeSIsInF1ZXJ5UGFyYW1ldGVycyIsImNsaWVudF9pZCIsIm1zaV9yZXNfaWQiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ0b1N0cmluZyIsInVybCIsIlVSTCIsInByb2Nlc3MiLCJlbnYiLCJBWlVSRV9QT0RfSURFTlRJVFlfQVVUSE9SSVRZX0hPU1QiLCJyYXdIZWFkZXJzIiwiQWNjZXB0IiwiTWV0YWRhdGEiLCJtZXRob2QiLCJoZWFkZXJzIiwiaW1kc01zaVJldHJ5Q29uZmlnIiwibWF4UmV0cmllcyIsInN0YXJ0RGVsYXlJbk1zIiwiaW50ZXJ2YWxJbmNyZW1lbnQiLCJpbWRzTXNpIiwibmFtZSIsImlzQXZhaWxhYmxlIiwiaWRlbnRpdHlDbGllbnQiLCJnZXRUb2tlbk9wdGlvbnMiLCJpbmZvIiwicmVxdWVzdE9wdGlvbnMiLCJ3aXRoU3BhbiIsIl9iIiwidHJhY2luZ09wdGlvbnMiLCJyZXF1ZXN0IiwidGltZW91dCIsImFsbG93SW5zZWN1cmVDb25uZWN0aW9uIiwicmVzcG9uc2UiLCJzZW5kUmVxdWVzdCIsImVyciIsInZlcmJvc2UiLCJtZXNzYWdlIiwic3RhdHVzIiwiYm9keUFzVGV4dCIsImluY2x1ZGVzIiwiZ2V0VG9rZW4iLCJjb25maWd1cmF0aW9uIiwibmV4dERlbGF5SW5NcyIsInJldHJpZXMiLCJPYmplY3QiLCJhc3NpZ24iLCJhYm9ydFNpZ25hbCIsInRva2VuUmVzcG9uc2UiLCJzZW5kVG9rZW5SZXF1ZXN0IiwiYWNjZXNzVG9rZW4iLCJlcnJvciIsInN0YXR1c0NvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/imdsMsi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/index.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ManagedIdentityCredential: () => (/* binding */ ManagedIdentityCredential)\n/* harmony export */ });\n/* harmony import */ var _client_identityClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../client/identityClient */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/client/identityClient.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _appServiceMsi2017__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./appServiceMsi2017 */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/appServiceMsi2017.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n/* harmony import */ var _cloudShellMsi__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cloudShellMsi */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/cloudShellMsi.js\");\n/* harmony import */ var _imdsMsi__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./imdsMsi */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/imdsMsi.js\");\n/* harmony import */ var _arcMsi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./arcMsi */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/arcMsi.js\");\n/* harmony import */ var _tokenExchangeMsi__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tokenExchangeMsi */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/tokenExchangeMsi.js\");\n/* harmony import */ var _fabricMsi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fabricMsi */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/fabricMsi.js\");\n/* harmony import */ var _appServiceMsi2019__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./appServiceMsi2019 */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/appServiceMsi2019.js\");\n/* harmony import */ var _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-node */ \"(rsc)/./node_modules/@azure/msal-node/dist/index.mjs\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\");\n/* harmony import */ var _msal_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../msal/utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/utils.js\");\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.credentialLogger)(\"ManagedIdentityCredential\");\n/**\n * Attempts authentication using a managed identity available at the deployment environment.\n * This authentication type works in Azure VMs, App Service instances, Azure Functions applications,\n * Azure Kubernetes Services, Azure Service Fabric instances and inside of the Azure Cloud Shell.\n *\n * More information about configuring managed identities can be found here:\n * https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview\n */ class ManagedIdentityCredential {\n    /**\n     * @internal\n     * @hidden\n     */ constructor(clientIdOrOptions, options){\n        var _a;\n        this.isEndpointUnavailable = null;\n        this.isAppTokenProviderInitialized = false;\n        let _options;\n        if (typeof clientIdOrOptions === \"string\") {\n            this.clientId = clientIdOrOptions;\n            _options = options;\n        } else {\n            this.clientId = clientIdOrOptions === null || clientIdOrOptions === void 0 ? void 0 : clientIdOrOptions.clientId;\n            _options = clientIdOrOptions;\n        }\n        this.resourceId = _options === null || _options === void 0 ? void 0 : _options.resourceId;\n        // For JavaScript users.\n        if (this.clientId && this.resourceId) {\n            throw new Error(`${ManagedIdentityCredential.name} - Client Id and Resource Id can't be provided at the same time.`);\n        }\n        this.identityClient = new _client_identityClient__WEBPACK_IMPORTED_MODULE_3__.IdentityClient(_options);\n        this.isAvailableIdentityClient = new _client_identityClient__WEBPACK_IMPORTED_MODULE_3__.IdentityClient(Object.assign(Object.assign({}, _options), {\n            retryOptions: {\n                maxRetries: 0\n            }\n        }));\n        /**  authority host validation and metadata discovery to be skipped in managed identity\n         * since this wasn't done previously before adding token cache support\n         */ this.confidentialApp = new _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.ConfidentialClientApplication({\n            auth: {\n                authority: \"https://login.microsoftonline.com/managed_identity\",\n                clientId: (_a = this.clientId) !== null && _a !== void 0 ? _a : _constants__WEBPACK_IMPORTED_MODULE_4__.DeveloperSignOnClientId,\n                clientSecret: \"dummy-secret\",\n                cloudDiscoveryMetadata: '{\"tenant_discovery_endpoint\":\"https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\",\"api-version\":\"1.1\",\"metadata\":[{\"preferred_network\":\"login.microsoftonline.com\",\"preferred_cache\":\"login.windows.net\",\"aliases\":[\"login.microsoftonline.com\",\"login.windows.net\",\"login.microsoft.com\",\"sts.windows.net\"]},{\"preferred_network\":\"login.partner.microsoftonline.cn\",\"preferred_cache\":\"login.partner.microsoftonline.cn\",\"aliases\":[\"login.partner.microsoftonline.cn\",\"login.chinacloudapi.cn\"]},{\"preferred_network\":\"login.microsoftonline.de\",\"preferred_cache\":\"login.microsoftonline.de\",\"aliases\":[\"login.microsoftonline.de\"]},{\"preferred_network\":\"login.microsoftonline.us\",\"preferred_cache\":\"login.microsoftonline.us\",\"aliases\":[\"login.microsoftonline.us\",\"login.usgovcloudapi.net\"]},{\"preferred_network\":\"login-us.microsoftonline.com\",\"preferred_cache\":\"login-us.microsoftonline.com\",\"aliases\":[\"login-us.microsoftonline.com\"]}]}',\n                authorityMetadata: '{\"token_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/token\",\"token_endpoint_auth_methods_supported\":[\"client_secret_post\",\"private_key_jwt\",\"client_secret_basic\"],\"jwks_uri\":\"https://login.microsoftonline.com/common/discovery/v2.0/keys\",\"response_modes_supported\":[\"query\",\"fragment\",\"form_post\"],\"subject_types_supported\":[\"pairwise\"],\"id_token_signing_alg_values_supported\":[\"RS256\"],\"response_types_supported\":[\"code\",\"id_token\",\"code id_token\",\"id_token token\"],\"scopes_supported\":[\"openid\",\"profile\",\"email\",\"offline_access\"],\"issuer\":\"https://login.microsoftonline.com/{tenantid}/v2.0\",\"request_uri_parameter_supported\":false,\"userinfo_endpoint\":\"https://graph.microsoft.com/oidc/userinfo\",\"authorization_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\",\"device_authorization_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/devicecode\",\"http_logout_supported\":true,\"frontchannel_logout_supported\":true,\"end_session_endpoint\":\"https://login.microsoftonline.com/common/oauth2/v2.0/logout\",\"claims_supported\":[\"sub\",\"iss\",\"cloud_instance_name\",\"cloud_instance_host_name\",\"cloud_graph_host_name\",\"msgraph_host\",\"aud\",\"exp\",\"iat\",\"auth_time\",\"acr\",\"nonce\",\"preferred_username\",\"name\",\"tid\",\"ver\",\"at_hash\",\"c_hash\",\"email\"],\"kerberos_endpoint\":\"https://login.microsoftonline.com/common/kerberos\",\"tenant_region_scope\":null,\"cloud_instance_name\":\"microsoftonline.com\",\"cloud_graph_host_name\":\"graph.windows.net\",\"msgraph_host\":\"graph.microsoft.com\",\"rbac_url\":\"https://pas.windows.net\"}',\n                clientCapabilities: []\n            },\n            system: {\n                loggerOptions: {\n                    logLevel: (0,_msal_utils__WEBPACK_IMPORTED_MODULE_5__.getMSALLogLevel)((0,_azure_logger__WEBPACK_IMPORTED_MODULE_1__.getLogLevel)())\n                }\n            }\n        });\n    }\n    async cachedAvailableMSI(scopes, getTokenOptions) {\n        if (this.cachedMSI) {\n            return this.cachedMSI;\n        }\n        const MSIs = [\n            _arcMsi__WEBPACK_IMPORTED_MODULE_6__.arcMsi,\n            _fabricMsi__WEBPACK_IMPORTED_MODULE_7__.fabricMsi,\n            _appServiceMsi2019__WEBPACK_IMPORTED_MODULE_8__.appServiceMsi2019,\n            _appServiceMsi2017__WEBPACK_IMPORTED_MODULE_9__.appServiceMsi2017,\n            _cloudShellMsi__WEBPACK_IMPORTED_MODULE_10__.cloudShellMsi,\n            (0,_tokenExchangeMsi__WEBPACK_IMPORTED_MODULE_11__.tokenExchangeMsi)(),\n            _imdsMsi__WEBPACK_IMPORTED_MODULE_12__.imdsMsi\n        ];\n        for (const msi of MSIs){\n            if (await msi.isAvailable({\n                scopes,\n                identityClient: this.isAvailableIdentityClient,\n                clientId: this.clientId,\n                resourceId: this.resourceId,\n                getTokenOptions\n            })) {\n                this.cachedMSI = msi;\n                return msi;\n            }\n        }\n        throw new _errors__WEBPACK_IMPORTED_MODULE_13__.CredentialUnavailableError(`${ManagedIdentityCredential.name} - No MSI credential available`);\n    }\n    async authenticateManagedIdentity(scopes, getTokenOptions) {\n        const { span, updatedOptions } = _util_tracing__WEBPACK_IMPORTED_MODULE_14__.tracingClient.startSpan(`${ManagedIdentityCredential.name}.authenticateManagedIdentity`, getTokenOptions);\n        try {\n            // Determining the available MSI, and avoiding checking for other MSIs while the program is running.\n            const availableMSI = await this.cachedAvailableMSI(scopes, updatedOptions);\n            return availableMSI.getToken({\n                identityClient: this.identityClient,\n                scopes,\n                clientId: this.clientId,\n                resourceId: this.resourceId\n            }, updatedOptions);\n        } catch (err) {\n            span.setStatus({\n                status: \"error\",\n                error: err\n            });\n            throw err;\n        } finally{\n            span.end();\n        }\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     * If an unexpected error occurs, an {@link AuthenticationError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options) {\n        let result = null;\n        const { span, updatedOptions } = _util_tracing__WEBPACK_IMPORTED_MODULE_14__.tracingClient.startSpan(`${ManagedIdentityCredential.name}.getToken`, options);\n        try {\n            // isEndpointAvailable can be true, false, or null,\n            // If it's null, it means we don't yet know whether\n            // the endpoint is available and need to check for it.\n            if (this.isEndpointUnavailable !== true) {\n                const availableMSI = await this.cachedAvailableMSI(scopes, updatedOptions);\n                if (availableMSI.name === \"tokenExchangeMsi\") {\n                    result = await this.authenticateManagedIdentity(scopes, updatedOptions);\n                } else {\n                    const appTokenParameters = {\n                        correlationId: this.identityClient.getCorrelationId(),\n                        tenantId: (options === null || options === void 0 ? void 0 : options.tenantId) || \"managed_identity\",\n                        scopes: Array.isArray(scopes) ? scopes : [\n                            scopes\n                        ],\n                        claims: options === null || options === void 0 ? void 0 : options.claims\n                    };\n                    // Added a check to see if SetAppTokenProvider was already defined.\n                    this.initializeSetAppTokenProvider();\n                    const authenticationResult = await this.confidentialApp.acquireTokenByClientCredential(Object.assign({}, appTokenParameters));\n                    result = this.handleResult(scopes, authenticationResult || undefined);\n                }\n                if (result === null) {\n                    // If authenticateManagedIdentity returns null,\n                    // it means no MSI endpoints are available.\n                    // If so, we avoid trying to reach to them in future requests.\n                    this.isEndpointUnavailable = true;\n                    // It also means that the endpoint answered with either 200 or 201 (see the sendTokenRequest method),\n                    // yet we had no access token. For this reason, we'll throw once with a specific message:\n                    const error = new _errors__WEBPACK_IMPORTED_MODULE_13__.CredentialUnavailableError(\"The managed identity endpoint was reached, yet no tokens were received.\");\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.formatError)(scopes, error));\n                    throw error;\n                }\n                // Since `authenticateManagedIdentity` didn't throw, and the result was not null,\n                // We will assume that this endpoint is reachable from this point forward,\n                // and avoid pinging again to it.\n                this.isEndpointUnavailable = false;\n            } else {\n                // We've previously determined that the endpoint was unavailable,\n                // either because it was unreachable or permanently unable to authenticate.\n                const error = new _errors__WEBPACK_IMPORTED_MODULE_13__.CredentialUnavailableError(\"The managed identity endpoint is not currently available\");\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.formatError)(scopes, error));\n                throw error;\n            }\n            logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.formatSuccess)(scopes));\n            return result;\n        } catch (err) {\n            // CredentialUnavailable errors are expected to reach here.\n            // We intend them to bubble up, so that DefaultAzureCredential can catch them.\n            if (err.name === \"AuthenticationRequiredError\") {\n                throw err;\n            }\n            // Expected errors to reach this point:\n            // - Errors coming from a method unexpectedly breaking.\n            // - When identityClient.sendTokenRequest throws, in which case\n            //   if the status code was 400, it means that the endpoint is working,\n            //   but no identity is available.\n            span.setStatus({\n                status: \"error\",\n                error: err\n            });\n            // If either the network is unreachable,\n            // we can safely assume the credential is unavailable.\n            if (err.code === \"ENETUNREACH\") {\n                const error = new _errors__WEBPACK_IMPORTED_MODULE_13__.CredentialUnavailableError(`${ManagedIdentityCredential.name}: Unavailable. Network unreachable. Message: ${err.message}`);\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.formatError)(scopes, error));\n                throw error;\n            }\n            // If either the host was unreachable,\n            // we can safely assume the credential is unavailable.\n            if (err.code === \"EHOSTUNREACH\") {\n                const error = new _errors__WEBPACK_IMPORTED_MODULE_13__.CredentialUnavailableError(`${ManagedIdentityCredential.name}: Unavailable. No managed identity endpoint found. Message: ${err.message}`);\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.formatError)(scopes, error));\n                throw error;\n            }\n            // If err.statusCode has a value of 400, it comes from sendTokenRequest,\n            // and it means that the endpoint is working, but that no identity is available.\n            if (err.statusCode === 400) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_13__.CredentialUnavailableError(`${ManagedIdentityCredential.name}: The managed identity endpoint is indicating there's no available identity. Message: ${err.message}`);\n            }\n            // This is a special case for Docker Desktop which responds with a 403 with a message that contains \"A socket operation was attempted to an unreachable network\"\n            // rather than just timing out, as expected.\n            if (err.statusCode === 403 || err.code === 403) {\n                if (err.message.includes(\"A socket operation was attempted to an unreachable network\")) {\n                    const error = new _errors__WEBPACK_IMPORTED_MODULE_13__.CredentialUnavailableError(`${ManagedIdentityCredential.name}: Unavailable. Network unreachable. Message: ${err.message}`);\n                    logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.formatError)(scopes, error));\n                    throw error;\n                }\n            }\n            // If the error has no status code, we can assume there was no available identity.\n            // This will throw silently during any ChainedTokenCredential.\n            if (err.statusCode === undefined) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_13__.CredentialUnavailableError(`${ManagedIdentityCredential.name}: Authentication failed. Message ${err.message}`);\n            }\n            // Any other error should break the chain.\n            throw new _errors__WEBPACK_IMPORTED_MODULE_13__.AuthenticationError(err.statusCode, {\n                error: `${ManagedIdentityCredential.name} authentication failed.`,\n                error_description: err.message\n            });\n        } finally{\n            // Finally is always called, both if we return and if we throw in the above try/catch.\n            span.end();\n        }\n    }\n    /**\n     * Handles the MSAL authentication result.\n     * If the result has an account, we update the local account reference.\n     * If the token received is invalid, an error will be thrown depending on what's missing.\n     */ handleResult(scopes, result, getTokenOptions) {\n        this.ensureValidMsalToken(scopes, result, getTokenOptions);\n        logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.formatSuccess)(scopes));\n        return {\n            token: result.accessToken,\n            expiresOnTimestamp: result.expiresOn.getTime()\n        };\n    }\n    /**\n     * Ensures the validity of the MSAL token\n     * @internal\n     */ ensureValidMsalToken(scopes, msalToken, getTokenOptions) {\n        const error = (message)=>{\n            logger.getToken.info(message);\n            return new _errors__WEBPACK_IMPORTED_MODULE_13__.AuthenticationRequiredError({\n                scopes: Array.isArray(scopes) ? scopes : [\n                    scopes\n                ],\n                getTokenOptions,\n                message\n            });\n        };\n        if (!msalToken) {\n            throw error(\"No response\");\n        }\n        if (!msalToken.expiresOn) {\n            throw error(`Response had no \"expiresOn\" property.`);\n        }\n        if (!msalToken.accessToken) {\n            throw error(`Response had no \"accessToken\" property.`);\n        }\n    }\n    initializeSetAppTokenProvider() {\n        if (!this.isAppTokenProviderInitialized) {\n            this.confidentialApp.SetAppTokenProvider(async (appTokenProviderParameters)=>{\n                logger.info(`SetAppTokenProvider invoked with parameters- ${JSON.stringify(appTokenProviderParameters)}`);\n                const getTokenOptions = Object.assign({}, appTokenProviderParameters);\n                logger.info(`authenticateManagedIdentity invoked with scopes- ${JSON.stringify(appTokenProviderParameters.scopes)} and getTokenOptions - ${JSON.stringify(getTokenOptions)}`);\n                const resultToken = await this.authenticateManagedIdentity(appTokenProviderParameters.scopes, getTokenOptions);\n                if (resultToken) {\n                    logger.info(`SetAppTokenProvider will save the token in cache`);\n                    const expiresInSeconds = (resultToken === null || resultToken === void 0 ? void 0 : resultToken.expiresOnTimestamp) ? Math.floor((resultToken.expiresOnTimestamp - Date.now()) / 1000) : 0;\n                    return {\n                        accessToken: resultToken === null || resultToken === void 0 ? void 0 : resultToken.token,\n                        expiresInSeconds\n                    };\n                } else {\n                    logger.info(`SetAppTokenProvider token has \"no_access_token_returned\" as the saved token`);\n                    return {\n                        accessToken: \"no_access_token_returned\",\n                        expiresInSeconds: 0\n                    };\n                }\n            });\n            this.isAppTokenProviderInitialized = true;\n        }\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/tokenExchangeMsi.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/tokenExchangeMsi.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tokenExchangeMsi: () => (/* binding */ tokenExchangeMsi)\n/* harmony export */ });\n/* harmony import */ var _workloadIdentityCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../workloadIdentityCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/workloadIdentityCredential.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst msiName = \"ManagedIdentityCredential - Token Exchange\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(msiName);\n/**\n * Defines how to determine whether the token exchange MSI is available, and also how to retrieve a token from the token exchange MSI.\n */ function tokenExchangeMsi() {\n    return {\n        name: \"tokenExchangeMsi\",\n        async isAvailable ({ clientId }) {\n            const env = process.env;\n            const result = Boolean((clientId || env.AZURE_CLIENT_ID) && env.AZURE_TENANT_ID && process.env.AZURE_FEDERATED_TOKEN_FILE);\n            if (!result) {\n                logger.info(`${msiName}: Unavailable. The environment variables needed are: AZURE_CLIENT_ID (or the client ID sent through the parameters), AZURE_TENANT_ID and AZURE_FEDERATED_TOKEN_FILE`);\n            }\n            return result;\n        },\n        async getToken (configuration, getTokenOptions = {}) {\n            const { scopes, clientId } = configuration;\n            const identityClientTokenCredentialOptions = {};\n            const workloadIdentityCredential = new _workloadIdentityCredential__WEBPACK_IMPORTED_MODULE_1__.WorkloadIdentityCredential(Object.assign(Object.assign({\n                clientId,\n                tenantId: process.env.AZURE_TENANT_ID,\n                tokenFilePath: process.env.AZURE_FEDERATED_TOKEN_FILE\n            }, identityClientTokenCredentialOptions), {\n                disableInstanceDiscovery: true\n            }));\n            const token = await workloadIdentityCredential.getToken(scopes, getTokenOptions);\n            return token;\n        }\n    };\n} //# sourceMappingURL=tokenExchangeMsi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL3Rva2VuRXhjaGFuZ2VNc2kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUN5QztBQUNyQjtBQUN0RCxNQUFNRSxVQUFVO0FBQ2hCLE1BQU1DLFNBQVNGLCtEQUFnQkEsQ0FBQ0M7QUFDaEM7O0NBRUMsR0FDTSxTQUFTRTtJQUNaLE9BQU87UUFDSEMsTUFBTTtRQUNOLE1BQU1DLGFBQVksRUFBRUMsUUFBUSxFQUFFO1lBQzFCLE1BQU1DLE1BQU1DLFFBQVFELEdBQUc7WUFDdkIsTUFBTUUsU0FBU0MsUUFBUSxDQUFDSixZQUFZQyxJQUFJSSxlQUFlLEtBQ25ESixJQUFJSyxlQUFlLElBQ25CSixRQUFRRCxHQUFHLENBQUNNLDBCQUEwQjtZQUMxQyxJQUFJLENBQUNKLFFBQVE7Z0JBQ1RQLE9BQU9ZLElBQUksQ0FBQyxDQUFDLEVBQUViLFFBQVEsbUtBQW1LLENBQUM7WUFDL0w7WUFDQSxPQUFPUTtRQUNYO1FBQ0EsTUFBTU0sVUFBU0MsYUFBYSxFQUFFQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQzlDLE1BQU0sRUFBRUMsTUFBTSxFQUFFWixRQUFRLEVBQUUsR0FBR1U7WUFDN0IsTUFBTUcsdUNBQXVDLENBQUM7WUFDOUMsTUFBTUMsNkJBQTZCLElBQUlyQixtRkFBMEJBLENBQUNzQixPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQztnQkFBRWhCO2dCQUFVaUIsVUFBVWYsUUFBUUQsR0FBRyxDQUFDSyxlQUFlO2dCQUFFWSxlQUFlaEIsUUFBUUQsR0FBRyxDQUFDTSwwQkFBMEI7WUFBQyxHQUFHTSx1Q0FBdUM7Z0JBQUVNLDBCQUEwQjtZQUFLO1lBQ2xSLE1BQU1DLFFBQVEsTUFBTU4sMkJBQTJCTCxRQUFRLENBQUNHLFFBQVFEO1lBQ2hFLE9BQU9TO1FBQ1g7SUFDSjtBQUNKLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL3Rva2VuRXhjaGFuZ2VNc2kuanM/ZGY5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFdvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsIH0gZnJvbSBcIi4uL3dvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsXCI7XG5pbXBvcnQgeyBjcmVkZW50aWFsTG9nZ2VyIH0gZnJvbSBcIi4uLy4uL3V0aWwvbG9nZ2luZ1wiO1xuY29uc3QgbXNpTmFtZSA9IFwiTWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbCAtIFRva2VuIEV4Y2hhbmdlXCI7XG5jb25zdCBsb2dnZXIgPSBjcmVkZW50aWFsTG9nZ2VyKG1zaU5hbWUpO1xuLyoqXG4gKiBEZWZpbmVzIGhvdyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgdG9rZW4gZXhjaGFuZ2UgTVNJIGlzIGF2YWlsYWJsZSwgYW5kIGFsc28gaG93IHRvIHJldHJpZXZlIGEgdG9rZW4gZnJvbSB0aGUgdG9rZW4gZXhjaGFuZ2UgTVNJLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5FeGNoYW5nZU1zaSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBcInRva2VuRXhjaGFuZ2VNc2lcIixcbiAgICAgICAgYXN5bmMgaXNBdmFpbGFibGUoeyBjbGllbnRJZCB9KSB7XG4gICAgICAgICAgICBjb25zdCBlbnYgPSBwcm9jZXNzLmVudjtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IEJvb2xlYW4oKGNsaWVudElkIHx8IGVudi5BWlVSRV9DTElFTlRfSUQpICYmXG4gICAgICAgICAgICAgICAgZW52LkFaVVJFX1RFTkFOVF9JRCAmJlxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkFaVVJFX0ZFREVSQVRFRF9UT0tFTl9GSUxFKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oYCR7bXNpTmFtZX06IFVuYXZhaWxhYmxlLiBUaGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIG5lZWRlZCBhcmU6IEFaVVJFX0NMSUVOVF9JRCAob3IgdGhlIGNsaWVudCBJRCBzZW50IHRocm91Z2ggdGhlIHBhcmFtZXRlcnMpLCBBWlVSRV9URU5BTlRfSUQgYW5kIEFaVVJFX0ZFREVSQVRFRF9UT0tFTl9GSUxFYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBnZXRUb2tlbihjb25maWd1cmF0aW9uLCBnZXRUb2tlbk9wdGlvbnMgPSB7fSkge1xuICAgICAgICAgICAgY29uc3QgeyBzY29wZXMsIGNsaWVudElkIH0gPSBjb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgY29uc3QgaWRlbnRpdHlDbGllbnRUb2tlbkNyZWRlbnRpYWxPcHRpb25zID0ge307XG4gICAgICAgICAgICBjb25zdCB3b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbCA9IG5ldyBXb3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbChPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBjbGllbnRJZCwgdGVuYW50SWQ6IHByb2Nlc3MuZW52LkFaVVJFX1RFTkFOVF9JRCwgdG9rZW5GaWxlUGF0aDogcHJvY2Vzcy5lbnYuQVpVUkVfRkVERVJBVEVEX1RPS0VOX0ZJTEUgfSwgaWRlbnRpdHlDbGllbnRUb2tlbkNyZWRlbnRpYWxPcHRpb25zKSwgeyBkaXNhYmxlSW5zdGFuY2VEaXNjb3Zlcnk6IHRydWUgfSkpO1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB3b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbC5nZXRUb2tlbihzY29wZXMsIGdldFRva2VuT3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2VuRXhjaGFuZ2VNc2kuanMubWFwIl0sIm5hbWVzIjpbIldvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsIiwiY3JlZGVudGlhbExvZ2dlciIsIm1zaU5hbWUiLCJsb2dnZXIiLCJ0b2tlbkV4Y2hhbmdlTXNpIiwibmFtZSIsImlzQXZhaWxhYmxlIiwiY2xpZW50SWQiLCJlbnYiLCJwcm9jZXNzIiwicmVzdWx0IiwiQm9vbGVhbiIsIkFaVVJFX0NMSUVOVF9JRCIsIkFaVVJFX1RFTkFOVF9JRCIsIkFaVVJFX0ZFREVSQVRFRF9UT0tFTl9GSUxFIiwiaW5mbyIsImdldFRva2VuIiwiY29uZmlndXJhdGlvbiIsImdldFRva2VuT3B0aW9ucyIsInNjb3BlcyIsImlkZW50aXR5Q2xpZW50VG9rZW5DcmVkZW50aWFsT3B0aW9ucyIsIndvcmtsb2FkSWRlbnRpdHlDcmVkZW50aWFsIiwiT2JqZWN0IiwiYXNzaWduIiwidGVuYW50SWQiLCJ0b2tlbkZpbGVQYXRoIiwiZGlzYWJsZUluc3RhbmNlRGlzY292ZXJ5IiwidG9rZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/tokenExchangeMsi.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapScopesToResource: () => (/* binding */ mapScopesToResource),\n/* harmony export */   parseExpirationTimestamp: () => (/* binding */ parseExpirationTimestamp)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Most MSIs send requests to the IMDS endpoint, or a similar endpoint.\n * These are GET requests that require sending a `resource` parameter on the query.\n * This resource can be derived from the scopes received through the getToken call, as long as only one scope is received.\n * Multiple scopes assume that the resulting token will have access to multiple resources, which won't be the case.\n *\n * For that reason, when we encounter multiple scopes, we return undefined.\n * It's up to the individual MSI implementations to throw the errors (which helps us provide less generic errors).\n */ function mapScopesToResource(scopes) {\n    let scope = \"\";\n    if (Array.isArray(scopes)) {\n        if (scopes.length !== 1) {\n            return;\n        }\n        scope = scopes[0];\n    } else if (typeof scopes === \"string\") {\n        scope = scopes;\n    }\n    if (!scope.endsWith(_constants__WEBPACK_IMPORTED_MODULE_0__.DefaultScopeSuffix)) {\n        return scope;\n    }\n    return scope.substr(0, scope.lastIndexOf(_constants__WEBPACK_IMPORTED_MODULE_0__.DefaultScopeSuffix));\n}\n/**\n * Given a token response, return the expiration timestamp as the number of milliseconds from the Unix epoch.\n * @param body - A parsed response body from the authentication endpoint.\n */ function parseExpirationTimestamp(body) {\n    if (typeof body.expires_on === \"number\") {\n        return body.expires_on * 1000;\n    }\n    if (typeof body.expires_on === \"string\") {\n        const asNumber = +body.expires_on;\n        if (!isNaN(asNumber)) {\n            return asNumber * 1000;\n        }\n        const asDate = Date.parse(body.expires_on);\n        if (!isNaN(asDate)) {\n            return asDate;\n        }\n    }\n    if (typeof body.expires_in === \"number\") {\n        return Date.now() + body.expires_in * 1000;\n    }\n    throw new Error(`Failed to parse token expiration from body. expires_in=\"${body.expires_in}\", expires_on=\"${body.expires_on}\"`);\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDZTtBQUNqRDs7Ozs7Ozs7Q0FRQyxHQUNNLFNBQVNDLG9CQUFvQkMsTUFBTTtJQUN0QyxJQUFJQyxRQUFRO0lBQ1osSUFBSUMsTUFBTUMsT0FBTyxDQUFDSCxTQUFTO1FBQ3ZCLElBQUlBLE9BQU9JLE1BQU0sS0FBSyxHQUFHO1lBQ3JCO1FBQ0o7UUFDQUgsUUFBUUQsTUFBTSxDQUFDLEVBQUU7SUFDckIsT0FDSyxJQUFJLE9BQU9BLFdBQVcsVUFBVTtRQUNqQ0MsUUFBUUQ7SUFDWjtJQUNBLElBQUksQ0FBQ0MsTUFBTUksUUFBUSxDQUFDUCwwREFBa0JBLEdBQUc7UUFDckMsT0FBT0c7SUFDWDtJQUNBLE9BQU9BLE1BQU1LLE1BQU0sQ0FBQyxHQUFHTCxNQUFNTSxXQUFXLENBQUNULDBEQUFrQkE7QUFDL0Q7QUFDQTs7O0NBR0MsR0FDTSxTQUFTVSx5QkFBeUJDLElBQUk7SUFDekMsSUFBSSxPQUFPQSxLQUFLQyxVQUFVLEtBQUssVUFBVTtRQUNyQyxPQUFPRCxLQUFLQyxVQUFVLEdBQUc7SUFDN0I7SUFDQSxJQUFJLE9BQU9ELEtBQUtDLFVBQVUsS0FBSyxVQUFVO1FBQ3JDLE1BQU1DLFdBQVcsQ0FBQ0YsS0FBS0MsVUFBVTtRQUNqQyxJQUFJLENBQUNFLE1BQU1ELFdBQVc7WUFDbEIsT0FBT0EsV0FBVztRQUN0QjtRQUNBLE1BQU1FLFNBQVNDLEtBQUtDLEtBQUssQ0FBQ04sS0FBS0MsVUFBVTtRQUN6QyxJQUFJLENBQUNFLE1BQU1DLFNBQVM7WUFDaEIsT0FBT0E7UUFDWDtJQUNKO0lBQ0EsSUFBSSxPQUFPSixLQUFLTyxVQUFVLEtBQUssVUFBVTtRQUNyQyxPQUFPRixLQUFLRyxHQUFHLEtBQUtSLEtBQUtPLFVBQVUsR0FBRztJQUMxQztJQUNBLE1BQU0sSUFBSUUsTUFBTSxDQUFDLHdEQUF3RCxFQUFFVCxLQUFLTyxVQUFVLENBQUMsZUFBZSxFQUFFUCxLQUFLQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ2xJLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9tYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFsL3V0aWxzLmpzPzYwMDgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBEZWZhdWx0U2NvcGVTdWZmaXggfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbi8qKlxuICogTW9zdCBNU0lzIHNlbmQgcmVxdWVzdHMgdG8gdGhlIElNRFMgZW5kcG9pbnQsIG9yIGEgc2ltaWxhciBlbmRwb2ludC5cbiAqIFRoZXNlIGFyZSBHRVQgcmVxdWVzdHMgdGhhdCByZXF1aXJlIHNlbmRpbmcgYSBgcmVzb3VyY2VgIHBhcmFtZXRlciBvbiB0aGUgcXVlcnkuXG4gKiBUaGlzIHJlc291cmNlIGNhbiBiZSBkZXJpdmVkIGZyb20gdGhlIHNjb3BlcyByZWNlaXZlZCB0aHJvdWdoIHRoZSBnZXRUb2tlbiBjYWxsLCBhcyBsb25nIGFzIG9ubHkgb25lIHNjb3BlIGlzIHJlY2VpdmVkLlxuICogTXVsdGlwbGUgc2NvcGVzIGFzc3VtZSB0aGF0IHRoZSByZXN1bHRpbmcgdG9rZW4gd2lsbCBoYXZlIGFjY2VzcyB0byBtdWx0aXBsZSByZXNvdXJjZXMsIHdoaWNoIHdvbid0IGJlIHRoZSBjYXNlLlxuICpcbiAqIEZvciB0aGF0IHJlYXNvbiwgd2hlbiB3ZSBlbmNvdW50ZXIgbXVsdGlwbGUgc2NvcGVzLCB3ZSByZXR1cm4gdW5kZWZpbmVkLlxuICogSXQncyB1cCB0byB0aGUgaW5kaXZpZHVhbCBNU0kgaW1wbGVtZW50YXRpb25zIHRvIHRocm93IHRoZSBlcnJvcnMgKHdoaWNoIGhlbHBzIHVzIHByb3ZpZGUgbGVzcyBnZW5lcmljIGVycm9ycykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBTY29wZXNUb1Jlc291cmNlKHNjb3Blcykge1xuICAgIGxldCBzY29wZSA9IFwiXCI7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NvcGVzKSkge1xuICAgICAgICBpZiAoc2NvcGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNjb3BlID0gc2NvcGVzWzBdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc2NvcGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNjb3BlID0gc2NvcGVzO1xuICAgIH1cbiAgICBpZiAoIXNjb3BlLmVuZHNXaXRoKERlZmF1bHRTY29wZVN1ZmZpeCkpIHtcbiAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH1cbiAgICByZXR1cm4gc2NvcGUuc3Vic3RyKDAsIHNjb3BlLmxhc3RJbmRleE9mKERlZmF1bHRTY29wZVN1ZmZpeCkpO1xufVxuLyoqXG4gKiBHaXZlbiBhIHRva2VuIHJlc3BvbnNlLCByZXR1cm4gdGhlIGV4cGlyYXRpb24gdGltZXN0YW1wIGFzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIFVuaXggZXBvY2guXG4gKiBAcGFyYW0gYm9keSAtIEEgcGFyc2VkIHJlc3BvbnNlIGJvZHkgZnJvbSB0aGUgYXV0aGVudGljYXRpb24gZW5kcG9pbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4cGlyYXRpb25UaW1lc3RhbXAoYm9keSkge1xuICAgIGlmICh0eXBlb2YgYm9keS5leHBpcmVzX29uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBib2R5LmV4cGlyZXNfb24gKiAxMDAwO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGJvZHkuZXhwaXJlc19vbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBhc051bWJlciA9ICtib2R5LmV4cGlyZXNfb247XG4gICAgICAgIGlmICghaXNOYU4oYXNOdW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXNOdW1iZXIgKiAxMDAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFzRGF0ZSA9IERhdGUucGFyc2UoYm9keS5leHBpcmVzX29uKTtcbiAgICAgICAgaWYgKCFpc05hTihhc0RhdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXNEYXRlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYm9keS5leHBpcmVzX2luID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpICsgYm9keS5leHBpcmVzX2luICogMTAwMDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGFyc2UgdG9rZW4gZXhwaXJhdGlvbiBmcm9tIGJvZHkuIGV4cGlyZXNfaW49XCIke2JvZHkuZXhwaXJlc19pbn1cIiwgZXhwaXJlc19vbj1cIiR7Ym9keS5leHBpcmVzX29ufVwiYCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiRGVmYXVsdFNjb3BlU3VmZml4IiwibWFwU2NvcGVzVG9SZXNvdXJjZSIsInNjb3BlcyIsInNjb3BlIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiZW5kc1dpdGgiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsInBhcnNlRXhwaXJhdGlvblRpbWVzdGFtcCIsImJvZHkiLCJleHBpcmVzX29uIiwiYXNOdW1iZXIiLCJpc05hTiIsImFzRGF0ZSIsIkRhdGUiLCJwYXJzZSIsImV4cGlyZXNfaW4iLCJub3ciLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/onBehalfOfCredential.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/onBehalfOfCredential.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnBehalfOfCredential: () => (/* binding */ OnBehalfOfCredential)\n/* harmony export */ });\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _msal_nodeFlows_msalOnBehalfOf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../msal/nodeFlows/msalOnBehalfOf */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalOnBehalfOf.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\nconst credentialName = \"OnBehalfOfCredential\";\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(credentialName);\n/**\n * Enables authentication to Microsoft Entra ID using the [On Behalf Of flow](https://learn.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow).\n */ class OnBehalfOfCredential {\n    constructor(options){\n        this.options = options;\n        const { clientSecret } = options;\n        const { certificatePath } = options;\n        const { tenantId, clientId, userAssertionToken, additionallyAllowedTenants: additionallyAllowedTenantIds } = options;\n        if (!tenantId || !clientId || !(clientSecret || certificatePath) || !userAssertionToken) {\n            throw new Error(`${credentialName}: tenantId, clientId, clientSecret (or certificatePath) and userAssertionToken are required parameters.`);\n        }\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.resolveAdditionallyAllowedTenantIds)(additionallyAllowedTenantIds);\n        this.msalFlow = new _msal_nodeFlows_msalOnBehalfOf__WEBPACK_IMPORTED_MODULE_2__.MsalOnBehalfOf(Object.assign(Object.assign({}, this.options), {\n            logger,\n            tokenCredentialOptions: this.options\n        }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure the underlying network requests.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${credentialName}.getToken`, options, async (newOptions)=>{\n            newOptions.tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureScopes)(scopes);\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n} //# sourceMappingURL=onBehalfOfCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9vbkJlaGFsZk9mQ3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNzRTtBQUN0QztBQUNmO0FBQ0Q7QUFDRjtBQUNoRCxNQUFNTSxpQkFBaUI7QUFDdkIsTUFBTUMsU0FBU0osK0RBQWdCQSxDQUFDRztBQUNoQzs7Q0FFQyxHQUNNLE1BQU1FO0lBQ1RDLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHRDtRQUN6QixNQUFNLEVBQUVFLGVBQWUsRUFBRSxHQUFHRjtRQUM1QixNQUFNLEVBQUVHLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxrQkFBa0IsRUFBRUMsNEJBQTRCQyw0QkFBNEIsRUFBRyxHQUFHUDtRQUM5RyxJQUFJLENBQUNHLFlBQVksQ0FBQ0MsWUFBWSxDQUFFSCxDQUFBQSxnQkFBZ0JDLGVBQWMsS0FBTSxDQUFDRyxvQkFBb0I7WUFDckYsTUFBTSxJQUFJRyxNQUFNLENBQUMsRUFBRVosZUFBZSx1R0FBdUcsQ0FBQztRQUM5STtRQUNBLElBQUksQ0FBQ08sUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNJLDRCQUE0QixHQUFHaEIsd0ZBQW1DQSxDQUFDZ0I7UUFDeEUsSUFBSSxDQUFDRSxRQUFRLEdBQUcsSUFBSWpCLDBFQUFjQSxDQUFDa0IsT0FBT0MsTUFBTSxDQUFDRCxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ1gsT0FBTyxHQUFHO1lBQUVIO1lBQVFlLHdCQUF3QixJQUFJLENBQUNaLE9BQU87UUFBQztJQUNySTtJQUNBOzs7Ozs7S0FNQyxHQUNELE1BQU1hLFNBQVNDLE1BQU0sRUFBRWQsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNqQyxPQUFPTCx3REFBYUEsQ0FBQ29CLFFBQVEsQ0FBQyxDQUFDLEVBQUVuQixlQUFlLFNBQVMsQ0FBQyxFQUFFSSxTQUFTLE9BQU9nQjtZQUN4RUEsV0FBV2IsUUFBUSxHQUFHYiw4RUFBeUJBLENBQUMsSUFBSSxDQUFDYSxRQUFRLEVBQUVhLFlBQVksSUFBSSxDQUFDVCw0QkFBNEIsRUFBRVY7WUFDOUcsTUFBTW9CLGNBQWN2Qiw4REFBWUEsQ0FBQ29CO1lBQ2pDLE9BQU8sSUFBSSxDQUFDTCxRQUFRLENBQUNJLFFBQVEsQ0FBQ0ksYUFBYUQ7UUFDL0M7SUFDSjtBQUNKLEVBQ0EsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy9vbkJlaGFsZk9mQ3JlZGVudGlhbC5qcz9jMDZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgcHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdCwgcmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMsIH0gZnJvbSBcIi4uL3V0aWwvdGVuYW50SWRVdGlsc1wiO1xuaW1wb3J0IHsgTXNhbE9uQmVoYWxmT2YgfSBmcm9tIFwiLi4vbXNhbC9ub2RlRmxvd3MvbXNhbE9uQmVoYWxmT2ZcIjtcbmltcG9ydCB7IGNyZWRlbnRpYWxMb2dnZXIgfSBmcm9tIFwiLi4vdXRpbC9sb2dnaW5nXCI7XG5pbXBvcnQgeyBlbnN1cmVTY29wZXMgfSBmcm9tIFwiLi4vdXRpbC9zY29wZVV0aWxzXCI7XG5pbXBvcnQgeyB0cmFjaW5nQ2xpZW50IH0gZnJvbSBcIi4uL3V0aWwvdHJhY2luZ1wiO1xuY29uc3QgY3JlZGVudGlhbE5hbWUgPSBcIk9uQmVoYWxmT2ZDcmVkZW50aWFsXCI7XG5jb25zdCBsb2dnZXIgPSBjcmVkZW50aWFsTG9nZ2VyKGNyZWRlbnRpYWxOYW1lKTtcbi8qKlxuICogRW5hYmxlcyBhdXRoZW50aWNhdGlvbiB0byBNaWNyb3NvZnQgRW50cmEgSUQgdXNpbmcgdGhlIFtPbiBCZWhhbGYgT2YgZmxvd10oaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2F6dXJlL2FjdGl2ZS1kaXJlY3RvcnkvZGV2ZWxvcC92Mi1vYXV0aDItb24tYmVoYWxmLW9mLWZsb3cpLlxuICovXG5leHBvcnQgY2xhc3MgT25CZWhhbGZPZkNyZWRlbnRpYWwge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBjbGllbnRTZWNyZXQgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgY2VydGlmaWNhdGVQYXRoIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IHRlbmFudElkLCBjbGllbnRJZCwgdXNlckFzc2VydGlvblRva2VuLCBhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50czogYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcywgfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmICghdGVuYW50SWQgfHwgIWNsaWVudElkIHx8ICEoY2xpZW50U2VjcmV0IHx8IGNlcnRpZmljYXRlUGF0aCkgfHwgIXVzZXJBc3NlcnRpb25Ub2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2NyZWRlbnRpYWxOYW1lfTogdGVuYW50SWQsIGNsaWVudElkLCBjbGllbnRTZWNyZXQgKG9yIGNlcnRpZmljYXRlUGF0aCkgYW5kIHVzZXJBc3NlcnRpb25Ub2tlbiBhcmUgcmVxdWlyZWQgcGFyYW1ldGVycy5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRlbmFudElkID0gdGVuYW50SWQ7XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyA9IHJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzKGFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMpO1xuICAgICAgICB0aGlzLm1zYWxGbG93ID0gbmV3IE1zYWxPbkJlaGFsZk9mKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKSwgeyBsb2dnZXIsIHRva2VuQ3JlZGVudGlhbE9wdGlvbnM6IHRoaXMub3B0aW9ucyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZXMgd2l0aCBBenVyZSBBY3RpdmUgRGlyZWN0b3J5IGFuZCByZXR1cm5zIGFuIGFjY2VzcyB0b2tlbiBpZiBzdWNjZXNzZnVsLlxuICAgICAqIElmIGF1dGhlbnRpY2F0aW9uIGZhaWxzLCBhIHtAbGluayBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcn0gd2lsbCBiZSB0aHJvd24gd2l0aCB0aGUgZGV0YWlscyBvZiB0aGUgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZXMgLSBUaGUgbGlzdCBvZiBzY29wZXMgZm9yIHdoaWNoIHRoZSB0b2tlbiB3aWxsIGhhdmUgYWNjZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgdGhlIHVuZGVybHlpbmcgbmV0d29yayByZXF1ZXN0cy5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihgJHtjcmVkZW50aWFsTmFtZX0uZ2V0VG9rZW5gLCBvcHRpb25zLCBhc3luYyAobmV3T3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgbmV3T3B0aW9ucy50ZW5hbnRJZCA9IHByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QodGhpcy50ZW5hbnRJZCwgbmV3T3B0aW9ucywgdGhpcy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzLCBsb2dnZXIpO1xuICAgICAgICAgICAgY29uc3QgYXJyYXlTY29wZXMgPSBlbnN1cmVTY29wZXMoc2NvcGVzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1zYWxGbG93LmdldFRva2VuKGFycmF5U2NvcGVzLCBuZXdPcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25CZWhhbGZPZkNyZWRlbnRpYWwuanMubWFwIl0sIm5hbWVzIjpbInByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QiLCJyZXNvbHZlQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyIsIk1zYWxPbkJlaGFsZk9mIiwiY3JlZGVudGlhbExvZ2dlciIsImVuc3VyZVNjb3BlcyIsInRyYWNpbmdDbGllbnQiLCJjcmVkZW50aWFsTmFtZSIsImxvZ2dlciIsIk9uQmVoYWxmT2ZDcmVkZW50aWFsIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiY2xpZW50U2VjcmV0IiwiY2VydGlmaWNhdGVQYXRoIiwidGVuYW50SWQiLCJjbGllbnRJZCIsInVzZXJBc3NlcnRpb25Ub2tlbiIsImFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzIiwiYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyIsIkVycm9yIiwibXNhbEZsb3ciLCJPYmplY3QiLCJhc3NpZ24iLCJ0b2tlbkNyZWRlbnRpYWxPcHRpb25zIiwiZ2V0VG9rZW4iLCJzY29wZXMiLCJ3aXRoU3BhbiIsIm5ld09wdGlvbnMiLCJhcnJheVNjb3BlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/onBehalfOfCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/usernamePasswordCredential.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/usernamePasswordCredential.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UsernamePasswordCredential: () => (/* binding */ UsernamePasswordCredential)\n/* harmony export */ });\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _msal_nodeFlows_msalUsernamePassword__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../msal/nodeFlows/msalUsernamePassword */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalUsernamePassword.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/scopeUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\");\n/* harmony import */ var _util_tracing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/tracing */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_0__.credentialLogger)(\"UsernamePasswordCredential\");\n/**\n * Enables authentication to Azure Active Directory with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */ class UsernamePasswordCredential {\n    /**\n     * Creates an instance of the UsernamePasswordCredential with the details\n     * needed to authenticate against Azure Active Directory with a username\n     * and password.\n     *\n     * @param tenantId - The Azure Active Directory tenant (directory).\n     * @param clientId - The client (application) ID of an App Registration in the tenant.\n     * @param username - The user account's e-mail address (user name).\n     * @param password - The user account's account password\n     * @param options - Options for configuring the client which makes the authentication request.\n     */ constructor(tenantId, clientId, username, password, options = {}){\n        if (!tenantId || !clientId || !username || !password) {\n            throw new Error(\"UsernamePasswordCredential: tenantId, clientId, username and password are required parameters. To troubleshoot, visit https://aka.ms/azsdk/js/identity/usernamepasswordcredential/troubleshoot.\");\n        }\n        this.tenantId = tenantId;\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_1__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        this.msalFlow = new _msal_nodeFlows_msalUsernamePassword__WEBPACK_IMPORTED_MODULE_2__.MsalUsernamePassword(Object.assign(Object.assign({}, options), {\n            logger,\n            clientId,\n            tenantId,\n            username,\n            password,\n            tokenCredentialOptions: options || {}\n        }));\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * If the user provided the option `disableAutomaticAuthentication`,\n     * once the token can't be retrieved silently,\n     * this method won't attempt to request user interaction to retrieve the token.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options = {}) {\n        return _util_tracing__WEBPACK_IMPORTED_MODULE_3__.tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async (newOptions)=>{\n            newOptions.tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_4__.processMultiTenantRequest)(this.tenantId, newOptions, this.additionallyAllowedTenantIds, logger);\n            const arrayScopes = (0,_util_scopeUtils__WEBPACK_IMPORTED_MODULE_5__.ensureScopes)(scopes);\n            return this.msalFlow.getToken(arrayScopes, newOptions);\n        });\n    }\n} //# sourceMappingURL=usernamePasswordCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy91c2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNzRTtBQUMxQjtBQUMzQjtBQUNEO0FBQ0Y7QUFDaEQsTUFBTU0sU0FBU0gsK0RBQWdCQSxDQUFDO0FBQ2hDOzs7OztDQUtDLEdBQ00sTUFBTUk7SUFDVDs7Ozs7Ozs7OztLQVVDLEdBQ0RDLFlBQVlDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsVUFBVSxDQUFDLENBQUMsQ0FBRTtRQUM5RCxJQUFJLENBQUNKLFlBQVksQ0FBQ0MsWUFBWSxDQUFDQyxZQUFZLENBQUNDLFVBQVU7WUFDbEQsTUFBTSxJQUFJRSxNQUFNO1FBQ3BCO1FBQ0EsSUFBSSxDQUFDTCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ00sNEJBQTRCLEdBQUdkLHdGQUFtQ0EsQ0FBQ1ksWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFHLDBCQUEwQjtRQUM1SixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJZixzRkFBb0JBLENBQUNnQixPQUFPQyxNQUFNLENBQUNELE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdOLFVBQVU7WUFBRVA7WUFDakZJO1lBQ0FEO1lBQ0FFO1lBQ0FDO1lBQVVRLHdCQUF3QlAsV0FBVyxDQUFDO1FBQUU7SUFDeEQ7SUFDQTs7Ozs7Ozs7Ozs7S0FXQyxHQUNELE1BQU1RLFNBQVNDLE1BQU0sRUFBRVQsVUFBVSxDQUFDLENBQUMsRUFBRTtRQUNqQyxPQUFPUix3REFBYUEsQ0FBQ2tCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDZixXQUFXLENBQUNnQixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUVYLFNBQVMsT0FBT1k7WUFDL0VBLFdBQVdoQixRQUFRLEdBQUdULDhFQUF5QkEsQ0FBQyxJQUFJLENBQUNTLFFBQVEsRUFBRWdCLFlBQVksSUFBSSxDQUFDViw0QkFBNEIsRUFBRVQ7WUFDOUcsTUFBTW9CLGNBQWN0Qiw4REFBWUEsQ0FBQ2tCO1lBQ2pDLE9BQU8sSUFBSSxDQUFDTCxRQUFRLENBQUNJLFFBQVEsQ0FBQ0ssYUFBYUQ7UUFDL0M7SUFDSjtBQUNKLEVBQ0Esc0RBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9jcmVkZW50aWFscy91c2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbC5qcz9kNTYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgcHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdCwgcmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMsIH0gZnJvbSBcIi4uL3V0aWwvdGVuYW50SWRVdGlsc1wiO1xuaW1wb3J0IHsgTXNhbFVzZXJuYW1lUGFzc3dvcmQgfSBmcm9tIFwiLi4vbXNhbC9ub2RlRmxvd3MvbXNhbFVzZXJuYW1lUGFzc3dvcmRcIjtcbmltcG9ydCB7IGNyZWRlbnRpYWxMb2dnZXIgfSBmcm9tIFwiLi4vdXRpbC9sb2dnaW5nXCI7XG5pbXBvcnQgeyBlbnN1cmVTY29wZXMgfSBmcm9tIFwiLi4vdXRpbC9zY29wZVV0aWxzXCI7XG5pbXBvcnQgeyB0cmFjaW5nQ2xpZW50IH0gZnJvbSBcIi4uL3V0aWwvdHJhY2luZ1wiO1xuY29uc3QgbG9nZ2VyID0gY3JlZGVudGlhbExvZ2dlcihcIlVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsXCIpO1xuLyoqXG4gKiBFbmFibGVzIGF1dGhlbnRpY2F0aW9uIHRvIEF6dXJlIEFjdGl2ZSBEaXJlY3Rvcnkgd2l0aCBhIHVzZXInc1xuICogdXNlcm5hbWUgYW5kIHBhc3N3b3JkLiBUaGlzIGNyZWRlbnRpYWwgcmVxdWlyZXMgYSBoaWdoIGRlZ3JlZSBvZlxuICogdHJ1c3Qgc28geW91IHNob3VsZCBvbmx5IHVzZSBpdCB3aGVuIG90aGVyLCBtb3JlIHNlY3VyZSBjcmVkZW50aWFsXG4gKiB0eXBlcyBjYW4ndCBiZSB1c2VkLlxuICovXG5leHBvcnQgY2xhc3MgVXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIFVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsIHdpdGggdGhlIGRldGFpbHNcbiAgICAgKiBuZWVkZWQgdG8gYXV0aGVudGljYXRlIGFnYWluc3QgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSB3aXRoIGEgdXNlcm5hbWVcbiAgICAgKiBhbmQgcGFzc3dvcmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGVuYW50SWQgLSBUaGUgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSB0ZW5hbnQgKGRpcmVjdG9yeSkuXG4gICAgICogQHBhcmFtIGNsaWVudElkIC0gVGhlIGNsaWVudCAoYXBwbGljYXRpb24pIElEIG9mIGFuIEFwcCBSZWdpc3RyYXRpb24gaW4gdGhlIHRlbmFudC5cbiAgICAgKiBAcGFyYW0gdXNlcm5hbWUgLSBUaGUgdXNlciBhY2NvdW50J3MgZS1tYWlsIGFkZHJlc3MgKHVzZXIgbmFtZSkuXG4gICAgICogQHBhcmFtIHBhc3N3b3JkIC0gVGhlIHVzZXIgYWNjb3VudCdzIGFjY291bnQgcGFzc3dvcmRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBjbGllbnQgd2hpY2ggbWFrZXMgdGhlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3QuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGVuYW50SWQsIGNsaWVudElkLCB1c2VybmFtZSwgcGFzc3dvcmQsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoIXRlbmFudElkIHx8ICFjbGllbnRJZCB8fCAhdXNlcm5hbWUgfHwgIXBhc3N3b3JkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVc2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbDogdGVuYW50SWQsIGNsaWVudElkLCB1c2VybmFtZSBhbmQgcGFzc3dvcmQgYXJlIHJlcXVpcmVkIHBhcmFtZXRlcnMuIFRvIHRyb3VibGVzaG9vdCwgdmlzaXQgaHR0cHM6Ly9ha2EubXMvYXpzZGsvanMvaWRlbnRpdHkvdXNlcm5hbWVwYXNzd29yZGNyZWRlbnRpYWwvdHJvdWJsZXNob290LlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRlbmFudElkID0gdGVuYW50SWQ7XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyA9IHJlc29sdmVBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cyk7XG4gICAgICAgIHRoaXMubXNhbEZsb3cgPSBuZXcgTXNhbFVzZXJuYW1lUGFzc3dvcmQoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBsb2dnZXIsXG4gICAgICAgICAgICBjbGllbnRJZCxcbiAgICAgICAgICAgIHRlbmFudElkLFxuICAgICAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgICAgICBwYXNzd29yZCwgdG9rZW5DcmVkZW50aWFsT3B0aW9uczogb3B0aW9ucyB8fCB7fSB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF1dGhlbnRpY2F0ZXMgd2l0aCBBenVyZSBBY3RpdmUgRGlyZWN0b3J5IGFuZCByZXR1cm5zIGFuIGFjY2VzcyB0b2tlbiBpZiBzdWNjZXNzZnVsLlxuICAgICAqIElmIGF1dGhlbnRpY2F0aW9uIGZhaWxzLCBhIHtAbGluayBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcn0gd2lsbCBiZSB0aHJvd24gd2l0aCB0aGUgZGV0YWlscyBvZiB0aGUgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIElmIHRoZSB1c2VyIHByb3ZpZGVkIHRoZSBvcHRpb24gYGRpc2FibGVBdXRvbWF0aWNBdXRoZW50aWNhdGlvbmAsXG4gICAgICogb25jZSB0aGUgdG9rZW4gY2FuJ3QgYmUgcmV0cmlldmVkIHNpbGVudGx5LFxuICAgICAqIHRoaXMgbWV0aG9kIHdvbid0IGF0dGVtcHQgdG8gcmVxdWVzdCB1c2VyIGludGVyYWN0aW9uIHRvIHJldHJpZXZlIHRoZSB0b2tlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZXMgLSBUaGUgbGlzdCBvZiBzY29wZXMgZm9yIHdoaWNoIHRoZSB0b2tlbiB3aWxsIGhhdmUgYWNjZXNzLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgYW55IHJlcXVlc3RzIHRoaXNcbiAgICAgKiAgICAgICAgICAgICAgICBUb2tlbkNyZWRlbnRpYWwgaW1wbGVtZW50YXRpb24gbWlnaHQgbWFrZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRUb2tlbihzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9LmdldFRva2VuYCwgb3B0aW9ucywgYXN5bmMgKG5ld09wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIG5ld09wdGlvbnMudGVuYW50SWQgPSBwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0KHRoaXMudGVuYW50SWQsIG5ld09wdGlvbnMsIHRoaXMuYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcywgbG9nZ2VyKTtcbiAgICAgICAgICAgIGNvbnN0IGFycmF5U2NvcGVzID0gZW5zdXJlU2NvcGVzKHNjb3Blcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tc2FsRmxvdy5nZXRUb2tlbihhcnJheVNjb3BlcywgbmV3T3B0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJuYW1lUGFzc3dvcmRDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6WyJwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0IiwicmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMiLCJNc2FsVXNlcm5hbWVQYXNzd29yZCIsImNyZWRlbnRpYWxMb2dnZXIiLCJlbnN1cmVTY29wZXMiLCJ0cmFjaW5nQ2xpZW50IiwibG9nZ2VyIiwiVXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwiLCJjb25zdHJ1Y3RvciIsInRlbmFudElkIiwiY2xpZW50SWQiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwib3B0aW9ucyIsIkVycm9yIiwiYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcyIsImFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzIiwibXNhbEZsb3ciLCJPYmplY3QiLCJhc3NpZ24iLCJ0b2tlbkNyZWRlbnRpYWxPcHRpb25zIiwiZ2V0VG9rZW4iLCJzY29wZXMiLCJ3aXRoU3BhbiIsIm5hbWUiLCJuZXdPcHRpb25zIiwiYXJyYXlTY29wZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/usernamePasswordCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/visualStudioCodeCredential.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/visualStudioCodeCredential.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VisualStudioCodeCredential: () => (/* binding */ VisualStudioCodeCredential),\n/* harmony export */   getPropertyFromVSCode: () => (/* binding */ getPropertyFromVSCode),\n/* harmony export */   vsCodeCredentialControl: () => (/* binding */ vsCodeCredentialControl)\n/* harmony export */ });\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _client_identityClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../client/identityClient */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/client/identityClient.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\nconst CommonTenantId = \"common\";\nconst AzureAccountClientId = \"aebc6443-996d-45c2-90f0-388ff96faa56\"; // VSC: 'aebc6443-996d-45c2-90f0-388ff96faa56'\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_3__.credentialLogger)(\"VisualStudioCodeCredential\");\nlet findCredentials = undefined;\nconst vsCodeCredentialControl = {\n    setVsCodeCredentialFinder (finder) {\n        findCredentials = finder;\n    }\n};\n// Map of unsupported Tenant IDs and the errors we will be throwing.\nconst unsupportedTenantIds = {\n    adfs: \"The VisualStudioCodeCredential does not support authentication with ADFS tenants.\"\n};\nfunction checkUnsupportedTenant(tenantId) {\n    // If the Tenant ID isn't supported, we throw.\n    const unsupportedTenantError = unsupportedTenantIds[tenantId];\n    if (unsupportedTenantError) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_4__.CredentialUnavailableError(unsupportedTenantError);\n    }\n}\nconst mapVSCodeAuthorityHosts = {\n    AzureCloud: _constants__WEBPACK_IMPORTED_MODULE_5__.AzureAuthorityHosts.AzurePublicCloud,\n    AzureChina: _constants__WEBPACK_IMPORTED_MODULE_5__.AzureAuthorityHosts.AzureChina,\n    AzureGermanCloud: _constants__WEBPACK_IMPORTED_MODULE_5__.AzureAuthorityHosts.AzureGermany,\n    AzureUSGovernment: _constants__WEBPACK_IMPORTED_MODULE_5__.AzureAuthorityHosts.AzureGovernment\n};\n/**\n * Attempts to load a specific property from the VSCode configurations of the current OS.\n * If it fails at any point, returns undefined.\n */ function getPropertyFromVSCode(property) {\n    const settingsPath = [\n        \"User\",\n        \"settings.json\"\n    ];\n    // Eventually we can add more folders for more versions of VSCode.\n    const vsCodeFolder = \"Code\";\n    const homedir = os__WEBPACK_IMPORTED_MODULE_1___default().homedir();\n    function loadProperty(...pathSegments) {\n        const fullPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(...pathSegments, vsCodeFolder, ...settingsPath);\n        const settings = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(fullPath, {\n            encoding: \"utf8\"\n        }));\n        return settings[property];\n    }\n    try {\n        let appData;\n        switch(process.platform){\n            case \"win32\":\n                appData = process.env.APPDATA;\n                return appData ? loadProperty(appData) : undefined;\n            case \"darwin\":\n                return loadProperty(homedir, \"Library\", \"Application Support\");\n            case \"linux\":\n                return loadProperty(homedir, \".config\");\n            default:\n                return;\n        }\n    } catch (e) {\n        logger.info(`Failed to load the Visual Studio Code configuration file. Error: ${e.message}`);\n        return;\n    }\n}\n/**\n * Connects to Azure using the credential provided by the VSCode extension 'Azure Account'.\n * Once the user has logged in via the extension, this credential can share the same refresh token\n * that is cached by the extension.\n *\n * It's a [known issue](https://github.com/Azure/azure-sdk-for-js/issues/20500) that this credential doesn't\n * work with [Azure Account extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.azure-account)\n * versions newer than **0.9.11**. A long-term fix to this problem is in progress. In the meantime, consider\n * authenticating with {@link AzureCliCredential}.\n */ class VisualStudioCodeCredential {\n    /**\n     * Creates an instance of VisualStudioCodeCredential to use for automatically authenticating via VSCode.\n     *\n     * **Note**: `VisualStudioCodeCredential` is provided by a plugin package:\n     * `@azure/identity-vscode`. If this package is not installed and registered\n     * using the plugin API (`useIdentityPlugin`), then authentication using\n     * `VisualStudioCodeCredential` will not be available.\n     *\n     * @param options - Options for configuring the client which makes the authentication request.\n     */ constructor(options){\n        // We want to make sure we use the one assigned by the user on the VSCode settings.\n        // Or just `AzureCloud` by default.\n        this.cloudName = getPropertyFromVSCode(\"azure.cloud\") || \"AzureCloud\";\n        // Picking an authority host based on the cloud name.\n        const authorityHost = mapVSCodeAuthorityHosts[this.cloudName];\n        this.identityClient = new _client_identityClient__WEBPACK_IMPORTED_MODULE_6__.IdentityClient(Object.assign({\n            authorityHost\n        }, options));\n        if (options && options.tenantId) {\n            (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_7__.checkTenantId)(logger, options.tenantId);\n            this.tenantId = options.tenantId;\n        } else {\n            this.tenantId = CommonTenantId;\n        }\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_7__.resolveAdditionallyAllowedTenantIds)(options === null || options === void 0 ? void 0 : options.additionallyAllowedTenants);\n        checkUnsupportedTenant(this.tenantId);\n    }\n    /**\n     * Runs preparations for any further getToken request.\n     */ async prepare() {\n        // Attempts to load the tenant from the VSCode configuration file.\n        const settingsTenant = getPropertyFromVSCode(\"azure.tenant\");\n        if (settingsTenant) {\n            this.tenantId = settingsTenant;\n        }\n        checkUnsupportedTenant(this.tenantId);\n    }\n    /**\n     * Runs preparations for any further getToken, but only once.\n     */ prepareOnce() {\n        if (!this.preparePromise) {\n            this.preparePromise = this.prepare();\n        }\n        return this.preparePromise;\n    }\n    /**\n     * Returns the token found by searching VSCode's authentication cache or\n     * returns null if no token could be found.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                `TokenCredential` implementation might make.\n     */ async getToken(scopes, options) {\n        var _a, _b;\n        await this.prepareOnce();\n        const tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_8__.processMultiTenantRequest)(this.tenantId, options, this.additionallyAllowedTenantIds, logger) || this.tenantId;\n        if (findCredentials === undefined) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__.CredentialUnavailableError([\n                \"No implementation of `VisualStudioCodeCredential` is available.\",\n                \"You must install the identity-vscode plugin package (`npm install --save-dev @azure/identity-vscode`)\",\n                \"and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling\",\n                \"`useIdentityPlugin(vsCodePlugin)` before creating a `VisualStudioCodeCredential`.\",\n                \"To troubleshoot, visit https://aka.ms/azsdk/js/identity/vscodecredential/troubleshoot.\"\n            ].join(\" \"));\n        }\n        let scopeString = typeof scopes === \"string\" ? scopes : scopes.join(\" \");\n        // Check to make sure the scope we get back is a valid scope\n        if (!scopeString.match(/^[0-9a-zA-Z-.:/]+$/)) {\n            const error = new Error(\"Invalid scope was specified by the user or calling client\");\n            logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_3__.formatError)(scopes, error));\n            throw error;\n        }\n        if (scopeString.indexOf(\"offline_access\") < 0) {\n            scopeString += \" offline_access\";\n        }\n        // findCredentials returns an array similar to:\n        // [\n        //   {\n        //     account: \"\",\n        //     password: \"\",\n        //   },\n        //   /* ... */\n        // ]\n        const credentials = await findCredentials();\n        // If we can't find the credential based on the name, we'll pick the first one available.\n        const { password: refreshToken } = (_b = (_a = credentials.find(({ account })=>account === this.cloudName)) !== null && _a !== void 0 ? _a : credentials[0]) !== null && _b !== void 0 ? _b : {};\n        if (refreshToken) {\n            const tokenResponse = await this.identityClient.refreshAccessToken(tenantId, AzureAccountClientId, scopeString, refreshToken, undefined);\n            if (tokenResponse) {\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_3__.formatSuccess)(scopes));\n                return tokenResponse.accessToken;\n            } else {\n                const error = new _errors__WEBPACK_IMPORTED_MODULE_4__.CredentialUnavailableError(\"Could not retrieve the token associated with Visual Studio Code. Have you connected using the 'Azure Account' extension recently? To troubleshoot, visit https://aka.ms/azsdk/js/identity/vscodecredential/troubleshoot.\");\n                logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_3__.formatError)(scopes, error));\n                throw error;\n            }\n        } else {\n            const error = new _errors__WEBPACK_IMPORTED_MODULE_4__.CredentialUnavailableError(\"Could not retrieve the token associated with Visual Studio Code. Did you connect using the 'Azure Account' extension? To troubleshoot, visit https://aka.ms/azsdk/js/identity/vscodecredential/troubleshoot.\");\n            logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_3__.formatError)(scopes, error));\n            throw error;\n        }\n    }\n} //# sourceMappingURL=visualStudioCodeCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/visualStudioCodeCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/workloadIdentityCredential.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/credentials/workloadIdentityCredential.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupportedWorkloadEnvironmentVariables: () => (/* binding */ SupportedWorkloadEnvironmentVariables),\n/* harmony export */   WorkloadIdentityCredential: () => (/* binding */ WorkloadIdentityCredential)\n/* harmony export */ });\n/* harmony import */ var _clientAssertionCredential__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./clientAssertionCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientAssertionCredential.js\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\nconst credentialName = \"WorkloadIdentityCredential\";\n/**\n * Contains the list of all supported environment variable names so that an\n * appropriate error message can be generated when no credentials can be\n * configured.\n *\n * @internal\n */ const SupportedWorkloadEnvironmentVariables = [\n    \"AZURE_TENANT_ID\",\n    \"AZURE_CLIENT_ID\",\n    \"AZURE_FEDERATED_TOKEN_FILE\"\n];\nconst logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.credentialLogger)(credentialName);\n/**\n * Workload Identity authentication is a feature in Azure that allows applications running on virtual machines (VMs)\n * to access other Azure resources without the need for a service principal or managed identity. With Workload Identity\n * authentication, applications authenticate themselves using their own identity, rather than using a shared service\n * principal or managed identity. Under the hood, Workload Identity authentication uses the concept of Service Account\n * Credentials (SACs), which are automatically created by Azure and stored securely in the VM. By using Workload\n * Identity authentication, you can avoid the need to manage and rotate service principals or managed identities for\n * each application on each VM. Additionally, because SACs are created automatically and managed by Azure, you don't\n * need to worry about storing and securing sensitive credentials themselves.\n * The WorkloadIdentityCredential supports Azure workload identity authentication on Azure Kubernetes and acquires\n * a token using the SACs available in the Azure Kubernetes environment.\n * Refer to <a href=\"https://learn.microsoft.com/azure/aks/workload-identity-overview\">Azure Active Directory\n * Workload Identity</a> for more information.\n */ class WorkloadIdentityCredential {\n    /**\n     * WorkloadIdentityCredential supports Azure workload identity on Kubernetes.\n     *\n     * @param options - The identity client options to use for authentication.\n     */ constructor(options){\n        this.azureFederatedTokenFileContent = undefined;\n        this.cacheDate = undefined;\n        // Logging environment variables for error details\n        const assignedEnv = (0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.processEnvVars)(SupportedWorkloadEnvironmentVariables).assigned.join(\", \");\n        logger.info(`Found the following environment variables: ${assignedEnv}`);\n        const workloadIdentityCredentialOptions = options !== null && options !== void 0 ? options : {};\n        const tenantId = workloadIdentityCredentialOptions.tenantId || process.env.AZURE_TENANT_ID;\n        const clientId = workloadIdentityCredentialOptions.clientId || process.env.AZURE_CLIENT_ID;\n        this.federatedTokenFilePath = workloadIdentityCredentialOptions.tokenFilePath || process.env.AZURE_FEDERATED_TOKEN_FILE;\n        if (tenantId) {\n            (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_2__.checkTenantId)(logger, tenantId);\n        }\n        if (clientId && tenantId && this.federatedTokenFilePath) {\n            logger.info(`Invoking ClientAssertionCredential with tenant ID: ${tenantId}, clientId: ${workloadIdentityCredentialOptions.clientId} and federated token path: [REDACTED]`);\n            this.client = new _clientAssertionCredential__WEBPACK_IMPORTED_MODULE_3__.ClientAssertionCredential(tenantId, clientId, this.readFileContents.bind(this), options);\n        }\n    }\n    /**\n     * Authenticates with Azure Active Directory and returns an access token if successful.\n     * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n     *\n     * @param scopes - The list of scopes for which the token will have access.\n     * @param options - The options used to configure any requests this\n     *                TokenCredential implementation might make.\n     */ async getToken(scopes, options) {\n        if (!this.client) {\n            const errorMessage = `${credentialName}: is unavailable. tenantId, clientId, and federatedTokenFilePath are required parameters. \n      In DefaultAzureCredential and ManagedIdentityCredential, these can be provided as environment variables - \n      \"AZURE_TENANT_ID\",\n      \"AZURE_CLIENT_ID\",\n      \"AZURE_FEDERATED_TOKEN_FILE\". See the troubleshooting guide for more information: https://aka.ms/azsdk/js/identity/workloadidentitycredential/troubleshoot  `;\n            logger.info(errorMessage);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__.CredentialUnavailableError(errorMessage);\n        }\n        logger.info(\"Invoking getToken() of Client Assertion Credential\");\n        return this.client.getToken(scopes, options);\n    }\n    async readFileContents() {\n        // Cached assertions expire after 5 minutes\n        if (this.cacheDate !== undefined && Date.now() - this.cacheDate >= 1000 * 60 * 5) {\n            this.azureFederatedTokenFileContent = undefined;\n        }\n        if (!this.federatedTokenFilePath) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_4__.CredentialUnavailableError(`${credentialName}: is unavailable. Invalid file path provided ${this.federatedTokenFilePath}.`);\n        }\n        if (!this.azureFederatedTokenFileContent) {\n            const file = await (0,fs_promises__WEBPACK_IMPORTED_MODULE_0__.readFile)(this.federatedTokenFilePath, \"utf8\");\n            const value = file.trim();\n            if (!value) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_4__.CredentialUnavailableError(`${credentialName}: is unavailable. No content on the file ${this.federatedTokenFilePath}.`);\n            } else {\n                this.azureFederatedTokenFileContent = value;\n                this.cacheDate = Date.now();\n            }\n        }\n        return this.azureFederatedTokenFileContent;\n    }\n} //# sourceMappingURL=workloadIdentityCredential.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/workloadIdentityCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/errors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AggregateAuthenticationError: () => (/* binding */ AggregateAuthenticationError),\n/* harmony export */   AggregateAuthenticationErrorName: () => (/* binding */ AggregateAuthenticationErrorName),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   AuthenticationErrorName: () => (/* binding */ AuthenticationErrorName),\n/* harmony export */   AuthenticationRequiredError: () => (/* binding */ AuthenticationRequiredError),\n/* harmony export */   CredentialUnavailableError: () => (/* binding */ CredentialUnavailableError),\n/* harmony export */   CredentialUnavailableErrorName: () => (/* binding */ CredentialUnavailableErrorName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction isErrorResponse(errorResponse) {\n    return errorResponse && typeof errorResponse.error === \"string\" && typeof errorResponse.error_description === \"string\";\n}\n/**\n * The Error.name value of an CredentialUnavailable\n */ const CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */ class CredentialUnavailableError extends Error {\n    constructor(message){\n        super(message);\n        this.name = CredentialUnavailableErrorName;\n    }\n}\n/**\n * The Error.name value of an AuthenticationError\n */ const AuthenticationErrorName = \"AuthenticationError\";\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */ class AuthenticationError extends Error {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    constructor(statusCode, errorBody){\n        let errorResponse = {\n            error: \"unknown\",\n            errorDescription: \"An unknown error occurred and no additional details are available.\"\n        };\n        if (isErrorResponse(errorBody)) {\n            errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n        } else if (typeof errorBody === \"string\") {\n            try {\n                // Most error responses will contain JSON-formatted error details\n                // in the response body\n                const oauthErrorResponse = JSON.parse(errorBody);\n                errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n            } catch (e) {\n                if (statusCode === 400) {\n                    errorResponse = {\n                        error: \"authority_not_found\",\n                        errorDescription: \"The specified authority URL was not found.\"\n                    };\n                } else {\n                    errorResponse = {\n                        error: \"unknown_error\",\n                        errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`\n                    };\n                }\n            }\n        } else {\n            errorResponse = {\n                error: \"unknown_error\",\n                errorDescription: \"An unknown error occurred and no additional details are available.\"\n            };\n        }\n        super(`${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`);\n        this.statusCode = statusCode;\n        this.errorResponse = errorResponse;\n        // Ensure that this type reports the correct name\n        this.name = AuthenticationErrorName;\n    }\n}\n/**\n * The Error.name value of an AggregateAuthenticationError\n */ const AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */ class AggregateAuthenticationError extends Error {\n    constructor(errors, errorMessage){\n        const errorDetail = errors.join(\"\\n\");\n        super(`${errorMessage}\\n${errorDetail}`);\n        this.errors = errors;\n        // Ensure that this type reports the correct name\n        this.name = AggregateAuthenticationErrorName;\n    }\n}\nfunction convertOAuthErrorResponseToErrorResponse(errorBody) {\n    return {\n        error: errorBody.error,\n        errorDescription: errorBody.error_description,\n        correlationId: errorBody.correlation_id,\n        errorCodes: errorBody.error_codes,\n        timestamp: errorBody.timestamp,\n        traceId: errorBody.trace_id\n    };\n}\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */ class AuthenticationRequiredError extends Error {\n    constructor(/**\n     * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n     */ options){\n        super(options.message);\n        this.scopes = options.scopes;\n        this.getTokenOptions = options.getTokenOptions;\n        this.name = \"AuthenticationRequiredError\";\n    }\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AggregateAuthenticationError: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_1__.AggregateAuthenticationError),\n/* harmony export */   AggregateAuthenticationErrorName: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_1__.AggregateAuthenticationErrorName),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_1__.AuthenticationError),\n/* harmony export */   AuthenticationErrorName: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_1__.AuthenticationErrorName),\n/* harmony export */   AuthenticationRequiredError: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_1__.AuthenticationRequiredError),\n/* harmony export */   AuthorizationCodeCredential: () => (/* reexport safe */ _credentials_authorizationCodeCredential__WEBPACK_IMPORTED_MODULE_14__.AuthorizationCodeCredential),\n/* harmony export */   AzureAuthorityHosts: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_21__.AzureAuthorityHosts),\n/* harmony export */   AzureCliCredential: () => (/* reexport safe */ _credentials_azureCliCredential__WEBPACK_IMPORTED_MODULE_9__.AzureCliCredential),\n/* harmony export */   AzureDeveloperCliCredential: () => (/* reexport safe */ _credentials_azureDeveloperCliCredential__WEBPACK_IMPORTED_MODULE_10__.AzureDeveloperCliCredential),\n/* harmony export */   AzurePowerShellCredential: () => (/* reexport safe */ _credentials_azurePowerShellCredential__WEBPACK_IMPORTED_MODULE_15__.AzurePowerShellCredential),\n/* harmony export */   ChainedTokenCredential: () => (/* reexport safe */ _credentials_chainedTokenCredential__WEBPACK_IMPORTED_MODULE_3__.ChainedTokenCredential),\n/* harmony export */   ClientAssertionCredential: () => (/* reexport safe */ _credentials_clientAssertionCredential__WEBPACK_IMPORTED_MODULE_8__.ClientAssertionCredential),\n/* harmony export */   ClientCertificateCredential: () => (/* reexport safe */ _credentials_clientCertificateCredential__WEBPACK_IMPORTED_MODULE_7__.ClientCertificateCredential),\n/* harmony export */   ClientSecretCredential: () => (/* reexport safe */ _credentials_clientSecretCredential__WEBPACK_IMPORTED_MODULE_4__.ClientSecretCredential),\n/* harmony export */   CredentialUnavailableError: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_1__.CredentialUnavailableError),\n/* harmony export */   CredentialUnavailableErrorName: () => (/* reexport safe */ _errors__WEBPACK_IMPORTED_MODULE_1__.CredentialUnavailableErrorName),\n/* harmony export */   DefaultAzureCredential: () => (/* reexport safe */ _credentials_defaultAzureCredential__WEBPACK_IMPORTED_MODULE_5__.DefaultAzureCredential),\n/* harmony export */   DeviceCodeCredential: () => (/* reexport safe */ _credentials_deviceCodeCredential__WEBPACK_IMPORTED_MODULE_13__.DeviceCodeCredential),\n/* harmony export */   EnvironmentCredential: () => (/* reexport safe */ _credentials_environmentCredential__WEBPACK_IMPORTED_MODULE_6__.EnvironmentCredential),\n/* harmony export */   InteractiveBrowserCredential: () => (/* reexport safe */ _credentials_interactiveBrowserCredential__WEBPACK_IMPORTED_MODULE_11__.InteractiveBrowserCredential),\n/* harmony export */   ManagedIdentityCredential: () => (/* reexport safe */ _credentials_managedIdentityCredential__WEBPACK_IMPORTED_MODULE_12__.ManagedIdentityCredential),\n/* harmony export */   OnBehalfOfCredential: () => (/* reexport safe */ _credentials_onBehalfOfCredential__WEBPACK_IMPORTED_MODULE_18__.OnBehalfOfCredential),\n/* harmony export */   UsernamePasswordCredential: () => (/* reexport safe */ _credentials_usernamePasswordCredential__WEBPACK_IMPORTED_MODULE_16__.UsernamePasswordCredential),\n/* harmony export */   VisualStudioCodeCredential: () => (/* reexport safe */ _credentials_visualStudioCodeCredential__WEBPACK_IMPORTED_MODULE_17__.VisualStudioCodeCredential),\n/* harmony export */   WorkloadIdentityCredential: () => (/* reexport safe */ _credentials_workloadIdentityCredential__WEBPACK_IMPORTED_MODULE_19__.WorkloadIdentityCredential),\n/* harmony export */   deserializeAuthenticationRecord: () => (/* reexport safe */ _msal_utils__WEBPACK_IMPORTED_MODULE_2__.deserializeAuthenticationRecord),\n/* harmony export */   getDefaultAzureCredential: () => (/* binding */ getDefaultAzureCredential),\n/* harmony export */   logger: () => (/* reexport safe */ _util_logging__WEBPACK_IMPORTED_MODULE_20__.logger),\n/* harmony export */   serializeAuthenticationRecord: () => (/* reexport safe */ _msal_utils__WEBPACK_IMPORTED_MODULE_2__.serializeAuthenticationRecord),\n/* harmony export */   useIdentityPlugin: () => (/* reexport safe */ _plugins_consumer__WEBPACK_IMPORTED_MODULE_0__.useIdentityPlugin)\n/* harmony export */ });\n/* harmony import */ var _plugins_consumer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugins/consumer */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/plugins/consumer.js\");\n/* harmony import */ var _credentials_defaultAzureCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/defaultAzureCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/defaultAzureCredential.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _msal_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./msal/utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/utils.js\");\n/* harmony import */ var _credentials_chainedTokenCredential__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./credentials/chainedTokenCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/chainedTokenCredential.js\");\n/* harmony import */ var _credentials_clientSecretCredential__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./credentials/clientSecretCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientSecretCredential.js\");\n/* harmony import */ var _credentials_environmentCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/environmentCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/environmentCredential.js\");\n/* harmony import */ var _credentials_clientCertificateCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/clientCertificateCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientCertificateCredential.js\");\n/* harmony import */ var _credentials_clientAssertionCredential__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./credentials/clientAssertionCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/clientAssertionCredential.js\");\n/* harmony import */ var _credentials_azureCliCredential__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./credentials/azureCliCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azureCliCredential.js\");\n/* harmony import */ var _credentials_azureDeveloperCliCredential__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./credentials/azureDeveloperCliCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azureDeveloperCliCredential.js\");\n/* harmony import */ var _credentials_interactiveBrowserCredential__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./credentials/interactiveBrowserCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/interactiveBrowserCredential.js\");\n/* harmony import */ var _credentials_managedIdentityCredential__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./credentials/managedIdentityCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/managedIdentityCredential/index.js\");\n/* harmony import */ var _credentials_deviceCodeCredential__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./credentials/deviceCodeCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/deviceCodeCredential.js\");\n/* harmony import */ var _credentials_authorizationCodeCredential__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./credentials/authorizationCodeCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/authorizationCodeCredential.js\");\n/* harmony import */ var _credentials_azurePowerShellCredential__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./credentials/azurePowerShellCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/azurePowerShellCredential.js\");\n/* harmony import */ var _credentials_usernamePasswordCredential__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./credentials/usernamePasswordCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/usernamePasswordCredential.js\");\n/* harmony import */ var _credentials_visualStudioCodeCredential__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./credentials/visualStudioCodeCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/visualStudioCodeCredential.js\");\n/* harmony import */ var _credentials_onBehalfOfCredential__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./credentials/onBehalfOfCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/onBehalfOfCredential.js\");\n/* harmony import */ var _credentials_workloadIdentityCredential__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./credentials/workloadIdentityCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/workloadIdentityCredential.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns a new instance of the {@link DefaultAzureCredential}.\n */ function getDefaultAzureCredential() {\n    return new _credentials_defaultAzureCredential__WEBPACK_IMPORTED_MODULE_5__.DefaultAzureCredential();\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNDO0FBQzJDO0FBQ29KO0FBQ3BJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNGO0FBQ2E7QUFDTDtBQUNkO0FBQ2tCO0FBQ0U7QUFDTDtBQUNYO0FBQ2M7QUFDSjtBQUNFO0FBQ0E7QUFDWjtBQUNZO0FBQzlDO0FBQ1U7QUFDbEQ7O0NBRUMsR0FDTSxTQUFTNEI7SUFDWixPQUFPLElBQUk1Qix1RkFBc0JBO0FBQ3JDLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9pbmRleC5qcz84MjVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0ICogZnJvbSBcIi4vcGx1Z2lucy9jb25zdW1lclwiO1xuaW1wb3J0IHsgRGVmYXVsdEF6dXJlQ3JlZGVudGlhbCB9IGZyb20gXCIuL2NyZWRlbnRpYWxzL2RlZmF1bHRBenVyZUNyZWRlbnRpYWxcIjtcbmV4cG9ydCB7IEF1dGhlbnRpY2F0aW9uRXJyb3IsIEFnZ3JlZ2F0ZUF1dGhlbnRpY2F0aW9uRXJyb3IsIEF1dGhlbnRpY2F0aW9uRXJyb3JOYW1lLCBBZ2dyZWdhdGVBdXRoZW50aWNhdGlvbkVycm9yTmFtZSwgQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3IsIENyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yTmFtZSwgQXV0aGVudGljYXRpb25SZXF1aXJlZEVycm9yLCB9IGZyb20gXCIuL2Vycm9yc1wiO1xuZXhwb3J0IHsgc2VyaWFsaXplQXV0aGVudGljYXRpb25SZWNvcmQsIGRlc2VyaWFsaXplQXV0aGVudGljYXRpb25SZWNvcmQgfSBmcm9tIFwiLi9tc2FsL3V0aWxzXCI7XG5leHBvcnQgeyBDaGFpbmVkVG9rZW5DcmVkZW50aWFsIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvY2hhaW5lZFRva2VuQ3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgQ2xpZW50U2VjcmV0Q3JlZGVudGlhbCB9IGZyb20gXCIuL2NyZWRlbnRpYWxzL2NsaWVudFNlY3JldENyZWRlbnRpYWxcIjtcbmV4cG9ydCB7IERlZmF1bHRBenVyZUNyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9kZWZhdWx0QXp1cmVDcmVkZW50aWFsXCI7XG5leHBvcnQgeyBFbnZpcm9ubWVudENyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9lbnZpcm9ubWVudENyZWRlbnRpYWxcIjtcbmV4cG9ydCB7IENsaWVudENlcnRpZmljYXRlQ3JlZGVudGlhbCwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9jbGllbnRDZXJ0aWZpY2F0ZUNyZWRlbnRpYWxcIjtcbmV4cG9ydCB7IENsaWVudEFzc2VydGlvbkNyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9jbGllbnRBc3NlcnRpb25DcmVkZW50aWFsXCI7XG5leHBvcnQgeyBBenVyZUNsaUNyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9henVyZUNsaUNyZWRlbnRpYWxcIjtcbmV4cG9ydCB7IEF6dXJlRGV2ZWxvcGVyQ2xpQ3JlZGVudGlhbCB9IGZyb20gXCIuL2NyZWRlbnRpYWxzL2F6dXJlRGV2ZWxvcGVyQ2xpQ3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgSW50ZXJhY3RpdmVCcm93c2VyQ3JlZGVudGlhbCB9IGZyb20gXCIuL2NyZWRlbnRpYWxzL2ludGVyYWN0aXZlQnJvd3NlckNyZWRlbnRpYWxcIjtcbmV4cG9ydCB7IE1hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwsIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvbWFuYWdlZElkZW50aXR5Q3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgRGV2aWNlQ29kZUNyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9kZXZpY2VDb2RlQ3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgQXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvYXV0aG9yaXphdGlvbkNvZGVDcmVkZW50aWFsXCI7XG5leHBvcnQgeyBBenVyZVBvd2VyU2hlbGxDcmVkZW50aWFsIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvYXp1cmVQb3dlclNoZWxsQ3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgVXNlcm5hbWVQYXNzd29yZENyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy91c2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgVmlzdWFsU3R1ZGlvQ29kZUNyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy92aXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgT25CZWhhbGZPZkNyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy9vbkJlaGFsZk9mQ3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgV29ya2xvYWRJZGVudGl0eUNyZWRlbnRpYWwgfSBmcm9tIFwiLi9jcmVkZW50aWFscy93b3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbFwiO1xuZXhwb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIi4vdXRpbC9sb2dnaW5nXCI7XG5leHBvcnQgeyBBenVyZUF1dGhvcml0eUhvc3RzIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG4vKipcbiAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHtAbGluayBEZWZhdWx0QXp1cmVDcmVkZW50aWFsfS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRBenVyZUNyZWRlbnRpYWwoKSB7XG4gICAgcmV0dXJuIG5ldyBEZWZhdWx0QXp1cmVDcmVkZW50aWFsKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiRGVmYXVsdEF6dXJlQ3JlZGVudGlhbCIsIkF1dGhlbnRpY2F0aW9uRXJyb3IiLCJBZ2dyZWdhdGVBdXRoZW50aWNhdGlvbkVycm9yIiwiQXV0aGVudGljYXRpb25FcnJvck5hbWUiLCJBZ2dyZWdhdGVBdXRoZW50aWNhdGlvbkVycm9yTmFtZSIsIkNyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yIiwiQ3JlZGVudGlhbFVuYXZhaWxhYmxlRXJyb3JOYW1lIiwiQXV0aGVudGljYXRpb25SZXF1aXJlZEVycm9yIiwic2VyaWFsaXplQXV0aGVudGljYXRpb25SZWNvcmQiLCJkZXNlcmlhbGl6ZUF1dGhlbnRpY2F0aW9uUmVjb3JkIiwiQ2hhaW5lZFRva2VuQ3JlZGVudGlhbCIsIkNsaWVudFNlY3JldENyZWRlbnRpYWwiLCJFbnZpcm9ubWVudENyZWRlbnRpYWwiLCJDbGllbnRDZXJ0aWZpY2F0ZUNyZWRlbnRpYWwiLCJDbGllbnRBc3NlcnRpb25DcmVkZW50aWFsIiwiQXp1cmVDbGlDcmVkZW50aWFsIiwiQXp1cmVEZXZlbG9wZXJDbGlDcmVkZW50aWFsIiwiSW50ZXJhY3RpdmVCcm93c2VyQ3JlZGVudGlhbCIsIk1hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWwiLCJEZXZpY2VDb2RlQ3JlZGVudGlhbCIsIkF1dGhvcml6YXRpb25Db2RlQ3JlZGVudGlhbCIsIkF6dXJlUG93ZXJTaGVsbENyZWRlbnRpYWwiLCJVc2VybmFtZVBhc3N3b3JkQ3JlZGVudGlhbCIsIlZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsIiwiT25CZWhhbGZPZkNyZWRlbnRpYWwiLCJXb3JrbG9hZElkZW50aXR5Q3JlZGVudGlhbCIsImxvZ2dlciIsIkF6dXJlQXV0aG9yaXR5SG9zdHMiLCJnZXREZWZhdWx0QXp1cmVDcmVkZW50aWFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalAuthorizationCode.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalAuthorizationCode.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalAuthorizationCode: () => (/* binding */ MsalAuthorizationCode)\n/* harmony export */ });\n/* harmony import */ var _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * This MSAL client sets up a web server to listen for redirect callbacks, then calls to the MSAL's public application's `acquireTokenByDeviceCode` during `doGetToken`\n * to trigger the authentication flow, and then respond based on the values obtained from the redirect callback\n * @internal\n */ class MsalAuthorizationCode extends _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__.MsalNode {\n    constructor(options){\n        super(options);\n        this.logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_1__.credentialLogger)(\"Node.js MSAL Authorization Code\");\n        this.redirectUri = options.redirectUri;\n        this.authorizationCode = options.authorizationCode;\n        if (options.clientSecret) {\n            this.msalConfig.auth.clientSecret = options.clientSecret;\n        }\n    }\n    async getAuthCodeUrl(options) {\n        await this.init();\n        return this.getApp(\"confidentialFirst\", options.enableCae).getAuthCodeUrl({\n            scopes: options.scopes,\n            redirectUri: options.redirectUri\n        });\n    }\n    async doGetToken(scopes, options) {\n        try {\n            const result = await this.getApp(\"confidentialFirst\", options === null || options === void 0 ? void 0 : options.enableCae).acquireTokenByCode({\n                scopes,\n                redirectUri: this.redirectUri,\n                code: this.authorizationCode,\n                correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n                authority: options === null || options === void 0 ? void 0 : options.authority,\n                claims: options === null || options === void 0 ? void 0 : options.claims\n            });\n            // The Client Credential flow does not return an account,\n            // so each time getToken gets called, we will have to acquire a new token through the service.\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        } catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n} //# sourceMappingURL=msalAuthorizationCode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9tc2FsL25vZGVGbG93cy9tc2FsQXV0aG9yaXphdGlvbkNvZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNVO0FBQ1U7QUFDdEQ7Ozs7Q0FJQyxHQUNNLE1BQU1FLDhCQUE4QkYscURBQVFBO0lBQy9DRyxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsTUFBTSxHQUFHSiwrREFBZ0JBLENBQUM7UUFDL0IsSUFBSSxDQUFDSyxXQUFXLEdBQUdGLFFBQVFFLFdBQVc7UUFDdEMsSUFBSSxDQUFDQyxpQkFBaUIsR0FBR0gsUUFBUUcsaUJBQWlCO1FBQ2xELElBQUlILFFBQVFJLFlBQVksRUFBRTtZQUN0QixJQUFJLENBQUNDLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDRixZQUFZLEdBQUdKLFFBQVFJLFlBQVk7UUFDNUQ7SUFDSjtJQUNBLE1BQU1HLGVBQWVQLE9BQU8sRUFBRTtRQUMxQixNQUFNLElBQUksQ0FBQ1EsSUFBSTtRQUNmLE9BQU8sSUFBSSxDQUFDQyxNQUFNLENBQUMscUJBQXFCVCxRQUFRVSxTQUFTLEVBQUVILGNBQWMsQ0FBQztZQUN0RUksUUFBUVgsUUFBUVcsTUFBTTtZQUN0QlQsYUFBYUYsUUFBUUUsV0FBVztRQUNwQztJQUNKO0lBQ0EsTUFBTVUsV0FBV0QsTUFBTSxFQUFFWCxPQUFPLEVBQUU7UUFDOUIsSUFBSTtZQUNBLE1BQU1hLFNBQVMsTUFBTSxJQUFJLENBQUNKLE1BQU0sQ0FBQyxxQkFBcUJULFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRVSxTQUFTLEVBQUVJLGtCQUFrQixDQUFDO2dCQUMxSUg7Z0JBQ0FULGFBQWEsSUFBSSxDQUFDQSxXQUFXO2dCQUM3QmEsTUFBTSxJQUFJLENBQUNaLGlCQUFpQjtnQkFDNUJhLGVBQWVoQixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUWdCLGFBQWE7Z0JBQ3RGQyxXQUFXakIsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFpQixTQUFTO2dCQUM5RUMsUUFBUWxCLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRa0IsTUFBTTtZQUM1RTtZQUNBLHlEQUF5RDtZQUN6RCw4RkFBOEY7WUFDOUYsT0FBTyxJQUFJLENBQUNDLFlBQVksQ0FBQ1IsUUFBUSxJQUFJLENBQUNTLFFBQVEsRUFBRVAsVUFBVVE7UUFDOUQsRUFDQSxPQUFPQyxLQUFLO1lBQ1IsTUFBTSxJQUFJLENBQUNDLFdBQVcsQ0FBQ1osUUFBUVcsS0FBS3RCO1FBQ3hDO0lBQ0o7QUFDSixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvbXNhbC9ub2RlRmxvd3MvbXNhbEF1dGhvcml6YXRpb25Db2RlLmpzPzY4YTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBNc2FsTm9kZSB9IGZyb20gXCIuL21zYWxOb2RlQ29tbW9uXCI7XG5pbXBvcnQgeyBjcmVkZW50aWFsTG9nZ2VyIH0gZnJvbSBcIi4uLy4uL3V0aWwvbG9nZ2luZ1wiO1xuLyoqXG4gKiBUaGlzIE1TQUwgY2xpZW50IHNldHMgdXAgYSB3ZWIgc2VydmVyIHRvIGxpc3RlbiBmb3IgcmVkaXJlY3QgY2FsbGJhY2tzLCB0aGVuIGNhbGxzIHRvIHRoZSBNU0FMJ3MgcHVibGljIGFwcGxpY2F0aW9uJ3MgYGFjcXVpcmVUb2tlbkJ5RGV2aWNlQ29kZWAgZHVyaW5nIGBkb0dldFRva2VuYFxuICogdG8gdHJpZ2dlciB0aGUgYXV0aGVudGljYXRpb24gZmxvdywgYW5kIHRoZW4gcmVzcG9uZCBiYXNlZCBvbiB0aGUgdmFsdWVzIG9idGFpbmVkIGZyb20gdGhlIHJlZGlyZWN0IGNhbGxiYWNrXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIE1zYWxBdXRob3JpemF0aW9uQ29kZSBleHRlbmRzIE1zYWxOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGNyZWRlbnRpYWxMb2dnZXIoXCJOb2RlLmpzIE1TQUwgQXV0aG9yaXphdGlvbiBDb2RlXCIpO1xuICAgICAgICB0aGlzLnJlZGlyZWN0VXJpID0gb3B0aW9ucy5yZWRpcmVjdFVyaTtcbiAgICAgICAgdGhpcy5hdXRob3JpemF0aW9uQ29kZSA9IG9wdGlvbnMuYXV0aG9yaXphdGlvbkNvZGU7XG4gICAgICAgIGlmIChvcHRpb25zLmNsaWVudFNlY3JldCkge1xuICAgICAgICAgICAgdGhpcy5tc2FsQ29uZmlnLmF1dGguY2xpZW50U2VjcmV0ID0gb3B0aW9ucy5jbGllbnRTZWNyZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0QXV0aENvZGVVcmwob3B0aW9ucykge1xuICAgICAgICBhd2FpdCB0aGlzLmluaXQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXBwKFwiY29uZmlkZW50aWFsRmlyc3RcIiwgb3B0aW9ucy5lbmFibGVDYWUpLmdldEF1dGhDb2RlVXJsKHtcbiAgICAgICAgICAgIHNjb3Blczogb3B0aW9ucy5zY29wZXMsXG4gICAgICAgICAgICByZWRpcmVjdFVyaTogb3B0aW9ucy5yZWRpcmVjdFVyaSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGRvR2V0VG9rZW4oc2NvcGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmdldEFwcChcImNvbmZpZGVudGlhbEZpcnN0XCIsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lbmFibGVDYWUpLmFjcXVpcmVUb2tlbkJ5Q29kZSh7XG4gICAgICAgICAgICAgICAgc2NvcGVzLFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJpOiB0aGlzLnJlZGlyZWN0VXJpLFxuICAgICAgICAgICAgICAgIGNvZGU6IHRoaXMuYXV0aG9yaXphdGlvbkNvZGUsXG4gICAgICAgICAgICAgICAgY29ycmVsYXRpb25JZDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvcnJlbGF0aW9uSWQsXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYXV0aG9yaXR5LFxuICAgICAgICAgICAgICAgIGNsYWltczogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNsYWltcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gVGhlIENsaWVudCBDcmVkZW50aWFsIGZsb3cgZG9lcyBub3QgcmV0dXJuIGFuIGFjY291bnQsXG4gICAgICAgICAgICAvLyBzbyBlYWNoIHRpbWUgZ2V0VG9rZW4gZ2V0cyBjYWxsZWQsIHdlIHdpbGwgaGF2ZSB0byBhY3F1aXJlIGEgbmV3IHRva2VuIHRocm91Z2ggdGhlIHNlcnZpY2UuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXN1bHQoc2NvcGVzLCB0aGlzLmNsaWVudElkLCByZXN1bHQgfHwgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyB0aGlzLmhhbmRsZUVycm9yKHNjb3BlcywgZXJyLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1zYWxBdXRob3JpemF0aW9uQ29kZS5qcy5tYXAiXSwibmFtZXMiOlsiTXNhbE5vZGUiLCJjcmVkZW50aWFsTG9nZ2VyIiwiTXNhbEF1dGhvcml6YXRpb25Db2RlIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibG9nZ2VyIiwicmVkaXJlY3RVcmkiLCJhdXRob3JpemF0aW9uQ29kZSIsImNsaWVudFNlY3JldCIsIm1zYWxDb25maWciLCJhdXRoIiwiZ2V0QXV0aENvZGVVcmwiLCJpbml0IiwiZ2V0QXBwIiwiZW5hYmxlQ2FlIiwic2NvcGVzIiwiZG9HZXRUb2tlbiIsInJlc3VsdCIsImFjcXVpcmVUb2tlbkJ5Q29kZSIsImNvZGUiLCJjb3JyZWxhdGlvbklkIiwiYXV0aG9yaXR5IiwiY2xhaW1zIiwiaGFuZGxlUmVzdWx0IiwiY2xpZW50SWQiLCJ1bmRlZmluZWQiLCJlcnIiLCJoYW5kbGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalAuthorizationCode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientAssertion.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientAssertion.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalClientAssertion: () => (/* binding */ MsalClientAssertion)\n/* harmony export */ });\n/* harmony import */ var _msalNodeCommon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * MSAL client assertion client. Calls to MSAL's confidential application's `acquireTokenByClientCredential` during `doGetToken`.\n * @internal\n */ class MsalClientAssertion extends _msalNodeCommon__WEBPACK_IMPORTED_MODULE_1__.MsalNode {\n    constructor(options){\n        super(options);\n        this.requiresConfidential = true;\n        this.getAssertion = options.getAssertion;\n    }\n    async doGetToken(scopes, options = {}) {\n        try {\n            const assertion = await this.getAssertion();\n            const result = await this.getApp(\"confidential\", options.enableCae).acquireTokenByClientCredential({\n                scopes,\n                correlationId: options.correlationId,\n                azureRegion: this.azureRegion,\n                authority: options.authority,\n                claims: options.claims,\n                clientAssertion: assertion\n            });\n            // The Client Credential flow does not return an account,\n            // so each time getToken gets called, we will have to acquire a new token through the service.\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        } catch (err) {\n            let err2 = err;\n            if (err === null || err === undefined) {\n                err2 = new Error(JSON.stringify(err));\n            } else {\n                err2 = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isError)(err) ? err : new Error(String(err));\n            }\n            throw this.handleError(scopes, err2, options);\n        }\n    }\n} //# sourceMappingURL=msalClientAssertion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50QXNzZXJ0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDVTtBQUNEO0FBQzNDOzs7Q0FHQyxHQUNNLE1BQU1FLDRCQUE0QkYscURBQVFBO0lBQzdDRyxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUc7UUFDNUIsSUFBSSxDQUFDQyxZQUFZLEdBQUdGLFFBQVFFLFlBQVk7SUFDNUM7SUFDQSxNQUFNQyxXQUFXQyxNQUFNLEVBQUVKLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDbkMsSUFBSTtZQUNBLE1BQU1LLFlBQVksTUFBTSxJQUFJLENBQUNILFlBQVk7WUFDekMsTUFBTUksU0FBUyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDLGdCQUFnQlAsUUFBUVEsU0FBUyxFQUFFQyw4QkFBOEIsQ0FBQztnQkFDL0ZMO2dCQUNBTSxlQUFlVixRQUFRVSxhQUFhO2dCQUNwQ0MsYUFBYSxJQUFJLENBQUNBLFdBQVc7Z0JBQzdCQyxXQUFXWixRQUFRWSxTQUFTO2dCQUM1QkMsUUFBUWIsUUFBUWEsTUFBTTtnQkFDdEJDLGlCQUFpQlQ7WUFDckI7WUFDQSx5REFBeUQ7WUFDekQsOEZBQThGO1lBQzlGLE9BQU8sSUFBSSxDQUFDVSxZQUFZLENBQUNYLFFBQVEsSUFBSSxDQUFDWSxRQUFRLEVBQUVWLFVBQVVXO1FBQzlELEVBQ0EsT0FBT0MsS0FBSztZQUNSLElBQUlDLE9BQU9EO1lBQ1gsSUFBSUEsUUFBUSxRQUFRQSxRQUFRRCxXQUFXO2dCQUNuQ0UsT0FBTyxJQUFJQyxNQUFNQyxLQUFLQyxTQUFTLENBQUNKO1lBQ3BDLE9BQ0s7Z0JBQ0RDLE9BQU90Qix5REFBT0EsQ0FBQ3FCLE9BQU9BLE1BQU0sSUFBSUUsTUFBTUcsT0FBT0w7WUFDakQ7WUFDQSxNQUFNLElBQUksQ0FBQ00sV0FBVyxDQUFDcEIsUUFBUWUsTUFBTW5CO1FBQ3pDO0lBQ0o7QUFDSixFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvbXNhbC9ub2RlRmxvd3MvbXNhbENsaWVudEFzc2VydGlvbi5qcz81Yjg0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgTXNhbE5vZGUgfSBmcm9tIFwiLi9tc2FsTm9kZUNvbW1vblwiO1xuaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG4vKipcbiAqIE1TQUwgY2xpZW50IGFzc2VydGlvbiBjbGllbnQuIENhbGxzIHRvIE1TQUwncyBjb25maWRlbnRpYWwgYXBwbGljYXRpb24ncyBgYWNxdWlyZVRva2VuQnlDbGllbnRDcmVkZW50aWFsYCBkdXJpbmcgYGRvR2V0VG9rZW5gLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBNc2FsQ2xpZW50QXNzZXJ0aW9uIGV4dGVuZHMgTXNhbE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMucmVxdWlyZXNDb25maWRlbnRpYWwgPSB0cnVlO1xuICAgICAgICB0aGlzLmdldEFzc2VydGlvbiA9IG9wdGlvbnMuZ2V0QXNzZXJ0aW9uO1xuICAgIH1cbiAgICBhc3luYyBkb0dldFRva2VuKHNjb3Blcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBhc3NlcnRpb24gPSBhd2FpdCB0aGlzLmdldEFzc2VydGlvbigpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRBcHAoXCJjb25maWRlbnRpYWxcIiwgb3B0aW9ucy5lbmFibGVDYWUpLmFjcXVpcmVUb2tlbkJ5Q2xpZW50Q3JlZGVudGlhbCh7XG4gICAgICAgICAgICAgICAgc2NvcGVzLFxuICAgICAgICAgICAgICAgIGNvcnJlbGF0aW9uSWQ6IG9wdGlvbnMuY29ycmVsYXRpb25JZCxcbiAgICAgICAgICAgICAgICBhenVyZVJlZ2lvbjogdGhpcy5henVyZVJlZ2lvbixcbiAgICAgICAgICAgICAgICBhdXRob3JpdHk6IG9wdGlvbnMuYXV0aG9yaXR5LFxuICAgICAgICAgICAgICAgIGNsYWltczogb3B0aW9ucy5jbGFpbXMsXG4gICAgICAgICAgICAgICAgY2xpZW50QXNzZXJ0aW9uOiBhc3NlcnRpb24sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFRoZSBDbGllbnQgQ3JlZGVudGlhbCBmbG93IGRvZXMgbm90IHJldHVybiBhbiBhY2NvdW50LFxuICAgICAgICAgICAgLy8gc28gZWFjaCB0aW1lIGdldFRva2VuIGdldHMgY2FsbGVkLCB3ZSB3aWxsIGhhdmUgdG8gYWNxdWlyZSBhIG5ldyB0b2tlbiB0aHJvdWdoIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzdWx0KHNjb3BlcywgdGhpcy5jbGllbnRJZCwgcmVzdWx0IHx8IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgbGV0IGVycjIgPSBlcnI7XG4gICAgICAgICAgICBpZiAoZXJyID09PSBudWxsIHx8IGVyciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZXJyMiA9IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeShlcnIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVycjIgPSBpc0Vycm9yKGVycikgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgdGhpcy5oYW5kbGVFcnJvcihzY29wZXMsIGVycjIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXNhbENsaWVudEFzc2VydGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiTXNhbE5vZGUiLCJpc0Vycm9yIiwiTXNhbENsaWVudEFzc2VydGlvbiIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInJlcXVpcmVzQ29uZmlkZW50aWFsIiwiZ2V0QXNzZXJ0aW9uIiwiZG9HZXRUb2tlbiIsInNjb3BlcyIsImFzc2VydGlvbiIsInJlc3VsdCIsImdldEFwcCIsImVuYWJsZUNhZSIsImFjcXVpcmVUb2tlbkJ5Q2xpZW50Q3JlZGVudGlhbCIsImNvcnJlbGF0aW9uSWQiLCJhenVyZVJlZ2lvbiIsImF1dGhvcml0eSIsImNsYWltcyIsImNsaWVudEFzc2VydGlvbiIsImhhbmRsZVJlc3VsdCIsImNsaWVudElkIiwidW5kZWZpbmVkIiwiZXJyIiwiZXJyMiIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIlN0cmluZyIsImhhbmRsZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientAssertion.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientCertificate.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientCertificate.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalClientCertificate: () => (/* binding */ MsalClientCertificate),\n/* harmony export */   parseCertificate: () => (/* binding */ parseCertificate)\n/* harmony export */ });\n/* harmony import */ var _msalNodeCommon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_2__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\nconst readFileAsync = (0,util__WEBPACK_IMPORTED_MODULE_1__.promisify)(fs__WEBPACK_IMPORTED_MODULE_2__.readFile);\n/**\n * Tries to asynchronously load a certificate from the given path.\n *\n * @param configuration - Either the PEM value or the path to the certificate.\n * @param sendCertificateChain - Option to include x5c header for SubjectName and Issuer name authorization.\n * @returns - The certificate parts, or `undefined` if the certificate could not be loaded.\n * @internal\n */ async function parseCertificate(configuration, sendCertificateChain) {\n    const certificateParts = {};\n    const certificate = configuration.certificate;\n    const certificatePath = configuration.certificatePath;\n    certificateParts.certificateContents = certificate || await readFileAsync(certificatePath, \"utf8\");\n    if (sendCertificateChain) {\n        certificateParts.x5c = certificateParts.certificateContents;\n    }\n    const certificatePattern = /(-+BEGIN CERTIFICATE-+)(\\n\\r?|\\r\\n?)([A-Za-z0-9+/\\n\\r]+=*)(\\n\\r?|\\r\\n?)(-+END CERTIFICATE-+)/g;\n    const publicKeys = [];\n    // Match all possible certificates, in the order they are in the file. These will form the chain that is used for x5c\n    let match;\n    do {\n        match = certificatePattern.exec(certificateParts.certificateContents);\n        if (match) {\n            publicKeys.push(match[3]);\n        }\n    }while (match);\n    if (publicKeys.length === 0) {\n        throw new Error(\"The file at the specified path does not contain a PEM-encoded certificate.\");\n    }\n    certificateParts.thumbprint = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"sha1\").update(Buffer.from(publicKeys[0], \"base64\")).digest(\"hex\").toUpperCase();\n    return certificateParts;\n}\n/**\n * MSAL client certificate client. Calls to MSAL's confidential application's `acquireTokenByClientCredential` during `doGetToken`.\n * @internal\n */ class MsalClientCertificate extends _msalNodeCommon__WEBPACK_IMPORTED_MODULE_3__.MsalNode {\n    constructor(options){\n        super(options);\n        this.requiresConfidential = true;\n        this.configuration = options.configuration;\n        this.sendCertificateChain = options.sendCertificateChain;\n    }\n    // Changing the MSAL configuration asynchronously\n    async init(options) {\n        try {\n            const parts = await parseCertificate(this.configuration, this.sendCertificateChain);\n            let privateKey;\n            if (this.configuration.certificatePassword !== undefined) {\n                const privateKeyObject = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createPrivateKey)({\n                    key: parts.certificateContents,\n                    passphrase: this.configuration.certificatePassword,\n                    format: \"pem\"\n                });\n                privateKey = privateKeyObject.export({\n                    format: \"pem\",\n                    type: \"pkcs8\"\n                }).toString();\n            } else {\n                privateKey = parts.certificateContents;\n            }\n            this.msalConfig.auth.clientCertificate = {\n                thumbprint: parts.thumbprint,\n                privateKey: privateKey,\n                x5c: parts.x5c\n            };\n        } catch (error) {\n            this.logger.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_4__.formatError)(\"\", error));\n            throw error;\n        }\n        return super.init(options);\n    }\n    async doGetToken(scopes, options = {}) {\n        try {\n            const clientCredReq = {\n                scopes,\n                correlationId: options.correlationId,\n                azureRegion: this.azureRegion,\n                authority: options.authority,\n                claims: options.claims\n            };\n            const result = await this.getApp(\"confidential\", options.enableCae).acquireTokenByClientCredential(clientCredReq);\n            // Even though we're providing the same default in memory persistence cache that we use for DeviceCodeCredential,\n            // The Client Credential flow does not return the account information from the authentication service,\n            // so each time getToken gets called, we will have to acquire a new token through the service.\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        } catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n} //# sourceMappingURL=msalClientCertificate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50Q2VydGlmaWNhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDVTtBQUNVO0FBQ0w7QUFDaEI7QUFDSDtBQUM5QixNQUFNTSxnQkFBZ0JGLCtDQUFTQSxDQUFDQyx3Q0FBUUE7QUFDeEM7Ozs7Ozs7Q0FPQyxHQUNNLGVBQWVFLGlCQUFpQkMsYUFBYSxFQUFFQyxvQkFBb0I7SUFDdEUsTUFBTUMsbUJBQW1CLENBQUM7SUFDMUIsTUFBTUMsY0FBY0gsY0FDZkcsV0FBVztJQUNoQixNQUFNQyxrQkFBa0JKLGNBQ25CSSxlQUFlO0lBQ3BCRixpQkFBaUJHLG1CQUFtQixHQUNoQ0YsZUFBZ0IsTUFBTUwsY0FBY00saUJBQWlCO0lBQ3pELElBQUlILHNCQUFzQjtRQUN0QkMsaUJBQWlCSSxHQUFHLEdBQUdKLGlCQUFpQkcsbUJBQW1CO0lBQy9EO0lBQ0EsTUFBTUUscUJBQXFCO0lBQzNCLE1BQU1DLGFBQWEsRUFBRTtJQUNyQixxSEFBcUg7SUFDckgsSUFBSUM7SUFDSixHQUFHO1FBQ0NBLFFBQVFGLG1CQUFtQkcsSUFBSSxDQUFDUixpQkFBaUJHLG1CQUFtQjtRQUNwRSxJQUFJSSxPQUFPO1lBQ1BELFdBQVdHLElBQUksQ0FBQ0YsS0FBSyxDQUFDLEVBQUU7UUFDNUI7SUFDSixRQUFTQSxPQUFPO0lBQ2hCLElBQUlELFdBQVdJLE1BQU0sS0FBSyxHQUFHO1FBQ3pCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBWCxpQkFBaUJZLFVBQVUsR0FBR3JCLGtEQUFVQSxDQUFDLFFBQ3BDc0IsTUFBTSxDQUFDQyxPQUFPQyxJQUFJLENBQUNULFVBQVUsQ0FBQyxFQUFFLEVBQUUsV0FDbENVLE1BQU0sQ0FBQyxPQUNQQyxXQUFXO0lBQ2hCLE9BQU9qQjtBQUNYO0FBQ0E7OztDQUdDLEdBQ00sTUFBTWtCLDhCQUE4QjVCLHFEQUFRQTtJQUMvQzZCLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04sSUFBSSxDQUFDQyxvQkFBb0IsR0FBRztRQUM1QixJQUFJLENBQUN2QixhQUFhLEdBQUdzQixRQUFRdEIsYUFBYTtRQUMxQyxJQUFJLENBQUNDLG9CQUFvQixHQUFHcUIsUUFBUXJCLG9CQUFvQjtJQUM1RDtJQUNBLGlEQUFpRDtJQUNqRCxNQUFNdUIsS0FBS0YsT0FBTyxFQUFFO1FBQ2hCLElBQUk7WUFDQSxNQUFNRyxRQUFRLE1BQU0xQixpQkFBaUIsSUFBSSxDQUFDQyxhQUFhLEVBQUUsSUFBSSxDQUFDQyxvQkFBb0I7WUFDbEYsSUFBSXlCO1lBQ0osSUFBSSxJQUFJLENBQUMxQixhQUFhLENBQUMyQixtQkFBbUIsS0FBS0MsV0FBVztnQkFDdEQsTUFBTUMsbUJBQW1CbkMsd0RBQWdCQSxDQUFDO29CQUN0Q29DLEtBQUtMLE1BQU1wQixtQkFBbUI7b0JBQzlCMEIsWUFBWSxJQUFJLENBQUMvQixhQUFhLENBQUMyQixtQkFBbUI7b0JBQ2xESyxRQUFRO2dCQUNaO2dCQUNBTixhQUFhRyxpQkFDUkksTUFBTSxDQUFDO29CQUNSRCxRQUFRO29CQUNSRSxNQUFNO2dCQUNWLEdBQ0tDLFFBQVE7WUFDakIsT0FDSztnQkFDRFQsYUFBYUQsTUFBTXBCLG1CQUFtQjtZQUMxQztZQUNBLElBQUksQ0FBQytCLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRztnQkFDckN4QixZQUFZVyxNQUFNWCxVQUFVO2dCQUM1QlksWUFBWUE7Z0JBQ1pwQixLQUFLbUIsTUFBTW5CLEdBQUc7WUFDbEI7UUFDSixFQUNBLE9BQU9pQyxPQUFPO1lBQ1YsSUFBSSxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQzlDLDBEQUFXQSxDQUFDLElBQUk0QztZQUNqQyxNQUFNQTtRQUNWO1FBQ0EsT0FBTyxLQUFLLENBQUNmLEtBQUtGO0lBQ3RCO0lBQ0EsTUFBTW9CLFdBQVdDLE1BQU0sRUFBRXJCLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDbkMsSUFBSTtZQUNBLE1BQU1zQixnQkFBZ0I7Z0JBQ2xCRDtnQkFDQUUsZUFBZXZCLFFBQVF1QixhQUFhO2dCQUNwQ0MsYUFBYSxJQUFJLENBQUNBLFdBQVc7Z0JBQzdCQyxXQUFXekIsUUFBUXlCLFNBQVM7Z0JBQzVCQyxRQUFRMUIsUUFBUTBCLE1BQU07WUFDMUI7WUFDQSxNQUFNQyxTQUFTLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUMsZ0JBQWdCNUIsUUFBUTZCLFNBQVMsRUFBRUMsOEJBQThCLENBQUNSO1lBQ25HLGlIQUFpSDtZQUNqSCxzR0FBc0c7WUFDdEcsOEZBQThGO1lBQzlGLE9BQU8sSUFBSSxDQUFDUyxZQUFZLENBQUNWLFFBQVEsSUFBSSxDQUFDVyxRQUFRLEVBQUVMLFVBQVVyQjtRQUM5RCxFQUNBLE9BQU8yQixLQUFLO1lBQ1IsTUFBTSxJQUFJLENBQUNDLFdBQVcsQ0FBQ2IsUUFBUVksS0FBS2pDO1FBQ3hDO0lBQ0o7QUFDSixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvbXNhbC9ub2RlRmxvd3MvbXNhbENsaWVudENlcnRpZmljYXRlLmpzP2UzNjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBNc2FsTm9kZSB9IGZyb20gXCIuL21zYWxOb2RlQ29tbW9uXCI7XG5pbXBvcnQgeyBjcmVhdGVIYXNoLCBjcmVhdGVQcml2YXRlS2V5IH0gZnJvbSBcImNyeXB0b1wiO1xuaW1wb3J0IHsgZm9ybWF0RXJyb3IgfSBmcm9tIFwiLi4vLi4vdXRpbC9sb2dnaW5nXCI7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tIFwidXRpbFwiO1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tIFwiZnNcIjtcbmNvbnN0IHJlYWRGaWxlQXN5bmMgPSBwcm9taXNpZnkocmVhZEZpbGUpO1xuLyoqXG4gKiBUcmllcyB0byBhc3luY2hyb25vdXNseSBsb2FkIGEgY2VydGlmaWNhdGUgZnJvbSB0aGUgZ2l2ZW4gcGF0aC5cbiAqXG4gKiBAcGFyYW0gY29uZmlndXJhdGlvbiAtIEVpdGhlciB0aGUgUEVNIHZhbHVlIG9yIHRoZSBwYXRoIHRvIHRoZSBjZXJ0aWZpY2F0ZS5cbiAqIEBwYXJhbSBzZW5kQ2VydGlmaWNhdGVDaGFpbiAtIE9wdGlvbiB0byBpbmNsdWRlIHg1YyBoZWFkZXIgZm9yIFN1YmplY3ROYW1lIGFuZCBJc3N1ZXIgbmFtZSBhdXRob3JpemF0aW9uLlxuICogQHJldHVybnMgLSBUaGUgY2VydGlmaWNhdGUgcGFydHMsIG9yIGB1bmRlZmluZWRgIGlmIHRoZSBjZXJ0aWZpY2F0ZSBjb3VsZCBub3QgYmUgbG9hZGVkLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZUNlcnRpZmljYXRlKGNvbmZpZ3VyYXRpb24sIHNlbmRDZXJ0aWZpY2F0ZUNoYWluKSB7XG4gICAgY29uc3QgY2VydGlmaWNhdGVQYXJ0cyA9IHt9O1xuICAgIGNvbnN0IGNlcnRpZmljYXRlID0gY29uZmlndXJhdGlvblxuICAgICAgICAuY2VydGlmaWNhdGU7XG4gICAgY29uc3QgY2VydGlmaWNhdGVQYXRoID0gY29uZmlndXJhdGlvblxuICAgICAgICAuY2VydGlmaWNhdGVQYXRoO1xuICAgIGNlcnRpZmljYXRlUGFydHMuY2VydGlmaWNhdGVDb250ZW50cyA9XG4gICAgICAgIGNlcnRpZmljYXRlIHx8IChhd2FpdCByZWFkRmlsZUFzeW5jKGNlcnRpZmljYXRlUGF0aCwgXCJ1dGY4XCIpKTtcbiAgICBpZiAoc2VuZENlcnRpZmljYXRlQ2hhaW4pIHtcbiAgICAgICAgY2VydGlmaWNhdGVQYXJ0cy54NWMgPSBjZXJ0aWZpY2F0ZVBhcnRzLmNlcnRpZmljYXRlQ29udGVudHM7XG4gICAgfVxuICAgIGNvbnN0IGNlcnRpZmljYXRlUGF0dGVybiA9IC8oLStCRUdJTiBDRVJUSUZJQ0FURS0rKShcXG5cXHI/fFxcclxcbj8pKFtBLVphLXowLTkrL1xcblxccl0rPSopKFxcblxccj98XFxyXFxuPykoLStFTkQgQ0VSVElGSUNBVEUtKykvZztcbiAgICBjb25zdCBwdWJsaWNLZXlzID0gW107XG4gICAgLy8gTWF0Y2ggYWxsIHBvc3NpYmxlIGNlcnRpZmljYXRlcywgaW4gdGhlIG9yZGVyIHRoZXkgYXJlIGluIHRoZSBmaWxlLiBUaGVzZSB3aWxsIGZvcm0gdGhlIGNoYWluIHRoYXQgaXMgdXNlZCBmb3IgeDVjXG4gICAgbGV0IG1hdGNoO1xuICAgIGRvIHtcbiAgICAgICAgbWF0Y2ggPSBjZXJ0aWZpY2F0ZVBhdHRlcm4uZXhlYyhjZXJ0aWZpY2F0ZVBhcnRzLmNlcnRpZmljYXRlQ29udGVudHMpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHB1YmxpY0tleXMucHVzaChtYXRjaFszXSk7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChtYXRjaCk7XG4gICAgaWYgKHB1YmxpY0tleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBmaWxlIGF0IHRoZSBzcGVjaWZpZWQgcGF0aCBkb2VzIG5vdCBjb250YWluIGEgUEVNLWVuY29kZWQgY2VydGlmaWNhdGUuXCIpO1xuICAgIH1cbiAgICBjZXJ0aWZpY2F0ZVBhcnRzLnRodW1icHJpbnQgPSBjcmVhdGVIYXNoKFwic2hhMVwiKVxuICAgICAgICAudXBkYXRlKEJ1ZmZlci5mcm9tKHB1YmxpY0tleXNbMF0sIFwiYmFzZTY0XCIpKVxuICAgICAgICAuZGlnZXN0KFwiaGV4XCIpXG4gICAgICAgIC50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiBjZXJ0aWZpY2F0ZVBhcnRzO1xufVxuLyoqXG4gKiBNU0FMIGNsaWVudCBjZXJ0aWZpY2F0ZSBjbGllbnQuIENhbGxzIHRvIE1TQUwncyBjb25maWRlbnRpYWwgYXBwbGljYXRpb24ncyBgYWNxdWlyZVRva2VuQnlDbGllbnRDcmVkZW50aWFsYCBkdXJpbmcgYGRvR2V0VG9rZW5gLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBNc2FsQ2xpZW50Q2VydGlmaWNhdGUgZXh0ZW5kcyBNc2FsTm9kZSB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5yZXF1aXJlc0NvbmZpZGVudGlhbCA9IHRydWU7XG4gICAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IG9wdGlvbnMuY29uZmlndXJhdGlvbjtcbiAgICAgICAgdGhpcy5zZW5kQ2VydGlmaWNhdGVDaGFpbiA9IG9wdGlvbnMuc2VuZENlcnRpZmljYXRlQ2hhaW47XG4gICAgfVxuICAgIC8vIENoYW5naW5nIHRoZSBNU0FMIGNvbmZpZ3VyYXRpb24gYXN5bmNocm9ub3VzbHlcbiAgICBhc3luYyBpbml0KG9wdGlvbnMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gYXdhaXQgcGFyc2VDZXJ0aWZpY2F0ZSh0aGlzLmNvbmZpZ3VyYXRpb24sIHRoaXMuc2VuZENlcnRpZmljYXRlQ2hhaW4pO1xuICAgICAgICAgICAgbGV0IHByaXZhdGVLZXk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWd1cmF0aW9uLmNlcnRpZmljYXRlUGFzc3dvcmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaXZhdGVLZXlPYmplY3QgPSBjcmVhdGVQcml2YXRlS2V5KHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBwYXJ0cy5jZXJ0aWZpY2F0ZUNvbnRlbnRzLFxuICAgICAgICAgICAgICAgICAgICBwYXNzcGhyYXNlOiB0aGlzLmNvbmZpZ3VyYXRpb24uY2VydGlmaWNhdGVQYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBcInBlbVwiLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHByaXZhdGVLZXkgPSBwcml2YXRlS2V5T2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIC5leHBvcnQoe1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwicGVtXCIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGtjczhcIixcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHByaXZhdGVLZXkgPSBwYXJ0cy5jZXJ0aWZpY2F0ZUNvbnRlbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tc2FsQ29uZmlnLmF1dGguY2xpZW50Q2VydGlmaWNhdGUgPSB7XG4gICAgICAgICAgICAgICAgdGh1bWJwcmludDogcGFydHMudGh1bWJwcmludCxcbiAgICAgICAgICAgICAgICBwcml2YXRlS2V5OiBwcml2YXRlS2V5LFxuICAgICAgICAgICAgICAgIHg1YzogcGFydHMueDVjLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oZm9ybWF0RXJyb3IoXCJcIiwgZXJyb3IpKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5pbml0KG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBkb0dldFRva2VuKHNjb3Blcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnRDcmVkUmVxID0ge1xuICAgICAgICAgICAgICAgIHNjb3BlcyxcbiAgICAgICAgICAgICAgICBjb3JyZWxhdGlvbklkOiBvcHRpb25zLmNvcnJlbGF0aW9uSWQsXG4gICAgICAgICAgICAgICAgYXp1cmVSZWdpb246IHRoaXMuYXp1cmVSZWdpb24sXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5OiBvcHRpb25zLmF1dGhvcml0eSxcbiAgICAgICAgICAgICAgICBjbGFpbXM6IG9wdGlvbnMuY2xhaW1zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0QXBwKFwiY29uZmlkZW50aWFsXCIsIG9wdGlvbnMuZW5hYmxlQ2FlKS5hY3F1aXJlVG9rZW5CeUNsaWVudENyZWRlbnRpYWwoY2xpZW50Q3JlZFJlcSk7XG4gICAgICAgICAgICAvLyBFdmVuIHRob3VnaCB3ZSdyZSBwcm92aWRpbmcgdGhlIHNhbWUgZGVmYXVsdCBpbiBtZW1vcnkgcGVyc2lzdGVuY2UgY2FjaGUgdGhhdCB3ZSB1c2UgZm9yIERldmljZUNvZGVDcmVkZW50aWFsLFxuICAgICAgICAgICAgLy8gVGhlIENsaWVudCBDcmVkZW50aWFsIGZsb3cgZG9lcyBub3QgcmV0dXJuIHRoZSBhY2NvdW50IGluZm9ybWF0aW9uIGZyb20gdGhlIGF1dGhlbnRpY2F0aW9uIHNlcnZpY2UsXG4gICAgICAgICAgICAvLyBzbyBlYWNoIHRpbWUgZ2V0VG9rZW4gZ2V0cyBjYWxsZWQsIHdlIHdpbGwgaGF2ZSB0byBhY3F1aXJlIGEgbmV3IHRva2VuIHRocm91Z2ggdGhlIHNlcnZpY2UuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXN1bHQoc2NvcGVzLCB0aGlzLmNsaWVudElkLCByZXN1bHQgfHwgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyB0aGlzLmhhbmRsZUVycm9yKHNjb3BlcywgZXJyLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1zYWxDbGllbnRDZXJ0aWZpY2F0ZS5qcy5tYXAiXSwibmFtZXMiOlsiTXNhbE5vZGUiLCJjcmVhdGVIYXNoIiwiY3JlYXRlUHJpdmF0ZUtleSIsImZvcm1hdEVycm9yIiwicHJvbWlzaWZ5IiwicmVhZEZpbGUiLCJyZWFkRmlsZUFzeW5jIiwicGFyc2VDZXJ0aWZpY2F0ZSIsImNvbmZpZ3VyYXRpb24iLCJzZW5kQ2VydGlmaWNhdGVDaGFpbiIsImNlcnRpZmljYXRlUGFydHMiLCJjZXJ0aWZpY2F0ZSIsImNlcnRpZmljYXRlUGF0aCIsImNlcnRpZmljYXRlQ29udGVudHMiLCJ4NWMiLCJjZXJ0aWZpY2F0ZVBhdHRlcm4iLCJwdWJsaWNLZXlzIiwibWF0Y2giLCJleGVjIiwicHVzaCIsImxlbmd0aCIsIkVycm9yIiwidGh1bWJwcmludCIsInVwZGF0ZSIsIkJ1ZmZlciIsImZyb20iLCJkaWdlc3QiLCJ0b1VwcGVyQ2FzZSIsIk1zYWxDbGllbnRDZXJ0aWZpY2F0ZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInJlcXVpcmVzQ29uZmlkZW50aWFsIiwiaW5pdCIsInBhcnRzIiwicHJpdmF0ZUtleSIsImNlcnRpZmljYXRlUGFzc3dvcmQiLCJ1bmRlZmluZWQiLCJwcml2YXRlS2V5T2JqZWN0Iiwia2V5IiwicGFzc3BocmFzZSIsImZvcm1hdCIsImV4cG9ydCIsInR5cGUiLCJ0b1N0cmluZyIsIm1zYWxDb25maWciLCJhdXRoIiwiY2xpZW50Q2VydGlmaWNhdGUiLCJlcnJvciIsImxvZ2dlciIsImluZm8iLCJkb0dldFRva2VuIiwic2NvcGVzIiwiY2xpZW50Q3JlZFJlcSIsImNvcnJlbGF0aW9uSWQiLCJhenVyZVJlZ2lvbiIsImF1dGhvcml0eSIsImNsYWltcyIsInJlc3VsdCIsImdldEFwcCIsImVuYWJsZUNhZSIsImFjcXVpcmVUb2tlbkJ5Q2xpZW50Q3JlZGVudGlhbCIsImhhbmRsZVJlc3VsdCIsImNsaWVudElkIiwiZXJyIiwiaGFuZGxlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientCertificate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientSecret.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientSecret.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalClientSecret: () => (/* binding */ MsalClientSecret)\n/* harmony export */ });\n/* harmony import */ var _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * MSAL client secret client. Calls to MSAL's confidential application's `acquireTokenByClientCredential` during `doGetToken`.\n * @internal\n */ class MsalClientSecret extends _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__.MsalNode {\n    constructor(options){\n        super(options);\n        this.requiresConfidential = true;\n        this.msalConfig.auth.clientSecret = options.clientSecret;\n    }\n    async doGetToken(scopes, options = {}) {\n        try {\n            const result = await this.getApp(\"confidential\", options.enableCae).acquireTokenByClientCredential({\n                scopes,\n                correlationId: options.correlationId,\n                azureRegion: this.azureRegion,\n                authority: options.authority,\n                claims: options.claims\n            });\n            // The Client Credential flow does not return an account,\n            // so each time getToken gets called, we will have to acquire a new token through the service.\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        } catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n} //# sourceMappingURL=msalClientSecret.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50U2VjcmV0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNVO0FBQzVDOzs7Q0FHQyxHQUNNLE1BQU1DLHlCQUF5QkQscURBQVFBO0lBQzFDRSxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUc7UUFDNUIsSUFBSSxDQUFDQyxVQUFVLENBQUNDLElBQUksQ0FBQ0MsWUFBWSxHQUFHSixRQUFRSSxZQUFZO0lBQzVEO0lBQ0EsTUFBTUMsV0FBV0MsTUFBTSxFQUFFTixVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ25DLElBQUk7WUFDQSxNQUFNTyxTQUFTLE1BQU0sSUFBSSxDQUFDQyxNQUFNLENBQUMsZ0JBQWdCUixRQUFRUyxTQUFTLEVBQUVDLDhCQUE4QixDQUFDO2dCQUMvRko7Z0JBQ0FLLGVBQWVYLFFBQVFXLGFBQWE7Z0JBQ3BDQyxhQUFhLElBQUksQ0FBQ0EsV0FBVztnQkFDN0JDLFdBQVdiLFFBQVFhLFNBQVM7Z0JBQzVCQyxRQUFRZCxRQUFRYyxNQUFNO1lBQzFCO1lBQ0EseURBQXlEO1lBQ3pELDhGQUE4RjtZQUM5RixPQUFPLElBQUksQ0FBQ0MsWUFBWSxDQUFDVCxRQUFRLElBQUksQ0FBQ1UsUUFBUSxFQUFFVCxVQUFVVTtRQUM5RCxFQUNBLE9BQU9DLEtBQUs7WUFDUixNQUFNLElBQUksQ0FBQ0MsV0FBVyxDQUFDYixRQUFRWSxLQUFLbEI7UUFDeEM7SUFDSjtBQUNKLEVBQ0EsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9tc2FsL25vZGVGbG93cy9tc2FsQ2xpZW50U2VjcmV0LmpzP2MzNzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBNc2FsTm9kZSB9IGZyb20gXCIuL21zYWxOb2RlQ29tbW9uXCI7XG4vKipcbiAqIE1TQUwgY2xpZW50IHNlY3JldCBjbGllbnQuIENhbGxzIHRvIE1TQUwncyBjb25maWRlbnRpYWwgYXBwbGljYXRpb24ncyBgYWNxdWlyZVRva2VuQnlDbGllbnRDcmVkZW50aWFsYCBkdXJpbmcgYGRvR2V0VG9rZW5gLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBNc2FsQ2xpZW50U2VjcmV0IGV4dGVuZHMgTXNhbE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMucmVxdWlyZXNDb25maWRlbnRpYWwgPSB0cnVlO1xuICAgICAgICB0aGlzLm1zYWxDb25maWcuYXV0aC5jbGllbnRTZWNyZXQgPSBvcHRpb25zLmNsaWVudFNlY3JldDtcbiAgICB9XG4gICAgYXN5bmMgZG9HZXRUb2tlbihzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRBcHAoXCJjb25maWRlbnRpYWxcIiwgb3B0aW9ucy5lbmFibGVDYWUpLmFjcXVpcmVUb2tlbkJ5Q2xpZW50Q3JlZGVudGlhbCh7XG4gICAgICAgICAgICAgICAgc2NvcGVzLFxuICAgICAgICAgICAgICAgIGNvcnJlbGF0aW9uSWQ6IG9wdGlvbnMuY29ycmVsYXRpb25JZCxcbiAgICAgICAgICAgICAgICBhenVyZVJlZ2lvbjogdGhpcy5henVyZVJlZ2lvbixcbiAgICAgICAgICAgICAgICBhdXRob3JpdHk6IG9wdGlvbnMuYXV0aG9yaXR5LFxuICAgICAgICAgICAgICAgIGNsYWltczogb3B0aW9ucy5jbGFpbXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFRoZSBDbGllbnQgQ3JlZGVudGlhbCBmbG93IGRvZXMgbm90IHJldHVybiBhbiBhY2NvdW50LFxuICAgICAgICAgICAgLy8gc28gZWFjaCB0aW1lIGdldFRva2VuIGdldHMgY2FsbGVkLCB3ZSB3aWxsIGhhdmUgdG8gYWNxdWlyZSBhIG5ldyB0b2tlbiB0aHJvdWdoIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzdWx0KHNjb3BlcywgdGhpcy5jbGllbnRJZCwgcmVzdWx0IHx8IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5oYW5kbGVFcnJvcihzY29wZXMsIGVyciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tc2FsQ2xpZW50U2VjcmV0LmpzLm1hcCJdLCJuYW1lcyI6WyJNc2FsTm9kZSIsIk1zYWxDbGllbnRTZWNyZXQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJyZXF1aXJlc0NvbmZpZGVudGlhbCIsIm1zYWxDb25maWciLCJhdXRoIiwiY2xpZW50U2VjcmV0IiwiZG9HZXRUb2tlbiIsInNjb3BlcyIsInJlc3VsdCIsImdldEFwcCIsImVuYWJsZUNhZSIsImFjcXVpcmVUb2tlbkJ5Q2xpZW50Q3JlZGVudGlhbCIsImNvcnJlbGF0aW9uSWQiLCJhenVyZVJlZ2lvbiIsImF1dGhvcml0eSIsImNsYWltcyIsImhhbmRsZVJlc3VsdCIsImNsaWVudElkIiwidW5kZWZpbmVkIiwiZXJyIiwiaGFuZGxlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientSecret.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalDeviceCode.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalDeviceCode.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalDeviceCode: () => (/* binding */ MsalDeviceCode)\n/* harmony export */ });\n/* harmony import */ var _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * MSAL device code client. Calls to the MSAL's public application's `acquireTokenByDeviceCode` during `doGetToken`.\n * @internal\n */ class MsalDeviceCode extends _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__.MsalNode {\n    constructor(options){\n        super(options);\n        this.userPromptCallback = options.userPromptCallback;\n    }\n    async doGetToken(scopes, options) {\n        try {\n            const requestOptions = {\n                deviceCodeCallback: this.userPromptCallback,\n                scopes,\n                cancel: false,\n                correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n                authority: options === null || options === void 0 ? void 0 : options.authority,\n                claims: options === null || options === void 0 ? void 0 : options.claims\n            };\n            const promise = this.getApp(\"public\", options === null || options === void 0 ? void 0 : options.enableCae).acquireTokenByDeviceCode(requestOptions);\n            const deviceResponse = await this.withCancellation(promise, options === null || options === void 0 ? void 0 : options.abortSignal, ()=>{\n                requestOptions.cancel = true;\n            });\n            return this.handleResult(scopes, this.clientId, deviceResponse || undefined);\n        } catch (error) {\n            throw this.handleError(scopes, error, options);\n        }\n    }\n} //# sourceMappingURL=msalDeviceCode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9tc2FsL25vZGVGbG93cy9tc2FsRGV2aWNlQ29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDVTtBQUM1Qzs7O0NBR0MsR0FDTSxNQUFNQyx1QkFBdUJELHFEQUFRQTtJQUN4Q0UsWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNDLGtCQUFrQixHQUFHRCxRQUFRQyxrQkFBa0I7SUFDeEQ7SUFDQSxNQUFNQyxXQUFXQyxNQUFNLEVBQUVILE9BQU8sRUFBRTtRQUM5QixJQUFJO1lBQ0EsTUFBTUksaUJBQWlCO2dCQUNuQkMsb0JBQW9CLElBQUksQ0FBQ0osa0JBQWtCO2dCQUMzQ0U7Z0JBQ0FHLFFBQVE7Z0JBQ1JDLGVBQWVQLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTyxhQUFhO2dCQUN0RkMsV0FBV1IsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFRLFNBQVM7Z0JBQzlFQyxRQUFRVCxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVMsTUFBTTtZQUM1RTtZQUNBLE1BQU1DLFVBQVUsSUFBSSxDQUFDQyxNQUFNLENBQUMsVUFBVVgsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFZLFNBQVMsRUFBRUMsd0JBQXdCLENBQUNUO1lBQ3BJLE1BQU1VLGlCQUFpQixNQUFNLElBQUksQ0FBQ0MsZ0JBQWdCLENBQUNMLFNBQVNWLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRZ0IsV0FBVyxFQUFFO2dCQUMvSFosZUFBZUUsTUFBTSxHQUFHO1lBQzVCO1lBQ0EsT0FBTyxJQUFJLENBQUNXLFlBQVksQ0FBQ2QsUUFBUSxJQUFJLENBQUNlLFFBQVEsRUFBRUosa0JBQWtCSztRQUN0RSxFQUNBLE9BQU9DLE9BQU87WUFDVixNQUFNLElBQUksQ0FBQ0MsV0FBVyxDQUFDbEIsUUFBUWlCLE9BQU9wQjtRQUMxQztJQUNKO0FBQ0osRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL21zYWwvbm9kZUZsb3dzL21zYWxEZXZpY2VDb2RlLmpzPzNjNjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBNc2FsTm9kZSB9IGZyb20gXCIuL21zYWxOb2RlQ29tbW9uXCI7XG4vKipcbiAqIE1TQUwgZGV2aWNlIGNvZGUgY2xpZW50LiBDYWxscyB0byB0aGUgTVNBTCdzIHB1YmxpYyBhcHBsaWNhdGlvbidzIGBhY3F1aXJlVG9rZW5CeURldmljZUNvZGVgIGR1cmluZyBgZG9HZXRUb2tlbmAuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIE1zYWxEZXZpY2VDb2RlIGV4dGVuZHMgTXNhbE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMudXNlclByb21wdENhbGxiYWNrID0gb3B0aW9ucy51c2VyUHJvbXB0Q2FsbGJhY2s7XG4gICAgfVxuICAgIGFzeW5jIGRvR2V0VG9rZW4oc2NvcGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBkZXZpY2VDb2RlQ2FsbGJhY2s6IHRoaXMudXNlclByb21wdENhbGxiYWNrLFxuICAgICAgICAgICAgICAgIHNjb3BlcyxcbiAgICAgICAgICAgICAgICBjYW5jZWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvcnJlbGF0aW9uSWQ6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb3JyZWxhdGlvbklkLFxuICAgICAgICAgICAgICAgIGF1dGhvcml0eTogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmF1dGhvcml0eSxcbiAgICAgICAgICAgICAgICBjbGFpbXM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jbGFpbXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuZ2V0QXBwKFwicHVibGljXCIsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lbmFibGVDYWUpLmFjcXVpcmVUb2tlbkJ5RGV2aWNlQ29kZShyZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBkZXZpY2VSZXNwb25zZSA9IGF3YWl0IHRoaXMud2l0aENhbmNlbGxhdGlvbihwcm9taXNlLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRTaWduYWwsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0T3B0aW9ucy5jYW5jZWwgPSB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXN1bHQoc2NvcGVzLCB0aGlzLmNsaWVudElkLCBkZXZpY2VSZXNwb25zZSB8fCB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5oYW5kbGVFcnJvcihzY29wZXMsIGVycm9yLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1zYWxEZXZpY2VDb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJNc2FsTm9kZSIsIk1zYWxEZXZpY2VDb2RlIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwidXNlclByb21wdENhbGxiYWNrIiwiZG9HZXRUb2tlbiIsInNjb3BlcyIsInJlcXVlc3RPcHRpb25zIiwiZGV2aWNlQ29kZUNhbGxiYWNrIiwiY2FuY2VsIiwiY29ycmVsYXRpb25JZCIsImF1dGhvcml0eSIsImNsYWltcyIsInByb21pc2UiLCJnZXRBcHAiLCJlbmFibGVDYWUiLCJhY3F1aXJlVG9rZW5CeURldmljZUNvZGUiLCJkZXZpY2VSZXNwb25zZSIsIndpdGhDYW5jZWxsYXRpb24iLCJhYm9ydFNpZ25hbCIsImhhbmRsZVJlc3VsdCIsImNsaWVudElkIiwidW5kZWZpbmVkIiwiZXJyb3IiLCJoYW5kbGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalDeviceCode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalNode: () => (/* binding */ MsalNode),\n/* harmony export */   msalNodeFlowCacheControl: () => (/* binding */ msalNodeFlowCacheControl)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-node */ \"(rsc)/./node_modules/@azure/msal-node/dist/index.mjs\");\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/utils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\");\n/* harmony import */ var _util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../util/tenantIdUtils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\");\n/* harmony import */ var _client_identityClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../client/identityClient */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/client/identityClient.js\");\n/* harmony import */ var _regionalAuthority__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../regionalAuthority */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/regionalAuthority.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n/**\n * The current persistence provider, undefined by default.\n * @internal\n */ let persistenceProvider = undefined;\n/**\n * An object that allows setting the persistence provider.\n * @internal\n */ const msalNodeFlowCacheControl = {\n    setPersistence (pluginProvider) {\n        persistenceProvider = pluginProvider;\n    }\n};\n/**\n * MSAL partial base client for Node.js.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */ class MsalNode extends _utils__WEBPACK_IMPORTED_MODULE_2__.MsalBaseUtilities {\n    constructor(options){\n        var _a, _b, _c, _d;\n        super(options);\n        // protected publicApp: msalNode.PublicClientApplication | undefined;\n        // protected publicAppCae: msalNode.PublicClientApplication | undefined;\n        // protected confidentialApp: msalNode.ConfidentialClientApplication | undefined;\n        // protected confidentialAppCae: msalNode.ConfidentialClientApplication | undefined;\n        this.app = {};\n        this.caeApp = {};\n        this.requiresConfidential = false;\n        this.msalConfig = this.defaultNodeMsalConfig(options);\n        this.tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_3__.resolveTenantId)(options.logger, options.tenantId, options.clientId);\n        this.additionallyAllowedTenantIds = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_3__.resolveAdditionallyAllowedTenantIds)((_a = options === null || options === void 0 ? void 0 : options.tokenCredentialOptions) === null || _a === void 0 ? void 0 : _a.additionallyAllowedTenants);\n        this.clientId = this.msalConfig.auth.clientId;\n        if (options === null || options === void 0 ? void 0 : options.getAssertion) {\n            this.getAssertion = options.getAssertion;\n        }\n        // If persistence has been configured\n        if (persistenceProvider !== undefined && ((_b = options.tokenCachePersistenceOptions) === null || _b === void 0 ? void 0 : _b.enabled)) {\n            const nonCaeOptions = Object.assign({\n                name: `${options.tokenCachePersistenceOptions.name}.${_constants__WEBPACK_IMPORTED_MODULE_4__.CACHE_NON_CAE_SUFFIX}`\n            }, options.tokenCachePersistenceOptions);\n            const caeOptions = Object.assign({\n                name: `${options.tokenCachePersistenceOptions.name}.${_constants__WEBPACK_IMPORTED_MODULE_4__.CACHE_CAE_SUFFIX}`\n            }, options.tokenCachePersistenceOptions);\n            this.createCachePlugin = ()=>persistenceProvider(nonCaeOptions);\n            this.createCachePluginCae = ()=>persistenceProvider(caeOptions);\n        } else if ((_c = options.tokenCachePersistenceOptions) === null || _c === void 0 ? void 0 : _c.enabled) {\n            throw new Error([\n                \"Persistent token caching was requested, but no persistence provider was configured.\",\n                \"You must install the identity-cache-persistence plugin package (`npm install --save @azure/identity-cache-persistence`)\",\n                \"and enable it by importing `useIdentityPlugin` from `@azure/identity` and calling\",\n                \"`useIdentityPlugin(cachePersistencePlugin)` before using `tokenCachePersistenceOptions`.\"\n            ].join(\" \"));\n        }\n        this.azureRegion = (_d = options.regionalAuthority) !== null && _d !== void 0 ? _d : process.env.AZURE_REGIONAL_AUTHORITY_NAME;\n        if (this.azureRegion === _regionalAuthority__WEBPACK_IMPORTED_MODULE_5__.RegionalAuthority.AutoDiscoverRegion) {\n            this.azureRegion = \"AUTO_DISCOVER\";\n        }\n    }\n    /**\n     * Generates a MSAL configuration that generally works for Node.js\n     */ defaultNodeMsalConfig(options) {\n        var _a;\n        const clientId = options.clientId || _constants__WEBPACK_IMPORTED_MODULE_4__.DeveloperSignOnClientId;\n        const tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_3__.resolveTenantId)(options.logger, options.tenantId, options.clientId);\n        this.authorityHost = options.authorityHost || process.env.AZURE_AUTHORITY_HOST;\n        const authority = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthority)(tenantId, this.authorityHost);\n        this.identityClient = new _client_identityClient__WEBPACK_IMPORTED_MODULE_6__.IdentityClient(Object.assign(Object.assign({}, options.tokenCredentialOptions), {\n            authorityHost: authority,\n            loggingOptions: options.loggingOptions\n        }));\n        const clientCapabilities = [];\n        return {\n            auth: {\n                clientId,\n                authority,\n                knownAuthorities: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getKnownAuthorities)(tenantId, authority, options.disableInstanceDiscovery),\n                clientCapabilities\n            },\n            // Cache is defined in this.prepare();\n            system: {\n                networkClient: this.identityClient,\n                loggerOptions: {\n                    loggerCallback: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.defaultLoggerCallback)(options.logger),\n                    logLevel: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getMSALLogLevel)((0,_azure_logger__WEBPACK_IMPORTED_MODULE_1__.getLogLevel)()),\n                    piiLoggingEnabled: (_a = options.loggingOptions) === null || _a === void 0 ? void 0 : _a.enableUnsafeSupportLogging\n                }\n            }\n        };\n    }\n    getApp(appType, enableCae) {\n        const app = enableCae ? this.caeApp : this.app;\n        if (appType === \"publicFirst\") {\n            return app.public || app.confidential;\n        } else if (appType === \"confidentialFirst\") {\n            return app.confidential || app.public;\n        } else if (appType === \"confidential\") {\n            return app.confidential;\n        } else {\n            return app.public;\n        }\n    }\n    /**\n     * Prepares the MSAL applications.\n     */ async init(options) {\n        if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n            options.abortSignal.addEventListener(\"abort\", ()=>{\n                // This will abort any pending request in the IdentityClient,\n                // based on the received or generated correlationId\n                this.identityClient.abortRequests(options.correlationId);\n            });\n        }\n        const app = (options === null || options === void 0 ? void 0 : options.enableCae) ? this.caeApp : this.app;\n        if (options === null || options === void 0 ? void 0 : options.enableCae) {\n            this.msalConfig.auth.clientCapabilities = [\n                \"cp1\"\n            ];\n        }\n        if (app.public || app.confidential) {\n            return;\n        }\n        if ((options === null || options === void 0 ? void 0 : options.enableCae) && this.createCachePluginCae !== undefined) {\n            this.msalConfig.cache = {\n                cachePlugin: await this.createCachePluginCae()\n            };\n        }\n        if (this.createCachePlugin !== undefined) {\n            this.msalConfig.cache = {\n                cachePlugin: await this.createCachePlugin()\n            };\n        }\n        if (options === null || options === void 0 ? void 0 : options.enableCae) {\n            this.caeApp.public = new _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.PublicClientApplication(this.msalConfig);\n        } else {\n            this.app.public = new _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.PublicClientApplication(this.msalConfig);\n        }\n        if (this.getAssertion) {\n            this.msalConfig.auth.clientAssertion = await this.getAssertion();\n        }\n        // The confidential client requires either a secret, assertion or certificate.\n        if (this.msalConfig.auth.clientSecret || this.msalConfig.auth.clientAssertion || this.msalConfig.auth.clientCertificate) {\n            if (options === null || options === void 0 ? void 0 : options.enableCae) {\n                this.caeApp.confidential = new _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.ConfidentialClientApplication(this.msalConfig);\n            } else {\n                this.app.confidential = new _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.ConfidentialClientApplication(this.msalConfig);\n            }\n        } else {\n            if (this.requiresConfidential) {\n                throw new Error(\"Unable to generate the MSAL confidential client. Missing either the client's secret, certificate or assertion.\");\n            }\n        }\n    }\n    /**\n     * Allows the cancellation of a MSAL request.\n     */ withCancellation(promise, abortSignal, onCancel) {\n        return new Promise((resolve, reject)=>{\n            promise.then((msalToken)=>{\n                return resolve(msalToken);\n            }).catch(reject);\n            if (abortSignal) {\n                abortSignal.addEventListener(\"abort\", ()=>{\n                    onCancel === null || onCancel === void 0 ? void 0 : onCancel();\n                });\n            }\n        });\n    }\n    /**\n     * Returns the existing account, attempts to load the account from MSAL.\n     */ async getActiveAccount(enableCae = false) {\n        if (this.account) {\n            return this.account;\n        }\n        const cache = this.getApp(\"confidentialFirst\", enableCae).getTokenCache();\n        const accountsByTenant = await (cache === null || cache === void 0 ? void 0 : cache.getAllAccounts());\n        if (!accountsByTenant) {\n            return;\n        }\n        if (accountsByTenant.length === 1) {\n            this.account = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.msalToPublic)(this.clientId, accountsByTenant[0]);\n        } else {\n            this.logger.info(`More than one account was found authenticated for this Client ID and Tenant ID.\nHowever, no \"authenticationRecord\" has been provided for this credential,\ntherefore we're unable to pick between these accounts.\nA new login attempt will be requested, to ensure the correct account is picked.\nTo work with multiple accounts for the same Client ID and Tenant ID, please provide an \"authenticationRecord\" when initializing a credential to prevent this from happening.`);\n            return;\n        }\n        return this.account;\n    }\n    /**\n     * Attempts to retrieve a token from cache.\n     */ async getTokenSilent(scopes, options) {\n        var _a, _b, _c;\n        await this.getActiveAccount(options === null || options === void 0 ? void 0 : options.enableCae);\n        if (!this.account) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_7__.AuthenticationRequiredError({\n                scopes,\n                getTokenOptions: options,\n                message: \"Silent authentication failed. We couldn't retrieve an active account from the cache.\"\n            });\n        }\n        const silentRequest = {\n            // To be able to re-use the account, the Token Cache must also have been provided.\n            account: (0,_utils__WEBPACK_IMPORTED_MODULE_2__.publicToMsal)(this.account),\n            correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n            scopes,\n            authority: options === null || options === void 0 ? void 0 : options.authority,\n            claims: options === null || options === void 0 ? void 0 : options.claims\n        };\n        try {\n            this.logger.info(\"Attempting to acquire token silently\");\n            /**\n             * The following code to retrieve all accounts is done as a workaround in an attempt to force the\n             * refresh of the token cache with the token and the account passed in through the\n             * `authenticationRecord` parameter. See issue - https://github.com/Azure/azure-sdk-for-js/issues/24349#issuecomment-1496715651\n             * This workaround serves as a workaround for silent authentication not happening when authenticationRecord is passed.\n             */ await ((_a = this.getApp(\"publicFirst\", options === null || options === void 0 ? void 0 : options.enableCae)) === null || _a === void 0 ? void 0 : _a.getTokenCache().getAllAccounts());\n            const response = (_c = await ((_b = this.getApp(\"confidential\", options === null || options === void 0 ? void 0 : options.enableCae)) === null || _b === void 0 ? void 0 : _b.acquireTokenSilent(silentRequest))) !== null && _c !== void 0 ? _c : await this.getApp(\"public\", options === null || options === void 0 ? void 0 : options.enableCae).acquireTokenSilent(silentRequest);\n            return this.handleResult(scopes, this.clientId, response || undefined);\n        } catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n    /**\n     * Wrapper around each MSAL flow get token operation: doGetToken.\n     * If disableAutomaticAuthentication is sent through the constructor, it will prevent MSAL from requesting the user input.\n     */ async getToken(scopes, options = {}) {\n        const tenantId = (0,_util_tenantIdUtils__WEBPACK_IMPORTED_MODULE_8__.processMultiTenantRequest)(this.tenantId, options, this.additionallyAllowedTenantIds) || this.tenantId;\n        options.authority = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getAuthority)(tenantId, this.authorityHost);\n        options.correlationId = (options === null || options === void 0 ? void 0 : options.correlationId) || this.generateUuid();\n        await this.init(options);\n        try {\n            // MSAL now caches tokens based on their claims,\n            // so now one has to keep track fo claims in order to retrieve the newer tokens from acquireTokenSilent\n            // This update happened on PR: https://github.com/AzureAD/microsoft-authentication-library-for-js/pull/4533\n            const optionsClaims = options.claims;\n            if (optionsClaims) {\n                this.cachedClaims = optionsClaims;\n            }\n            if (this.cachedClaims && !optionsClaims) {\n                options.claims = this.cachedClaims;\n            }\n            // We don't return the promise since we want to catch errors right here.\n            return await this.getTokenSilent(scopes, options);\n        } catch (err) {\n            if (err.name !== \"AuthenticationRequiredError\") {\n                throw err;\n            }\n            if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_7__.AuthenticationRequiredError({\n                    scopes,\n                    getTokenOptions: options,\n                    message: \"Automatic authentication has been disabled. You may call the authentication() method.\"\n                });\n            }\n            this.logger.info(`Silent authentication failed, falling back to interactive method.`);\n            return this.doGetToken(scopes, options);\n        }\n    }\n} //# sourceMappingURL=msalNodeCommon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalOnBehalfOf.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalOnBehalfOf.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalOnBehalfOf: () => (/* binding */ MsalOnBehalfOf)\n/* harmony export */ });\n/* harmony import */ var _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _msalClientCertificate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./msalClientCertificate */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalClientCertificate.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * MSAL on behalf of flow. Calls to MSAL's confidential application's `acquireTokenOnBehalfOf` during `doGetToken`.\n * @internal\n */ class MsalOnBehalfOf extends _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__.MsalNode {\n    constructor(options){\n        super(options);\n        this.logger.info(\"Initialized MSAL's On-Behalf-Of flow\");\n        this.requiresConfidential = true;\n        this.userAssertionToken = options.userAssertionToken;\n        this.certificatePath = options.certificatePath;\n        this.sendCertificateChain = options.sendCertificateChain;\n        this.clientSecret = options.clientSecret;\n    }\n    // Changing the MSAL configuration asynchronously\n    async init(options) {\n        if (this.certificatePath) {\n            try {\n                const parts = await (0,_msalClientCertificate__WEBPACK_IMPORTED_MODULE_1__.parseCertificate)({\n                    certificatePath: this.certificatePath\n                }, this.sendCertificateChain);\n                this.msalConfig.auth.clientCertificate = {\n                    thumbprint: parts.thumbprint,\n                    privateKey: parts.certificateContents,\n                    x5c: parts.x5c\n                };\n            } catch (error) {\n                this.logger.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_2__.formatError)(\"\", error));\n                throw error;\n            }\n        } else {\n            this.msalConfig.auth.clientSecret = this.clientSecret;\n        }\n        return super.init(options);\n    }\n    async doGetToken(scopes, options = {}) {\n        try {\n            const result = await this.getApp(\"confidential\", options.enableCae).acquireTokenOnBehalfOf({\n                scopes,\n                correlationId: options.correlationId,\n                authority: options.authority,\n                claims: options.claims,\n                oboAssertion: this.userAssertionToken\n            });\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        } catch (err) {\n            throw this.handleError(scopes, err, options);\n        }\n    }\n} //# sourceMappingURL=msalOnBehalfOf.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9tc2FsL25vZGVGbG93cy9tc2FsT25CZWhhbGZPZi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNVO0FBQ0s7QUFDVTtBQUMzRDs7O0NBR0MsR0FDTSxNQUFNRyx1QkFBdUJILHFEQUFRQTtJQUN4Q0ksWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUc7UUFDNUIsSUFBSSxDQUFDQyxrQkFBa0IsR0FBR0osUUFBUUksa0JBQWtCO1FBQ3BELElBQUksQ0FBQ0MsZUFBZSxHQUFHTCxRQUFRSyxlQUFlO1FBQzlDLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUdOLFFBQVFNLG9CQUFvQjtRQUN4RCxJQUFJLENBQUNDLFlBQVksR0FBR1AsUUFBUU8sWUFBWTtJQUM1QztJQUNBLGlEQUFpRDtJQUNqRCxNQUFNQyxLQUFLUixPQUFPLEVBQUU7UUFDaEIsSUFBSSxJQUFJLENBQUNLLGVBQWUsRUFBRTtZQUN0QixJQUFJO2dCQUNBLE1BQU1JLFFBQVEsTUFBTVosd0VBQWdCQSxDQUFDO29CQUFFUSxpQkFBaUIsSUFBSSxDQUFDQSxlQUFlO2dCQUFDLEdBQUcsSUFBSSxDQUFDQyxvQkFBb0I7Z0JBQ3pHLElBQUksQ0FBQ0ksVUFBVSxDQUFDQyxJQUFJLENBQUNDLGlCQUFpQixHQUFHO29CQUNyQ0MsWUFBWUosTUFBTUksVUFBVTtvQkFDNUJDLFlBQVlMLE1BQU1NLG1CQUFtQjtvQkFDckNDLEtBQUtQLE1BQU1PLEdBQUc7Z0JBQ2xCO1lBQ0osRUFDQSxPQUFPQyxPQUFPO2dCQUNWLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTiwwREFBV0EsQ0FBQyxJQUFJcUI7Z0JBQ2pDLE1BQU1BO1lBQ1Y7UUFDSixPQUNLO1lBQ0QsSUFBSSxDQUFDUCxVQUFVLENBQUNDLElBQUksQ0FBQ0osWUFBWSxHQUFHLElBQUksQ0FBQ0EsWUFBWTtRQUN6RDtRQUNBLE9BQU8sS0FBSyxDQUFDQyxLQUFLUjtJQUN0QjtJQUNBLE1BQU1rQixXQUFXQyxNQUFNLEVBQUVuQixVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQ25DLElBQUk7WUFDQSxNQUFNb0IsU0FBUyxNQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDLGdCQUFnQnJCLFFBQVFzQixTQUFTLEVBQUVDLHNCQUFzQixDQUFDO2dCQUN2Rko7Z0JBQ0FLLGVBQWV4QixRQUFRd0IsYUFBYTtnQkFDcENDLFdBQVd6QixRQUFReUIsU0FBUztnQkFDNUJDLFFBQVExQixRQUFRMEIsTUFBTTtnQkFDdEJDLGNBQWMsSUFBSSxDQUFDdkIsa0JBQWtCO1lBQ3pDO1lBQ0EsT0FBTyxJQUFJLENBQUN3QixZQUFZLENBQUNULFFBQVEsSUFBSSxDQUFDVSxRQUFRLEVBQUVULFVBQVVVO1FBQzlELEVBQ0EsT0FBT0MsS0FBSztZQUNSLE1BQU0sSUFBSSxDQUFDQyxXQUFXLENBQUNiLFFBQVFZLEtBQUsvQjtRQUN4QztJQUNKO0FBQ0osRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL21zYWwvbm9kZUZsb3dzL21zYWxPbkJlaGFsZk9mLmpzP2RkYWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBNc2FsTm9kZSB9IGZyb20gXCIuL21zYWxOb2RlQ29tbW9uXCI7XG5pbXBvcnQgeyBmb3JtYXRFcnJvciB9IGZyb20gXCIuLi8uLi91dGlsL2xvZ2dpbmdcIjtcbmltcG9ydCB7IHBhcnNlQ2VydGlmaWNhdGUgfSBmcm9tIFwiLi9tc2FsQ2xpZW50Q2VydGlmaWNhdGVcIjtcbi8qKlxuICogTVNBTCBvbiBiZWhhbGYgb2YgZmxvdy4gQ2FsbHMgdG8gTVNBTCdzIGNvbmZpZGVudGlhbCBhcHBsaWNhdGlvbidzIGBhY3F1aXJlVG9rZW5PbkJlaGFsZk9mYCBkdXJpbmcgYGRvR2V0VG9rZW5gLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBNc2FsT25CZWhhbGZPZiBleHRlbmRzIE1zYWxOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKFwiSW5pdGlhbGl6ZWQgTVNBTCdzIE9uLUJlaGFsZi1PZiBmbG93XCIpO1xuICAgICAgICB0aGlzLnJlcXVpcmVzQ29uZmlkZW50aWFsID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51c2VyQXNzZXJ0aW9uVG9rZW4gPSBvcHRpb25zLnVzZXJBc3NlcnRpb25Ub2tlbjtcbiAgICAgICAgdGhpcy5jZXJ0aWZpY2F0ZVBhdGggPSBvcHRpb25zLmNlcnRpZmljYXRlUGF0aDtcbiAgICAgICAgdGhpcy5zZW5kQ2VydGlmaWNhdGVDaGFpbiA9IG9wdGlvbnMuc2VuZENlcnRpZmljYXRlQ2hhaW47XG4gICAgICAgIHRoaXMuY2xpZW50U2VjcmV0ID0gb3B0aW9ucy5jbGllbnRTZWNyZXQ7XG4gICAgfVxuICAgIC8vIENoYW5naW5nIHRoZSBNU0FMIGNvbmZpZ3VyYXRpb24gYXN5bmNocm9ub3VzbHlcbiAgICBhc3luYyBpbml0KG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuY2VydGlmaWNhdGVQYXRoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gYXdhaXQgcGFyc2VDZXJ0aWZpY2F0ZSh7IGNlcnRpZmljYXRlUGF0aDogdGhpcy5jZXJ0aWZpY2F0ZVBhdGggfSwgdGhpcy5zZW5kQ2VydGlmaWNhdGVDaGFpbik7XG4gICAgICAgICAgICAgICAgdGhpcy5tc2FsQ29uZmlnLmF1dGguY2xpZW50Q2VydGlmaWNhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRodW1icHJpbnQ6IHBhcnRzLnRodW1icHJpbnQsXG4gICAgICAgICAgICAgICAgICAgIHByaXZhdGVLZXk6IHBhcnRzLmNlcnRpZmljYXRlQ29udGVudHMsXG4gICAgICAgICAgICAgICAgICAgIHg1YzogcGFydHMueDVjLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKGZvcm1hdEVycm9yKFwiXCIsIGVycm9yKSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1zYWxDb25maWcuYXV0aC5jbGllbnRTZWNyZXQgPSB0aGlzLmNsaWVudFNlY3JldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuaW5pdChvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZG9HZXRUb2tlbihzY29wZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5nZXRBcHAoXCJjb25maWRlbnRpYWxcIiwgb3B0aW9ucy5lbmFibGVDYWUpLmFjcXVpcmVUb2tlbk9uQmVoYWxmT2Yoe1xuICAgICAgICAgICAgICAgIHNjb3BlcyxcbiAgICAgICAgICAgICAgICBjb3JyZWxhdGlvbklkOiBvcHRpb25zLmNvcnJlbGF0aW9uSWQsXG4gICAgICAgICAgICAgICAgYXV0aG9yaXR5OiBvcHRpb25zLmF1dGhvcml0eSxcbiAgICAgICAgICAgICAgICBjbGFpbXM6IG9wdGlvbnMuY2xhaW1zLFxuICAgICAgICAgICAgICAgIG9ib0Fzc2VydGlvbjogdGhpcy51c2VyQXNzZXJ0aW9uVG9rZW4sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3VsdChzY29wZXMsIHRoaXMuY2xpZW50SWQsIHJlc3VsdCB8fCB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMuaGFuZGxlRXJyb3Ioc2NvcGVzLCBlcnIsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXNhbE9uQmVoYWxmT2YuanMubWFwIl0sIm5hbWVzIjpbIk1zYWxOb2RlIiwiZm9ybWF0RXJyb3IiLCJwYXJzZUNlcnRpZmljYXRlIiwiTXNhbE9uQmVoYWxmT2YiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJsb2dnZXIiLCJpbmZvIiwicmVxdWlyZXNDb25maWRlbnRpYWwiLCJ1c2VyQXNzZXJ0aW9uVG9rZW4iLCJjZXJ0aWZpY2F0ZVBhdGgiLCJzZW5kQ2VydGlmaWNhdGVDaGFpbiIsImNsaWVudFNlY3JldCIsImluaXQiLCJwYXJ0cyIsIm1zYWxDb25maWciLCJhdXRoIiwiY2xpZW50Q2VydGlmaWNhdGUiLCJ0aHVtYnByaW50IiwicHJpdmF0ZUtleSIsImNlcnRpZmljYXRlQ29udGVudHMiLCJ4NWMiLCJlcnJvciIsImRvR2V0VG9rZW4iLCJzY29wZXMiLCJyZXN1bHQiLCJnZXRBcHAiLCJlbmFibGVDYWUiLCJhY3F1aXJlVG9rZW5PbkJlaGFsZk9mIiwiY29ycmVsYXRpb25JZCIsImF1dGhvcml0eSIsImNsYWltcyIsIm9ib0Fzc2VydGlvbiIsImhhbmRsZVJlc3VsdCIsImNsaWVudElkIiwidW5kZWZpbmVkIiwiZXJyIiwiaGFuZGxlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalOnBehalfOf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalOpenBrowser.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalOpenBrowser.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalOpenBrowser: () => (/* binding */ MsalOpenBrowser),\n/* harmony export */   interactiveBrowserMockable: () => (/* binding */ interactiveBrowserMockable)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-node */ \"(rsc)/./node_modules/@azure/msal-node/dist/index.mjs\");\n/* harmony import */ var _msalNodeCommon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/utils.js\");\n/* harmony import */ var open__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! open */ \"(rsc)/./node_modules/open/index.js\");\n/* harmony import */ var open__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(open__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var stoppable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stoppable */ \"(rsc)/./node_modules/stoppable/lib/stoppable.js\");\n/* harmony import */ var stoppable__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(stoppable__WEBPACK_IMPORTED_MODULE_3__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n/**\n * A call to open(), but mockable\n * @internal\n */ const interactiveBrowserMockable = {\n    open: (open__WEBPACK_IMPORTED_MODULE_2___default())\n};\n/**\n * This MSAL client sets up a web server to listen for redirect callbacks, then calls to the MSAL's public application's `acquireTokenByDeviceCode` during `doGetToken`\n * to trigger the authentication flow, and then respond based on the values obtained from the redirect callback\n * @internal\n */ class MsalOpenBrowser extends _msalNodeCommon__WEBPACK_IMPORTED_MODULE_4__.MsalNode {\n    constructor(options){\n        super(options);\n        this.logger = (0,_util_logging__WEBPACK_IMPORTED_MODULE_5__.credentialLogger)(\"Node.js MSAL Open Browser\");\n        this.redirectUri = options.redirectUri;\n        this.loginHint = options.loginHint;\n        const url = new URL(this.redirectUri);\n        this.port = parseInt(url.port);\n        if (isNaN(this.port)) {\n            this.port = 80;\n        }\n        this.hostname = url.hostname;\n    }\n    async acquireTokenByCode(request, enableCae) {\n        return this.getApp(\"public\", enableCae).acquireTokenByCode(request);\n    }\n    doGetToken(scopes, options) {\n        return new Promise((resolve, reject)=>{\n            const socketToDestroy = [];\n            const requestListener = (req, res)=>{\n                var _a;\n                if (!req.url) {\n                    reject(new Error(`Interactive Browser Authentication Error \"Did not receive token with a valid expiration\"`));\n                    return;\n                }\n                let url;\n                try {\n                    url = new URL(req.url, this.redirectUri);\n                } catch (e) {\n                    reject(new Error(`Interactive Browser Authentication Error \"Did not receive token with a valid expiration\"`));\n                    return;\n                }\n                const tokenRequest = {\n                    code: url.searchParams.get(\"code\"),\n                    redirectUri: this.redirectUri,\n                    scopes: scopes,\n                    authority: options === null || options === void 0 ? void 0 : options.authority,\n                    codeVerifier: (_a = this.pkceCodes) === null || _a === void 0 ? void 0 : _a.verifier\n                };\n                this.acquireTokenByCode(tokenRequest, options === null || options === void 0 ? void 0 : options.enableCae).then((authResponse)=>{\n                    if (authResponse === null || authResponse === void 0 ? void 0 : authResponse.account) {\n                        this.account = (0,_utils__WEBPACK_IMPORTED_MODULE_6__.msalToPublic)(this.clientId, authResponse.account);\n                    }\n                    const successMessage = `Authentication Complete. You can close the browser and return to the application.`;\n                    if (authResponse && authResponse.expiresOn) {\n                        const expiresOnTimestamp = authResponse === null || authResponse === void 0 ? void 0 : authResponse.expiresOn.valueOf();\n                        res.writeHead(200);\n                        res.end(successMessage);\n                        this.logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_5__.formatSuccess)(scopes));\n                        resolve({\n                            expiresOnTimestamp,\n                            token: authResponse.accessToken\n                        });\n                    } else {\n                        const errorMessage = (0,_util_logging__WEBPACK_IMPORTED_MODULE_5__.formatError)(scopes, `${url.searchParams.get(\"error\")}. ${url.searchParams.get(\"error_description\")}`);\n                        res.writeHead(500);\n                        res.end(errorMessage);\n                        this.logger.getToken.info(errorMessage);\n                        reject(new Error(`Interactive Browser Authentication Error \"Did not receive token with a valid expiration\"`));\n                    }\n                    cleanup();\n                    return;\n                }).catch(()=>{\n                    const errorMessage = (0,_util_logging__WEBPACK_IMPORTED_MODULE_5__.formatError)(scopes, `${url.searchParams.get(\"error\")}. ${url.searchParams.get(\"error_description\")}`);\n                    res.writeHead(500);\n                    res.end(errorMessage);\n                    this.logger.getToken.info(errorMessage);\n                    reject(new Error(`Interactive Browser Authentication Error \"Did not receive token with a valid expiration\"`));\n                    cleanup();\n                });\n            };\n            const app = http__WEBPACK_IMPORTED_MODULE_1___default().createServer(requestListener);\n            const server = stoppable__WEBPACK_IMPORTED_MODULE_3___default()(app);\n            const listen = app.listen(this.port, this.hostname, ()=>this.logger.info(`InteractiveBrowserCredential listening on port ${this.port}!`));\n            function cleanup() {\n                if (listen) {\n                    listen.close();\n                }\n                for (const socket of socketToDestroy){\n                    socket.destroy();\n                }\n                if (server) {\n                    server.close();\n                    server.stop();\n                }\n            }\n            app.on(\"connection\", (socket)=>socketToDestroy.push(socket));\n            app.on(\"error\", (err)=>{\n                cleanup();\n                const code = err.code;\n                if (code === \"EACCES\" || code === \"EADDRINUSE\") {\n                    reject(new _errors__WEBPACK_IMPORTED_MODULE_7__.CredentialUnavailableError([\n                        `InteractiveBrowserCredential: Access denied to port ${this.port}.`,\n                        `Try sending a redirect URI with a different port, as follows:`,\n                        '`new InteractiveBrowserCredential({ redirectUri: \"http://localhost:1337\" })`'\n                    ].join(\" \")));\n                } else {\n                    reject(new _errors__WEBPACK_IMPORTED_MODULE_7__.CredentialUnavailableError(`InteractiveBrowserCredential: Failed to start the necessary web server. Error: ${err.message}`));\n                }\n            });\n            app.on(\"listening\", ()=>{\n                const openPromise = this.openAuthCodeUrl(scopes, options);\n                const abortSignal = options === null || options === void 0 ? void 0 : options.abortSignal;\n                if (abortSignal) {\n                    abortSignal.addEventListener(\"abort\", ()=>{\n                        cleanup();\n                        reject(new Error(\"Aborted\"));\n                    });\n                }\n                openPromise.catch((e)=>{\n                    cleanup();\n                    reject(e);\n                });\n            });\n        });\n    }\n    async openAuthCodeUrl(scopeArray, options) {\n        // Initialize CryptoProvider instance\n        const cryptoProvider = new _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.CryptoProvider();\n        // Generate PKCE Codes before starting the authorization flow\n        this.pkceCodes = await cryptoProvider.generatePkceCodes();\n        const authCodeUrlParameters = {\n            scopes: scopeArray,\n            correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n            redirectUri: this.redirectUri,\n            authority: options === null || options === void 0 ? void 0 : options.authority,\n            claims: options === null || options === void 0 ? void 0 : options.claims,\n            loginHint: this.loginHint,\n            codeChallenge: this.pkceCodes.challenge,\n            codeChallengeMethod: \"S256\"\n        };\n        const response = await this.getApp(\"public\", options === null || options === void 0 ? void 0 : options.enableCae).getAuthCodeUrl(authCodeUrlParameters);\n        try {\n            // A new instance on macOS only which allows it to not hang, does not fix the issue on linux\n            await interactiveBrowserMockable.open(response, {\n                wait: true,\n                newInstance: true\n            });\n        } catch (e) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_7__.CredentialUnavailableError(`InteractiveBrowserCredential: Could not open a browser window. Error: ${e.message}`);\n        }\n    }\n} //# sourceMappingURL=msalOpenBrowser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalOpenBrowser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalUsernamePassword.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalUsernamePassword.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalUsernamePassword: () => (/* binding */ MsalUsernamePassword)\n/* harmony export */ });\n/* harmony import */ var _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * MSAL username and password client. Calls to the MSAL's public application's `acquireTokenByUsernamePassword` during `doGetToken`.\n * @internal\n */ class MsalUsernamePassword extends _msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__.MsalNode {\n    constructor(options){\n        super(options);\n        this.username = options.username;\n        this.password = options.password;\n    }\n    async doGetToken(scopes, options) {\n        try {\n            const requestOptions = {\n                scopes,\n                username: this.username,\n                password: this.password,\n                correlationId: options === null || options === void 0 ? void 0 : options.correlationId,\n                authority: options === null || options === void 0 ? void 0 : options.authority,\n                claims: options === null || options === void 0 ? void 0 : options.claims\n            };\n            const result = await this.getApp(\"public\", options === null || options === void 0 ? void 0 : options.enableCae).acquireTokenByUsernamePassword(requestOptions);\n            return this.handleResult(scopes, this.clientId, result || undefined);\n        } catch (error) {\n            throw this.handleError(scopes, error, options);\n        }\n    }\n} //# sourceMappingURL=msalUsernamePassword.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9tc2FsL25vZGVGbG93cy9tc2FsVXNlcm5hbWVQYXNzd29yZC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDVTtBQUM1Qzs7O0NBR0MsR0FDTSxNQUFNQyw2QkFBNkJELHFEQUFRQTtJQUM5Q0UsWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNDLFFBQVEsR0FBR0QsUUFBUUMsUUFBUTtRQUNoQyxJQUFJLENBQUNDLFFBQVEsR0FBR0YsUUFBUUUsUUFBUTtJQUNwQztJQUNBLE1BQU1DLFdBQVdDLE1BQU0sRUFBRUosT0FBTyxFQUFFO1FBQzlCLElBQUk7WUFDQSxNQUFNSyxpQkFBaUI7Z0JBQ25CRDtnQkFDQUgsVUFBVSxJQUFJLENBQUNBLFFBQVE7Z0JBQ3ZCQyxVQUFVLElBQUksQ0FBQ0EsUUFBUTtnQkFDdkJJLGVBQWVOLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTSxhQUFhO2dCQUN0RkMsV0FBV1AsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFPLFNBQVM7Z0JBQzlFQyxRQUFRUixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVEsTUFBTTtZQUM1RTtZQUNBLE1BQU1DLFNBQVMsTUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQyxVQUFVVixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVcsU0FBUyxFQUFFQyw4QkFBOEIsQ0FBQ1A7WUFDL0ksT0FBTyxJQUFJLENBQUNRLFlBQVksQ0FBQ1QsUUFBUSxJQUFJLENBQUNVLFFBQVEsRUFBRUwsVUFBVU07UUFDOUQsRUFDQSxPQUFPQyxPQUFPO1lBQ1YsTUFBTSxJQUFJLENBQUNDLFdBQVcsQ0FBQ2IsUUFBUVksT0FBT2hCO1FBQzFDO0lBQ0o7QUFDSixFQUNBLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvbXNhbC9ub2RlRmxvd3MvbXNhbFVzZXJuYW1lUGFzc3dvcmQuanM/ZmNiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IE1zYWxOb2RlIH0gZnJvbSBcIi4vbXNhbE5vZGVDb21tb25cIjtcbi8qKlxuICogTVNBTCB1c2VybmFtZSBhbmQgcGFzc3dvcmQgY2xpZW50LiBDYWxscyB0byB0aGUgTVNBTCdzIHB1YmxpYyBhcHBsaWNhdGlvbidzIGBhY3F1aXJlVG9rZW5CeVVzZXJuYW1lUGFzc3dvcmRgIGR1cmluZyBgZG9HZXRUb2tlbmAuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIE1zYWxVc2VybmFtZVBhc3N3b3JkIGV4dGVuZHMgTXNhbE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBvcHRpb25zLnVzZXJuYW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gb3B0aW9ucy5wYXNzd29yZDtcbiAgICB9XG4gICAgYXN5bmMgZG9HZXRUb2tlbihzY29wZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHNjb3BlcyxcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdGhpcy51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogdGhpcy5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICBjb3JyZWxhdGlvbklkOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29ycmVsYXRpb25JZCxcbiAgICAgICAgICAgICAgICBhdXRob3JpdHk6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hdXRob3JpdHksXG4gICAgICAgICAgICAgICAgY2xhaW1zOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2xhaW1zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0QXBwKFwicHVibGljXCIsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5lbmFibGVDYWUpLmFjcXVpcmVUb2tlbkJ5VXNlcm5hbWVQYXNzd29yZChyZXF1ZXN0T3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXN1bHQoc2NvcGVzLCB0aGlzLmNsaWVudElkLCByZXN1bHQgfHwgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMuaGFuZGxlRXJyb3Ioc2NvcGVzLCBlcnJvciwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tc2FsVXNlcm5hbWVQYXNzd29yZC5qcy5tYXAiXSwibmFtZXMiOlsiTXNhbE5vZGUiLCJNc2FsVXNlcm5hbWVQYXNzd29yZCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJkb0dldFRva2VuIiwic2NvcGVzIiwicmVxdWVzdE9wdGlvbnMiLCJjb3JyZWxhdGlvbklkIiwiYXV0aG9yaXR5IiwiY2xhaW1zIiwicmVzdWx0IiwiZ2V0QXBwIiwiZW5hYmxlQ2FlIiwiYWNxdWlyZVRva2VuQnlVc2VybmFtZVBhc3N3b3JkIiwiaGFuZGxlUmVzdWx0IiwiY2xpZW50SWQiLCJ1bmRlZmluZWQiLCJlcnJvciIsImhhbmRsZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalUsernamePassword.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/msal/utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsalBaseUtilities: () => (/* binding */ MsalBaseUtilities),\n/* harmony export */   defaultLoggerCallback: () => (/* binding */ defaultLoggerCallback),\n/* harmony export */   deserializeAuthenticationRecord: () => (/* binding */ deserializeAuthenticationRecord),\n/* harmony export */   ensureValidMsalToken: () => (/* binding */ ensureValidMsalToken),\n/* harmony export */   getAuthority: () => (/* binding */ getAuthority),\n/* harmony export */   getKnownAuthorities: () => (/* binding */ getKnownAuthorities),\n/* harmony export */   getMSALLogLevel: () => (/* binding */ getMSALLogLevel),\n/* harmony export */   msalToPublic: () => (/* binding */ msalToPublic),\n/* harmony export */   publicToMsal: () => (/* binding */ publicToMsal),\n/* harmony export */   serializeAuthenticationRecord: () => (/* binding */ serializeAuthenticationRecord)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-node */ \"(rsc)/./node_modules/@azure/msal-node/dist/index.mjs\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n/* harmony import */ var _util_logging__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n/**\n * Latest AuthenticationRecord version\n * @internal\n */ const LatestAuthenticationRecordVersion = \"1.0\";\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */ function ensureValidMsalToken(scopes, logger, msalToken, getTokenOptions) {\n    const error = (message)=>{\n        logger.getToken.info(message);\n        return new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthenticationRequiredError({\n            scopes: Array.isArray(scopes) ? scopes : [\n                scopes\n            ],\n            getTokenOptions,\n            message\n        });\n    };\n    if (!msalToken) {\n        throw error(\"No response\");\n    }\n    if (!msalToken.expiresOn) {\n        throw error(`Response had no \"expiresOn\" property.`);\n    }\n    if (!msalToken.accessToken) {\n        throw error(`Response had no \"accessToken\" property.`);\n    }\n}\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */ function getAuthority(tenantId, host) {\n    if (!host) {\n        host = _constants__WEBPACK_IMPORTED_MODULE_3__.DefaultAuthorityHost;\n    }\n    if (new RegExp(`${tenantId}/?$`).test(host)) {\n        return host;\n    }\n    if (host.endsWith(\"/\")) {\n        return host + tenantId;\n    } else {\n        return `${host}/${tenantId}`;\n    }\n}\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */ function getKnownAuthorities(tenantId, authorityHost, disableInstanceDiscovery) {\n    if (tenantId === \"adfs\" && authorityHost || disableInstanceDiscovery) {\n        return [\n            authorityHost\n        ];\n    }\n    return [];\n}\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param logger - The logger of the credential.\n * @internal\n */ const defaultLoggerCallback = (logger, platform = _azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode ? \"Node\" : \"Browser\")=>(level, message, containsPii)=>{\n        if (containsPii) {\n            return;\n        }\n        switch(level){\n            case _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error:\n                logger.info(`MSAL ${platform} V2 error: ${message}`);\n                return;\n            case _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Info:\n                logger.info(`MSAL ${platform} V2 info message: ${message}`);\n                return;\n            case _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Verbose:\n                logger.info(`MSAL ${platform} V2 verbose message: ${message}`);\n                return;\n            case _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning:\n                logger.info(`MSAL ${platform} V2 warning: ${message}`);\n                return;\n        }\n    };\n/**\n * @internal\n */ function getMSALLogLevel(logLevel) {\n    switch(logLevel){\n        case \"error\":\n            return _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error;\n        case \"info\":\n            return _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Info;\n        case \"verbose\":\n            return _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Verbose;\n        case \"warning\":\n            return _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warning;\n        default:\n            // default msal logging level should be Info\n            return _azure_msal_node__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Info;\n    }\n}\n/**\n * The common utility functions for the MSAL clients.\n * Defined as a class so that the classes extending this one can have access to its methods and protected properties.\n *\n * It keeps track of a logger and an in-memory copy of the AuthenticationRecord.\n *\n * @internal\n */ class MsalBaseUtilities {\n    constructor(options){\n        this.logger = options.logger;\n        this.account = options.authenticationRecord;\n    }\n    /**\n     * Generates a UUID\n     */ generateUuid() {\n        return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.randomUUID)();\n    }\n    /**\n     * Handles the MSAL authentication result.\n     * If the result has an account, we update the local account reference.\n     * If the token received is invalid, an error will be thrown depending on what's missing.\n     */ handleResult(scopes, clientId, result, getTokenOptions) {\n        if (result === null || result === void 0 ? void 0 : result.account) {\n            this.account = msalToPublic(clientId, result.account);\n        }\n        ensureValidMsalToken(scopes, this.logger, result, getTokenOptions);\n        this.logger.getToken.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_4__.formatSuccess)(scopes));\n        return {\n            token: result.accessToken,\n            expiresOnTimestamp: result.expiresOn.getTime()\n        };\n    }\n    /**\n     * Handles MSAL errors.\n     */ handleError(scopes, error, getTokenOptions) {\n        if (error.name === \"AuthError\" || error.name === \"ClientAuthError\" || error.name === \"BrowserAuthError\") {\n            const msalError = error;\n            switch(msalError.errorCode){\n                case \"endpoints_resolution_error\":\n                    this.logger.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_4__.formatError)(scopes, error.message));\n                    return new _errors__WEBPACK_IMPORTED_MODULE_2__.CredentialUnavailableError(error.message);\n                case \"device_code_polling_cancelled\":\n                    return new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_5__.AbortError(\"The authentication has been aborted by the caller.\");\n                case \"consent_required\":\n                case \"interaction_required\":\n                case \"login_required\":\n                    this.logger.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_4__.formatError)(scopes, `Authentication returned errorCode ${msalError.errorCode}`));\n                    break;\n                default:\n                    this.logger.info((0,_util_logging__WEBPACK_IMPORTED_MODULE_4__.formatError)(scopes, `Failed to acquire token: ${error.message}`));\n                    break;\n            }\n        }\n        if (error.name === \"ClientConfigurationError\" || error.name === \"BrowserConfigurationAuthError\" || error.name === \"AbortError\") {\n            return error;\n        }\n        return new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthenticationRequiredError({\n            scopes,\n            getTokenOptions,\n            message: error.message\n        });\n    }\n}\n// transformations.ts\nfunction publicToMsal(account) {\n    const [environment] = account.authority.match(/([a-z]*\\.[a-z]*\\.[a-z]*)/) || [\n        \"\"\n    ];\n    return Object.assign(Object.assign({}, account), {\n        localAccountId: account.homeAccountId,\n        environment\n    });\n}\nfunction msalToPublic(clientId, account) {\n    const record = {\n        authority: getAuthority(account.tenantId, account.environment),\n        homeAccountId: account.homeAccountId,\n        tenantId: account.tenantId || _constants__WEBPACK_IMPORTED_MODULE_3__.DefaultTenantId,\n        username: account.username,\n        clientId,\n        version: LatestAuthenticationRecordVersion\n    };\n    return record;\n}\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */ function serializeAuthenticationRecord(record) {\n    return JSON.stringify(record);\n}\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */ function deserializeAuthenticationRecord(serializedRecord) {\n    const parsed = JSON.parse(serializedRecord);\n    if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n        throw Error(\"Unsupported AuthenticationRecord version\");\n    }\n    return parsed;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/plugins/consumer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/plugins/consumer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIdentityPlugin: () => (/* binding */ useIdentityPlugin)\n/* harmony export */ });\n/* harmony import */ var _msal_nodeFlows_msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../msal/nodeFlows/msalNodeCommon */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/msal/nodeFlows/msalNodeCommon.js\");\n/* harmony import */ var _credentials_visualStudioCodeCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../credentials/visualStudioCodeCredential */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/credentials/visualStudioCodeCredential.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * The context passed to an Identity plugin. This contains objects that\n * plugins can use to set backend implementations.\n * @internal\n */ const pluginContext = {\n    cachePluginControl: _msal_nodeFlows_msalNodeCommon__WEBPACK_IMPORTED_MODULE_0__.msalNodeFlowCacheControl,\n    vsCodeCredentialControl: _credentials_visualStudioCodeCredential__WEBPACK_IMPORTED_MODULE_1__.vsCodeCredentialControl\n};\n/**\n * Extend Azure Identity with additional functionality. Pass a plugin from\n * a plugin package, such as:\n *\n * - `@azure/identity-cache-persistence`: provides persistent token caching\n * - `@azure/identity-vscode`: provides the dependencies of\n *   `VisualStudioCodeCredential` and enables it\n *\n * Example:\n *\n * ```javascript\n * import { cachePersistencePlugin } from \"@azure/identity-cache-persistence\";\n *\n * import { useIdentityPlugin, DefaultAzureCredential } from \"@azure/identity\";\n * useIdentityPlugin(cachePersistencePlugin);\n *\n * // The plugin has the capability to extend `DefaultAzureCredential` and to\n * // add middleware to the underlying credentials, such as persistence.\n * const credential = new DefaultAzureCredential({\n *   tokenCachePersistenceOptions: {\n *     enabled: true\n *   }\n * });\n * ```\n *\n * @param plugin - the plugin to register\n */ function useIdentityPlugin(plugin) {\n    plugin(pluginContext);\n} //# sourceMappingURL=consumer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy9wbHVnaW5zL2NvbnN1bWVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDMEM7QUFDUTtBQUNwRjs7OztDQUlDLEdBQ0QsTUFBTUUsZ0JBQWdCO0lBQ2xCQyxvQkFBb0JILG9GQUF3QkE7SUFDNUNDLHlCQUF5QkEsNEZBQXVCQTtBQUNwRDtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTBCQyxHQUNNLFNBQVNHLGtCQUFrQkMsTUFBTTtJQUNwQ0EsT0FBT0g7QUFDWCxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9pZGVudGl0eS9kaXN0LWVzbS9zcmMvcGx1Z2lucy9jb25zdW1lci5qcz8zYWI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgbXNhbE5vZGVGbG93Q2FjaGVDb250cm9sIH0gZnJvbSBcIi4uL21zYWwvbm9kZUZsb3dzL21zYWxOb2RlQ29tbW9uXCI7XG5pbXBvcnQgeyB2c0NvZGVDcmVkZW50aWFsQ29udHJvbCB9IGZyb20gXCIuLi9jcmVkZW50aWFscy92aXN1YWxTdHVkaW9Db2RlQ3JlZGVudGlhbFwiO1xuLyoqXG4gKiBUaGUgY29udGV4dCBwYXNzZWQgdG8gYW4gSWRlbnRpdHkgcGx1Z2luLiBUaGlzIGNvbnRhaW5zIG9iamVjdHMgdGhhdFxuICogcGx1Z2lucyBjYW4gdXNlIHRvIHNldCBiYWNrZW5kIGltcGxlbWVudGF0aW9ucy5cbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCBwbHVnaW5Db250ZXh0ID0ge1xuICAgIGNhY2hlUGx1Z2luQ29udHJvbDogbXNhbE5vZGVGbG93Q2FjaGVDb250cm9sLFxuICAgIHZzQ29kZUNyZWRlbnRpYWxDb250cm9sOiB2c0NvZGVDcmVkZW50aWFsQ29udHJvbCxcbn07XG4vKipcbiAqIEV4dGVuZCBBenVyZSBJZGVudGl0eSB3aXRoIGFkZGl0aW9uYWwgZnVuY3Rpb25hbGl0eS4gUGFzcyBhIHBsdWdpbiBmcm9tXG4gKiBhIHBsdWdpbiBwYWNrYWdlLCBzdWNoIGFzOlxuICpcbiAqIC0gYEBhenVyZS9pZGVudGl0eS1jYWNoZS1wZXJzaXN0ZW5jZWA6IHByb3ZpZGVzIHBlcnNpc3RlbnQgdG9rZW4gY2FjaGluZ1xuICogLSBgQGF6dXJlL2lkZW50aXR5LXZzY29kZWA6IHByb3ZpZGVzIHRoZSBkZXBlbmRlbmNpZXMgb2ZcbiAqICAgYFZpc3VhbFN0dWRpb0NvZGVDcmVkZW50aWFsYCBhbmQgZW5hYmxlcyBpdFxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHsgY2FjaGVQZXJzaXN0ZW5jZVBsdWdpbiB9IGZyb20gXCJAYXp1cmUvaWRlbnRpdHktY2FjaGUtcGVyc2lzdGVuY2VcIjtcbiAqXG4gKiBpbXBvcnQgeyB1c2VJZGVudGl0eVBsdWdpbiwgRGVmYXVsdEF6dXJlQ3JlZGVudGlhbCB9IGZyb20gXCJAYXp1cmUvaWRlbnRpdHlcIjtcbiAqIHVzZUlkZW50aXR5UGx1Z2luKGNhY2hlUGVyc2lzdGVuY2VQbHVnaW4pO1xuICpcbiAqIC8vIFRoZSBwbHVnaW4gaGFzIHRoZSBjYXBhYmlsaXR5IHRvIGV4dGVuZCBgRGVmYXVsdEF6dXJlQ3JlZGVudGlhbGAgYW5kIHRvXG4gKiAvLyBhZGQgbWlkZGxld2FyZSB0byB0aGUgdW5kZXJseWluZyBjcmVkZW50aWFscywgc3VjaCBhcyBwZXJzaXN0ZW5jZS5cbiAqIGNvbnN0IGNyZWRlbnRpYWwgPSBuZXcgRGVmYXVsdEF6dXJlQ3JlZGVudGlhbCh7XG4gKiAgIHRva2VuQ2FjaGVQZXJzaXN0ZW5jZU9wdGlvbnM6IHtcbiAqICAgICBlbmFibGVkOiB0cnVlXG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHBsdWdpbiAtIHRoZSBwbHVnaW4gdG8gcmVnaXN0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUlkZW50aXR5UGx1Z2luKHBsdWdpbikge1xuICAgIHBsdWdpbihwbHVnaW5Db250ZXh0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN1bWVyLmpzLm1hcCJdLCJuYW1lcyI6WyJtc2FsTm9kZUZsb3dDYWNoZUNvbnRyb2wiLCJ2c0NvZGVDcmVkZW50aWFsQ29udHJvbCIsInBsdWdpbkNvbnRleHQiLCJjYWNoZVBsdWdpbkNvbnRyb2wiLCJ1c2VJZGVudGl0eVBsdWdpbiIsInBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/plugins/consumer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/regionalAuthority.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/regionalAuthority.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegionalAuthority: () => (/* binding */ RegionalAuthority)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Helps specify a regional authority, or \"AutoDiscoverRegion\" to auto-detect the region.\n */ var RegionalAuthority;\n(function(RegionalAuthority) {\n    /** Instructs MSAL to attempt to discover the region */ RegionalAuthority[\"AutoDiscoverRegion\"] = \"AutoDiscoverRegion\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westus' region. */ RegionalAuthority[\"USWest\"] = \"westus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westus2' region. */ RegionalAuthority[\"USWest2\"] = \"westus2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'centralus' region. */ RegionalAuthority[\"USCentral\"] = \"centralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastus' region. */ RegionalAuthority[\"USEast\"] = \"eastus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastus2' region. */ RegionalAuthority[\"USEast2\"] = \"eastus2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'northcentralus' region. */ RegionalAuthority[\"USNorthCentral\"] = \"northcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southcentralus' region. */ RegionalAuthority[\"USSouthCentral\"] = \"southcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westcentralus' region. */ RegionalAuthority[\"USWestCentral\"] = \"westcentralus\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'canadacentral' region. */ RegionalAuthority[\"CanadaCentral\"] = \"canadacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'canadaeast' region. */ RegionalAuthority[\"CanadaEast\"] = \"canadaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'brazilsouth' region. */ RegionalAuthority[\"BrazilSouth\"] = \"brazilsouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'northeurope' region. */ RegionalAuthority[\"EuropeNorth\"] = \"northeurope\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westeurope' region. */ RegionalAuthority[\"EuropeWest\"] = \"westeurope\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uksouth' region. */ RegionalAuthority[\"UKSouth\"] = \"uksouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'ukwest' region. */ RegionalAuthority[\"UKWest\"] = \"ukwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'francecentral' region. */ RegionalAuthority[\"FranceCentral\"] = \"francecentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'francesouth' region. */ RegionalAuthority[\"FranceSouth\"] = \"francesouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'switzerlandnorth' region. */ RegionalAuthority[\"SwitzerlandNorth\"] = \"switzerlandnorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'switzerlandwest' region. */ RegionalAuthority[\"SwitzerlandWest\"] = \"switzerlandwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanynorth' region. */ RegionalAuthority[\"GermanyNorth\"] = \"germanynorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanywestcentral' region. */ RegionalAuthority[\"GermanyWestCentral\"] = \"germanywestcentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'norwaywest' region. */ RegionalAuthority[\"NorwayWest\"] = \"norwaywest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'norwayeast' region. */ RegionalAuthority[\"NorwayEast\"] = \"norwayeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'eastasia' region. */ RegionalAuthority[\"AsiaEast\"] = \"eastasia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southeastasia' region. */ RegionalAuthority[\"AsiaSouthEast\"] = \"southeastasia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'japaneast' region. */ RegionalAuthority[\"JapanEast\"] = \"japaneast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'japanwest' region. */ RegionalAuthority[\"JapanWest\"] = \"japanwest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiaeast' region. */ RegionalAuthority[\"AustraliaEast\"] = \"australiaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiasoutheast' region. */ RegionalAuthority[\"AustraliaSouthEast\"] = \"australiasoutheast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiacentral' region. */ RegionalAuthority[\"AustraliaCentral\"] = \"australiacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'australiacentral2' region. */ RegionalAuthority[\"AustraliaCentral2\"] = \"australiacentral2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'centralindia' region. */ RegionalAuthority[\"IndiaCentral\"] = \"centralindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southindia' region. */ RegionalAuthority[\"IndiaSouth\"] = \"southindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'westindia' region. */ RegionalAuthority[\"IndiaWest\"] = \"westindia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'koreasouth' region. */ RegionalAuthority[\"KoreaSouth\"] = \"koreasouth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'koreacentral' region. */ RegionalAuthority[\"KoreaCentral\"] = \"koreacentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uaecentral' region. */ RegionalAuthority[\"UAECentral\"] = \"uaecentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'uaenorth' region. */ RegionalAuthority[\"UAENorth\"] = \"uaenorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southafricanorth' region. */ RegionalAuthority[\"SouthAfricaNorth\"] = \"southafricanorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'southafricawest' region. */ RegionalAuthority[\"SouthAfricaWest\"] = \"southafricawest\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinanorth' region. */ RegionalAuthority[\"ChinaNorth\"] = \"chinanorth\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinaeast' region. */ RegionalAuthority[\"ChinaEast\"] = \"chinaeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinanorth2' region. */ RegionalAuthority[\"ChinaNorth2\"] = \"chinanorth2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'chinaeast2' region. */ RegionalAuthority[\"ChinaEast2\"] = \"chinaeast2\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanycentral' region. */ RegionalAuthority[\"GermanyCentral\"] = \"germanycentral\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'germanynortheast' region. */ RegionalAuthority[\"GermanyNorthEast\"] = \"germanynortheast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovvirginia' region. */ RegionalAuthority[\"GovernmentUSVirginia\"] = \"usgovvirginia\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgoviowa' region. */ RegionalAuthority[\"GovernmentUSIowa\"] = \"usgoviowa\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovarizona' region. */ RegionalAuthority[\"GovernmentUSArizona\"] = \"usgovarizona\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usgovtexas' region. */ RegionalAuthority[\"GovernmentUSTexas\"] = \"usgovtexas\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usdodeast' region. */ RegionalAuthority[\"GovernmentUSDodEast\"] = \"usdodeast\";\n    /** Uses the {@link RegionalAuthority} for the Azure 'usdodcentral' region. */ RegionalAuthority[\"GovernmentUSDodCentral\"] = \"usdodcentral\";\n})(RegionalAuthority || (RegionalAuthority = {})); //# sourceMappingURL=regionalAuthority.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/regionalAuthority.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/util/identityTokenEndpoint.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/util/identityTokenEndpoint.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getIdentityTokenEndpointSuffix: () => (/* binding */ getIdentityTokenEndpointSuffix)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction getIdentityTokenEndpointSuffix(tenantId) {\n    if (tenantId === \"adfs\") {\n        return \"oauth2/token\";\n    } else {\n        return \"oauth2/v2.0/token\";\n    }\n} //# sourceMappingURL=identityTokenEndpoint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL2lkZW50aXR5VG9rZW5FbmRwb2ludC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUMzQixTQUFTQSwrQkFBK0JDLFFBQVE7SUFDbkQsSUFBSUEsYUFBYSxRQUFRO1FBQ3JCLE9BQU87SUFDWCxPQUNLO1FBQ0QsT0FBTztJQUNYO0FBQ0osRUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL3V0aWwvaWRlbnRpdHlUb2tlbkVuZHBvaW50LmpzPzdjZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRlbnRpdHlUb2tlbkVuZHBvaW50U3VmZml4KHRlbmFudElkKSB7XG4gICAgaWYgKHRlbmFudElkID09PSBcImFkZnNcIikge1xuICAgICAgICByZXR1cm4gXCJvYXV0aDIvdG9rZW5cIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm9hdXRoMi92Mi4wL3Rva2VuXCI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHlUb2tlbkVuZHBvaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRJZGVudGl0eVRva2VuRW5kcG9pbnRTdWZmaXgiLCJ0ZW5hbnRJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/util/identityTokenEndpoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/util/logging.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   credentialLogger: () => (/* binding */ credentialLogger),\n/* harmony export */   credentialLoggerInstance: () => (/* binding */ credentialLoggerInstance),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   formatSuccess: () => (/* binding */ formatSuccess),\n/* harmony export */   logEnvVars: () => (/* binding */ logEnvVars),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   processEnvVars: () => (/* binding */ processEnvVars)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The AzureLogger used for all clients within the identity package\n */ const logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"identity\");\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */ function processEnvVars(supportedEnvVars) {\n    return supportedEnvVars.reduce((acc, envVariable)=>{\n        if (process.env[envVariable]) {\n            acc.assigned.push(envVariable);\n        } else {\n            acc.missing.push(envVariable);\n        }\n        return acc;\n    }, {\n        missing: [],\n        assigned: []\n    });\n}\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */ function logEnvVars(credentialName, supportedEnvVars) {\n    const { assigned } = processEnvVars(supportedEnvVars);\n    logger.info(`${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`);\n}\n/**\n * Formatting the success event on the credentials\n */ function formatSuccess(scope) {\n    return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n/**\n * Formatting the success event on the credentials\n */ function formatError(scope, error) {\n    let message = \"ERROR.\";\n    if (scope === null || scope === void 0 ? void 0 : scope.length) {\n        message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n    }\n    return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */ function credentialLoggerInstance(title, parent, log = logger) {\n    const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n    function info(message) {\n        log.info(`${fullTitle} =>`, message);\n    }\n    function warning(message) {\n        log.warning(`${fullTitle} =>`, message);\n    }\n    function verbose(message) {\n        log.verbose(`${fullTitle} =>`, message);\n    }\n    return {\n        title,\n        fullTitle,\n        info,\n        warning,\n        verbose\n    };\n}\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */ function credentialLogger(title, log = logger) {\n    const credLogger = credentialLoggerInstance(title, undefined, log);\n    return Object.assign(Object.assign({}, credLogger), {\n        parent: log,\n        getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log)\n    });\n} //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL2xvZ2dpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2lCO0FBQ25EOztDQUVDLEdBQ00sTUFBTUMsU0FBU0QsaUVBQWtCQSxDQUFDLFlBQVk7QUFDckQ7OztDQUdDLEdBQ00sU0FBU0UsZUFBZUMsZ0JBQWdCO0lBQzNDLE9BQU9BLGlCQUFpQkMsTUFBTSxDQUFDLENBQUNDLEtBQUtDO1FBQ2pDLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0YsWUFBWSxFQUFFO1lBQzFCRCxJQUFJSSxRQUFRLENBQUNDLElBQUksQ0FBQ0o7UUFDdEIsT0FDSztZQUNERCxJQUFJTSxPQUFPLENBQUNELElBQUksQ0FBQ0o7UUFDckI7UUFDQSxPQUFPRDtJQUNYLEdBQUc7UUFBRU0sU0FBUyxFQUFFO1FBQUVGLFVBQVUsRUFBRTtJQUFDO0FBQ25DO0FBQ0E7Ozs7O0NBS0MsR0FDTSxTQUFTRyxXQUFXQyxjQUFjLEVBQUVWLGdCQUFnQjtJQUN2RCxNQUFNLEVBQUVNLFFBQVEsRUFBRSxHQUFHUCxlQUFlQztJQUNwQ0YsT0FBT2EsSUFBSSxDQUFDLENBQUMsRUFBRUQsZUFBZSwrQ0FBK0MsRUFBRUosU0FBU00sSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN4RztBQUNBOztDQUVDLEdBQ00sU0FBU0MsY0FBY0MsS0FBSztJQUMvQixPQUFPLENBQUMsaUJBQWlCLEVBQUVDLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0EsTUFBTUYsSUFBSSxDQUFDLFFBQVFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2pGO0FBQ0E7O0NBRUMsR0FDTSxTQUFTRyxZQUFZSCxLQUFLLEVBQUVJLEtBQUs7SUFDcEMsSUFBSUMsVUFBVTtJQUNkLElBQUlMLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNTSxNQUFNLEVBQUU7UUFDNURELFdBQVcsQ0FBQyxTQUFTLEVBQUVKLE1BQU1DLE9BQU8sQ0FBQ0YsU0FBU0EsTUFBTUYsSUFBSSxDQUFDLFFBQVFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdFO0lBQ0EsT0FBTyxDQUFDLEVBQUVLLFFBQVEsZ0JBQWdCLEVBQUUsT0FBT0QsVUFBVSxXQUFXQSxRQUFRQSxNQUFNQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzVGO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNFLHlCQUF5QkMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE1BQU0xQixNQUFNO0lBQ2hFLE1BQU0yQixZQUFZRixTQUFTLENBQUMsRUFBRUEsT0FBT0UsU0FBUyxDQUFDLENBQUMsRUFBRUgsTUFBTSxDQUFDLEdBQUdBO0lBQzVELFNBQVNYLEtBQUtRLE9BQU87UUFDakJLLElBQUliLElBQUksQ0FBQyxDQUFDLEVBQUVjLFVBQVUsR0FBRyxDQUFDLEVBQUVOO0lBQ2hDO0lBQ0EsU0FBU08sUUFBUVAsT0FBTztRQUNwQkssSUFBSUUsT0FBTyxDQUFDLENBQUMsRUFBRUQsVUFBVSxHQUFHLENBQUMsRUFBRU47SUFDbkM7SUFDQSxTQUFTUSxRQUFRUixPQUFPO1FBQ3BCSyxJQUFJRyxPQUFPLENBQUMsQ0FBQyxFQUFFRixVQUFVLEdBQUcsQ0FBQyxFQUFFTjtJQUNuQztJQUNBLE9BQU87UUFDSEc7UUFDQUc7UUFDQWQ7UUFDQWU7UUFDQUM7SUFDSjtBQUNKO0FBQ0E7Ozs7Ozs7OztDQVNDLEdBQ00sU0FBU0MsaUJBQWlCTixLQUFLLEVBQUVFLE1BQU0xQixNQUFNO0lBQ2hELE1BQU0rQixhQUFhUix5QkFBeUJDLE9BQU9RLFdBQVdOO0lBQzlELE9BQU9PLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR0gsYUFBYTtRQUFFTixRQUFRQztRQUFLUyxVQUFVWix5QkFBeUIsaUJBQWlCUSxZQUFZTDtJQUFLO0FBQzVJLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL2xvZ2dpbmcuanM/ZDhjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUNsaWVudExvZ2dlciB9IGZyb20gXCJAYXp1cmUvbG9nZ2VyXCI7XG4vKipcbiAqIFRoZSBBenVyZUxvZ2dlciB1c2VkIGZvciBhbGwgY2xpZW50cyB3aXRoaW4gdGhlIGlkZW50aXR5IHBhY2thZ2VcbiAqL1xuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IGNyZWF0ZUNsaWVudExvZ2dlcihcImlkZW50aXR5XCIpO1xuLyoqXG4gKiBTZXBhcmF0ZXMgYSBsaXN0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlIG5hbWVzIGludG8gYSBwbGFpbiBvYmplY3Qgd2l0aCB0d28gYXJyYXlzOiBhbiBhcnJheSBvZiBtaXNzaW5nIGVudmlyb25tZW50IHZhcmlhYmxlcyBhbmQgYW5vdGhlciBhcnJheSB3aXRoIGFzc2lnbmVkIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAqIEBwYXJhbSBzdXBwb3J0ZWRFbnZWYXJzIC0gTGlzdCBvZiBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0VudlZhcnMoc3VwcG9ydGVkRW52VmFycykge1xuICAgIHJldHVybiBzdXBwb3J0ZWRFbnZWYXJzLnJlZHVjZSgoYWNjLCBlbnZWYXJpYWJsZSkgPT4ge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnZbZW52VmFyaWFibGVdKSB7XG4gICAgICAgICAgICBhY2MuYXNzaWduZWQucHVzaChlbnZWYXJpYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhY2MubWlzc2luZy5wdXNoKGVudlZhcmlhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHsgbWlzc2luZzogW10sIGFzc2lnbmVkOiBbXSB9KTtcbn1cbi8qKlxuICogQmFzZWQgb24gYSBnaXZlbiBsaXN0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlIG5hbWVzLFxuICogbG9ncyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIGN1cnJlbnRseSBhc3NpZ25lZCBkdXJpbmcgdGhlIHVzYWdlIG9mIGEgY3JlZGVudGlhbCB0aGF0IGdvZXMgYnkgdGhlIGdpdmVuIG5hbWUuXG4gKiBAcGFyYW0gY3JlZGVudGlhbE5hbWUgLSBOYW1lIG9mIHRoZSBjcmVkZW50aWFsIGluIHVzZVxuICogQHBhcmFtIHN1cHBvcnRlZEVudlZhcnMgLSBMaXN0IG9mIGVudmlyb25tZW50IHZhcmlhYmxlcyBzdXBwb3J0ZWQgYnkgdGhhdCBjcmVkZW50aWFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2dFbnZWYXJzKGNyZWRlbnRpYWxOYW1lLCBzdXBwb3J0ZWRFbnZWYXJzKSB7XG4gICAgY29uc3QgeyBhc3NpZ25lZCB9ID0gcHJvY2Vzc0VudlZhcnMoc3VwcG9ydGVkRW52VmFycyk7XG4gICAgbG9nZ2VyLmluZm8oYCR7Y3JlZGVudGlhbE5hbWV9ID0+IEZvdW5kIHRoZSBmb2xsb3dpbmcgZW52aXJvbm1lbnQgdmFyaWFibGVzOiAke2Fzc2lnbmVkLmpvaW4oXCIsIFwiKX1gKTtcbn1cbi8qKlxuICogRm9ybWF0dGluZyB0aGUgc3VjY2VzcyBldmVudCBvbiB0aGUgY3JlZGVudGlhbHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFN1Y2Nlc3Moc2NvcGUpIHtcbiAgICByZXR1cm4gYFNVQ0NFU1MuIFNjb3BlczogJHtBcnJheS5pc0FycmF5KHNjb3BlKSA/IHNjb3BlLmpvaW4oXCIsIFwiKSA6IHNjb3BlfS5gO1xufVxuLyoqXG4gKiBGb3JtYXR0aW5nIHRoZSBzdWNjZXNzIGV2ZW50IG9uIHRoZSBjcmVkZW50aWFsc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXJyb3Ioc2NvcGUsIGVycm9yKSB7XG4gICAgbGV0IG1lc3NhZ2UgPSBcIkVSUk9SLlwiO1xuICAgIGlmIChzY29wZSA9PT0gbnVsbCB8fCBzY29wZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NvcGUubGVuZ3RoKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gYCBTY29wZXM6ICR7QXJyYXkuaXNBcnJheShzY29wZSkgPyBzY29wZS5qb2luKFwiLCBcIikgOiBzY29wZX0uYDtcbiAgICB9XG4gICAgcmV0dXJuIGAke21lc3NhZ2V9IEVycm9yIG1lc3NhZ2U6ICR7dHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiID8gZXJyb3IgOiBlcnJvci5tZXNzYWdlfS5gO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBDcmVkZW50aWFsTG9nZ2VySW5zdGFuY2UuXG4gKlxuICogSXQgbG9ncyB3aXRoIHRoZSBmb3JtYXQ6XG4gKlxuICogICBgW3RpdGxlXSA9PiBbbWVzc2FnZV1gXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlZGVudGlhbExvZ2dlckluc3RhbmNlKHRpdGxlLCBwYXJlbnQsIGxvZyA9IGxvZ2dlcikge1xuICAgIGNvbnN0IGZ1bGxUaXRsZSA9IHBhcmVudCA/IGAke3BhcmVudC5mdWxsVGl0bGV9ICR7dGl0bGV9YCA6IHRpdGxlO1xuICAgIGZ1bmN0aW9uIGluZm8obWVzc2FnZSkge1xuICAgICAgICBsb2cuaW5mbyhgJHtmdWxsVGl0bGV9ID0+YCwgbWVzc2FnZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAgICAgICBsb2cud2FybmluZyhgJHtmdWxsVGl0bGV9ID0+YCwgbWVzc2FnZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcmJvc2UobWVzc2FnZSkge1xuICAgICAgICBsb2cudmVyYm9zZShgJHtmdWxsVGl0bGV9ID0+YCwgbWVzc2FnZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHRpdGxlLFxuICAgICAgICBmdWxsVGl0bGUsXG4gICAgICAgIGluZm8sXG4gICAgICAgIHdhcm5pbmcsXG4gICAgICAgIHZlcmJvc2UsXG4gICAgfTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgQ3JlZGVudGlhbExvZ2dlciwgd2hpY2ggaXMgYSBsb2dnZXIgZGVjbGFyZWQgYXQgdGhlIGNyZWRlbnRpYWwncyBjb25zdHJ1Y3RvciwgYW5kIHVzZWQgYXQgYW55IHBvaW50IGluIHRoZSBjcmVkZW50aWFsLlxuICogSXQgaGFzIGFsbCB0aGUgcHJvcGVydGllcyBvZiBhIENyZWRlbnRpYWxMb2dnZXJJbnN0YW5jZSwgcGx1cyBvdGhlciBsb2dnZXIgaW5zdGFuY2VzLCBvbmUgcGVyIG1ldGhvZC5cbiAqXG4gKiBJdCBsb2dzIHdpdGggdGhlIGZvcm1hdDpcbiAqXG4gKiAgIGBbdGl0bGVdID0+IFttZXNzYWdlXWBcbiAqICAgYFt0aXRsZV0gPT4gZ2V0VG9rZW4oKSA9PiBbbWVzc2FnZV1gXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlZGVudGlhbExvZ2dlcih0aXRsZSwgbG9nID0gbG9nZ2VyKSB7XG4gICAgY29uc3QgY3JlZExvZ2dlciA9IGNyZWRlbnRpYWxMb2dnZXJJbnN0YW5jZSh0aXRsZSwgdW5kZWZpbmVkLCBsb2cpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNyZWRMb2dnZXIpLCB7IHBhcmVudDogbG9nLCBnZXRUb2tlbjogY3JlZGVudGlhbExvZ2dlckluc3RhbmNlKFwiPT4gZ2V0VG9rZW4oKVwiLCBjcmVkTG9nZ2VyLCBsb2cpIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50TG9nZ2VyIiwibG9nZ2VyIiwicHJvY2Vzc0VudlZhcnMiLCJzdXBwb3J0ZWRFbnZWYXJzIiwicmVkdWNlIiwiYWNjIiwiZW52VmFyaWFibGUiLCJwcm9jZXNzIiwiZW52IiwiYXNzaWduZWQiLCJwdXNoIiwibWlzc2luZyIsImxvZ0VudlZhcnMiLCJjcmVkZW50aWFsTmFtZSIsImluZm8iLCJqb2luIiwiZm9ybWF0U3VjY2VzcyIsInNjb3BlIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9ybWF0RXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJsZW5ndGgiLCJjcmVkZW50aWFsTG9nZ2VySW5zdGFuY2UiLCJ0aXRsZSIsInBhcmVudCIsImxvZyIsImZ1bGxUaXRsZSIsIndhcm5pbmciLCJ2ZXJib3NlIiwiY3JlZGVudGlhbExvZ2dlciIsImNyZWRMb2dnZXIiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJnZXRUb2tlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processMultiTenantRequest: () => (/* binding */ processMultiTenantRequest)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/errors.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nfunction createConfigurationErrorMessage(tenantId) {\n    return `The current credential is not configured to acquire tokens for tenant ${tenantId}. To enable acquiring tokens for this tenant add it to the AdditionallyAllowedTenants on the credential options, or add \"*\" to AdditionallyAllowedTenants to allow acquiring tokens for any tenant.`;\n}\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */ function processMultiTenantRequest(tenantId, getTokenOptions, additionallyAllowedTenantIds = [], logger) {\n    var _a;\n    let resolvedTenantId;\n    if (process.env.AZURE_IDENTITY_DISABLE_MULTITENANTAUTH) {\n        resolvedTenantId = tenantId;\n    } else if (tenantId === \"adfs\") {\n        resolvedTenantId = tenantId;\n    } else {\n        resolvedTenantId = (_a = getTokenOptions === null || getTokenOptions === void 0 ? void 0 : getTokenOptions.tenantId) !== null && _a !== void 0 ? _a : tenantId;\n    }\n    if (tenantId && resolvedTenantId !== tenantId && !additionallyAllowedTenantIds.includes(\"*\") && !additionallyAllowedTenantIds.some((t)=>t.localeCompare(resolvedTenantId) === 0)) {\n        const message = createConfigurationErrorMessage(tenantId);\n        logger === null || logger === void 0 ? void 0 : logger.info(message);\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.CredentialUnavailableError(message);\n    }\n    return resolvedTenantId;\n} //# sourceMappingURL=processMultiTenantRequest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL3Byb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ3FCO0FBQ3ZELFNBQVNDLGdDQUFnQ0MsUUFBUTtJQUM3QyxPQUFPLENBQUMsc0VBQXNFLEVBQUVBLFNBQVMsbU1BQW1NLENBQUM7QUFDalM7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLDBCQUEwQkQsUUFBUSxFQUFFRSxlQUFlLEVBQUVDLCtCQUErQixFQUFFLEVBQUVDLE1BQU07SUFDMUcsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0Msc0NBQXNDLEVBQUU7UUFDcERILG1CQUFtQk47SUFDdkIsT0FDSyxJQUFJQSxhQUFhLFFBQVE7UUFDMUJNLG1CQUFtQk47SUFDdkIsT0FDSztRQUNETSxtQkFBbUIsQ0FBQ0QsS0FBS0gsb0JBQW9CLFFBQVFBLG9CQUFvQixLQUFLLElBQUksS0FBSyxJQUFJQSxnQkFBZ0JGLFFBQVEsTUFBTSxRQUFRSyxPQUFPLEtBQUssSUFBSUEsS0FBS0w7SUFDMUo7SUFDQSxJQUFJQSxZQUNBTSxxQkFBcUJOLFlBQ3JCLENBQUNHLDZCQUE2Qk8sUUFBUSxDQUFDLFFBQ3ZDLENBQUNQLDZCQUE2QlEsSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLGFBQWEsQ0FBQ1Asc0JBQXNCLElBQUk7UUFDcEYsTUFBTVEsVUFBVWYsZ0NBQWdDQztRQUNoREksV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9XLElBQUksQ0FBQ0Q7UUFDNUQsTUFBTSxJQUFJaEIsK0RBQTBCQSxDQUFDZ0I7SUFDekM7SUFDQSxPQUFPUjtBQUNYLEVBQ0EscURBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL3Byb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QuanM/ZmNlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IENyZWRlbnRpYWxVbmF2YWlsYWJsZUVycm9yIH0gZnJvbSBcIi4uL2Vycm9yc1wiO1xuZnVuY3Rpb24gY3JlYXRlQ29uZmlndXJhdGlvbkVycm9yTWVzc2FnZSh0ZW5hbnRJZCkge1xuICAgIHJldHVybiBgVGhlIGN1cnJlbnQgY3JlZGVudGlhbCBpcyBub3QgY29uZmlndXJlZCB0byBhY3F1aXJlIHRva2VucyBmb3IgdGVuYW50ICR7dGVuYW50SWR9LiBUbyBlbmFibGUgYWNxdWlyaW5nIHRva2VucyBmb3IgdGhpcyB0ZW5hbnQgYWRkIGl0IHRvIHRoZSBBZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cyBvbiB0aGUgY3JlZGVudGlhbCBvcHRpb25zLCBvciBhZGQgXCIqXCIgdG8gQWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMgdG8gYWxsb3cgYWNxdWlyaW5nIHRva2VucyBmb3IgYW55IHRlbmFudC5gO1xufVxuLyoqXG4gKiBPZiBnZXRUb2tlbiBjb250YWlucyBhIHRlbmFudElkLCB0aGlzIGZ1bmN0aW9ucyBhbGxvd3MgcGlja2luZyB0aGlzIHRlbmFudElkIGFzIHRoZSBhcHByb3ByaWF0ZSBmb3IgYXV0aGVudGljYXRpb24sXG4gKiB1bmxlc3MgbXVsdGl0ZW5hbnQgYXV0aGVudGljYXRpb24gaGFzIGJlZW4gZGlzYWJsZWQgdGhyb3VnaCB0aGUgQVpVUkVfSURFTlRJVFlfRElTQUJMRV9NVUxUSVRFTkFOVEFVVEggKG9uIE5vZGUuanMpLFxuICogb3IgdW5sZXNzIHRoZSBvcmlnaW5hbCB0ZW5hbnQgSWQgaXMgYGFkZnNgLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0KHRlbmFudElkLCBnZXRUb2tlbk9wdGlvbnMsIGFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMgPSBbXSwgbG9nZ2VyKSB7XG4gICAgdmFyIF9hO1xuICAgIGxldCByZXNvbHZlZFRlbmFudElkO1xuICAgIGlmIChwcm9jZXNzLmVudi5BWlVSRV9JREVOVElUWV9ESVNBQkxFX01VTFRJVEVOQU5UQVVUSCkge1xuICAgICAgICByZXNvbHZlZFRlbmFudElkID0gdGVuYW50SWQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRlbmFudElkID09PSBcImFkZnNcIikge1xuICAgICAgICByZXNvbHZlZFRlbmFudElkID0gdGVuYW50SWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXNvbHZlZFRlbmFudElkID0gKF9hID0gZ2V0VG9rZW5PcHRpb25zID09PSBudWxsIHx8IGdldFRva2VuT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2V0VG9rZW5PcHRpb25zLnRlbmFudElkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0ZW5hbnRJZDtcbiAgICB9XG4gICAgaWYgKHRlbmFudElkICYmXG4gICAgICAgIHJlc29sdmVkVGVuYW50SWQgIT09IHRlbmFudElkICYmXG4gICAgICAgICFhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzLmluY2x1ZGVzKFwiKlwiKSAmJlxuICAgICAgICAhYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudElkcy5zb21lKCh0KSA9PiB0LmxvY2FsZUNvbXBhcmUocmVzb2x2ZWRUZW5hbnRJZCkgPT09IDApKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlKHRlbmFudElkKTtcbiAgICAgICAgbG9nZ2VyID09PSBudWxsIHx8IGxvZ2dlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbG9nZ2VyLmluZm8obWVzc2FnZSk7XG4gICAgICAgIHRocm93IG5ldyBDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmVkVGVuYW50SWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJDcmVkZW50aWFsVW5hdmFpbGFibGVFcnJvciIsImNyZWF0ZUNvbmZpZ3VyYXRpb25FcnJvck1lc3NhZ2UiLCJ0ZW5hbnRJZCIsInByb2Nlc3NNdWx0aVRlbmFudFJlcXVlc3QiLCJnZXRUb2tlbk9wdGlvbnMiLCJhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50SWRzIiwibG9nZ2VyIiwiX2EiLCJyZXNvbHZlZFRlbmFudElkIiwicHJvY2VzcyIsImVudiIsIkFaVVJFX0lERU5USVRZX0RJU0FCTEVfTVVMVElURU5BTlRBVVRIIiwiaW5jbHVkZXMiLCJzb21lIiwidCIsImxvY2FsZUNvbXBhcmUiLCJtZXNzYWdlIiwiaW5mbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processUtils.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/util/processUtils.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processUtils: () => (/* binding */ processUtils)\n/* harmony export */ });\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Easy to mock childProcess utils.\n * @internal\n */ const processUtils = {\n    /**\n     * Promisifying childProcess.execFile\n     * @internal\n     */ execFile (file, params, options) {\n        return new Promise((resolve, reject)=>{\n            child_process__WEBPACK_IMPORTED_MODULE_0__.execFile(file, params, options, (error, stdout, stderr)=>{\n                if (Buffer.isBuffer(stdout)) {\n                    stdout = stdout.toString(\"utf8\");\n                }\n                if (Buffer.isBuffer(stderr)) {\n                    stderr = stderr.toString(\"utf8\");\n                }\n                if (stderr || error) {\n                    reject(stderr ? new Error(stderr) : error);\n                } else {\n                    resolve(stdout);\n                }\n            });\n        });\n    }\n}; //# sourceMappingURL=processUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL3Byb2Nlc3NVdGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ1k7QUFDOUM7OztDQUdDLEdBQ00sTUFBTUMsZUFBZTtJQUN4Qjs7O0tBR0MsR0FDREMsVUFBU0MsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLE9BQU87UUFDMUIsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1lBQ3pCUixtREFBcUIsQ0FBQ0csTUFBTUMsUUFBUUMsU0FBUyxDQUFDSSxPQUFPQyxRQUFRQztnQkFDekQsSUFBSUMsT0FBT0MsUUFBUSxDQUFDSCxTQUFTO29CQUN6QkEsU0FBU0EsT0FBT0ksUUFBUSxDQUFDO2dCQUM3QjtnQkFDQSxJQUFJRixPQUFPQyxRQUFRLENBQUNGLFNBQVM7b0JBQ3pCQSxTQUFTQSxPQUFPRyxRQUFRLENBQUM7Z0JBQzdCO2dCQUNBLElBQUlILFVBQVVGLE9BQU87b0JBQ2pCRCxPQUFPRyxTQUFTLElBQUlJLE1BQU1KLFVBQVVGO2dCQUN4QyxPQUNLO29CQUNERixRQUFRRztnQkFDWjtZQUNKO1FBQ0o7SUFDSjtBQUNKLEVBQUUsQ0FDRix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL3V0aWwvcHJvY2Vzc1V0aWxzLmpzPzg4NjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgKiBhcyBjaGlsZFByb2Nlc3MgZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcbi8qKlxuICogRWFzeSB0byBtb2NrIGNoaWxkUHJvY2VzcyB1dGlscy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvY2Vzc1V0aWxzID0ge1xuICAgIC8qKlxuICAgICAqIFByb21pc2lmeWluZyBjaGlsZFByb2Nlc3MuZXhlY0ZpbGVcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBleGVjRmlsZShmaWxlLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNoaWxkUHJvY2Vzcy5leGVjRmlsZShmaWxlLCBwYXJhbXMsIG9wdGlvbnMsIChlcnJvciwgc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0ZG91dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Rkb3V0ID0gc3Rkb3V0LnRvU3RyaW5nKFwidXRmOFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdGRlcnIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZGVyciA9IHN0ZGVyci50b1N0cmluZyhcInV0ZjhcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdGRlcnIgfHwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHN0ZGVyciA/IG5ldyBFcnJvcihzdGRlcnIpIDogZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShzdGRvdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3NVdGlscy5qcy5tYXAiXSwibmFtZXMiOlsiY2hpbGRQcm9jZXNzIiwicHJvY2Vzc1V0aWxzIiwiZXhlY0ZpbGUiLCJmaWxlIiwicGFyYW1zIiwib3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3IiLCJzdGRvdXQiLCJzdGRlcnIiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureScopes: () => (/* binding */ ensureScopes),\n/* harmony export */   ensureValidScopeForDevTimeCreds: () => (/* binding */ ensureValidScopeForDevTimeCreds),\n/* harmony export */   getScopeResource: () => (/* binding */ getScopeResource)\n/* harmony export */ });\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Ensures the scopes value is an array.\n * @internal\n */ function ensureScopes(scopes) {\n    return Array.isArray(scopes) ? scopes : [\n        scopes\n    ];\n}\n/**\n * Throws if the received scope is not valid.\n * @internal\n */ function ensureValidScopeForDevTimeCreds(scope, logger) {\n    if (!scope.match(/^[0-9a-zA-Z-_.:/]+$/)) {\n        const error = new Error(\"Invalid scope was specified by the user or calling client\");\n        logger.getToken.info((0,_logging__WEBPACK_IMPORTED_MODULE_0__.formatError)(scope, error));\n        throw error;\n    }\n}\n/**\n * Returns the resource out of a scope.\n * @internal\n */ function getScopeResource(scope) {\n    return scope.replace(/\\/.default$/, \"\");\n} //# sourceMappingURL=scopeUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL3Njb3BlVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDTTtBQUN4Qzs7O0NBR0MsR0FDTSxTQUFTQyxhQUFhQyxNQUFNO0lBQy9CLE9BQU9DLE1BQU1DLE9BQU8sQ0FBQ0YsVUFBVUEsU0FBUztRQUFDQTtLQUFPO0FBQ3BEO0FBQ0E7OztDQUdDLEdBQ00sU0FBU0csZ0NBQWdDQyxLQUFLLEVBQUVDLE1BQU07SUFDekQsSUFBSSxDQUFDRCxNQUFNRSxLQUFLLENBQUMsd0JBQXdCO1FBQ3JDLE1BQU1DLFFBQVEsSUFBSUMsTUFBTTtRQUN4QkgsT0FBT0ksUUFBUSxDQUFDQyxJQUFJLENBQUNaLHFEQUFXQSxDQUFDTSxPQUFPRztRQUN4QyxNQUFNQTtJQUNWO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxTQUFTSSxpQkFBaUJQLEtBQUs7SUFDbEMsT0FBT0EsTUFBTVEsT0FBTyxDQUFDLGVBQWU7QUFDeEMsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL3V0aWwvc2NvcGVVdGlscy5qcz83MWNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgZm9ybWF0RXJyb3IgfSBmcm9tIFwiLi9sb2dnaW5nXCI7XG4vKipcbiAqIEVuc3VyZXMgdGhlIHNjb3BlcyB2YWx1ZSBpcyBhbiBhcnJheS5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlU2NvcGVzKHNjb3Blcykge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHNjb3BlcykgPyBzY29wZXMgOiBbc2NvcGVzXTtcbn1cbi8qKlxuICogVGhyb3dzIGlmIHRoZSByZWNlaXZlZCBzY29wZSBpcyBub3QgdmFsaWQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVZhbGlkU2NvcGVGb3JEZXZUaW1lQ3JlZHMoc2NvcGUsIGxvZ2dlcikge1xuICAgIGlmICghc2NvcGUubWF0Y2goL15bMC05YS16QS1aLV8uOi9dKyQvKSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIkludmFsaWQgc2NvcGUgd2FzIHNwZWNpZmllZCBieSB0aGUgdXNlciBvciBjYWxsaW5nIGNsaWVudFwiKTtcbiAgICAgICAgbG9nZ2VyLmdldFRva2VuLmluZm8oZm9ybWF0RXJyb3Ioc2NvcGUsIGVycm9yKSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB0aGUgcmVzb3VyY2Ugb3V0IG9mIGEgc2NvcGUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjb3BlUmVzb3VyY2Uoc2NvcGUpIHtcbiAgICByZXR1cm4gc2NvcGUucmVwbGFjZSgvXFwvLmRlZmF1bHQkLywgXCJcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZVV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJmb3JtYXRFcnJvciIsImVuc3VyZVNjb3BlcyIsInNjb3BlcyIsIkFycmF5IiwiaXNBcnJheSIsImVuc3VyZVZhbGlkU2NvcGVGb3JEZXZUaW1lQ3JlZHMiLCJzY29wZSIsImxvZ2dlciIsIm1hdGNoIiwiZXJyb3IiLCJFcnJvciIsImdldFRva2VuIiwiaW5mbyIsImdldFNjb3BlUmVzb3VyY2UiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/util/scopeUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkTenantId: () => (/* binding */ checkTenantId),\n/* harmony export */   processMultiTenantRequest: () => (/* reexport safe */ _processMultiTenantRequest__WEBPACK_IMPORTED_MODULE_0__.processMultiTenantRequest),\n/* harmony export */   resolveAdditionallyAllowedTenantIds: () => (/* binding */ resolveAdditionallyAllowedTenantIds),\n/* harmony export */   resolveTenantId: () => (/* binding */ resolveTenantId)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\");\n/* harmony import */ var _logging__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/logging.js\");\n/* harmony import */ var _processMultiTenantRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./processMultiTenantRequest */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/util/processMultiTenantRequest.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * @internal\n */ function checkTenantId(logger, tenantId) {\n    if (!tenantId.match(/^[0-9a-zA-Z-.]+$/)) {\n        const error = new Error(\"Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://learn.microsoft.com/partner-center/find-ids-and-domain-names.\");\n        logger.info((0,_logging__WEBPACK_IMPORTED_MODULE_1__.formatError)(\"\", error));\n        throw error;\n    }\n}\n/**\n * @internal\n */ function resolveTenantId(logger, tenantId, clientId) {\n    if (tenantId) {\n        checkTenantId(logger, tenantId);\n        return tenantId;\n    }\n    if (!clientId) {\n        clientId = _constants__WEBPACK_IMPORTED_MODULE_2__.DeveloperSignOnClientId;\n    }\n    if (clientId !== _constants__WEBPACK_IMPORTED_MODULE_2__.DeveloperSignOnClientId) {\n        return \"common\";\n    }\n    return \"organizations\";\n}\n/**\n * @internal\n */ function resolveAdditionallyAllowedTenantIds(additionallyAllowedTenants) {\n    if (!additionallyAllowedTenants || additionallyAllowedTenants.length === 0) {\n        return [];\n    }\n    if (additionallyAllowedTenants.includes(\"*\")) {\n        return _constants__WEBPACK_IMPORTED_MODULE_2__.ALL_TENANTS;\n    }\n    return additionallyAllowedTenants;\n} //# sourceMappingURL=tenantIdUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL3RlbmFudElkVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDa0M7QUFDNUI7QUFDZ0M7QUFDeEU7O0NBRUMsR0FDTSxTQUFTSSxjQUFjQyxNQUFNLEVBQUVDLFFBQVE7SUFDMUMsSUFBSSxDQUFDQSxTQUFTQyxLQUFLLENBQUMscUJBQXFCO1FBQ3JDLE1BQU1DLFFBQVEsSUFBSUMsTUFBTTtRQUN4QkosT0FBT0ssSUFBSSxDQUFDUixxREFBV0EsQ0FBQyxJQUFJTTtRQUM1QixNQUFNQTtJQUNWO0FBQ0o7QUFDQTs7Q0FFQyxHQUNNLFNBQVNHLGdCQUFnQk4sTUFBTSxFQUFFQyxRQUFRLEVBQUVNLFFBQVE7SUFDdEQsSUFBSU4sVUFBVTtRQUNWRixjQUFjQyxRQUFRQztRQUN0QixPQUFPQTtJQUNYO0lBQ0EsSUFBSSxDQUFDTSxVQUFVO1FBQ1hBLFdBQVdYLCtEQUF1QkE7SUFDdEM7SUFDQSxJQUFJVyxhQUFhWCwrREFBdUJBLEVBQUU7UUFDdEMsT0FBTztJQUNYO0lBQ0EsT0FBTztBQUNYO0FBQ0E7O0NBRUMsR0FDTSxTQUFTWSxvQ0FBb0NDLDBCQUEwQjtJQUMxRSxJQUFJLENBQUNBLDhCQUE4QkEsMkJBQTJCQyxNQUFNLEtBQUssR0FBRztRQUN4RSxPQUFPLEVBQUU7SUFDYjtJQUNBLElBQUlELDJCQUEyQkUsUUFBUSxDQUFDLE1BQU07UUFDMUMsT0FBT2hCLG1EQUFXQTtJQUN0QjtJQUNBLE9BQU9jO0FBQ1gsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvaWRlbnRpdHkvZGlzdC1lc20vc3JjL3V0aWwvdGVuYW50SWRVdGlscy5qcz9jMTg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQUxMX1RFTkFOVFMsIERldmVsb3BlclNpZ25PbkNsaWVudElkIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgZm9ybWF0RXJyb3IgfSBmcm9tIFwiLi9sb2dnaW5nXCI7XG5leHBvcnQgeyBwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0IH0gZnJvbSBcIi4vcHJvY2Vzc011bHRpVGVuYW50UmVxdWVzdFwiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrVGVuYW50SWQobG9nZ2VyLCB0ZW5hbnRJZCkge1xuICAgIGlmICghdGVuYW50SWQubWF0Y2goL15bMC05YS16QS1aLS5dKyQvKSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIkludmFsaWQgdGVuYW50IGlkIHByb3ZpZGVkLiBZb3UgY2FuIGxvY2F0ZSB5b3VyIHRlbmFudCBpZCBieSBmb2xsb3dpbmcgdGhlIGluc3RydWN0aW9ucyBsaXN0ZWQgaGVyZTogaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3BhcnRuZXItY2VudGVyL2ZpbmQtaWRzLWFuZC1kb21haW4tbmFtZXMuXCIpO1xuICAgICAgICBsb2dnZXIuaW5mbyhmb3JtYXRFcnJvcihcIlwiLCBlcnJvcikpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVRlbmFudElkKGxvZ2dlciwgdGVuYW50SWQsIGNsaWVudElkKSB7XG4gICAgaWYgKHRlbmFudElkKSB7XG4gICAgICAgIGNoZWNrVGVuYW50SWQobG9nZ2VyLCB0ZW5hbnRJZCk7XG4gICAgICAgIHJldHVybiB0ZW5hbnRJZDtcbiAgICB9XG4gICAgaWYgKCFjbGllbnRJZCkge1xuICAgICAgICBjbGllbnRJZCA9IERldmVsb3BlclNpZ25PbkNsaWVudElkO1xuICAgIH1cbiAgICBpZiAoY2xpZW50SWQgIT09IERldmVsb3BlclNpZ25PbkNsaWVudElkKSB7XG4gICAgICAgIHJldHVybiBcImNvbW1vblwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJvcmdhbml6YXRpb25zXCI7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMoYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHMpIHtcbiAgICBpZiAoIWFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzIHx8IGFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmIChhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cy5pbmNsdWRlcyhcIipcIikpIHtcbiAgICAgICAgcmV0dXJuIEFMTF9URU5BTlRTO1xuICAgIH1cbiAgICByZXR1cm4gYWRkaXRpb25hbGx5QWxsb3dlZFRlbmFudHM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW5hbnRJZFV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJBTExfVEVOQU5UUyIsIkRldmVsb3BlclNpZ25PbkNsaWVudElkIiwiZm9ybWF0RXJyb3IiLCJwcm9jZXNzTXVsdGlUZW5hbnRSZXF1ZXN0IiwiY2hlY2tUZW5hbnRJZCIsImxvZ2dlciIsInRlbmFudElkIiwibWF0Y2giLCJlcnJvciIsIkVycm9yIiwiaW5mbyIsInJlc29sdmVUZW5hbnRJZCIsImNsaWVudElkIiwicmVzb2x2ZUFkZGl0aW9uYWxseUFsbG93ZWRUZW5hbnRJZHMiLCJhZGRpdGlvbmFsbHlBbGxvd2VkVGVuYW50cyIsImxlbmd0aCIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tenantIdUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/identity/dist-esm/src/util/tracing.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tracingClient: () => (/* binding */ tracingClient)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/@azure/identity/dist-esm/src/constants.js\");\n/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-tracing */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */ const tracingClient = (0,_azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__.createTracingClient)({\n    namespace: \"Microsoft.AAD\",\n    packageName: \"@azure/identity\",\n    packageVersion: _constants__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION\n}); //# sourceMappingURL=tracing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL3RyYWNpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNTO0FBQ2U7QUFDMUQ7OztDQUdDLEdBQ00sTUFBTUUsZ0JBQWdCRCx3RUFBbUJBLENBQUM7SUFDN0NFLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxnQkFBZ0JMLG1EQUFXQTtBQUMvQixHQUFHLENBQ0gsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2lkZW50aXR5L2Rpc3QtZXNtL3NyYy91dGlsL3RyYWNpbmcuanM/MmMzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgY3JlYXRlVHJhY2luZ0NsaWVudCB9IGZyb20gXCJAYXp1cmUvY29yZS10cmFjaW5nXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBzcGFuIHVzaW5nIHRoZSBnbG9iYWwgdHJhY2VyLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFjaW5nQ2xpZW50ID0gY3JlYXRlVHJhY2luZ0NsaWVudCh7XG4gICAgbmFtZXNwYWNlOiBcIk1pY3Jvc29mdC5BQURcIixcbiAgICBwYWNrYWdlTmFtZTogXCJAYXp1cmUvaWRlbnRpdHlcIixcbiAgICBwYWNrYWdlVmVyc2lvbjogU0RLX1ZFUlNJT04sXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNpbmcuanMubWFwIl0sIm5hbWVzIjpbIlNES19WRVJTSU9OIiwiY3JlYXRlVHJhY2luZ0NsaWVudCIsInRyYWNpbmdDbGllbnQiLCJuYW1lc3BhY2UiLCJwYWNrYWdlTmFtZSIsInBhY2thZ2VWZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/identity/dist-esm/src/util/tracing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/state.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.state = void 0;\n/**\n * Holds the singleton operationRequestMap, to be shared across CJS and ESM imports.\n */ exports.state = {\n    operationRequestMap: new WeakMap()\n}; //# sourceMappingURL=state-cjs.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvc3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYix1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2xDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHLEtBQUs7QUFDckI7O0NBRUMsR0FDREEsYUFBYSxHQUFHO0lBQ1pHLHFCQUFxQixJQUFJQztBQUM3QixHQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2NvbW1vbmpzL3N0YXRlLmpzP2JiZDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RhdGUgPSB2b2lkIDA7XG4vKipcbiAqIEhvbGRzIHRoZSBzaW5nbGV0b24gb3BlcmF0aW9uUmVxdWVzdE1hcCwgdG8gYmUgc2hhcmVkIGFjcm9zcyBDSlMgYW5kIEVTTSBpbXBvcnRzLlxuICovXG5leHBvcnRzLnN0YXRlID0ge1xuICAgIG9wZXJhdGlvblJlcXVlc3RNYXA6IG5ldyBXZWFrTWFwKCksXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUtY2pzLmNqcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzdGF0ZSIsIm9wZXJhdGlvblJlcXVlc3RNYXAiLCJXZWFrTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/commonjs/state.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.state = void 0;\n/**\n * @internal\n *\n * Holds the singleton instrumenter, to be shared across CJS and ESM imports.\n */ exports.state = {\n    instrumenterImplementation: undefined\n}; //# sourceMappingURL=state-cjs.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL3N0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNsQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBRyxLQUFLO0FBQ3JCOzs7O0NBSUMsR0FDREEsYUFBYSxHQUFHO0lBQ1pHLDRCQUE0QkM7QUFDaEMsR0FDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS10cmFjaW5nL2Rpc3QvY29tbW9uanMvc3RhdGUuanM/MDc4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdGF0ZSA9IHZvaWQgMDtcbi8qKlxuICogQGludGVybmFsXG4gKlxuICogSG9sZHMgdGhlIHNpbmdsZXRvbiBpbnN0cnVtZW50ZXIsIHRvIGJlIHNoYXJlZCBhY3Jvc3MgQ0pTIGFuZCBFU00gaW1wb3J0cy5cbiAqL1xuZXhwb3J0cy5zdGF0ZSA9IHtcbiAgICBpbnN0cnVtZW50ZXJJbXBsZW1lbnRhdGlvbjogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLWNqcy5janMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RhdGUiLCJpbnN0cnVtZW50ZXJJbXBsZW1lbnRhdGlvbiIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeRequestOnClaimChallenge: () => (/* binding */ authorizeRequestOnClaimChallenge),\n/* harmony export */   parseCAEChallenge: () => (/* binding */ parseCAEChallenge)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */ function parseCAEChallenge(challenges) {\n    const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x)=>x);\n    return bearerChallenges.map((challenge)=>{\n        const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x)=>x);\n        const keyValuePairs = challengeParts.map((keyValue)=>(([key, value])=>({\n                    [key]: value\n                }))(keyValue.trim().split('=\"')));\n        // Key-value pairs to plain object:\n        return keyValuePairs.reduce((a, b)=>Object.assign(Object.assign({}, a), b), {});\n    });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts snippet:AuthorizeRequestOnClaimChallenge\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const policy = bearerTokenAuthenticationPolicy({\n *   challengeCallbacks: {\n *     authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge,\n *   },\n *   scopes: [\"https://service/.default\"],\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */ async function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n    var _a;\n    const { scopes, response } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || _log_js__WEBPACK_IMPORTED_MODULE_0__.logger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find((x)=>x.claims);\n    if (!parsedChallenge) {\n        logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [\n        parsedChallenge.scope\n    ] : scopes, {\n        claims: (0,_base64_js__WEBPACK_IMPORTED_MODULE_1__.decodeStringToString)(parsedChallenge.claims)\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n} //# sourceMappingURL=authorizeRequestOnClaimChallenge.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2F1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ29CO0FBQ0g7QUFDbkQ7Ozs7O0NBS0MsR0FDTSxTQUFTRyxrQkFBa0JDLFVBQVU7SUFDeEMsTUFBTUMsbUJBQW1CLENBQUMsRUFBRSxFQUFFRCxXQUFXRSxJQUFJLEdBQUcsQ0FBQyxDQUFDQyxLQUFLLENBQUMsYUFBYUMsTUFBTSxDQUFDLENBQUNDLElBQU1BO0lBQ25GLE9BQU9KLGlCQUFpQkssR0FBRyxDQUFDLENBQUNDO1FBQ3pCLE1BQU1DLGlCQUFpQixDQUFDLEVBQUVELFVBQVVMLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLE9BQU9DLE1BQU0sQ0FBQyxDQUFDQyxJQUFNQTtRQUMxRSxNQUFNSSxnQkFBZ0JELGVBQWVGLEdBQUcsQ0FBQyxDQUFDSSxXQUFhLENBQUMsQ0FBQyxDQUFDQyxLQUFLQyxNQUFNLEdBQU07b0JBQUUsQ0FBQ0QsSUFBSSxFQUFFQztnQkFBTSxFQUFDLEVBQUdGLFNBQVNSLElBQUksR0FBR0MsS0FBSyxDQUFDO1FBQ3BILG1DQUFtQztRQUNuQyxPQUFPTSxjQUFjSSxNQUFNLENBQUMsQ0FBQ0MsR0FBR0MsSUFBT0MsT0FBT0MsTUFBTSxDQUFDRCxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHSCxJQUFJQyxJQUFLLENBQUM7SUFDckY7QUFDSjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBNEJDLEdBQ00sZUFBZUcsaUNBQWlDQyxrQkFBa0I7SUFDckUsSUFBSUM7SUFDSixNQUFNLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFLEdBQUdIO0lBQzdCLE1BQU12QixTQUFTdUIsbUJBQW1CdkIsTUFBTSxJQUFJQywyQ0FBZ0JBO0lBQzVELE1BQU1VLFlBQVllLFNBQVNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDO0lBQ3ZDLElBQUksQ0FBQ2pCLFdBQVc7UUFDWlgsT0FBTzZCLElBQUksQ0FBQyxDQUFDLGdIQUFnSCxDQUFDO1FBQzlILE9BQU87SUFDWDtJQUNBLE1BQU16QixhQUFhRCxrQkFBa0JRLGNBQWMsRUFBRTtJQUNyRCxNQUFNbUIsa0JBQWtCMUIsV0FBVzJCLElBQUksQ0FBQyxDQUFDdEIsSUFBTUEsRUFBRXVCLE1BQU07SUFDdkQsSUFBSSxDQUFDRixpQkFBaUI7UUFDbEI5QixPQUFPNkIsSUFBSSxDQUFDLENBQUMsK0hBQStILENBQUM7UUFDN0ksT0FBTztJQUNYO0lBQ0EsTUFBTUksY0FBYyxNQUFNVixtQkFBbUJXLGNBQWMsQ0FBQ0osZ0JBQWdCSyxLQUFLLEdBQUc7UUFBQ0wsZ0JBQWdCSyxLQUFLO0tBQUMsR0FBR1YsUUFBUTtRQUNsSE8sUUFBUTlCLGdFQUFvQkEsQ0FBQzRCLGdCQUFnQkUsTUFBTTtJQUN2RDtJQUNBLElBQUksQ0FBQ0MsYUFBYTtRQUNkLE9BQU87SUFDWDtJQUNBVixtQkFBbUJhLE9BQU8sQ0FBQ1QsT0FBTyxDQUFDVSxHQUFHLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDYixLQUFLUyxZQUFZSyxTQUFTLE1BQU0sUUFBUWQsT0FBTyxLQUFLLElBQUlBLEtBQUssU0FBUyxDQUFDLEVBQUVTLFlBQVlNLEtBQUssQ0FBQyxDQUFDO0lBQ3hKLE9BQU87QUFDWCxFQUNBLDREQUE0RCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9hdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZS5qcz83OGE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgbG9nZ2VyIGFzIGNvcmVDbGllbnRMb2dnZXIgfSBmcm9tIFwiLi9sb2cuanNcIjtcbmltcG9ydCB7IGRlY29kZVN0cmluZ1RvU3RyaW5nIH0gZnJvbSBcIi4vYmFzZTY0LmpzXCI7XG4vKipcbiAqIENvbnZlcnRzOiBgQmVhcmVyIGE9XCJiXCIsIGM9XCJkXCIsIEJlYXJlciBkPVwiZVwiLCBmPVwiZ1wiYC5cbiAqIEludG86IGBbIHsgYTogJ2InLCBjOiAnZCcgfSwgeyBkOiAnZScsIGY6ICdnJyB9IF1gLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDQUVDaGFsbGVuZ2UoY2hhbGxlbmdlcykge1xuICAgIGNvbnN0IGJlYXJlckNoYWxsZW5nZXMgPSBgLCAke2NoYWxsZW5nZXMudHJpbSgpfWAuc3BsaXQoXCIsIEJlYXJlciBcIikuZmlsdGVyKCh4KSA9PiB4KTtcbiAgICByZXR1cm4gYmVhcmVyQ2hhbGxlbmdlcy5tYXAoKGNoYWxsZW5nZSkgPT4ge1xuICAgICAgICBjb25zdCBjaGFsbGVuZ2VQYXJ0cyA9IGAke2NoYWxsZW5nZS50cmltKCl9LCBgLnNwbGl0KCdcIiwgJykuZmlsdGVyKCh4KSA9PiB4KTtcbiAgICAgICAgY29uc3Qga2V5VmFsdWVQYWlycyA9IGNoYWxsZW5nZVBhcnRzLm1hcCgoa2V5VmFsdWUpID0+ICgoW2tleSwgdmFsdWVdKSA9PiAoeyBba2V5XTogdmFsdWUgfSkpKGtleVZhbHVlLnRyaW0oKS5zcGxpdCgnPVwiJykpKTtcbiAgICAgICAgLy8gS2V5LXZhbHVlIHBhaXJzIHRvIHBsYWluIG9iamVjdDpcbiAgICAgICAgcmV0dXJuIGtleVZhbHVlUGFpcnMucmVkdWNlKChhLCBiKSA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhKSwgYikpLCB7fSk7XG4gICAgfSk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgYXMgYSBjYWxsYmFjayBmb3IgdGhlIGBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5YCBvZiBgQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZWAsIHRvIHN1cHBvcnQgQ0FFIGNoYWxsZW5nZXM6XG4gKiBbQ29udGludW91cyBBY2Nlc3MgRXZhbHVhdGlvbl0oaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2F6dXJlL2FjdGl2ZS1kaXJlY3RvcnkvY29uZGl0aW9uYWwtYWNjZXNzL2NvbmNlcHQtY29udGludW91cy1hY2Nlc3MtZXZhbHVhdGlvbikuXG4gKlxuICogQ2FsbCB0aGUgYGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3lgIHdpdGggdGhlIGZvbGxvd2luZyBvcHRpb25zOlxuICpcbiAqIGBgYHRzIHNuaXBwZXQ6QXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2VcbiAqIGltcG9ydCB7IGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xuICogaW1wb3J0IHsgYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UgfSBmcm9tIFwiQGF6dXJlL2NvcmUtY2xpZW50XCI7XG4gKlxuICogY29uc3QgcG9saWN5ID0gYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeSh7XG4gKiAgIGNoYWxsZW5nZUNhbGxiYWNrczoge1xuICogICAgIGF1dGhvcml6ZVJlcXVlc3RPbkNoYWxsZW5nZTogYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UsXG4gKiAgIH0sXG4gKiAgIHNjb3BlczogW1wiaHR0cHM6Ly9zZXJ2aWNlLy5kZWZhdWx0XCJdLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBPbmNlIHByb3ZpZGVkLCB0aGUgYGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3lgIHBvbGljeSB3aWxsIGludGVybmFsbHkgaGFuZGxlIENvbnRpbnVvdXMgQWNjZXNzIEV2YWx1YXRpb24gKENBRSkgY2hhbGxlbmdlcy5cbiAqIFdoZW4gaXQgY2FuJ3QgY29tcGxldGUgYSBjaGFsbGVuZ2UgaXQgd2lsbCByZXR1cm4gdGhlIDQwMSAodW5hdXRob3JpemVkKSByZXNwb25zZSBmcm9tIEFSTS5cbiAqXG4gKiBFeGFtcGxlIGNoYWxsZW5nZSB3aXRoIGNsYWltczpcbiAqXG4gKiBgYGBcbiAqIEJlYXJlciBhdXRob3JpemF0aW9uX3VyaT1cImh0dHBzOi8vbG9naW4ud2luZG93cy1wcGUubmV0L1wiLCBlcnJvcj1cImludmFsaWRfdG9rZW5cIixcbiAqIGVycm9yX2Rlc2NyaXB0aW9uPVwiVXNlciBzZXNzaW9uIGhhcyBiZWVuIHJldm9rZWRcIixcbiAqIGNsYWltcz1cImV5SmhZMk5sYzNOZmRHOXJaVzRpT25zaWJtSm1JanA3SW1WemMyVnVkR2xoYkNJNmRISjFaU3dnSW5aaGJIVmxJam9pTVRZd016YzBNamd3TUNKOWZYMD1cIlxuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZShvbkNoYWxsZW5nZU9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgeyBzY29wZXMsIHJlc3BvbnNlIH0gPSBvbkNoYWxsZW5nZU9wdGlvbnM7XG4gICAgY29uc3QgbG9nZ2VyID0gb25DaGFsbGVuZ2VPcHRpb25zLmxvZ2dlciB8fCBjb3JlQ2xpZW50TG9nZ2VyO1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiV1dXLUF1dGhlbnRpY2F0ZVwiKTtcbiAgICBpZiAoIWNoYWxsZW5nZSkge1xuICAgICAgICBsb2dnZXIuaW5mbyhgVGhlIFdXVy1BdXRoZW50aWNhdGUgaGVhZGVyIHdhcyBtaXNzaW5nLiBGYWlsZWQgdG8gcGVyZm9ybSB0aGUgQ29udGludW91cyBBY2Nlc3MgRXZhbHVhdGlvbiBhdXRoZW50aWNhdGlvbiBmbG93LmApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNoYWxsZW5nZXMgPSBwYXJzZUNBRUNoYWxsZW5nZShjaGFsbGVuZ2UpIHx8IFtdO1xuICAgIGNvbnN0IHBhcnNlZENoYWxsZW5nZSA9IGNoYWxsZW5nZXMuZmluZCgoeCkgPT4geC5jbGFpbXMpO1xuICAgIGlmICghcGFyc2VkQ2hhbGxlbmdlKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBUaGUgV1dXLUF1dGhlbnRpY2F0ZSBoZWFkZXIgd2FzIG1pc3NpbmcgdGhlIG5lY2Vzc2FyeSBcImNsYWltc1wiIHRvIHBlcmZvcm0gdGhlIENvbnRpbnVvdXMgQWNjZXNzIEV2YWx1YXRpb24gYXV0aGVudGljYXRpb24gZmxvdy5gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IG9uQ2hhbGxlbmdlT3B0aW9ucy5nZXRBY2Nlc3NUb2tlbihwYXJzZWRDaGFsbGVuZ2Uuc2NvcGUgPyBbcGFyc2VkQ2hhbGxlbmdlLnNjb3BlXSA6IHNjb3Blcywge1xuICAgICAgICBjbGFpbXM6IGRlY29kZVN0cmluZ1RvU3RyaW5nKHBhcnNlZENoYWxsZW5nZS5jbGFpbXMpLFxuICAgIH0pO1xuICAgIGlmICghYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvbkNoYWxsZW5nZU9wdGlvbnMucmVxdWVzdC5oZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYCR7KF9hID0gYWNjZXNzVG9rZW4udG9rZW5UeXBlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIkJlYXJlclwifSAke2FjY2Vzc1Rva2VuLnRva2VufWApO1xuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UuanMubWFwIl0sIm5hbWVzIjpbImxvZ2dlciIsImNvcmVDbGllbnRMb2dnZXIiLCJkZWNvZGVTdHJpbmdUb1N0cmluZyIsInBhcnNlQ0FFQ2hhbGxlbmdlIiwiY2hhbGxlbmdlcyIsImJlYXJlckNoYWxsZW5nZXMiLCJ0cmltIiwic3BsaXQiLCJmaWx0ZXIiLCJ4IiwibWFwIiwiY2hhbGxlbmdlIiwiY2hhbGxlbmdlUGFydHMiLCJrZXlWYWx1ZVBhaXJzIiwia2V5VmFsdWUiLCJrZXkiLCJ2YWx1ZSIsInJlZHVjZSIsImEiLCJiIiwiT2JqZWN0IiwiYXNzaWduIiwiYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UiLCJvbkNoYWxsZW5nZU9wdGlvbnMiLCJfYSIsInNjb3BlcyIsInJlc3BvbnNlIiwiaGVhZGVycyIsImdldCIsImluZm8iLCJwYXJzZWRDaGFsbGVuZ2UiLCJmaW5kIiwiY2xhaW1zIiwiYWNjZXNzVG9rZW4iLCJnZXRBY2Nlc3NUb2tlbiIsInNjb3BlIiwicmVxdWVzdCIsInNldCIsInRva2VuVHlwZSIsInRva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeRequestOnTenantChallenge: () => (/* binding */ authorizeRequestOnTenantChallenge)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A set of constants used internally when processing requests.\n */ const Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */ HeaderConstants: {\n        /**\n         * The Authorization header.\n         */ AUTHORIZATION: \"authorization\"\n    }\n};\nfunction isUuid(text) {\n    return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://learn.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/ const authorizeRequestOnTenantChallenge = async (challengeOptions)=>{\n    var _a;\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n        const challengeInfo = parseChallenge(challenge);\n        const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n        const tenantId = extractTenantId(challengeInfo);\n        if (!tenantId) {\n            return false;\n        }\n        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), {\n            tenantId\n        }));\n        if (!accessToken) {\n            return false;\n        }\n        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n        return true;\n    }\n    return false;\n};\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */ function extractTenantId(challengeInfo) {\n    const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n    const pathSegments = parsedAuthUri.pathname.split(\"/\");\n    const tenantId = pathSegments[1];\n    if (tenantId && isUuid(tenantId)) {\n        return tenantId;\n    }\n    return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */ function buildScopes(challengeOptions, challengeInfo) {\n    if (!challengeInfo.resource_id) {\n        return challengeOptions.scopes;\n    }\n    const challengeScopes = new URL(challengeInfo.resource_id);\n    challengeScopes.pathname = Constants.DefaultScope;\n    let scope = challengeScopes.toString();\n    if (scope === \"https://disk.azure.com/.default\") {\n        // the extra slash is required by the service\n        scope = \"https://disk.azure.com//.default\";\n    }\n    return [\n        scope\n    ];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */ function getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */ function parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x)=>x);\n    const keyValuePairs = challengeParts.map((keyValue)=>(([key, value])=>({\n                [key]: value\n            }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b)=>Object.assign(Object.assign({}, a), b), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */ function requestToOptions(request) {\n    return {\n        abortSignal: request.abortSignal,\n        requestOptions: {\n            timeout: request.timeout\n        },\n        tracingOptions: request.tracingOptions\n    };\n} //# sourceMappingURL=authorizeRequestOnTenantChallenge.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/base64.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeString: () => (/* binding */ decodeString),\n/* harmony export */   decodeStringToString: () => (/* binding */ decodeStringToString),\n/* harmony export */   encodeByteArray: () => (/* binding */ encodeByteArray),\n/* harmony export */   encodeString: () => (/* binding */ encodeString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */ function encodeString(value) {\n    return Buffer.from(value).toString(\"base64\");\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */ function encodeByteArray(value) {\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */ function decodeString(value) {\n    return Buffer.from(value, \"base64\");\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */ function decodeStringToString(value) {\n    return Buffer.from(value, \"base64\").toString();\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2Jhc2U2NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNsQzs7OztDQUlDLEdBQ00sU0FBU0EsYUFBYUMsS0FBSztJQUM5QixPQUFPQyxPQUFPQyxJQUFJLENBQUNGLE9BQU9HLFFBQVEsQ0FBQztBQUN2QztBQUNBOzs7O0NBSUMsR0FDTSxTQUFTQyxnQkFBZ0JKLEtBQUs7SUFDakMsTUFBTUssY0FBY0wsaUJBQWlCQyxTQUFTRCxRQUFRQyxPQUFPQyxJQUFJLENBQUNGLE1BQU1NLE1BQU07SUFDOUUsT0FBT0QsWUFBWUYsUUFBUSxDQUFDO0FBQ2hDO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNJLGFBQWFQLEtBQUs7SUFDOUIsT0FBT0MsT0FBT0MsSUFBSSxDQUFDRixPQUFPO0FBQzlCO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNRLHFCQUFxQlIsS0FBSztJQUN0QyxPQUFPQyxPQUFPQyxJQUFJLENBQUNGLE9BQU8sVUFBVUcsUUFBUTtBQUNoRCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9iYXNlNjQuanM/NTRiZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogRW5jb2RlcyBhIHN0cmluZyBpbiBiYXNlNjQgZm9ybWF0LlxuICogQHBhcmFtIHZhbHVlIC0gdGhlIHN0cmluZyB0byBlbmNvZGVcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cbi8qKlxuICogRW5jb2RlcyBhIGJ5dGUgYXJyYXkgaW4gYmFzZTY0IGZvcm1hdC5cbiAqIEBwYXJhbSB2YWx1ZSAtIHRoZSBVaW50OEFyYXkgdG8gZW5jb2RlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUJ5dGVBcnJheSh2YWx1ZSkge1xuICAgIGNvbnN0IGJ1ZmZlclZhbHVlID0gdmFsdWUgaW5zdGFuY2VvZiBCdWZmZXIgPyB2YWx1ZSA6IEJ1ZmZlci5mcm9tKHZhbHVlLmJ1ZmZlcik7XG4gICAgcmV0dXJuIGJ1ZmZlclZhbHVlLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xufVxuLyoqXG4gKiBEZWNvZGVzIGEgYmFzZTY0IHN0cmluZyBpbnRvIGEgYnl0ZSBhcnJheS5cbiAqIEBwYXJhbSB2YWx1ZSAtIHRoZSBiYXNlNjQgc3RyaW5nIHRvIGRlY29kZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUsIFwiYmFzZTY0XCIpO1xufVxuLyoqXG4gKiBEZWNvZGVzIGEgYmFzZTY0IHN0cmluZyBpbnRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHZhbHVlIC0gdGhlIGJhc2U2NCBzdHJpbmcgdG8gZGVjb2RlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVN0cmluZ1RvU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCBcImJhc2U2NFwiKS50b1N0cmluZygpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTY0LmpzLm1hcCJdLCJuYW1lcyI6WyJlbmNvZGVTdHJpbmciLCJ2YWx1ZSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImVuY29kZUJ5dGVBcnJheSIsImJ1ZmZlclZhbHVlIiwiYnVmZmVyIiwiZGVjb2RlU3RyaW5nIiwiZGVjb2RlU3RyaW5nVG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializationPolicy: () => (/* binding */ deserializationPolicy),\n/* harmony export */   deserializationPolicyName: () => (/* binding */ deserializationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\nconst defaultJsonContentTypes = [\n    \"application/json\",\n    \"text/json\"\n];\nconst defaultXmlContentTypes = [\n    \"application/xml\",\n    \"application/atom+xml\"\n];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */ const deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */ function deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : _interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY\n        }\n    };\n    return {\n        name: deserializationPolicyName,\n        async sendRequest (request, next) {\n            const response = await next(request);\n            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n        }\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        } else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    } else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    } else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n    if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n    }\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(parsedResponse.request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n    }\n    const responseSpec = getOperationResponseMap(parsedResponse);\n    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n    if (error) {\n        throw error;\n    } else if (shouldReturnResponse) {\n        return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n            let valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n            }\n            try {\n                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n            } catch (deserializeError) {\n                const restError = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                    statusCode: parsedResponse.status,\n                    request: parsedResponse.request,\n                    response: parsedResponse\n                });\n                throw restError;\n            }\n        } else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n        if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", {\n                xml: {},\n                ignoreUnknownProperties: true\n            });\n        }\n    }\n    return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n    var _a, _b, _c, _d, _e;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return {\n                    error: null,\n                    shouldReturnResponse: false\n                };\n            }\n        } else {\n            return {\n                error: null,\n                shouldReturnResponse: false\n            };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;\n    const error = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // and the parsed body doesn't look like an error object,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec && !(((_c = (_b = parsedResponse.parsedBody) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.code) && ((_e = (_d = parsedResponse.parsedBody) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.message))) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    } catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return {\n        error,\n        shouldReturnResponse: false\n    };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) && operationResponse.bodyAsText) {\n        const text = operationResponse.bodyAsText;\n        const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        const contentComponents = !contentType ? [] : contentType.split(\";\").map((component)=>component.toLowerCase());\n        try {\n            if (contentComponents.length === 0 || contentComponents.some((component)=>jsonContentTypes.indexOf(component) !== -1)) {\n                operationResponse.parsedBody = JSON.parse(text);\n                return operationResponse;\n            } else if (contentComponents.some((component)=>xmlContentTypes.indexOf(component) !== -1)) {\n                if (!parseXML) {\n                    throw new Error(\"Parsing XML not supported.\");\n                }\n                const body = await parseXML(text, opts.xml);\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            }\n        } catch (err) {\n            const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n            const errCode = err.code || _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError.PARSE_ERROR;\n            const e = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(msg, {\n                code: errCode,\n                statusCode: operationResponse.status,\n                request: operationResponse.request,\n                response: operationResponse\n            });\n            throw e;\n        }\n    }\n    return operationResponse;\n} //# sourceMappingURL=deserializationPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/httpClientCache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedDefaultHttpClient: () => (/* binding */ getCachedDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nlet cachedHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createDefaultHttpClient)();\n    }\n    return cachedHttpClient;\n} //# sourceMappingURL=httpClientCache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2h0dHBDbGllbnRDYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDa0M7QUFDcEUsSUFBSUM7QUFDRyxTQUFTQztJQUNaLElBQUksQ0FBQ0Qsa0JBQWtCO1FBQ25CQSxtQkFBbUJELGtGQUF1QkE7SUFDOUM7SUFDQSxPQUFPQztBQUNYLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2h0dHBDbGllbnRDYWNoZS5qcz9hMDdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlRGVmYXVsdEh0dHBDbGllbnQgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xubGV0IGNhY2hlZEh0dHBDbGllbnQ7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGVkRGVmYXVsdEh0dHBDbGllbnQoKSB7XG4gICAgaWYgKCFjYWNoZWRIdHRwQ2xpZW50KSB7XG4gICAgICAgIGNhY2hlZEh0dHBDbGllbnQgPSBjcmVhdGVEZWZhdWx0SHR0cENsaWVudCgpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkSHR0cENsaWVudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBDbGllbnRDYWNoZS5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlRGVmYXVsdEh0dHBDbGllbnQiLCJjYWNoZWRIdHRwQ2xpZW50IiwiZ2V0Q2FjaGVkRGVmYXVsdEh0dHBDbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapperTypeNames: () => (/* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_0__.MapperTypeNames),\n/* harmony export */   ServiceClient: () => (/* reexport safe */ _serviceClient_js__WEBPACK_IMPORTED_MODULE_1__.ServiceClient),\n/* harmony export */   XML_ATTRKEY: () => (/* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_3__.XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_3__.XML_CHARKEY),\n/* harmony export */   authorizeRequestOnClaimChallenge: () => (/* reexport safe */ _authorizeRequestOnClaimChallenge_js__WEBPACK_IMPORTED_MODULE_6__.authorizeRequestOnClaimChallenge),\n/* harmony export */   authorizeRequestOnTenantChallenge: () => (/* reexport safe */ _authorizeRequestOnTenantChallenge_js__WEBPACK_IMPORTED_MODULE_7__.authorizeRequestOnTenantChallenge),\n/* harmony export */   createClientPipeline: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_2__.createClientPipeline),\n/* harmony export */   createSerializer: () => (/* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_0__.createSerializer),\n/* harmony export */   deserializationPolicy: () => (/* reexport safe */ _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__.deserializationPolicy),\n/* harmony export */   deserializationPolicyName: () => (/* reexport safe */ _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__.deserializationPolicyName),\n/* harmony export */   serializationPolicy: () => (/* reexport safe */ _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__.serializationPolicy),\n/* harmony export */   serializationPolicyName: () => (/* reexport safe */ _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__.serializationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _serviceClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceClient.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deserializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\");\n/* harmony import */ var _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./serializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\");\n/* harmony import */ var _authorizeRequestOnClaimChallenge_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./authorizeRequestOnClaimChallenge.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js\");\n/* harmony import */ var _authorizeRequestOnTenantChallenge_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./authorizeRequestOnTenantChallenge.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNrQztBQUNqQjtBQUNFO0FBQ087QUFDbUM7QUFDTjtBQUNBO0FBQ0UsQ0FDM0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2luZGV4LmpzP2Q2NGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5leHBvcnQgeyBjcmVhdGVTZXJpYWxpemVyLCBNYXBwZXJUeXBlTmFtZXMgfSBmcm9tIFwiLi9zZXJpYWxpemVyLmpzXCI7XG5leHBvcnQgeyBTZXJ2aWNlQ2xpZW50IH0gZnJvbSBcIi4vc2VydmljZUNsaWVudC5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlQ2xpZW50UGlwZWxpbmUgfSBmcm9tIFwiLi9waXBlbGluZS5qc1wiO1xuZXhwb3J0IHsgWE1MX0FUVFJLRVksIFhNTF9DSEFSS0VZLCB9IGZyb20gXCIuL2ludGVyZmFjZXMuanNcIjtcbmV4cG9ydCB7IGRlc2VyaWFsaXphdGlvblBvbGljeSwgZGVzZXJpYWxpemF0aW9uUG9saWN5TmFtZSwgfSBmcm9tIFwiLi9kZXNlcmlhbGl6YXRpb25Qb2xpY3kuanNcIjtcbmV4cG9ydCB7IHNlcmlhbGl6YXRpb25Qb2xpY3ksIHNlcmlhbGl6YXRpb25Qb2xpY3lOYW1lLCB9IGZyb20gXCIuL3NlcmlhbGl6YXRpb25Qb2xpY3kuanNcIjtcbmV4cG9ydCB7IGF1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlIH0gZnJvbSBcIi4vYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UuanNcIjtcbmV4cG9ydCB7IGF1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZSB9IGZyb20gXCIuL2F1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZS5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZVNlcmlhbGl6ZXIiLCJNYXBwZXJUeXBlTmFtZXMiLCJTZXJ2aWNlQ2xpZW50IiwiY3JlYXRlQ2xpZW50UGlwZWxpbmUiLCJYTUxfQVRUUktFWSIsIlhNTF9DSEFSS0VZIiwiZGVzZXJpYWxpemF0aW9uUG9saWN5IiwiZGVzZXJpYWxpemF0aW9uUG9saWN5TmFtZSIsInNlcmlhbGl6YXRpb25Qb2xpY3kiLCJzZXJpYWxpemF0aW9uUG9saWN5TmFtZSIsImF1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlIiwiYXV0aG9yaXplUmVxdWVzdE9uVGVuYW50Q2hhbGxlbmdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPathStringFromParameter: () => (/* binding */ getPathStringFromParameter),\n/* harmony export */   getStreamingResponseStatusCodes: () => (/* binding */ getStreamingResponseStatusCodes)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */ function getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for(const statusCode in operationSpec.responses){\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper && operationResponse.bodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_0__.MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */ function getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    } else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    } else {\n        result = mapper.serializedName;\n    }\n    return result;\n} //# sourceMappingURL=interfaceHelpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2ludGVyZmFjZUhlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNnQjtBQUNsRDs7O0NBR0MsR0FDTSxTQUFTQyxnQ0FBZ0NDLGFBQWE7SUFDekQsTUFBTUMsU0FBUyxJQUFJQztJQUNuQixJQUFLLE1BQU1DLGNBQWNILGNBQWNJLFNBQVMsQ0FBRTtRQUM5QyxNQUFNQyxvQkFBb0JMLGNBQWNJLFNBQVMsQ0FBQ0QsV0FBVztRQUM3RCxJQUFJRSxrQkFBa0JDLFVBQVUsSUFDNUJELGtCQUFrQkMsVUFBVSxDQUFDQyxJQUFJLENBQUNDLElBQUksS0FBS1YsMkRBQWVBLENBQUNXLE1BQU0sRUFBRTtZQUNuRVIsT0FBT1MsR0FBRyxDQUFDQyxPQUFPUjtRQUN0QjtJQUNKO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBOzs7OztDQUtDLEdBQ00sU0FBU1csMkJBQTJCQyxTQUFTO0lBQ2hELE1BQU0sRUFBRUMsYUFBYSxFQUFFQyxNQUFNLEVBQUUsR0FBR0Y7SUFDbEMsSUFBSVo7SUFDSixJQUFJLE9BQU9hLGtCQUFrQixVQUFVO1FBQ25DYixTQUFTYTtJQUNiLE9BQ0ssSUFBSUUsTUFBTUMsT0FBTyxDQUFDSCxnQkFBZ0I7UUFDbkNiLFNBQVNhLGNBQWNJLElBQUksQ0FBQztJQUNoQyxPQUNLO1FBQ0RqQixTQUFTYyxPQUFPSSxjQUFjO0lBQ2xDO0lBQ0EsT0FBT2xCO0FBQ1gsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vaW50ZXJmYWNlSGVscGVycy5qcz8zOWExIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgTWFwcGVyVHlwZU5hbWVzIH0gZnJvbSBcIi4vc2VyaWFsaXplci5qc1wiO1xuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IG9mIHN0YXR1cyBjb2RlcyBmb3Igc3RyZWFtaW5nIHJlc3BvbnNlcy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RyZWFtaW5nUmVzcG9uc2VTdGF0dXNDb2RlcyhvcGVyYXRpb25TcGVjKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3Qgc3RhdHVzQ29kZSBpbiBvcGVyYXRpb25TcGVjLnJlc3BvbnNlcykge1xuICAgICAgICBjb25zdCBvcGVyYXRpb25SZXNwb25zZSA9IG9wZXJhdGlvblNwZWMucmVzcG9uc2VzW3N0YXR1c0NvZGVdO1xuICAgICAgICBpZiAob3BlcmF0aW9uUmVzcG9uc2UuYm9keU1hcHBlciAmJlxuICAgICAgICAgICAgb3BlcmF0aW9uUmVzcG9uc2UuYm9keU1hcHBlci50eXBlLm5hbWUgPT09IE1hcHBlclR5cGVOYW1lcy5TdHJlYW0pIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoTnVtYmVyKHN0YXR1c0NvZGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBHZXQgdGhlIHBhdGggdG8gdGhpcyBwYXJhbWV0ZXIncyB2YWx1ZSBhcyBhIGRvdHRlZCBzdHJpbmcgKGEuYi5jKS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXIgLSBUaGUgcGFyYW1ldGVyIHRvIGdldCB0aGUgcGF0aCBzdHJpbmcgZm9yLlxuICogQHJldHVybnMgVGhlIHBhdGggdG8gdGhpcyBwYXJhbWV0ZXIncyB2YWx1ZSBhcyBhIGRvdHRlZCBzdHJpbmcuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKHBhcmFtZXRlcikge1xuICAgIGNvbnN0IHsgcGFyYW1ldGVyUGF0aCwgbWFwcGVyIH0gPSBwYXJhbWV0ZXI7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAodHlwZW9mIHBhcmFtZXRlclBhdGggPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmVzdWx0ID0gcGFyYW1ldGVyUGF0aDtcbiAgICB9XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwYXJhbWV0ZXJQYXRoKSkge1xuICAgICAgICByZXN1bHQgPSBwYXJhbWV0ZXJQYXRoLmpvaW4oXCIuXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbWFwcGVyLnNlcmlhbGl6ZWROYW1lO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlSGVscGVycy5qcy5tYXAiXSwibmFtZXMiOlsiTWFwcGVyVHlwZU5hbWVzIiwiZ2V0U3RyZWFtaW5nUmVzcG9uc2VTdGF0dXNDb2RlcyIsIm9wZXJhdGlvblNwZWMiLCJyZXN1bHQiLCJTZXQiLCJzdGF0dXNDb2RlIiwicmVzcG9uc2VzIiwib3BlcmF0aW9uUmVzcG9uc2UiLCJib2R5TWFwcGVyIiwidHlwZSIsIm5hbWUiLCJTdHJlYW0iLCJhZGQiLCJOdW1iZXIiLCJnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlciIsInBhcmFtZXRlciIsInBhcmFtZXRlclBhdGgiLCJtYXBwZXIiLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwic2VyaWFsaXplZE5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/interfaces.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* binding */ XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* binding */ XML_CHARKEY)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Default key used to access the XML attributes.\n */ const XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */ const XML_CHARKEY = \"_\"; //# sourceMappingURL=interfaces.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2ludGVyZmFjZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2xDOztDQUVDLEdBQ00sTUFBTUEsY0FBYyxJQUFJO0FBQy9COztDQUVDLEdBQ00sTUFBTUMsY0FBYyxJQUFJLENBQy9CLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9pbnRlcmZhY2VzLmpzP2UxNDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vKipcbiAqIERlZmF1bHQga2V5IHVzZWQgdG8gYWNjZXNzIHRoZSBYTUwgYXR0cmlidXRlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFhNTF9BVFRSS0VZID0gXCIkXCI7XG4vKipcbiAqIERlZmF1bHQga2V5IHVzZWQgdG8gYWNjZXNzIHRoZSBYTUwgdmFsdWUgY29udGVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IFhNTF9DSEFSS0VZID0gXCJfXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2VzLmpzLm1hcCJdLCJuYW1lcyI6WyJYTUxfQVRUUktFWSIsIlhNTF9DSEFSS0VZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/log.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/log.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-client\"); //# sourceMappingURL=log.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2xvZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDaUI7QUFDNUMsTUFBTUMsU0FBU0QsaUVBQWtCQSxDQUFDLGVBQWUsQ0FDeEQsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2xvZy5qcz9iNzIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50TG9nZ2VyIH0gZnJvbSBcIkBhenVyZS9sb2dnZXJcIjtcbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBjcmVhdGVDbGllbnRMb2dnZXIoXCJjb3JlLWNsaWVudFwiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZy5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50TG9nZ2VyIiwibG9nZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/operationHelpers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOperationArgumentValueFromParameter: () => (/* binding */ getOperationArgumentValueFromParameter),\n/* harmony export */   getOperationRequestInfo: () => (/* binding */ getOperationRequestInfo)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */ function getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [\n            parameterPath\n        ];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            } else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue = parameterMapper.required || parameterPath[0] === \"options\" && parameterPath.length === 2;\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    } else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for(const propertyName in parameterPath){\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = {\n        propertyFound: false\n    };\n    let i = 0;\n    for(; i < parameterPath.length; ++i){\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        } else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nfunction getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = _state_js__WEBPACK_IMPORTED_MODULE_0__.state.operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        _state_js__WEBPACK_IMPORTED_MODULE_0__.state.operationRequestMap.set(request, info);\n    }\n    return info;\n} //# sourceMappingURL=operationHelpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/pipeline.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClientPipeline: () => (/* binding */ createClientPipeline)\n/* harmony export */ });\n/* harmony import */ var _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */ function createClientPipeline(options = {}) {\n    const pipeline = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createPipelineFromOptions)(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.bearerTokenAuthenticationPolicy)({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes\n        }));\n    }\n    pipeline.addPolicy((0,_serializationPolicy_js__WEBPACK_IMPORTED_MODULE_2__.serializationPolicy)(options.serializationOptions), {\n        phase: \"Serialize\"\n    });\n    pipeline.addPolicy((0,_deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_0__.deserializationPolicy)(options.deserializationOptions), {\n        phase: \"Deserialize\"\n    });\n    return pipeline;\n} //# sourceMappingURL=pipeline.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3BpcGVsaW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2lDO0FBQ3FDO0FBQ3pDO0FBQy9EOzs7OztDQUtDLEdBQ00sU0FBU0kscUJBQXFCQyxVQUFVLENBQUMsQ0FBQztJQUM3QyxNQUFNQyxXQUFXSixvRkFBeUJBLENBQUNHLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUlBLFVBQVUsQ0FBQztJQUMvRixJQUFJQSxRQUFRRSxpQkFBaUIsRUFBRTtRQUMzQkQsU0FBU0UsU0FBUyxDQUFDUCwwRkFBK0JBLENBQUM7WUFDL0NRLFlBQVlKLFFBQVFFLGlCQUFpQixDQUFDRSxVQUFVO1lBQ2hEQyxRQUFRTCxRQUFRRSxpQkFBaUIsQ0FBQ0ksZ0JBQWdCO1FBQ3REO0lBQ0o7SUFDQUwsU0FBU0UsU0FBUyxDQUFDTCw0RUFBbUJBLENBQUNFLFFBQVFPLG9CQUFvQixHQUFHO1FBQUVDLE9BQU87SUFBWTtJQUMzRlAsU0FBU0UsU0FBUyxDQUFDUixnRkFBcUJBLENBQUNLLFFBQVFTLHNCQUFzQixHQUFHO1FBQ3RFRCxPQUFPO0lBQ1g7SUFDQSxPQUFPUDtBQUNYLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3BpcGVsaW5lLmpzP2RiZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBkZXNlcmlhbGl6YXRpb25Qb2xpY3kgfSBmcm9tIFwiLi9kZXNlcmlhbGl6YXRpb25Qb2xpY3kuanNcIjtcbmltcG9ydCB7IGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3ksIGNyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMsIH0gZnJvbSBcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIjtcbmltcG9ydCB7IHNlcmlhbGl6YXRpb25Qb2xpY3kgfSBmcm9tIFwiLi9zZXJpYWxpemF0aW9uUG9saWN5LmpzXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUGlwZWxpbmUgZm9yIHVzZSB3aXRoIGEgU2VydmljZSBDbGllbnQuXG4gKiBBZGRzIGluIGRlc2VyaWFsaXphdGlvblBvbGljeSBieSBkZWZhdWx0LlxuICogQWxzbyBhZGRzIGluIGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kgaWYgcGFzc2VkIGEgVG9rZW5DcmVkZW50aWFsLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGN1c3RvbWl6ZSB0aGUgY3JlYXRlZCBwaXBlbGluZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudFBpcGVsaW5lKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHBpcGVsaW5lID0gY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucyhvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fSk7XG4gICAgaWYgKG9wdGlvbnMuY3JlZGVudGlhbE9wdGlvbnMpIHtcbiAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3koe1xuICAgICAgICAgICAgY3JlZGVudGlhbDogb3B0aW9ucy5jcmVkZW50aWFsT3B0aW9ucy5jcmVkZW50aWFsLFxuICAgICAgICAgICAgc2NvcGVzOiBvcHRpb25zLmNyZWRlbnRpYWxPcHRpb25zLmNyZWRlbnRpYWxTY29wZXMsXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KHNlcmlhbGl6YXRpb25Qb2xpY3kob3B0aW9ucy5zZXJpYWxpemF0aW9uT3B0aW9ucyksIHsgcGhhc2U6IFwiU2VyaWFsaXplXCIgfSk7XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KGRlc2VyaWFsaXphdGlvblBvbGljeShvcHRpb25zLmRlc2VyaWFsaXphdGlvbk9wdGlvbnMpLCB7XG4gICAgICAgIHBoYXNlOiBcIkRlc2VyaWFsaXplXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHBpcGVsaW5lO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZWxpbmUuanMubWFwIl0sIm5hbWVzIjpbImRlc2VyaWFsaXphdGlvblBvbGljeSIsImJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kiLCJjcmVhdGVQaXBlbGluZUZyb21PcHRpb25zIiwic2VyaWFsaXphdGlvblBvbGljeSIsImNyZWF0ZUNsaWVudFBpcGVsaW5lIiwib3B0aW9ucyIsInBpcGVsaW5lIiwiY3JlZGVudGlhbE9wdGlvbnMiLCJhZGRQb2xpY3kiLCJjcmVkZW50aWFsIiwic2NvcGVzIiwiY3JlZGVudGlhbFNjb3BlcyIsInNlcmlhbGl6YXRpb25PcHRpb25zIiwicGhhc2UiLCJkZXNlcmlhbGl6YXRpb25PcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serializationPolicy.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializationPolicy: () => (/* binding */ serializationPolicy),\n/* harmony export */   serializationPolicyName: () => (/* binding */ serializationPolicyName),\n/* harmony export */   serializeHeaders: () => (/* binding */ serializeHeaders),\n/* harmony export */   serializeRequestBody: () => (/* binding */ serializeRequestBody)\n/* harmony export */ });\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * The programmatic identifier of the serializationPolicy.\n */ const serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */ function serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: serializationPolicyName,\n        async sendRequest (request, next) {\n            const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationRequestInfo)(request);\n            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n            if (operationSpec && operationArguments) {\n                serializeHeaders(request, operationArguments, operationSpec);\n                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n            }\n            return next(request);\n        }\n    };\n}\n/**\n * @internal\n */ function serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters){\n            let headerValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, headerParameter);\n            if (headerValue !== null && headerValue !== undefined || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)){\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                } else {\n                    request.headers.set(headerParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)){\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */ function serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function() {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : _interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY\n        }\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if (request.body !== undefined && request.body !== null || nullable && request.body === null || required) {\n                const requestBodyParameterPathString = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey\n                        });\n                    } else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey\n                        });\n                    }\n                } else if (typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.String && (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                } else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        } catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters){\n            const formDataParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */ function getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\n        \"Composite\",\n        \"Sequence\",\n        \"Dictionary\"\n    ].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[_interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = {\n            [xmlnsKey]: xmlNamespace\n        };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [\n            obj\n        ];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return {\n            [elementName]: obj\n        };\n    }\n    const result = {\n        [elementName]: obj\n    };\n    result[_interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = {\n        [xmlNamespaceKey]: xmlNamespace\n    };\n    return result;\n} //# sourceMappingURL=serializationPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serializer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapperTypeNames: () => (/* binding */ MapperTypeNames),\n/* harmony export */   createSerializer: () => (/* binding */ createSerializer)\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false){\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    /**\n     * @deprecated Removing the constraints validation on client side.\n     */ validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue)=>{\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems && value.some((item, i, ar)=>ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */ serialize(mapper, object, objectName, options = {\n        xml: {}\n    }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY\n            }\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        } else {\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            } else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            } else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            } else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            } else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            } else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            } else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            } else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */ deserialize(mapper, responseBody, objectName, options = {\n        xml: {}\n    }) {\n        var _a, _b, _c, _d;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY\n            },\n            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        } else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */ if (responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            } else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                } else if (responseBody === \"false\") {\n                    payload = false;\n                } else {\n                    payload = responseBody;\n                }\n            } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            } else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            } else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = _base64_js__WEBPACK_IMPORTED_MODULE_0__.decodeString(responseBody);\n            } else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            } else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            } else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */ function createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while(len - 1 >= 0 && str[len - 1] === ch){\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = _base64_js__WEBPACK_IMPORTED_MODULE_0__.encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords){\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            } else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        } else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        } else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidUuid)(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        } else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        } else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" && typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n            typeof value.tee !== \"function\" && // browser ReadableStream\n            !(value instanceof ArrayBuffer) && !ArrayBuffer.isView(value) && // File objects count as a type of Blob, so we want to use instanceof explicitly\n            !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) && objectType !== \"function\") {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item)=>{\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = _base64_js__WEBPACK_IMPORTED_MODULE_0__.encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString().substring(0, 10) : new Date(value).toISOString().substring(0, 10);\n        } else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        } else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date || typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` + `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        } else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDuration)(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for(let i = 0; i < object.length; i++){\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix ? `xmlns:${elementType.xmlNamespacePrefix}` : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = {\n                    [xmlnsKey]: elementType.xmlNamespace\n                };\n            } else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = {\n                    [xmlnsKey]: elementType.xmlNamespace\n                };\n            }\n        } else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)){\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = {\n            [xmlnsKey]: mapper.xmlNamespace\n        };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */ function resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */ function resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */ function resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` + `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)){\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                } else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            } else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths){\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) && (object[key] !== undefined && object[key] !== null || propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n                    parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]), {\n                        [xmlnsKey]: mapper.xmlNamespace\n                    });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\" ? objectName + \".\" + propertyMapper.serializedName : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator && polymorphicDiscriminator.clientName === key && (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] || {};\n                        parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY][propName] = serializedValue;\n                    } else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = {\n                            [propertyMapper.xmlElementName]: value\n                        };\n                    } else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for(const clientPropName in object){\n                const isAdditionalProperty = propNames.every((pn)=>pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix ? `xmlns:${propertyMapper.xmlNamespacePrefix}` : \"xmlns\";\n    const xmlNamespace = {\n        [xmlnsKey]: propertyMapper.xmlNamespace\n    };\n    if ([\n        \"Composite\"\n    ].includes(propertyMapper.type.name)) {\n        if (serializedValue[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]) {\n            return serializedValue;\n        } else {\n            const result = Object.assign({}, serializedValue);\n            result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [\n        _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY,\n        options.xml.xmlCharKey\n    ].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a, _b;\n    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)){\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)){\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        } else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY][xmlName], propertyObjectName, options);\n            } else if (propertyMapper.xmlIsMsText) {\n                if (responseBody[xmlCharKey] !== undefined) {\n                    instance[key] = responseBody[xmlCharKey];\n                } else if (typeof responseBody === \"string\") {\n                    // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n                    //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n                    instance[key] = responseBody;\n                }\n            } else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */ const wrapped = responseBody[xmlName];\n                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                    handledPropertyNames.push(xmlName);\n                } else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                    handledPropertyNames.push(propertyName);\n                }\n            }\n        } else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            let steps = 0;\n            for (const item of paths){\n                if (!res) break;\n                steps++;\n                res = res[item];\n            }\n            // only accept null when reaching the last position of object otherwise it would be undefined\n            if (res === null && steps < paths.length) {\n                res = undefined;\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator && key === polymorphicDiscriminator.clientName && (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)){\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName)=>{\n            for(const clientPropName in modelProps){\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for(const responsePropName in responseBody){\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    } else if (responseBody && !options.ignoreUnknownProperties) {\n        for (const key of Object.keys(responseBody)){\n            if (instance[key] === undefined && !handledPropertyNames.includes(key) && !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */ const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)){\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` + `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [\n                responseBody\n            ];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for(let i = 0; i < responseBody.length; i++){\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n    const typeNamesToCheck = [\n        typeName\n    ];\n    while(typeNamesToCheck.length){\n        const currentName = typeNamesToCheck.shift();\n        const indexDiscriminator = discriminatorValue === currentName ? discriminatorValue : currentName + \".\" + discriminatorValue;\n        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n            return discriminators[indexDiscriminator];\n        } else {\n            for (const [name, mapper] of Object.entries(discriminators)){\n                if (name.startsWith(currentName + \".\") && mapper.type.uberParent === currentName && mapper.type.className) {\n                    typeNamesToCheck.push(mapper.type.className);\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    var _a;\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n            if (typeof discriminatorValue === \"string\" && typeName) {\n                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return mapper.type.polymorphicDiscriminator || getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) || getPolymorphicDiscriminatorSafely(serializer, mapper.type.className);\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return typeName && serializer.modelMappers[typeName] && serializer.modelMappers[typeName].type.polymorphicDiscriminator;\n}\n/**\n * Known types of Mappers\n */ const MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\"\n}; //# sourceMappingURL=serializer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serviceClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceClient: () => (/* binding */ ServiceClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\");\n/* harmony import */ var _httpClientCache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpClientCache.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _urlHelpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./urlHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n/**\n * Initializes a new instance of the ServiceClient.\n */ class ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param options - The service client options that govern the behavior of the client.\n     */ constructor(options = {}){\n        var _a, _b;\n        this._requestContentType = options.requestContentType;\n        this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;\n        if (options.baseUri) {\n            _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.warning(\"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\");\n        }\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || (0,_httpClientCache_js__WEBPACK_IMPORTED_MODULE_3__.getCachedDefaultHttpClient)();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n        if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n            for (const { policy, position } of options.additionalPolicies){\n                // Sign happens after Retry and is commonly needed to occur\n                // before policies that intercept post-retry.\n                const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n                this.pipeline.addPolicy(policy, {\n                    afterPhase\n                });\n            }\n        }\n    }\n    /**\n     * Send the provided httpRequest.\n     */ async sendRequest(request) {\n        return this.pipeline.sendRequest(this._httpClient, request);\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */ async sendOperationRequest(operationArguments, operationSpec) {\n        const endpoint = operationSpec.baseUrl || this._endpoint;\n        if (!endpoint) {\n            throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\");\n        }\n        // Templatized URLs sometimes reference properties on the ServiceClient child class,\n        // so we have to pass `this` below in order to search these properties if they're\n        // not part of OperationArguments\n        const url = (0,_urlHelpers_js__WEBPACK_IMPORTED_MODULE_5__.getRequestUrl)(endpoint, operationSpec, operationArguments, this);\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)({\n            url\n        });\n        request.method = operationSpec.httpMethod;\n        const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_4__.getOperationRequestInfo)(request);\n        operationInfo.operationSpec = operationSpec;\n        operationInfo.operationArguments = operationArguments;\n        const contentType = operationSpec.contentType || this._requestContentType;\n        if (contentType && operationSpec.requestBody) {\n            request.headers.set(\"Content-Type\", contentType);\n        }\n        const options = operationArguments.options;\n        if (options) {\n            const requestOptions = options.requestOptions;\n            if (requestOptions) {\n                if (requestOptions.timeout) {\n                    request.timeout = requestOptions.timeout;\n                }\n                if (requestOptions.onUploadProgress) {\n                    request.onUploadProgress = requestOptions.onUploadProgress;\n                }\n                if (requestOptions.onDownloadProgress) {\n                    request.onDownloadProgress = requestOptions.onDownloadProgress;\n                }\n                if (requestOptions.shouldDeserialize !== undefined) {\n                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                }\n                if (requestOptions.allowInsecureConnection) {\n                    request.allowInsecureConnection = true;\n                }\n            }\n            if (options.abortSignal) {\n                request.abortSignal = options.abortSignal;\n            }\n            if (options.tracingOptions) {\n                request.tracingOptions = options.tracingOptions;\n            }\n        }\n        if (this._allowInsecureConnection) {\n            request.allowInsecureConnection = true;\n        }\n        if (request.streamResponseStatusCodes === undefined) {\n            request.streamResponseStatusCodes = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_6__.getStreamingResponseStatusCodes)(operationSpec);\n        }\n        try {\n            const rawResponse = await this.sendRequest(request);\n            const flatResponse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.flattenResponse)(rawResponse, operationSpec.responses[rawResponse.status]);\n            if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                options.onResponse(rawResponse, flatResponse);\n            }\n            return flatResponse;\n        } catch (error) {\n            if (typeof error === \"object\" && (error === null || error === void 0 ? void 0 : error.response)) {\n                const rawResponse = error.response;\n                const flatResponse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.flattenResponse)(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                error.details = flatResponse;\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse, error);\n                }\n            }\n            throw error;\n        }\n    }\n}\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes ? {\n        credentialScopes,\n        credential: options.credential\n    } : undefined;\n    return (0,_pipeline_js__WEBPACK_IMPORTED_MODULE_1__.createClientPipeline)(Object.assign(Object.assign({}, options), {\n        credentialOptions\n    }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        return options.credentialScopes;\n    }\n    if (options.endpoint) {\n        return `${options.endpoint}/.default`;\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n} //# sourceMappingURL=serviceClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/state.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/state.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n/* harmony import */ var _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonjs/state.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.\n// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.\n\n/**\n * Defines the shared state between CJS and ESM by re-exporting the CJS state.\n */ const state = _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__.state; //# sourceMappingURL=state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3N0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNsQyx5RkFBeUY7QUFDekYsd0dBQXdHO0FBQy9DO0FBQ3pEOztDQUVDLEdBQ00sTUFBTUEsUUFBUUMscURBQVFBLENBQUMsQ0FDOUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3N0YXRlLmpzPzIwODMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vLyBAdHMtZXhwZWN0LWVycm9yIFRoZSByZWNvbW1lbmRlZCBhcHByb2FjaCB0byBzaGFyaW5nIG1vZHVsZSBzdGF0ZSBiZXR3ZWVuIEVTTSBhbmQgQ0pTLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3MvdHNoeS9ibG9iL21haW4vUkVBRE1FLm1kI21vZHVsZS1sb2NhbC1zdGF0ZSBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbmltcG9ydCB7IHN0YXRlIGFzIGNqc1N0YXRlIH0gZnJvbSBcIi4uL2NvbW1vbmpzL3N0YXRlLmpzXCI7XG4vKipcbiAqIERlZmluZXMgdGhlIHNoYXJlZCBzdGF0ZSBiZXR3ZWVuIENKUyBhbmQgRVNNIGJ5IHJlLWV4cG9ydGluZyB0aGUgQ0pTIHN0YXRlLlxuICovXG5leHBvcnQgY29uc3Qgc3RhdGUgPSBjanNTdGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLmpzLm1hcCJdLCJuYW1lcyI6WyJzdGF0ZSIsImNqc1N0YXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/urlHelpers.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendQueryParams: () => (/* binding */ appendQueryParams),\n/* harmony export */   getRequestUrl: () => (/* binding */ getRequestUrl)\n/* harmony export */ });\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\t\",\n    Pipes: \"|\"\n};\nfunction getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let isAbsolutePath = false;\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        let path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like /{nextLink}\n        // which may be a fully formed URL with a leading /. In that case, we should\n        // remove the leading /\n        if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n            isAbsolutePath = true;\n        } else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    /**\n     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n     * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n     * is still being built so there is nothing to overwrite.\n     */ requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements){\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters){\n            let urlParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__.getOperationArgumentValueFromParameter)(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url, pathToAppend) {\n    if (!pathToAppend) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    } else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    const sequenceParams = new Set();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters){\n            if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n                sequenceParams.add(queryParameter.mapper.serializedName);\n            }\n            let queryParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__.getOperationArgumentValueFromParameter)(operationArguments, queryParameter, fallbackObject);\n            if (queryParameterValue !== undefined && queryParameterValue !== null || queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(queryParameter));\n                const delimiter = queryParameter.collectionFormat ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat] : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item)=>{\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                } else if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item)=>{\n                            return encodeURIComponent(item);\n                        });\n                    } else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) && (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return {\n        queryParams: result,\n        sequenceParams\n    };\n}\nfunction simpleParseQueryParams(queryString) {\n    const result = new Map();\n    if (!queryString || queryString[0] !== \"?\") {\n        return result;\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    for (const pair of pairs){\n        const [name, value] = pair.split(\"=\", 2);\n        const existingValue = result.get(name);\n        if (existingValue) {\n            if (Array.isArray(existingValue)) {\n                existingValue.push(value);\n            } else {\n                result.set(name, [\n                    existingValue,\n                    value\n                ]);\n            }\n        } else {\n            result.set(name, value);\n        }\n    }\n    return result;\n}\n/** @internal */ function appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {\n    if (queryParams.size === 0) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const combinedParams = simpleParseQueryParams(parsedUrl.search);\n    for (const [name, value] of queryParams){\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            if (Array.isArray(value)) {\n                existingValue.push(...value);\n                const valueSet = new Set(existingValue);\n                combinedParams.set(name, Array.from(valueSet));\n            } else {\n                existingValue.push(value);\n            }\n        } else if (existingValue) {\n            if (Array.isArray(value)) {\n                value.unshift(existingValue);\n            } else if (sequenceParams.has(name)) {\n                combinedParams.set(name, [\n                    existingValue,\n                    value\n                ]);\n            }\n            if (!noOverwrite) {\n                combinedParams.set(name, value);\n            }\n        } else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams){\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        } else if (Array.isArray(value)) {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value){\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        } else {\n            searchPieces.push(`${name}=${value}`);\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n} //# sourceMappingURL=urlHelpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flattenResponse: () => (/* binding */ flattenResponse),\n/* harmony export */   isDuration: () => (/* binding */ isDuration),\n/* harmony export */   isPrimitiveBody: () => (/* binding */ isPrimitiveBody),\n/* harmony export */   isValidUuid: () => (/* binding */ isValidUuid)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */ function isPrimitiveBody(value, mapperTypeName) {\n    return mapperTypeName !== \"Composite\" && mapperTypeName !== \"Dictionary\" && (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !== null || value === undefined || value === null);\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */ function isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */ function isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */ function handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType && Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? {\n            body: null\n        } : null;\n    } else {\n        return responseObject.shouldWrapBody ? Object.assign(Object.assign({}, responseObject.headers), {\n            body: responseObject.body\n        }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */ function flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    // head methods never have a body, but we return a boolean set to body property\n    // to indicate presence/absence of the resource\n    if (fullResponse.request.method === \"HEAD\") {\n        return Object.assign(Object.assign({}, parsedHeaders), {\n            body: fullResponse.parsedBody\n        });\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */ if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), {\n            blobBody: fullResponse.blobBody,\n            readableStreamBody: fullResponse.readableStreamBody\n        });\n    }\n    const modelProperties = expectedBodyTypeName === \"Composite\" && bodyMapper.type.modelProperties || {};\n    const isPageableResponse = Object.keys(modelProperties).some((k)=>modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)){\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)){\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable && !fullResponse.parsedBody && !parsedHeaders && Object.getOwnPropertyNames(modelProperties).length === 0 ? null : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName)\n    });\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RETRY_POLICY_COUNT: () => (/* binding */ DEFAULT_RETRY_POLICY_COUNT),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst SDK_VERSION = \"1.21.0\";\nconst DEFAULT_RETRY_POLICY_COUNT = 3; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQzNCLE1BQU1BLGNBQWMsU0FBUztBQUM3QixNQUFNQyw2QkFBNkIsRUFBRSxDQUM1QyxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL2NvbnN0YW50cy5qcz9lNDM0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuZXhwb3J0IGNvbnN0IFNES19WRVJTSU9OID0gXCIxLjIxLjBcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFVFJZX1BPTElDWV9DT1VOVCA9IDM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIlNES19WRVJTSU9OIiwiREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPipelineFromOptions: () => (/* binding */ createPipelineFromOptions)\n/* harmony export */ });\n/* harmony import */ var _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/logPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\");\n/* harmony import */ var _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\");\n/* harmony import */ var _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\");\n/* harmony import */ var _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\");\n/* harmony import */ var _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\");\n/* harmony import */ var _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\");\n/* harmony import */ var _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\");\n/* harmony import */ var _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\");\n/* harmony import */ var _policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/agentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js\");\n/* harmony import */ var _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\");\n/* harmony import */ var _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\");\n/* harmony import */ var _policies_wrapAbortSignalLikePolicy_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/wrapAbortSignalLikePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/wrapAbortSignalLikePolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */ function createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = (0,_pipeline_js__WEBPACK_IMPORTED_MODULE_1__.createEmptyPipeline)();\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_8__.isNodeLike) {\n        if (options.agent) {\n            pipeline.addPolicy((0,_policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_11__.agentPolicy)(options.agent));\n        }\n        if (options.tlsOptions) {\n            pipeline.addPolicy((0,_policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_12__.tlsPolicy)(options.tlsOptions));\n        }\n        pipeline.addPolicy((0,_policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_9__.proxyPolicy)(options.proxyOptions));\n        pipeline.addPolicy((0,_policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_5__.decompressResponsePolicy)());\n    }\n    pipeline.addPolicy((0,_policies_wrapAbortSignalLikePolicy_js__WEBPACK_IMPORTED_MODULE_14__.wrapAbortSignalLikePolicy)());\n    pipeline.addPolicy((0,_policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_7__.formDataPolicy)(), {\n        beforePolicies: [\n            _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__.multipartPolicyName\n        ]\n    });\n    pipeline.addPolicy((0,_policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_3__.userAgentPolicy)(options.userAgentOptions));\n    pipeline.addPolicy((0,_policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_10__.setClientRequestIdPolicy)((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy((0,_policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__.multipartPolicy)(), {\n        afterPhase: \"Deserialize\"\n    });\n    pipeline.addPolicy((0,_policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_6__.defaultRetryPolicy)(options.retryOptions), {\n        phase: \"Retry\"\n    });\n    pipeline.addPolicy((0,_policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_13__.tracingPolicy)(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n        afterPhase: \"Retry\"\n    });\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_8__.isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy((0,_policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_2__.redirectPolicy)(options.redirectOptions), {\n            afterPhase: \"Retry\"\n        });\n    }\n    pipeline.addPolicy((0,_policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_0__.logPolicy)(options.loggingOptions), {\n        afterPhase: \"Sign\"\n    });\n    return pipeline;\n} //# sourceMappingURL=createPipelineFromOptions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2tCO0FBQ0E7QUFDVTtBQUNFO0FBQ3FCO0FBQ0g7QUFDWjtBQUNSO0FBQ2hCO0FBQ1U7QUFDMEI7QUFDMUI7QUFDSjtBQUNRO0FBQ3dCO0FBQ3BGOzs7Q0FHQyxHQUNNLFNBQVNnQiwwQkFBMEJDLE9BQU87SUFDN0MsSUFBSUM7SUFDSixNQUFNQyxXQUFXbEIsaUVBQW1CQTtJQUNwQyxJQUFJUSx3REFBVUEsRUFBRTtRQUNaLElBQUlRLFFBQVFHLEtBQUssRUFBRTtZQUNmRCxTQUFTRSxTQUFTLENBQUNULHNFQUFXQSxDQUFDSyxRQUFRRyxLQUFLO1FBQ2hEO1FBQ0EsSUFBSUgsUUFBUUssVUFBVSxFQUFFO1lBQ3BCSCxTQUFTRSxTQUFTLENBQUNSLGtFQUFTQSxDQUFDSSxRQUFRSyxVQUFVO1FBQ25EO1FBQ0FILFNBQVNFLFNBQVMsQ0FBQ1gscUVBQVdBLENBQUNPLFFBQVFNLFlBQVk7UUFDbkRKLFNBQVNFLFNBQVMsQ0FBQ2YsK0ZBQXdCQTtJQUMvQztJQUNBYSxTQUFTRSxTQUFTLENBQUNOLGtHQUF5QkE7SUFDNUNJLFNBQVNFLFNBQVMsQ0FBQ2IsMkVBQWNBLElBQUk7UUFBRWdCLGdCQUFnQjtZQUFDbkIsNkVBQW1CQTtTQUFDO0lBQUM7SUFDN0VjLFNBQVNFLFNBQVMsQ0FBQ2xCLDZFQUFlQSxDQUFDYyxRQUFRUSxnQkFBZ0I7SUFDM0ROLFNBQVNFLFNBQVMsQ0FBQ1YsZ0dBQXdCQSxDQUFDLENBQUNPLEtBQUtELFFBQVFTLGdCQUFnQixNQUFNLFFBQVFSLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR1MseUJBQXlCO0lBQzdJLHNFQUFzRTtJQUN0RSxnRUFBZ0U7SUFDaEUscUVBQXFFO0lBQ3JFUixTQUFTRSxTQUFTLENBQUNqQiw2RUFBZUEsSUFBSTtRQUFFd0IsWUFBWTtJQUFjO0lBQ2xFVCxTQUFTRSxTQUFTLENBQUNkLG1GQUFrQkEsQ0FBQ1UsUUFBUVksWUFBWSxHQUFHO1FBQUVDLE9BQU87SUFBUTtJQUM5RVgsU0FBU0UsU0FBUyxDQUFDUCwwRUFBYUEsQ0FBQ2lCLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR2YsUUFBUVEsZ0JBQWdCLEdBQUdSLFFBQVFnQixjQUFjLElBQUk7UUFDbEhMLFlBQVk7SUFDaEI7SUFDQSxJQUFJbkIsd0RBQVVBLEVBQUU7UUFDWiwrREFBK0Q7UUFDL0Qsa0RBQWtEO1FBQ2xEVSxTQUFTRSxTQUFTLENBQUNuQiwyRUFBY0EsQ0FBQ2UsUUFBUWlCLGVBQWUsR0FBRztZQUFFTixZQUFZO1FBQVE7SUFDdEY7SUFDQVQsU0FBU0UsU0FBUyxDQUFDckIsaUVBQVNBLENBQUNpQixRQUFRZ0IsY0FBYyxHQUFHO1FBQUVMLFlBQVk7SUFBTztJQUMzRSxPQUFPVDtBQUNYLEVBQ0EscURBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzP2I0MTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBsb2dQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9sb2dQb2xpY3kuanNcIjtcbmltcG9ydCB7IGNyZWF0ZUVtcHR5UGlwZWxpbmUgfSBmcm9tIFwiLi9waXBlbGluZS5qc1wiO1xuaW1wb3J0IHsgcmVkaXJlY3RQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qc1wiO1xuaW1wb3J0IHsgdXNlckFnZW50UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvdXNlckFnZW50UG9saWN5LmpzXCI7XG5pbXBvcnQgeyBtdWx0aXBhcnRQb2xpY3ksIG11bHRpcGFydFBvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy9tdWx0aXBhcnRQb2xpY3kuanNcIjtcbmltcG9ydCB7IGRlY29tcHJlc3NSZXNwb25zZVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL2RlY29tcHJlc3NSZXNwb25zZVBvbGljeS5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdFJldHJ5UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvZGVmYXVsdFJldHJ5UG9saWN5LmpzXCI7XG5pbXBvcnQgeyBmb3JtRGF0YVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL2Zvcm1EYXRhUG9saWN5LmpzXCI7XG5pbXBvcnQgeyBpc05vZGVMaWtlIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmltcG9ydCB7IHByb3h5UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvcHJveHlQb2xpY3kuanNcIjtcbmltcG9ydCB7IHNldENsaWVudFJlcXVlc3RJZFBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3NldENsaWVudFJlcXVlc3RJZFBvbGljeS5qc1wiO1xuaW1wb3J0IHsgYWdlbnRQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9hZ2VudFBvbGljeS5qc1wiO1xuaW1wb3J0IHsgdGxzUG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvdGxzUG9saWN5LmpzXCI7XG5pbXBvcnQgeyB0cmFjaW5nUG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvdHJhY2luZ1BvbGljeS5qc1wiO1xuaW1wb3J0IHsgd3JhcEFib3J0U2lnbmFsTGlrZVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3dyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3kuanNcIjtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IHBpcGVsaW5lIHdpdGggYSBkZWZhdWx0IHNldCBvZiBjdXN0b21pemFibGUgcG9saWNpZXMuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29uZmlndXJlIGEgY3VzdG9tIHBpcGVsaW5lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHBpcGVsaW5lID0gY3JlYXRlRW1wdHlQaXBlbGluZSgpO1xuICAgIGlmIChpc05vZGVMaWtlKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmFnZW50KSB7XG4gICAgICAgICAgICBwaXBlbGluZS5hZGRQb2xpY3koYWdlbnRQb2xpY3kob3B0aW9ucy5hZ2VudCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnRsc09wdGlvbnMpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLmFkZFBvbGljeSh0bHNQb2xpY3kob3B0aW9ucy50bHNPcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KHByb3h5UG9saWN5KG9wdGlvbnMucHJveHlPcHRpb25zKSk7XG4gICAgICAgIHBpcGVsaW5lLmFkZFBvbGljeShkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3koKSk7XG4gICAgfVxuICAgIHBpcGVsaW5lLmFkZFBvbGljeSh3cmFwQWJvcnRTaWduYWxMaWtlUG9saWN5KCkpO1xuICAgIHBpcGVsaW5lLmFkZFBvbGljeShmb3JtRGF0YVBvbGljeSgpLCB7IGJlZm9yZVBvbGljaWVzOiBbbXVsdGlwYXJ0UG9saWN5TmFtZV0gfSk7XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KHVzZXJBZ2VudFBvbGljeShvcHRpb25zLnVzZXJBZ2VudE9wdGlvbnMpKTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3koc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5KChfYSA9IG9wdGlvbnMudGVsZW1ldHJ5T3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsaWVudFJlcXVlc3RJZEhlYWRlck5hbWUpKTtcbiAgICAvLyBUaGUgbXVsdGlwYXJ0IHBvbGljeSBpcyBhZGRlZCBhZnRlciBwb2xpY2llcyB3aXRoIG5vIHBoYXNlLCBzbyB0aGF0XG4gICAgLy8gcG9saWNpZXMgY2FuIGJlIGFkZGVkIGJldHdlZW4gaXQgYW5kIGZvcm1EYXRhUG9saWN5IHRvIG1vZGlmeVxuICAgIC8vIHByb3BlcnRpZXMgKGUuZy4sIG1ha2luZyB0aGUgYm91bmRhcnkgY29uc3RhbnQgaW4gcmVjb3JkZWQgdGVzdHMpLlxuICAgIHBpcGVsaW5lLmFkZFBvbGljeShtdWx0aXBhcnRQb2xpY3koKSwgeyBhZnRlclBoYXNlOiBcIkRlc2VyaWFsaXplXCIgfSk7XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KGRlZmF1bHRSZXRyeVBvbGljeShvcHRpb25zLnJldHJ5T3B0aW9ucyksIHsgcGhhc2U6IFwiUmV0cnlcIiB9KTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3kodHJhY2luZ1BvbGljeShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMudXNlckFnZW50T3B0aW9ucyksIG9wdGlvbnMubG9nZ2luZ09wdGlvbnMpKSwge1xuICAgICAgICBhZnRlclBoYXNlOiBcIlJldHJ5XCIsXG4gICAgfSk7XG4gICAgaWYgKGlzTm9kZUxpa2UpIHtcbiAgICAgICAgLy8gQm90aCBYSFIgYW5kIEZldGNoIGV4cGVjdCB0byBoYW5kbGUgcmVkaXJlY3RzIGF1dG9tYXRpY2FsbHksXG4gICAgICAgIC8vIHNvIG9ubHkgaW5jbHVkZSB0aGlzIHBvbGljeSB3aGVuIHdlJ3JlIGluIE5vZGUuXG4gICAgICAgIHBpcGVsaW5lLmFkZFBvbGljeShyZWRpcmVjdFBvbGljeShvcHRpb25zLnJlZGlyZWN0T3B0aW9ucyksIHsgYWZ0ZXJQaGFzZTogXCJSZXRyeVwiIH0pO1xuICAgIH1cbiAgICBwaXBlbGluZS5hZGRQb2xpY3kobG9nUG9saWN5KG9wdGlvbnMubG9nZ2luZ09wdGlvbnMpLCB7IGFmdGVyUGhhc2U6IFwiU2lnblwiIH0pO1xuICAgIHJldHVybiBwaXBlbGluZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbImxvZ1BvbGljeSIsImNyZWF0ZUVtcHR5UGlwZWxpbmUiLCJyZWRpcmVjdFBvbGljeSIsInVzZXJBZ2VudFBvbGljeSIsIm11bHRpcGFydFBvbGljeSIsIm11bHRpcGFydFBvbGljeU5hbWUiLCJkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kiLCJkZWZhdWx0UmV0cnlQb2xpY3kiLCJmb3JtRGF0YVBvbGljeSIsImlzTm9kZUxpa2UiLCJwcm94eVBvbGljeSIsInNldENsaWVudFJlcXVlc3RJZFBvbGljeSIsImFnZW50UG9saWN5IiwidGxzUG9saWN5IiwidHJhY2luZ1BvbGljeSIsIndyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3kiLCJjcmVhdGVQaXBlbGluZUZyb21PcHRpb25zIiwib3B0aW9ucyIsIl9hIiwicGlwZWxpbmUiLCJhZ2VudCIsImFkZFBvbGljeSIsInRsc09wdGlvbnMiLCJwcm94eU9wdGlvbnMiLCJiZWZvcmVQb2xpY2llcyIsInVzZXJBZ2VudE9wdGlvbnMiLCJ0ZWxlbWV0cnlPcHRpb25zIiwiY2xpZW50UmVxdWVzdElkSGVhZGVyTmFtZSIsImFmdGVyUGhhc2UiLCJyZXRyeU9wdGlvbnMiLCJwaGFzZSIsIk9iamVjdCIsImFzc2lnbiIsImxvZ2dpbmdPcHRpb25zIiwicmVkaXJlY3RPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultHttpClient: () => (/* binding */ createDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/index.js\");\n/* harmony import */ var _util_wrapAbortSignal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/wrapAbortSignal.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/wrapAbortSignal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Create the correct HttpClient for the current environment.\n */ function createDefaultHttpClient() {\n    const client = (0,_typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__.createDefaultHttpClient)();\n    return {\n        async sendRequest (request) {\n            // we wrap any AbortSignalLike here since the TypeSpec runtime expects a native AbortSignal.\n            // 99% of the time, this should be a no-op since a native AbortSignal is passed in.\n            const { abortSignal, cleanup } = request.abortSignal ? (0,_util_wrapAbortSignal_js__WEBPACK_IMPORTED_MODULE_1__.wrapAbortSignalLike)(request.abortSignal) : {};\n            try {\n                // eslint-disable-next-line no-param-reassign\n                request.abortSignal = abortSignal;\n                return await client.sendRequest(request);\n            } finally{\n                cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n            }\n        }\n    };\n} //# sourceMappingURL=defaultHttpClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9kZWZhdWx0SHR0cENsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2dFO0FBQ2xDO0FBQ2hFOztDQUVDLEdBQ00sU0FBU0E7SUFDWixNQUFNRyxTQUFTRixrRkFBMEJBO0lBQ3pDLE9BQU87UUFDSCxNQUFNRyxhQUFZQyxPQUFPO1lBQ3JCLDRGQUE0RjtZQUM1RixtRkFBbUY7WUFDbkYsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLE9BQU8sRUFBRSxHQUFHRixRQUFRQyxXQUFXLEdBQzlDSiw2RUFBbUJBLENBQUNHLFFBQVFDLFdBQVcsSUFDdkMsQ0FBQztZQUNQLElBQUk7Z0JBQ0EsNkNBQTZDO2dCQUM3Q0QsUUFBUUMsV0FBVyxHQUFHQTtnQkFDdEIsT0FBTyxNQUFNSCxPQUFPQyxXQUFXLENBQUNDO1lBQ3BDLFNBQ1E7Z0JBQ0pFLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQTtZQUN0RDtRQUNKO0lBQ0o7QUFDSixFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vZGVmYXVsdEh0dHBDbGllbnQuanM/ZmUyMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZURlZmF1bHRIdHRwQ2xpZW50IGFzIHRzcENyZWF0ZURlZmF1bHRIdHRwQ2xpZW50IH0gZnJvbSBcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWVcIjtcbmltcG9ydCB7IHdyYXBBYm9ydFNpZ25hbExpa2UgfSBmcm9tIFwiLi91dGlsL3dyYXBBYm9ydFNpZ25hbC5qc1wiO1xuLyoqXG4gKiBDcmVhdGUgdGhlIGNvcnJlY3QgSHR0cENsaWVudCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0SHR0cENsaWVudCgpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0c3BDcmVhdGVEZWZhdWx0SHR0cENsaWVudCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICAgICAgICAgIC8vIHdlIHdyYXAgYW55IEFib3J0U2lnbmFsTGlrZSBoZXJlIHNpbmNlIHRoZSBUeXBlU3BlYyBydW50aW1lIGV4cGVjdHMgYSBuYXRpdmUgQWJvcnRTaWduYWwuXG4gICAgICAgICAgICAvLyA5OSUgb2YgdGhlIHRpbWUsIHRoaXMgc2hvdWxkIGJlIGEgbm8tb3Agc2luY2UgYSBuYXRpdmUgQWJvcnRTaWduYWwgaXMgcGFzc2VkIGluLlxuICAgICAgICAgICAgY29uc3QgeyBhYm9ydFNpZ25hbCwgY2xlYW51cCB9ID0gcmVxdWVzdC5hYm9ydFNpZ25hbFxuICAgICAgICAgICAgICAgID8gd3JhcEFib3J0U2lnbmFsTGlrZShyZXF1ZXN0LmFib3J0U2lnbmFsKVxuICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwgPSBhYm9ydFNpZ25hbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY2xpZW50LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCA9PT0gbnVsbCB8fCBjbGVhbnVwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbGVhbnVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRIdHRwQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVEZWZhdWx0SHR0cENsaWVudCIsInRzcENyZWF0ZURlZmF1bHRIdHRwQ2xpZW50Iiwid3JhcEFib3J0U2lnbmFsTGlrZSIsImNsaWVudCIsInNlbmRSZXF1ZXN0IiwicmVxdWVzdCIsImFib3J0U2lnbmFsIiwiY2xlYW51cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpHeaders: () => (/* binding */ createHttpHeaders)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */ function createHttpHeaders(rawHeaders) {\n    return (0,_typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)(rawHeaders);\n} //# sourceMappingURL=httpHeaders.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9odHRwSGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDb0Q7QUFDdEY7OztDQUdDLEdBQ00sU0FBU0Esa0JBQWtCRSxVQUFVO0lBQ3hDLE9BQU9ELDRFQUFvQkEsQ0FBQ0M7QUFDaEMsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL2h0dHBIZWFkZXJzLmpzP2Y5ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVIdHRwSGVhZGVycyBhcyB0c3BDcmVhdGVIdHRwSGVhZGVycyB9IGZyb20gXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lXCI7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgc2F0aXNmaWVzIHRoZSBgSHR0cEhlYWRlcnNgIGludGVyZmFjZS5cbiAqIEBwYXJhbSByYXdIZWFkZXJzIC0gQSBzaW1wbGUgb2JqZWN0IHJlcHJlc2VudGluZyBpbml0aWFsIGhlYWRlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUh0dHBIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgICByZXR1cm4gdHNwQ3JlYXRlSHR0cEhlYWRlcnMocmF3SGVhZGVycyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwSGVhZGVycy5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlSHR0cEhlYWRlcnMiLCJ0c3BDcmVhdGVIdHRwSGVhZGVycyIsInJhd0hlYWRlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestError: () => (/* reexport safe */ _restError_js__WEBPACK_IMPORTED_MODULE_5__.RestError),\n/* harmony export */   agentPolicy: () => (/* reexport safe */ _policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_24__.agentPolicy),\n/* harmony export */   agentPolicyName: () => (/* reexport safe */ _policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_24__.agentPolicyName),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicy: () => (/* reexport safe */ _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__.auxiliaryAuthenticationHeaderPolicy),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicyName: () => (/* reexport safe */ _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__.auxiliaryAuthenticationHeaderPolicyName),\n/* harmony export */   bearerTokenAuthenticationPolicy: () => (/* reexport safe */ _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__.bearerTokenAuthenticationPolicy),\n/* harmony export */   bearerTokenAuthenticationPolicyName: () => (/* reexport safe */ _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__.bearerTokenAuthenticationPolicyName),\n/* harmony export */   createDefaultHttpClient: () => (/* reexport safe */ _defaultHttpClient_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultHttpClient),\n/* harmony export */   createEmptyPipeline: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_0__.createEmptyPipeline),\n/* harmony export */   createFile: () => (/* reexport safe */ _util_file_js__WEBPACK_IMPORTED_MODULE_25__.createFile),\n/* harmony export */   createFileFromStream: () => (/* reexport safe */ _util_file_js__WEBPACK_IMPORTED_MODULE_25__.createFileFromStream),\n/* harmony export */   createHttpHeaders: () => (/* reexport safe */ _httpHeaders_js__WEBPACK_IMPORTED_MODULE_3__.createHttpHeaders),\n/* harmony export */   createPipelineFromOptions: () => (/* reexport safe */ _createPipelineFromOptions_js__WEBPACK_IMPORTED_MODULE_1__.createPipelineFromOptions),\n/* harmony export */   createPipelineRequest: () => (/* reexport safe */ _pipelineRequest_js__WEBPACK_IMPORTED_MODULE_4__.createPipelineRequest),\n/* harmony export */   decompressResponsePolicy: () => (/* reexport safe */ _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__.decompressResponsePolicy),\n/* harmony export */   decompressResponsePolicyName: () => (/* reexport safe */ _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__.decompressResponsePolicyName),\n/* harmony export */   defaultRetryPolicy: () => (/* reexport safe */ _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_17__.defaultRetryPolicy),\n/* harmony export */   exponentialRetryPolicy: () => (/* reexport safe */ _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__.exponentialRetryPolicy),\n/* harmony export */   exponentialRetryPolicyName: () => (/* reexport safe */ _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__.exponentialRetryPolicyName),\n/* harmony export */   formDataPolicy: () => (/* reexport safe */ _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__.formDataPolicy),\n/* harmony export */   formDataPolicyName: () => (/* reexport safe */ _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__.formDataPolicyName),\n/* harmony export */   getDefaultProxySettings: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.getDefaultProxySettings),\n/* harmony export */   isRestError: () => (/* reexport safe */ _restError_js__WEBPACK_IMPORTED_MODULE_5__.isRestError),\n/* harmony export */   logPolicy: () => (/* reexport safe */ _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__.logPolicy),\n/* harmony export */   logPolicyName: () => (/* reexport safe */ _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__.logPolicyName),\n/* harmony export */   multipartPolicy: () => (/* reexport safe */ _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__.multipartPolicy),\n/* harmony export */   multipartPolicyName: () => (/* reexport safe */ _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__.multipartPolicyName),\n/* harmony export */   ndJsonPolicy: () => (/* reexport safe */ _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__.ndJsonPolicy),\n/* harmony export */   ndJsonPolicyName: () => (/* reexport safe */ _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__.ndJsonPolicyName),\n/* harmony export */   proxyPolicy: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.proxyPolicyName),\n/* harmony export */   redirectPolicy: () => (/* reexport safe */ _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__.redirectPolicy),\n/* harmony export */   redirectPolicyName: () => (/* reexport safe */ _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__.redirectPolicyName),\n/* harmony export */   retryPolicy: () => (/* reexport safe */ _policies_retryPolicy_js__WEBPACK_IMPORTED_MODULE_15__.retryPolicy),\n/* harmony export */   setClientRequestIdPolicy: () => (/* reexport safe */ _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__.setClientRequestIdPolicy),\n/* harmony export */   setClientRequestIdPolicyName: () => (/* reexport safe */ _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__.setClientRequestIdPolicyName),\n/* harmony export */   systemErrorRetryPolicy: () => (/* reexport safe */ _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__.systemErrorRetryPolicy),\n/* harmony export */   systemErrorRetryPolicyName: () => (/* reexport safe */ _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__.systemErrorRetryPolicyName),\n/* harmony export */   throttlingRetryPolicy: () => (/* reexport safe */ _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__.throttlingRetryPolicy),\n/* harmony export */   throttlingRetryPolicyName: () => (/* reexport safe */ _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__.throttlingRetryPolicyName),\n/* harmony export */   tlsPolicy: () => (/* reexport safe */ _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__.tlsPolicy),\n/* harmony export */   tlsPolicyName: () => (/* reexport safe */ _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__.tlsPolicyName),\n/* harmony export */   tracingPolicy: () => (/* reexport safe */ _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__.tracingPolicy),\n/* harmony export */   tracingPolicyName: () => (/* reexport safe */ _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__.tracingPolicyName),\n/* harmony export */   userAgentPolicy: () => (/* reexport safe */ _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__.userAgentPolicy),\n/* harmony export */   userAgentPolicyName: () => (/* reexport safe */ _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__.userAgentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\");\n/* harmony import */ var _createPipelineFromOptions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createPipelineFromOptions.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js\");\n/* harmony import */ var _defaultHttpClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultHttpClient.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n/* harmony import */ var _pipelineRequest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pipelineRequest.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n/* harmony import */ var _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\");\n/* harmony import */ var _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/exponentialRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js\");\n/* harmony import */ var _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\");\n/* harmony import */ var _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/logPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\");\n/* harmony import */ var _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\");\n/* harmony import */ var _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\");\n/* harmony import */ var _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\");\n/* harmony import */ var _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/systemErrorRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js\");\n/* harmony import */ var _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/throttlingRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js\");\n/* harmony import */ var _policies_retryPolicy_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./policies/retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\");\n/* harmony import */ var _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\");\n/* harmony import */ var _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\");\n/* harmony import */ var _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\");\n/* harmony import */ var _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\");\n/* harmony import */ var _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./policies/bearerTokenAuthenticationPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js\");\n/* harmony import */ var _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./policies/ndJsonPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js\");\n/* harmony import */ var _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./policies/auxiliaryAuthenticationHeaderPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js\");\n/* harmony import */ var _policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./policies/agentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js\");\n/* harmony import */ var _util_file_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./util/file.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ21CO0FBQ3VCO0FBQ1g7QUFDWjtBQUNRO0FBQ0o7QUFDd0Q7QUFDTjtBQUNNO0FBQzlDO0FBQ2tCO0FBQ2E7QUFDZjtBQUN3QjtBQUNIO0FBQy9DO0FBQ3VCO0FBQ1Q7QUFDZTtBQUNuQjtBQUNlO0FBQ29EO0FBQzFEO0FBQ3NFO0FBQ3pFO0FBQ04sQ0FDbkUsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9pbmRleC5qcz9jYTkyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuZXhwb3J0IHsgY3JlYXRlRW1wdHlQaXBlbGluZSwgfSBmcm9tIFwiLi9waXBlbGluZS5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucywgfSBmcm9tIFwiLi9jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVEZWZhdWx0SHR0cENsaWVudCB9IGZyb20gXCIuL2RlZmF1bHRIdHRwQ2xpZW50LmpzXCI7XG5leHBvcnQgeyBjcmVhdGVIdHRwSGVhZGVycyB9IGZyb20gXCIuL2h0dHBIZWFkZXJzLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVQaXBlbGluZVJlcXVlc3QgfSBmcm9tIFwiLi9waXBlbGluZVJlcXVlc3QuanNcIjtcbmV4cG9ydCB7IFJlc3RFcnJvciwgaXNSZXN0RXJyb3IsIH0gZnJvbSBcIi4vcmVzdEVycm9yLmpzXCI7XG5leHBvcnQgeyBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3ksIGRlY29tcHJlc3NSZXNwb25zZVBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5LmpzXCI7XG5leHBvcnQgeyBleHBvbmVudGlhbFJldHJ5UG9saWN5LCBleHBvbmVudGlhbFJldHJ5UG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9leHBvbmVudGlhbFJldHJ5UG9saWN5LmpzXCI7XG5leHBvcnQgeyBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3ksIHNldENsaWVudFJlcXVlc3RJZFBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5LmpzXCI7XG5leHBvcnQgeyBsb2dQb2xpY3ksIGxvZ1BvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy9sb2dQb2xpY3kuanNcIjtcbmV4cG9ydCB7IG11bHRpcGFydFBvbGljeSwgbXVsdGlwYXJ0UG9saWN5TmFtZSB9IGZyb20gXCIuL3BvbGljaWVzL211bHRpcGFydFBvbGljeS5qc1wiO1xuZXhwb3J0IHsgcHJveHlQb2xpY3ksIHByb3h5UG9saWN5TmFtZSwgZ2V0RGVmYXVsdFByb3h5U2V0dGluZ3MgfSBmcm9tIFwiLi9wb2xpY2llcy9wcm94eVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgcmVkaXJlY3RQb2xpY3ksIHJlZGlyZWN0UG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qc1wiO1xuZXhwb3J0IHsgc3lzdGVtRXJyb3JSZXRyeVBvbGljeSwgc3lzdGVtRXJyb3JSZXRyeVBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvc3lzdGVtRXJyb3JSZXRyeVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgdGhyb3R0bGluZ1JldHJ5UG9saWN5LCB0aHJvdHRsaW5nUmV0cnlQb2xpY3lOYW1lLCB9IGZyb20gXCIuL3BvbGljaWVzL3Rocm90dGxpbmdSZXRyeVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgcmV0cnlQb2xpY3ksIH0gZnJvbSBcIi4vcG9saWNpZXMvcmV0cnlQb2xpY3kuanNcIjtcbmV4cG9ydCB7IHRyYWNpbmdQb2xpY3ksIHRyYWNpbmdQb2xpY3lOYW1lLCB9IGZyb20gXCIuL3BvbGljaWVzL3RyYWNpbmdQb2xpY3kuanNcIjtcbmV4cG9ydCB7IGRlZmF1bHRSZXRyeVBvbGljeSwgfSBmcm9tIFwiLi9wb2xpY2llcy9kZWZhdWx0UmV0cnlQb2xpY3kuanNcIjtcbmV4cG9ydCB7IHVzZXJBZ2VudFBvbGljeSwgdXNlckFnZW50UG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy91c2VyQWdlbnRQb2xpY3kuanNcIjtcbmV4cG9ydCB7IHRsc1BvbGljeSwgdGxzUG9saWN5TmFtZSB9IGZyb20gXCIuL3BvbGljaWVzL3Rsc1BvbGljeS5qc1wiO1xuZXhwb3J0IHsgZm9ybURhdGFQb2xpY3ksIGZvcm1EYXRhUG9saWN5TmFtZSB9IGZyb20gXCIuL3BvbGljaWVzL2Zvcm1EYXRhUG9saWN5LmpzXCI7XG5leHBvcnQgeyBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5LCBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9iZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5LmpzXCI7XG5leHBvcnQgeyBuZEpzb25Qb2xpY3ksIG5kSnNvblBvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy9uZEpzb25Qb2xpY3kuanNcIjtcbmV4cG9ydCB7IGF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LCBhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3kuanNcIjtcbmV4cG9ydCB7IGFnZW50UG9saWN5LCBhZ2VudFBvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy9hZ2VudFBvbGljeS5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlRmlsZSwgY3JlYXRlRmlsZUZyb21TdHJlYW0sIH0gZnJvbSBcIi4vdXRpbC9maWxlLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlRW1wdHlQaXBlbGluZSIsImNyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMiLCJjcmVhdGVEZWZhdWx0SHR0cENsaWVudCIsImNyZWF0ZUh0dHBIZWFkZXJzIiwiY3JlYXRlUGlwZWxpbmVSZXF1ZXN0IiwiUmVzdEVycm9yIiwiaXNSZXN0RXJyb3IiLCJkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kiLCJkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3lOYW1lIiwiZXhwb25lbnRpYWxSZXRyeVBvbGljeSIsImV4cG9uZW50aWFsUmV0cnlQb2xpY3lOYW1lIiwic2V0Q2xpZW50UmVxdWVzdElkUG9saWN5Iiwic2V0Q2xpZW50UmVxdWVzdElkUG9saWN5TmFtZSIsImxvZ1BvbGljeSIsImxvZ1BvbGljeU5hbWUiLCJtdWx0aXBhcnRQb2xpY3kiLCJtdWx0aXBhcnRQb2xpY3lOYW1lIiwicHJveHlQb2xpY3kiLCJwcm94eVBvbGljeU5hbWUiLCJnZXREZWZhdWx0UHJveHlTZXR0aW5ncyIsInJlZGlyZWN0UG9saWN5IiwicmVkaXJlY3RQb2xpY3lOYW1lIiwic3lzdGVtRXJyb3JSZXRyeVBvbGljeSIsInN5c3RlbUVycm9yUmV0cnlQb2xpY3lOYW1lIiwidGhyb3R0bGluZ1JldHJ5UG9saWN5IiwidGhyb3R0bGluZ1JldHJ5UG9saWN5TmFtZSIsInJldHJ5UG9saWN5IiwidHJhY2luZ1BvbGljeSIsInRyYWNpbmdQb2xpY3lOYW1lIiwiZGVmYXVsdFJldHJ5UG9saWN5IiwidXNlckFnZW50UG9saWN5IiwidXNlckFnZW50UG9saWN5TmFtZSIsInRsc1BvbGljeSIsInRsc1BvbGljeU5hbWUiLCJmb3JtRGF0YVBvbGljeSIsImZvcm1EYXRhUG9saWN5TmFtZSIsImJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kiLCJiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5TmFtZSIsIm5kSnNvblBvbGljeSIsIm5kSnNvblBvbGljeU5hbWUiLCJhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeSIsImF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5TmFtZSIsImFnZW50UG9saWN5IiwiYWdlbnRQb2xpY3lOYW1lIiwiY3JlYXRlRmlsZSIsImNyZWF0ZUZpbGVGcm9tU3RyZWFtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/log.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-rest-pipeline\"); //# sourceMappingURL=log.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9sb2cuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2lCO0FBQzVDLE1BQU1DLFNBQVNELGlFQUFrQkEsQ0FBQyxzQkFBc0IsQ0FDL0QsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9sb2cuanM/NGVkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUNsaWVudExvZ2dlciB9IGZyb20gXCJAYXp1cmUvbG9nZ2VyXCI7XG5leHBvcnQgY29uc3QgbG9nZ2VyID0gY3JlYXRlQ2xpZW50TG9nZ2VyKFwiY29yZS1yZXN0LXBpcGVsaW5lXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRMb2dnZXIiLCJsb2dnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyPipeline: () => (/* binding */ createEmptyPipeline)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */ function createEmptyPipeline() {\n    return (0,_typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__.createEmptyPipeline)();\n} //# sourceMappingURL=pipeline.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9waXBlbGluZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDd0Q7QUFDMUY7OztDQUdDLEdBQ00sU0FBU0E7SUFDWixPQUFPQyw4RUFBc0JBO0FBQ2pDLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9waXBlbGluZS5qcz9lODUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlRW1wdHlQaXBlbGluZSBhcyB0c3BDcmVhdGVFbXB0eVBpcGVsaW5lIH0gZnJvbSBcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWVcIjtcbi8qKlxuICogQ3JlYXRlcyBhIHRvdGFsbHkgZW1wdHkgcGlwZWxpbmUuXG4gKiBVc2VmdWwgZm9yIHRlc3Rpbmcgb3IgY3JlYXRpbmcgYSBjdXN0b20gb25lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW1wdHlQaXBlbGluZSgpIHtcbiAgICByZXR1cm4gdHNwQ3JlYXRlRW1wdHlQaXBlbGluZSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZWxpbmUuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZUVtcHR5UGlwZWxpbmUiLCJ0c3BDcmVhdGVFbXB0eVBpcGVsaW5lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPipelineRequest: () => (/* binding */ createPipelineRequest)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */ function createPipelineRequest(options) {\n    // Cast required due to difference between ts-http-runtime requiring AbortSignal while core-rest-pipeline allows\n    // the more generic AbortSignalLike. The wrapAbortSignalLike pipeline policy will take care of ensuring that any AbortSignalLike in the request\n    // is converted into a true AbortSignal.\n    return (0,_typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)(options);\n} //# sourceMappingURL=pipelineRequest.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9waXBlbGluZVJlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQzZEO0FBQy9GOzs7O0NBSUMsR0FDTSxTQUFTQSxzQkFBc0JFLE9BQU87SUFDekMsZ0hBQWdIO0lBQ2hILCtJQUErSTtJQUMvSSx3Q0FBd0M7SUFDeEMsT0FBT0QsZ0ZBQXdCQSxDQUFDQztBQUNwQyxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcGlwZWxpbmVSZXF1ZXN0LmpzPzJmNmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVQaXBlbGluZVJlcXVlc3QgYXMgdHNwQ3JlYXRlUGlwZWxpbmVSZXF1ZXN0LCB9IGZyb20gXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcGlwZWxpbmUgcmVxdWVzdCB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICogVGhpcyBtZXRob2QgaXMgdG8gYWxsb3cgZm9yIHRoZSBlYXN5IHNldHRpbmcgb2YgZGVmYXVsdCB2YWx1ZXMgYW5kIG5vdCByZXF1aXJlZC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gY3JlYXRlIHRoZSByZXF1ZXN0IHdpdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQaXBlbGluZVJlcXVlc3Qob3B0aW9ucykge1xuICAgIC8vIENhc3QgcmVxdWlyZWQgZHVlIHRvIGRpZmZlcmVuY2UgYmV0d2VlbiB0cy1odHRwLXJ1bnRpbWUgcmVxdWlyaW5nIEFib3J0U2lnbmFsIHdoaWxlIGNvcmUtcmVzdC1waXBlbGluZSBhbGxvd3NcbiAgICAvLyB0aGUgbW9yZSBnZW5lcmljIEFib3J0U2lnbmFsTGlrZS4gVGhlIHdyYXBBYm9ydFNpZ25hbExpa2UgcGlwZWxpbmUgcG9saWN5IHdpbGwgdGFrZSBjYXJlIG9mIGVuc3VyaW5nIHRoYXQgYW55IEFib3J0U2lnbmFsTGlrZSBpbiB0aGUgcmVxdWVzdFxuICAgIC8vIGlzIGNvbnZlcnRlZCBpbnRvIGEgdHJ1ZSBBYm9ydFNpZ25hbC5cbiAgICByZXR1cm4gdHNwQ3JlYXRlUGlwZWxpbmVSZXF1ZXN0KG9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZWxpbmVSZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVQaXBlbGluZVJlcXVlc3QiLCJ0c3BDcmVhdGVQaXBlbGluZVJlcXVlc3QiLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   agentPolicy: () => (/* binding */ agentPolicy),\n/* harmony export */   agentPolicyName: () => (/* binding */ agentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Name of the Agent Policy\n */ const agentPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.agentPolicyName;\n/**\n * Gets a pipeline policy that sets http.agent\n */ function agentPolicy(agent) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.agentPolicy)(agent);\n} //# sourceMappingURL=agentPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9hZ2VudFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2tHO0FBQ3BJOztDQUVDLEdBQ00sTUFBTUEsa0JBQWtCQyx3RkFBa0JBLENBQUM7QUFDbEQ7O0NBRUMsR0FDTSxTQUFTQyxZQUFZRSxLQUFLO0lBQzdCLE9BQU9ELHdGQUFjQSxDQUFDQztBQUMxQixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvYWdlbnRQb2xpY3kuanM/NzUwNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGFnZW50UG9saWN5TmFtZSBhcyB0c3BBZ2VudFBvbGljeU5hbWUsIGFnZW50UG9saWN5IGFzIHRzcEFnZW50UG9saWN5LCB9IGZyb20gXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3BvbGljaWVzXCI7XG4vKipcbiAqIE5hbWUgb2YgdGhlIEFnZW50IFBvbGljeVxuICovXG5leHBvcnQgY29uc3QgYWdlbnRQb2xpY3lOYW1lID0gdHNwQWdlbnRQb2xpY3lOYW1lO1xuLyoqXG4gKiBHZXRzIGEgcGlwZWxpbmUgcG9saWN5IHRoYXQgc2V0cyBodHRwLmFnZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZ2VudFBvbGljeShhZ2VudCkge1xuICAgIHJldHVybiB0c3BBZ2VudFBvbGljeShhZ2VudCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZ2VudFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOlsiYWdlbnRQb2xpY3lOYW1lIiwidHNwQWdlbnRQb2xpY3lOYW1lIiwiYWdlbnRQb2xpY3kiLCJ0c3BBZ2VudFBvbGljeSIsImFnZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auxiliaryAuthenticationHeaderPolicy: () => (/* binding */ auxiliaryAuthenticationHeaderPolicy),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicyName: () => (/* binding */ auxiliaryAuthenticationHeaderPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/tokenCycler.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The programmatic identifier of the auxiliaryAuthenticationHeaderPolicy.\n */ const auxiliaryAuthenticationHeaderPolicyName = \"auxiliaryAuthenticationHeaderPolicy\";\nconst AUTHORIZATION_AUXILIARY_HEADER = \"x-ms-authorization-auxiliary\";\nasync function sendAuthorizeRequest(options) {\n    var _a, _b;\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions\n    };\n    return (_b = (_a = await getAccessToken(scopes, getTokenOptions)) === null || _a === void 0 ? void 0 : _a.token) !== null && _b !== void 0 ? _b : \"\";\n}\n/**\n * A policy for external tokens to `x-ms-authorization-auxiliary` header.\n * This header will be used when creating a cross-tenant application we may need to handle authentication requests\n * for resources that are in different tenants.\n * You could see [ARM docs](https://learn.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant) for a rundown of how this feature works\n */ function auxiliaryAuthenticationHeaderPolicy(options) {\n    const { credentials, scopes } = options;\n    const logger = options.logger || _log_js__WEBPACK_IMPORTED_MODULE_1__.logger;\n    const tokenCyclerMap = new WeakMap();\n    return {\n        name: auxiliaryAuthenticationHeaderPolicyName,\n        async sendRequest (request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            if (!credentials || credentials.length === 0) {\n                logger.info(`${auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`);\n                return next(request);\n            }\n            const tokenPromises = [];\n            for (const credential of credentials){\n                let getAccessToken = tokenCyclerMap.get(credential);\n                if (!getAccessToken) {\n                    getAccessToken = (0,_util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__.createTokenCycler)(credential);\n                    tokenCyclerMap.set(credential, getAccessToken);\n                }\n                tokenPromises.push(sendAuthorizeRequest({\n                    scopes: Array.isArray(scopes) ? scopes : [\n                        scopes\n                    ],\n                    request,\n                    getAccessToken,\n                    logger\n                }));\n            }\n            const auxiliaryTokens = (await Promise.all(tokenPromises)).filter((token)=>Boolean(token));\n            if (auxiliaryTokens.length === 0) {\n                logger.warning(`None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`);\n                return next(request);\n            }\n            request.headers.set(AUTHORIZATION_AUXILIARY_HEADER, auxiliaryTokens.map((token)=>`Bearer ${token}`).join(\", \"));\n            return next(request);\n        }\n    };\n} //# sourceMappingURL=auxiliaryAuthenticationHeaderPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9hdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUN5QjtBQUNWO0FBQ2pEOztDQUVDLEdBQ00sTUFBTUcsMENBQTBDLHNDQUFzQztBQUM3RixNQUFNQyxpQ0FBaUM7QUFDdkMsZUFBZUMscUJBQXFCQyxPQUFPO0lBQ3ZDLElBQUlDLElBQUlDO0lBQ1IsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLGNBQWMsRUFBRUMsT0FBTyxFQUFFLEdBQUdMO0lBQzVDLE1BQU1NLGtCQUFrQjtRQUNwQkMsYUFBYUYsUUFBUUUsV0FBVztRQUNoQ0MsZ0JBQWdCSCxRQUFRRyxjQUFjO0lBQzFDO0lBQ0EsT0FBTyxDQUFDTixLQUFLLENBQUNELEtBQU0sTUFBTUcsZUFBZUQsUUFBUUcsZ0JBQWdCLE1BQU8sUUFBUUwsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHUSxLQUFLLE1BQU0sUUFBUVAsT0FBTyxLQUFLLElBQUlBLEtBQUs7QUFDeEo7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNRLG9DQUFvQ1YsT0FBTztJQUN2RCxNQUFNLEVBQUVXLFdBQVcsRUFBRVIsTUFBTSxFQUFFLEdBQUdIO0lBQ2hDLE1BQU1MLFNBQVNLLFFBQVFMLE1BQU0sSUFBSUMsMkNBQVVBO0lBQzNDLE1BQU1nQixpQkFBaUIsSUFBSUM7SUFDM0IsT0FBTztRQUNIQyxNQUFNakI7UUFDTixNQUFNa0IsYUFBWVYsT0FBTyxFQUFFVyxJQUFJO1lBQzNCLElBQUksQ0FBQ1gsUUFBUVksR0FBRyxDQUFDQyxXQUFXLEdBQUdDLFVBQVUsQ0FBQyxhQUFhO2dCQUNuRCxNQUFNLElBQUlDLE1BQU07WUFDcEI7WUFDQSxJQUFJLENBQUNULGVBQWVBLFlBQVlVLE1BQU0sS0FBSyxHQUFHO2dCQUMxQzFCLE9BQU8yQixJQUFJLENBQUMsQ0FBQyxFQUFFekIsd0NBQXdDLGlEQUFpRCxDQUFDO2dCQUN6RyxPQUFPbUIsS0FBS1g7WUFDaEI7WUFDQSxNQUFNa0IsZ0JBQWdCLEVBQUU7WUFDeEIsS0FBSyxNQUFNQyxjQUFjYixZQUFhO2dCQUNsQyxJQUFJUCxpQkFBaUJRLGVBQWVhLEdBQUcsQ0FBQ0Q7Z0JBQ3hDLElBQUksQ0FBQ3BCLGdCQUFnQjtvQkFDakJBLGlCQUFpQlYsdUVBQWlCQSxDQUFDOEI7b0JBQ25DWixlQUFlYyxHQUFHLENBQUNGLFlBQVlwQjtnQkFDbkM7Z0JBQ0FtQixjQUFjSSxJQUFJLENBQUM1QixxQkFBcUI7b0JBQ3BDSSxRQUFReUIsTUFBTUMsT0FBTyxDQUFDMUIsVUFBVUEsU0FBUzt3QkFBQ0E7cUJBQU87b0JBQ2pERTtvQkFDQUQ7b0JBQ0FUO2dCQUNKO1lBQ0o7WUFDQSxNQUFNbUMsa0JBQWtCLENBQUMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDVCxjQUFhLEVBQUdVLE1BQU0sQ0FBQyxDQUFDeEIsUUFBVXlCLFFBQVF6QjtZQUNyRixJQUFJcUIsZ0JBQWdCVCxNQUFNLEtBQUssR0FBRztnQkFDOUIxQixPQUFPd0MsT0FBTyxDQUFDLENBQUMsd0NBQXdDLEVBQUVyQywrQkFBK0Isd0JBQXdCLENBQUM7Z0JBQ2xILE9BQU9rQixLQUFLWDtZQUNoQjtZQUNBQSxRQUFRK0IsT0FBTyxDQUFDVixHQUFHLENBQUM1QixnQ0FBZ0NnQyxnQkFBZ0JPLEdBQUcsQ0FBQyxDQUFDNUIsUUFBVSxDQUFDLE9BQU8sRUFBRUEsTUFBTSxDQUFDLEVBQUU2QixJQUFJLENBQUM7WUFDM0csT0FBT3RCLEtBQUtYO1FBQ2hCO0lBQ0o7QUFDSixFQUNBLCtEQUErRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3kuanM/M2JhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZVRva2VuQ3ljbGVyIH0gZnJvbSBcIi4uL3V0aWwvdG9rZW5DeWNsZXIuanNcIjtcbmltcG9ydCB7IGxvZ2dlciBhcyBjb3JlTG9nZ2VyIH0gZnJvbSBcIi4uL2xvZy5qc1wiO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIGF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3lOYW1lID0gXCJhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeVwiO1xuY29uc3QgQVVUSE9SSVpBVElPTl9BVVhJTElBUllfSEVBREVSID0gXCJ4LW1zLWF1dGhvcml6YXRpb24tYXV4aWxpYXJ5XCI7XG5hc3luYyBmdW5jdGlvbiBzZW5kQXV0aG9yaXplUmVxdWVzdChvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCB7IHNjb3BlcywgZ2V0QWNjZXNzVG9rZW4sIHJlcXVlc3QgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZ2V0VG9rZW5PcHRpb25zID0ge1xuICAgICAgICBhYm9ydFNpZ25hbDogcmVxdWVzdC5hYm9ydFNpZ25hbCxcbiAgICAgICAgdHJhY2luZ09wdGlvbnM6IHJlcXVlc3QudHJhY2luZ09wdGlvbnMsXG4gICAgfTtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gKGF3YWl0IGdldEFjY2Vzc1Rva2VuKHNjb3BlcywgZ2V0VG9rZW5PcHRpb25zKSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b2tlbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbn1cbi8qKlxuICogQSBwb2xpY3kgZm9yIGV4dGVybmFsIHRva2VucyB0byBgeC1tcy1hdXRob3JpemF0aW9uLWF1eGlsaWFyeWAgaGVhZGVyLlxuICogVGhpcyBoZWFkZXIgd2lsbCBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBjcm9zcy10ZW5hbnQgYXBwbGljYXRpb24gd2UgbWF5IG5lZWQgdG8gaGFuZGxlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3RzXG4gKiBmb3IgcmVzb3VyY2VzIHRoYXQgYXJlIGluIGRpZmZlcmVudCB0ZW5hbnRzLlxuICogWW91IGNvdWxkIHNlZSBbQVJNIGRvY3NdKGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9henVyZS9henVyZS1yZXNvdXJjZS1tYW5hZ2VyL21hbmFnZW1lbnQvYXV0aGVudGljYXRlLW11bHRpLXRlbmFudCkgZm9yIGEgcnVuZG93biBvZiBob3cgdGhpcyBmZWF0dXJlIHdvcmtzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeShvcHRpb25zKSB7XG4gICAgY29uc3QgeyBjcmVkZW50aWFscywgc2NvcGVzIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyIHx8IGNvcmVMb2dnZXI7XG4gICAgY29uc3QgdG9rZW5DeWNsZXJNYXAgPSBuZXcgV2Vha01hcCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LnVybC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJlYXJlciB0b2tlbiBhdXRoZW50aWNhdGlvbiBmb3IgYXV4aWxpYXJ5IGhlYWRlciBpcyBub3QgcGVybWl0dGVkIGZvciBub24tVExTIHByb3RlY3RlZCAobm9uLWh0dHBzKSBVUkxzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY3JlZGVudGlhbHMgfHwgY3JlZGVudGlhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oYCR7YXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3lOYW1lfSBoZWFkZXIgd2lsbCBub3QgYmUgc2V0IGR1ZSB0byBlbXB0eSBjcmVkZW50aWFscy5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRva2VuUHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3JlZGVudGlhbCBvZiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIGxldCBnZXRBY2Nlc3NUb2tlbiA9IHRva2VuQ3ljbGVyTWFwLmdldChjcmVkZW50aWFsKTtcbiAgICAgICAgICAgICAgICBpZiAoIWdldEFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldEFjY2Vzc1Rva2VuID0gY3JlYXRlVG9rZW5DeWNsZXIoY3JlZGVudGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuQ3ljbGVyTWFwLnNldChjcmVkZW50aWFsLCBnZXRBY2Nlc3NUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2VuUHJvbWlzZXMucHVzaChzZW5kQXV0aG9yaXplUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlczogQXJyYXkuaXNBcnJheShzY29wZXMpID8gc2NvcGVzIDogW3Njb3Blc10sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgIGdldEFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXV4aWxpYXJ5VG9rZW5zID0gKGF3YWl0IFByb21pc2UuYWxsKHRva2VuUHJvbWlzZXMpKS5maWx0ZXIoKHRva2VuKSA9PiBCb29sZWFuKHRva2VuKSk7XG4gICAgICAgICAgICBpZiAoYXV4aWxpYXJ5VG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGBOb25lIG9mIHRoZSBhdXhpbGlhcnkgdG9rZW5zIGFyZSB2YWxpZC4gJHtBVVRIT1JJWkFUSU9OX0FVWElMSUFSWV9IRUFERVJ9IGhlYWRlciB3aWxsIG5vdCBiZSBzZXQuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KEFVVEhPUklaQVRJT05fQVVYSUxJQVJZX0hFQURFUiwgYXV4aWxpYXJ5VG9rZW5zLm1hcCgodG9rZW4pID0+IGBCZWFyZXIgJHt0b2tlbn1gKS5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVUb2tlbkN5Y2xlciIsImxvZ2dlciIsImNvcmVMb2dnZXIiLCJhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeU5hbWUiLCJBVVRIT1JJWkFUSU9OX0FVWElMSUFSWV9IRUFERVIiLCJzZW5kQXV0aG9yaXplUmVxdWVzdCIsIm9wdGlvbnMiLCJfYSIsIl9iIiwic2NvcGVzIiwiZ2V0QWNjZXNzVG9rZW4iLCJyZXF1ZXN0IiwiZ2V0VG9rZW5PcHRpb25zIiwiYWJvcnRTaWduYWwiLCJ0cmFjaW5nT3B0aW9ucyIsInRva2VuIiwiYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3kiLCJjcmVkZW50aWFscyIsInRva2VuQ3ljbGVyTWFwIiwiV2Vha01hcCIsIm5hbWUiLCJzZW5kUmVxdWVzdCIsIm5leHQiLCJ1cmwiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0c1dpdGgiLCJFcnJvciIsImxlbmd0aCIsImluZm8iLCJ0b2tlblByb21pc2VzIiwiY3JlZGVudGlhbCIsImdldCIsInNldCIsInB1c2giLCJBcnJheSIsImlzQXJyYXkiLCJhdXhpbGlhcnlUb2tlbnMiLCJQcm9taXNlIiwiYWxsIiwiZmlsdGVyIiwiQm9vbGVhbiIsIndhcm5pbmciLCJoZWFkZXJzIiwibWFwIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bearerTokenAuthenticationPolicy: () => (/* binding */ bearerTokenAuthenticationPolicy),\n/* harmony export */   bearerTokenAuthenticationPolicyName: () => (/* binding */ bearerTokenAuthenticationPolicyName),\n/* harmony export */   parseChallenges: () => (/* binding */ parseChallenges)\n/* harmony export */ });\n/* harmony import */ var _util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/tokenCycler.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */ const bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Try to send the given request.\n *\n * When a response is received, returns a tuple of the response received and, if the response was received\n * inside a thrown RestError, the RestError that was thrown.\n *\n * Otherwise, if an error was thrown while sending the request that did not provide an underlying response, it\n * will be rethrown.\n */ async function trySendRequest(request, next) {\n    try {\n        return [\n            await next(request),\n            undefined\n        ];\n    } catch (e) {\n        if ((0,_restError_js__WEBPACK_IMPORTED_MODULE_2__.isRestError)(e) && e.response) {\n            return [\n                e.response,\n                e\n            ];\n        } else {\n            throw e;\n        }\n    }\n}\n/**\n * Default authorize request handler\n */ async function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    // Enable CAE true by default\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n        enableCae: true\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */ function isChallengeResponse(response) {\n    return response.status === 401 && response.headers.has(\"WWW-Authenticate\");\n}\n/**\n * Re-authorize the request for CAE challenge.\n * The response containing the challenge is `options.response`.\n * If this method returns true, the underlying request will be sent once again.\n */ async function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {\n    var _a;\n    const { scopes } = onChallengeOptions;\n    const accessToken = await onChallengeOptions.getAccessToken(scopes, {\n        enableCae: true,\n        claims: caeClaims\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */ function bearerTokenAuthenticationPolicy(options) {\n    var _a, _b, _c;\n    const { credential, scopes, challengeCallbacks } = options;\n    const logger = options.logger || _log_js__WEBPACK_IMPORTED_MODULE_1__.logger;\n    const callbacks = {\n        authorizeRequest: (_b = (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) === null || _a === void 0 ? void 0 : _a.bind(challengeCallbacks)) !== null && _b !== void 0 ? _b : defaultAuthorizeRequest,\n        authorizeRequestOnChallenge: (_c = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) === null || _c === void 0 ? void 0 : _c.bind(challengeCallbacks)\n    };\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential ? (0,_util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__.createTokenCycler)(credential /* , options */ ) : ()=>Promise.resolve(null);\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */ async sendRequest (request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [\n                    scopes\n                ],\n                request,\n                getAccessToken,\n                logger\n            });\n            let response;\n            let error;\n            let shouldSendRequest;\n            [response, error] = await trySendRequest(request, next);\n            if (isChallengeResponse(response)) {\n                let claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                // Handle CAE by default when receive CAE claim\n                if (claims) {\n                    let parsedClaim;\n                    // Return the response immediately if claims is not a valid base64 encoded string\n                    try {\n                        parsedClaim = atob(claims);\n                    } catch (e) {\n                        logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                        return response;\n                    }\n                    shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [\n                            scopes\n                        ],\n                        response,\n                        request,\n                        getAccessToken,\n                        logger\n                    }, parsedClaim);\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                } else if (callbacks.authorizeRequestOnChallenge) {\n                    // Handle custom challenges when client provides custom callback\n                    shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [\n                            scopes\n                        ],\n                        request,\n                        response,\n                        getAccessToken,\n                        logger\n                    });\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                    // If we get another CAE Claim, we will handle it by default and return whatever value we receive for this\n                    if (isChallengeResponse(response)) {\n                        claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                        if (claims) {\n                            let parsedClaim;\n                            try {\n                                parsedClaim = atob(claims);\n                            } catch (e) {\n                                logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                                return response;\n                            }\n                            shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                                scopes: Array.isArray(scopes) ? scopes : [\n                                    scopes\n                                ],\n                                response,\n                                request,\n                                getAccessToken,\n                                logger\n                            }, parsedClaim);\n                            // Send updated request and handle response for RestError\n                            if (shouldSendRequest) {\n                                [response, error] = await trySendRequest(request, next);\n                            }\n                        }\n                    }\n                }\n            }\n            if (error) {\n                throw error;\n            } else {\n                return response;\n            }\n        }\n    };\n}\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Pop e=\"f\", g=\"h\"`.\n * Into: `[ { scheme: 'Bearer', params: { a: 'b', c: 'd' } }, { scheme: 'Pop', params: { e: 'f', g: 'h' } } ]`.\n *\n * @internal\n */ function parseChallenges(challenges) {\n    // Challenge regex seperates the string to individual challenges with different schemes in the format `Scheme a=\"b\", c=d`\n    // The challenge regex captures parameteres with either quotes values or unquoted values\n    const challengeRegex = /(\\w+)\\s+((?:\\w+=(?:\"[^\"]*\"|[^,]*),?\\s*)+)/g;\n    // Parameter regex captures the claims group removed from the scheme in the format `a=\"b\"` and `c=\"d\"`\n    // CAE challenge always have quoted parameters. For more reference, https://learn.microsoft.com/entra/identity-platform/claims-challenge\n    const paramRegex = /(\\w+)=\"([^\"]*)\"/g;\n    const parsedChallenges = [];\n    let match;\n    // Iterate over each challenge match\n    while((match = challengeRegex.exec(challenges)) !== null){\n        const scheme = match[1];\n        const paramsString = match[2];\n        const params = {};\n        let paramMatch;\n        // Iterate over each parameter match\n        while((paramMatch = paramRegex.exec(paramsString)) !== null){\n            params[paramMatch[1]] = paramMatch[2];\n        }\n        parsedChallenges.push({\n            scheme,\n            params\n        });\n    }\n    return parsedChallenges;\n}\n/**\n * Parse a pipeline response and look for a CAE challenge with \"Bearer\" scheme\n * Return the value in the header without parsing the challenge\n * @internal\n */ function getCaeChallengeClaims(challenges) {\n    var _a;\n    if (!challenges) {\n        return;\n    }\n    // Find all challenges present in the header\n    const parsedChallenges = parseChallenges(challenges);\n    return (_a = parsedChallenges.find((x)=>x.scheme === \"Bearer\" && x.params.claims && x.params.error === \"insufficient_claims\")) === null || _a === void 0 ? void 0 : _a.params.claims;\n} //# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decompressResponsePolicy: () => (/* binding */ decompressResponsePolicy),\n/* harmony export */   decompressResponsePolicyName: () => (/* binding */ decompressResponsePolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The programmatic identifier of the decompressResponsePolicy.\n */ const decompressResponsePolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.decompressResponsePolicyName;\n/**\n * A policy to enable response decompression according to Accept-Encoding header\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n */ function decompressResponsePolicy() {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.decompressResponsePolicy)();\n} //# sourceMappingURL=decompressResponsePolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNzSjtBQUN4TDs7Q0FFQyxHQUNNLE1BQU1BLCtCQUErQkMscUdBQStCQSxDQUFDO0FBQzVFOzs7Q0FHQyxHQUNNLFNBQVNDO0lBQ1osT0FBT0MscUdBQTJCQTtBQUN0QyxFQUNBLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5LmpzP2JlMDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3lOYW1lIGFzIHRzcERlY29tcHJlc3NSZXNwb25zZVBvbGljeU5hbWUsIGRlY29tcHJlc3NSZXNwb25zZVBvbGljeSBhcyB0c3BEZWNvbXByZXNzUmVzcG9uc2VQb2xpY3ksIH0gZnJvbSBcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWUvaW50ZXJuYWwvcG9saWNpZXNcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3lOYW1lID0gdHNwRGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5TmFtZTtcbi8qKlxuICogQSBwb2xpY3kgdG8gZW5hYmxlIHJlc3BvbnNlIGRlY29tcHJlc3Npb24gYWNjb3JkaW5nIHRvIEFjY2VwdC1FbmNvZGluZyBoZWFkZXJcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9BY2NlcHQtRW5jb2RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcHJlc3NSZXNwb25zZVBvbGljeSgpIHtcbiAgICByZXR1cm4gdHNwRGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5KCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbImRlY29tcHJlc3NSZXNwb25zZVBvbGljeU5hbWUiLCJ0c3BEZWNvbXByZXNzUmVzcG9uc2VQb2xpY3lOYW1lIiwiZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5IiwidHNwRGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultRetryPolicy: () => (/* binding */ defaultRetryPolicy),\n/* harmony export */   defaultRetryPolicyName: () => (/* binding */ defaultRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Name of the {@link defaultRetryPolicy}\n */ const defaultRetryPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.defaultRetryPolicyName;\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */ function defaultRetryPolicy(options = {}) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.defaultRetryPolicy)(options);\n} //# sourceMappingURL=defaultRetryPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWZhdWx0UmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUM4SDtBQUNoSzs7Q0FFQyxHQUNNLE1BQU1BLHlCQUF5QkMsK0ZBQXlCQSxDQUFDO0FBQ2hFOzs7OztDQUtDLEdBQ00sU0FBU0MsbUJBQW1CRSxVQUFVLENBQUMsQ0FBQztJQUMzQyxPQUFPRCwrRkFBcUJBLENBQUNDO0FBQ2pDLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWZhdWx0UmV0cnlQb2xpY3kuanM/ZmRkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGRlZmF1bHRSZXRyeVBvbGljeU5hbWUgYXMgdHNwRGVmYXVsdFJldHJ5UG9saWN5TmFtZSwgZGVmYXVsdFJldHJ5UG9saWN5IGFzIHRzcERlZmF1bHRSZXRyeVBvbGljeSwgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSB7QGxpbmsgZGVmYXVsdFJldHJ5UG9saWN5fVxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdFJldHJ5UG9saWN5TmFtZSA9IHRzcERlZmF1bHRSZXRyeVBvbGljeU5hbWU7XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgcmV0cmllcyBhY2NvcmRpbmcgdG8gdGhyZWUgc3RyYXRlZ2llczpcbiAqIC0gV2hlbiB0aGUgc2VydmVyIHNlbmRzIGEgNDI5IHJlc3BvbnNlIHdpdGggYSBSZXRyeS1BZnRlciBoZWFkZXIuXG4gKiAtIFdoZW4gdGhlcmUgYXJlIGVycm9ycyBpbiB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQgbGF5ZXIgKGUuZy4gRE5TIGxvb2t1cCBmYWlsdXJlcykuXG4gKiAtIE9yIG90aGVyd2lzZSBpZiB0aGUgb3V0Z29pbmcgcmVxdWVzdCBmYWlscywgaXQgd2lsbCByZXRyeSB3aXRoIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyBkZWxheS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSZXRyeVBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gdHNwRGVmYXVsdFJldHJ5UG9saWN5KG9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdFJldHJ5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0UmV0cnlQb2xpY3lOYW1lIiwidHNwRGVmYXVsdFJldHJ5UG9saWN5TmFtZSIsImRlZmF1bHRSZXRyeVBvbGljeSIsInRzcERlZmF1bHRSZXRyeVBvbGljeSIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exponentialRetryPolicy: () => (/* binding */ exponentialRetryPolicy),\n/* harmony export */   exponentialRetryPolicyName: () => (/* binding */ exponentialRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */ const exponentialRetryPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryPolicyName;\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */ function exponentialRetryPolicy(options = {}) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryPolicy)(options);\n} //# sourceMappingURL=exponentialRetryPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9leHBvbmVudGlhbFJldHJ5UG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDOEk7QUFDaEw7O0NBRUMsR0FDTSxNQUFNQSw2QkFBNkJDLG1HQUE2QkEsQ0FBQztBQUN4RTs7O0NBR0MsR0FDTSxTQUFTQyx1QkFBdUJFLFVBQVUsQ0FBQyxDQUFDO0lBQy9DLE9BQU9ELG1HQUF5QkEsQ0FBQ0M7QUFDckMsRUFDQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL2V4cG9uZW50aWFsUmV0cnlQb2xpY3kuanM/NmJhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGV4cG9uZW50aWFsUmV0cnlQb2xpY3lOYW1lIGFzIHRzcEV4cG9uZW50aWFsUmV0cnlQb2xpY3lOYW1lLCBleHBvbmVudGlhbFJldHJ5UG9saWN5IGFzIHRzcEV4cG9uZW50aWFsUmV0cnlQb2xpY3ksIH0gZnJvbSBcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWUvaW50ZXJuYWwvcG9saWNpZXNcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBleHBvbmVudGlhbFJldHJ5UG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgZXhwb25lbnRpYWxSZXRyeVBvbGljeU5hbWUgPSB0c3BFeHBvbmVudGlhbFJldHJ5UG9saWN5TmFtZTtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCBhdHRlbXB0cyB0byByZXRyeSByZXF1ZXN0cyB3aGlsZSBpbnRyb2R1Y2luZyBhbiBleHBvbmVudGlhbGx5IGluY3JlYXNpbmcgZGVsYXkuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdGhhdCBjb25maWd1cmUgcmV0cnkgbG9naWMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBvbmVudGlhbFJldHJ5UG9saWN5KG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiB0c3BFeHBvbmVudGlhbFJldHJ5UG9saWN5KG9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwb25lbnRpYWxSZXRyeVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOlsiZXhwb25lbnRpYWxSZXRyeVBvbGljeU5hbWUiLCJ0c3BFeHBvbmVudGlhbFJldHJ5UG9saWN5TmFtZSIsImV4cG9uZW50aWFsUmV0cnlQb2xpY3kiLCJ0c3BFeHBvbmVudGlhbFJldHJ5UG9saWN5Iiwib3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formDataPolicy: () => (/* binding */ formDataPolicy),\n/* harmony export */   formDataPolicyName: () => (/* binding */ formDataPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */ const formDataPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.formDataPolicyName;\n/**\n * A policy that encodes FormData on the request into the body.\n */ function formDataPolicy() {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.formDataPolicy)();\n} //# sourceMappingURL=formDataPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9mb3JtRGF0YVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQzhHO0FBQ2hKOztDQUVDLEdBQ00sTUFBTUEscUJBQXFCQywyRkFBcUJBLENBQUM7QUFDeEQ7O0NBRUMsR0FDTSxTQUFTQztJQUNaLE9BQU9DLDJGQUFpQkE7QUFDNUIsRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL2Zvcm1EYXRhUG9saWN5LmpzPzIxMTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBmb3JtRGF0YVBvbGljeU5hbWUgYXMgdHNwRm9ybURhdGFQb2xpY3lOYW1lLCBmb3JtRGF0YVBvbGljeSBhcyB0c3BGb3JtRGF0YVBvbGljeSwgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIGZvcm1EYXRhUG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgZm9ybURhdGFQb2xpY3lOYW1lID0gdHNwRm9ybURhdGFQb2xpY3lOYW1lO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IGVuY29kZXMgRm9ybURhdGEgb24gdGhlIHJlcXVlc3QgaW50byB0aGUgYm9keS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1EYXRhUG9saWN5KCkge1xuICAgIHJldHVybiB0c3BGb3JtRGF0YVBvbGljeSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybURhdGFQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbImZvcm1EYXRhUG9saWN5TmFtZSIsInRzcEZvcm1EYXRhUG9saWN5TmFtZSIsImZvcm1EYXRhUG9saWN5IiwidHNwRm9ybURhdGFQb2xpY3kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logPolicy: () => (/* binding */ logPolicy),\n/* harmony export */   logPolicyName: () => (/* binding */ logPolicyName)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The programmatic identifier of the logPolicy.\n */ const logPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_1__.logPolicyName;\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */ function logPolicy(options = {}) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_1__.logPolicy)(Object.assign({\n        logger: _log_js__WEBPACK_IMPORTED_MODULE_0__.logger.info\n    }, options));\n} //# sourceMappingURL=logPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9sb2dQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDZTtBQUMyRTtBQUM1SDs7Q0FFQyxHQUNNLE1BQU1FLGdCQUFnQkMsc0ZBQWdCQSxDQUFDO0FBQzlDOzs7Q0FHQyxHQUNNLFNBQVNDLFVBQVVFLFVBQVUsQ0FBQyxDQUFDO0lBQ2xDLE9BQU9ELHNGQUFZQSxDQUFDRSxPQUFPQyxNQUFNLENBQUM7UUFBRVIsUUFBUUMsMkNBQVVBLENBQUNRLElBQUk7SUFBQyxHQUFHSDtBQUNuRSxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvbG9nUG9saWN5LmpzP2EzN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBsb2dnZXIgYXMgY29yZUxvZ2dlciB9IGZyb20gXCIuLi9sb2cuanNcIjtcbmltcG9ydCB7IGxvZ1BvbGljeU5hbWUgYXMgdHNwTG9nUG9saWN5TmFtZSwgbG9nUG9saWN5IGFzIHRzcExvZ1BvbGljeSwgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIGxvZ1BvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IGxvZ1BvbGljeU5hbWUgPSB0c3BMb2dQb2xpY3lOYW1lO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IGxvZ3MgYWxsIHJlcXVlc3RzIGFuZCByZXNwb25zZXMuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29uZmlndXJlIGxvZ1BvbGljeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvZ1BvbGljeShvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gdHNwTG9nUG9saWN5KE9iamVjdC5hc3NpZ24oeyBsb2dnZXI6IGNvcmVMb2dnZXIuaW5mbyB9LCBvcHRpb25zKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbImxvZ2dlciIsImNvcmVMb2dnZXIiLCJsb2dQb2xpY3lOYW1lIiwidHNwTG9nUG9saWN5TmFtZSIsImxvZ1BvbGljeSIsInRzcExvZ1BvbGljeSIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJpbmZvIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multipartPolicy: () => (/* binding */ multipartPolicy),\n/* harmony export */   multipartPolicyName: () => (/* binding */ multipartPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n/* harmony import */ var _util_file_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/file.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Name of multipart policy\n */ const multipartPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.multipartPolicyName;\n/**\n * Pipeline policy for multipart requests\n */ function multipartPolicy() {\n    const tspPolicy = (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.multipartPolicy)();\n    return {\n        name: multipartPolicyName,\n        sendRequest: async (request, next)=>{\n            if (request.multipartBody) {\n                for (const part of request.multipartBody.parts){\n                    if ((0,_util_file_js__WEBPACK_IMPORTED_MODULE_1__.hasRawContent)(part.body)) {\n                        part.body = (0,_util_file_js__WEBPACK_IMPORTED_MODULE_1__.getRawContent)(part.body);\n                    }\n                }\n            }\n            return tspPolicy.sendRequest(request, next);\n        }\n    };\n} //# sourceMappingURL=multipartPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9tdWx0aXBhcnRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDa0g7QUFDckY7QUFDL0Q7O0NBRUMsR0FDTSxNQUFNQSxzQkFBc0JDLDRGQUFzQkEsQ0FBQztBQUMxRDs7Q0FFQyxHQUNNLFNBQVNDO0lBQ1osTUFBTUksWUFBWUgsNEZBQWtCQTtJQUNwQyxPQUFPO1FBQ0hJLE1BQU1QO1FBQ05RLGFBQWEsT0FBT0MsU0FBU0M7WUFDekIsSUFBSUQsUUFBUUUsYUFBYSxFQUFFO2dCQUN2QixLQUFLLE1BQU1DLFFBQVFILFFBQVFFLGFBQWEsQ0FBQ0UsS0FBSyxDQUFFO29CQUM1QyxJQUFJUiw0REFBYUEsQ0FBQ08sS0FBS0UsSUFBSSxHQUFHO3dCQUMxQkYsS0FBS0UsSUFBSSxHQUFHViw0REFBYUEsQ0FBQ1EsS0FBS0UsSUFBSTtvQkFDdkM7Z0JBQ0o7WUFDSjtZQUNBLE9BQU9SLFVBQVVFLFdBQVcsQ0FBQ0MsU0FBU0M7UUFDMUM7SUFDSjtBQUNKLEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9tdWx0aXBhcnRQb2xpY3kuanM/ZmQyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IG11bHRpcGFydFBvbGljeU5hbWUgYXMgdHNwTXVsdGlwYXJ0UG9saWN5TmFtZSwgbXVsdGlwYXJ0UG9saWN5IGFzIHRzcE11bHRpcGFydFBvbGljeSwgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiO1xuaW1wb3J0IHsgZ2V0UmF3Q29udGVudCwgaGFzUmF3Q29udGVudCB9IGZyb20gXCIuLi91dGlsL2ZpbGUuanNcIjtcbi8qKlxuICogTmFtZSBvZiBtdWx0aXBhcnQgcG9saWN5XG4gKi9cbmV4cG9ydCBjb25zdCBtdWx0aXBhcnRQb2xpY3lOYW1lID0gdHNwTXVsdGlwYXJ0UG9saWN5TmFtZTtcbi8qKlxuICogUGlwZWxpbmUgcG9saWN5IGZvciBtdWx0aXBhcnQgcmVxdWVzdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGFydFBvbGljeSgpIHtcbiAgICBjb25zdCB0c3BQb2xpY3kgPSB0c3BNdWx0aXBhcnRQb2xpY3koKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBtdWx0aXBhcnRQb2xpY3lOYW1lLFxuICAgICAgICBzZW5kUmVxdWVzdDogYXN5bmMgKHJlcXVlc3QsIG5leHQpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0Lm11bHRpcGFydEJvZHkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcmVxdWVzdC5tdWx0aXBhcnRCb2R5LnBhcnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNSYXdDb250ZW50KHBhcnQuYm9keSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQuYm9keSA9IGdldFJhd0NvbnRlbnQocGFydC5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0c3BQb2xpY3kuc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpcGFydFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOlsibXVsdGlwYXJ0UG9saWN5TmFtZSIsInRzcE11bHRpcGFydFBvbGljeU5hbWUiLCJtdWx0aXBhcnRQb2xpY3kiLCJ0c3BNdWx0aXBhcnRQb2xpY3kiLCJnZXRSYXdDb250ZW50IiwiaGFzUmF3Q29udGVudCIsInRzcFBvbGljeSIsIm5hbWUiLCJzZW5kUmVxdWVzdCIsInJlcXVlc3QiLCJuZXh0IiwibXVsdGlwYXJ0Qm9keSIsInBhcnQiLCJwYXJ0cyIsImJvZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ndJsonPolicy: () => (/* binding */ ndJsonPolicy),\n/* harmony export */   ndJsonPolicyName: () => (/* binding */ ndJsonPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */ const ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */ function ndJsonPolicy() {\n    return {\n        name: ndJsonPolicyName,\n        async sendRequest (request, next) {\n            // There currently isn't a good way to bypass the serializer\n            if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                const body = JSON.parse(request.body);\n                if (Array.isArray(body)) {\n                    request.body = body.map((item)=>JSON.stringify(item) + \"\\n\").join(\"\");\n                }\n            }\n            return next(request);\n        }\n    };\n} //# sourceMappingURL=ndJsonPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9uZEpzb25Qb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2xDOztDQUVDLEdBQ00sTUFBTUEsbUJBQW1CLGVBQWU7QUFDL0M7O0NBRUMsR0FDTSxTQUFTQztJQUNaLE9BQU87UUFDSEMsTUFBTUY7UUFDTixNQUFNRyxhQUFZQyxPQUFPLEVBQUVDLElBQUk7WUFDM0IsNERBQTREO1lBQzVELElBQUksT0FBT0QsUUFBUUUsSUFBSSxLQUFLLFlBQVlGLFFBQVFFLElBQUksQ0FBQ0MsVUFBVSxDQUFDLE1BQU07Z0JBQ2xFLE1BQU1ELE9BQU9FLEtBQUtDLEtBQUssQ0FBQ0wsUUFBUUUsSUFBSTtnQkFDcEMsSUFBSUksTUFBTUMsT0FBTyxDQUFDTCxPQUFPO29CQUNyQkYsUUFBUUUsSUFBSSxHQUFHQSxLQUFLTSxHQUFHLENBQUMsQ0FBQ0MsT0FBU0wsS0FBS00sU0FBUyxDQUFDRCxRQUFRLE1BQU1FLElBQUksQ0FBQztnQkFDeEU7WUFDSjtZQUNBLE9BQU9WLEtBQUtEO1FBQ2hCO0lBQ0o7QUFDSixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvbmRKc29uUG9saWN5LmpzP2JhMTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgbmRKc29uUG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgbmRKc29uUG9saWN5TmFtZSA9IFwibmRKc29uUG9saWN5XCI7XG4vKipcbiAqIG5kSnNvblBvbGljeSBpcyBhIHBvbGljeSB1c2VkIHRvIGNvbnRyb2wga2VlcCBhbGl2ZSBzZXR0aW5ncyBmb3IgZXZlcnkgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5kSnNvblBvbGljeSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBuZEpzb25Qb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICAvLyBUaGVyZSBjdXJyZW50bHkgaXNuJ3QgYSBnb29kIHdheSB0byBieXBhc3MgdGhlIHNlcmlhbGl6ZXJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdC5ib2R5ID09PSBcInN0cmluZ1wiICYmIHJlcXVlc3QuYm9keS5zdGFydHNXaXRoKFwiW1wiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKHJlcXVlc3QuYm9keSk7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYm9keSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5ib2R5ID0gYm9keS5tYXAoKGl0ZW0pID0+IEpTT04uc3RyaW5naWZ5KGl0ZW0pICsgXCJcXG5cIikuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmRKc29uUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6WyJuZEpzb25Qb2xpY3lOYW1lIiwibmRKc29uUG9saWN5IiwibmFtZSIsInNlbmRSZXF1ZXN0IiwicmVxdWVzdCIsIm5leHQiLCJib2R5Iiwic3RhcnRzV2l0aCIsIkpTT04iLCJwYXJzZSIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIml0ZW0iLCJzdHJpbmdpZnkiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultProxySettings: () => (/* binding */ getDefaultProxySettings),\n/* harmony export */   proxyPolicy: () => (/* binding */ proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* binding */ proxyPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The programmatic identifier of the proxyPolicy.\n */ const proxyPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.proxyPolicyName;\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n * @deprecated - Internally this method is no longer necessary when setting proxy information.\n */ function getDefaultProxySettings(proxyUrl) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(proxyUrl);\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n * @param options - additional settings, for example, custom NO_PROXY patterns\n */ function proxyPolicy(proxySettings, options) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.proxyPolicy)(proxySettings, options);\n} //# sourceMappingURL=proxyPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9wcm94eVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUN5SjtBQUMzTDs7Q0FFQyxHQUNNLE1BQU1FLGtCQUFrQkMsd0ZBQWtCQSxDQUFDO0FBQ2xEOzs7Ozs7Q0FNQyxHQUNNLFNBQVNDLHdCQUF3QkUsUUFBUTtJQUM1QyxPQUFPRCxvR0FBMEJBLENBQUNDO0FBQ3RDO0FBQ0E7Ozs7OztDQU1DLEdBQ00sU0FBU04sWUFBWU8sYUFBYSxFQUFFQyxPQUFPO0lBQzlDLE9BQU9QLHdGQUFjQSxDQUFDTSxlQUFlQztBQUN6QyxFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvcHJveHlQb2xpY3kuanM/MjdmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IHByb3h5UG9saWN5IGFzIHRzcFByb3h5UG9saWN5LCBwcm94eVBvbGljeU5hbWUgYXMgdHNwUHJveHlQb2xpY3lOYW1lLCBnZXREZWZhdWx0UHJveHlTZXR0aW5ncyBhcyB0c3BHZXREZWZhdWx0UHJveHlTZXR0aW5ncywgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIHByb3h5UG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgcHJveHlQb2xpY3lOYW1lID0gdHNwUHJveHlQb2xpY3lOYW1lO1xuLyoqXG4gKiBUaGlzIG1ldGhvZCBjb252ZXJ0cyBhIHByb3h5IHVybCBpbnRvIGBQcm94eVNldHRpbmdzYCBmb3IgdXNlIHdpdGggUHJveHlQb2xpY3kuXG4gKiBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgaXQgYXR0ZW1wdHMgdG8gcGFyc2UgYSBwcm94eSBVUkwgZnJvbSB0aGUgZW52aXJvbm1lbnRcbiAqIHZhcmlhYmxlcyBgSFRUUFNfUFJPWFlgIG9yIGBIVFRQX1BST1hZYC5cbiAqIEBwYXJhbSBwcm94eVVybCAtIFRoZSB1cmwgb2YgdGhlIHByb3h5IHRvIHVzZS4gTWF5IGNvbnRhaW4gYXV0aGVudGljYXRpb24gaW5mb3JtYXRpb24uXG4gKiBAZGVwcmVjYXRlZCAtIEludGVybmFsbHkgdGhpcyBtZXRob2QgaXMgbm8gbG9uZ2VyIG5lY2Vzc2FyeSB3aGVuIHNldHRpbmcgcHJveHkgaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0UHJveHlTZXR0aW5ncyhwcm94eVVybCkge1xuICAgIHJldHVybiB0c3BHZXREZWZhdWx0UHJveHlTZXR0aW5ncyhwcm94eVVybCk7XG59XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgYWxsb3dzIG9uZSB0byBhcHBseSBwcm94eSBzZXR0aW5ncyB0byBhbGwgcmVxdWVzdHMuXG4gKiBJZiBub3QgcGFzc2VkIHN0YXRpYyBzZXR0aW5ncywgdGhleSB3aWxsIGJlIHJldHJpZXZlZCBmcm9tIHRoZSBIVFRQU19QUk9YWVxuICogb3IgSFRUUF9QUk9YWSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKiBAcGFyYW0gcHJveHlTZXR0aW5ncyAtIFByb3h5U2V0dGluZ3MgdG8gdXNlIG9uIGVhY2ggcmVxdWVzdC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gYWRkaXRpb25hbCBzZXR0aW5ncywgZm9yIGV4YW1wbGUsIGN1c3RvbSBOT19QUk9YWSBwYXR0ZXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJveHlQb2xpY3kocHJveHlTZXR0aW5ncywgb3B0aW9ucykge1xuICAgIHJldHVybiB0c3BQcm94eVBvbGljeShwcm94eVNldHRpbmdzLCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3h5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6WyJwcm94eVBvbGljeSIsInRzcFByb3h5UG9saWN5IiwicHJveHlQb2xpY3lOYW1lIiwidHNwUHJveHlQb2xpY3lOYW1lIiwiZ2V0RGVmYXVsdFByb3h5U2V0dGluZ3MiLCJ0c3BHZXREZWZhdWx0UHJveHlTZXR0aW5ncyIsInByb3h5VXJsIiwicHJveHlTZXR0aW5ncyIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redirectPolicy: () => (/* binding */ redirectPolicy),\n/* harmony export */   redirectPolicyName: () => (/* binding */ redirectPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The programmatic identifier of the redirectPolicy.\n */ const redirectPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.redirectPolicyName;\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */ function redirectPolicy(options = {}) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.redirectPolicy)(options);\n} //# sourceMappingURL=redirectPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQzhHO0FBQ2hKOztDQUVDLEdBQ00sTUFBTUEscUJBQXFCQywyRkFBcUJBLENBQUM7QUFDeEQ7Ozs7O0NBS0MsR0FDTSxTQUFTQyxlQUFlRSxVQUFVLENBQUMsQ0FBQztJQUN2QyxPQUFPRCwyRkFBaUJBLENBQUNDO0FBQzdCLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qcz8xNzY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgcmVkaXJlY3RQb2xpY3lOYW1lIGFzIHRzcFJlZGlyZWN0UG9saWN5TmFtZSwgcmVkaXJlY3RQb2xpY3kgYXMgdHNwUmVkaXJlY3RQb2xpY3ksIH0gZnJvbSBcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWUvaW50ZXJuYWwvcG9saWNpZXNcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSByZWRpcmVjdFBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZGlyZWN0UG9saWN5TmFtZSA9IHRzcFJlZGlyZWN0UG9saWN5TmFtZTtcbi8qKlxuICogQSBwb2xpY3kgdG8gZm9sbG93IExvY2F0aW9uIGhlYWRlcnMgZnJvbSB0aGUgc2VydmVyIGluIG9yZGVyXG4gKiB0byBzdXBwb3J0IHNlcnZlci1zaWRlIHJlZGlyZWN0aW9uLlxuICogSW4gdGhlIGJyb3dzZXIsIHRoaXMgcG9saWN5IGlzIG5vdCB1c2VkLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbnRyb2wgcG9saWN5IGJlaGF2aW9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVkaXJlY3RQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRzcFJlZGlyZWN0UG9saWN5KG9wdGlvbnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXJlY3RQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbInJlZGlyZWN0UG9saWN5TmFtZSIsInRzcFJlZGlyZWN0UG9saWN5TmFtZSIsInJlZGlyZWN0UG9saWN5IiwidHNwUmVkaXJlY3RQb2xpY3kiLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   retryPolicy: () => (/* binding */ retryPolicy)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst retryPolicyLogger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-rest-pipeline retryPolicy\");\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */ function retryPolicy(strategies, options = {\n    maxRetries: _constants_js__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RETRY_POLICY_COUNT\n}) {\n    // Cast is required since the TSP runtime retry strategy type is slightly different\n    // very deep down (using real AbortSignal vs. AbortSignalLike in RestError).\n    // In practice the difference doesn't actually matter.\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_2__.retryPolicy)(strategies, Object.assign({\n        logger: retryPolicyLogger\n    }, options));\n} //# sourceMappingURL=retryPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9yZXRyeVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNpQjtBQUNVO0FBQ2dDO0FBQzdGLE1BQU1JLG9CQUFvQkosaUVBQWtCQSxDQUFDO0FBQzdDOztDQUVDLEdBQ00sU0FBU0UsWUFBWUcsVUFBVSxFQUFFQyxVQUFVO0lBQUVDLFlBQVlOLHFFQUEwQkE7QUFBQyxDQUFDO0lBQ3hGLG1GQUFtRjtJQUNuRiw0RUFBNEU7SUFDNUUsc0RBQXNEO0lBQ3RELE9BQU9FLHdGQUFjQSxDQUFDRSxZQUFZRyxPQUFPQyxNQUFNLENBQUM7UUFBRUMsUUFBUU47SUFBa0IsR0FBR0U7QUFDbkYsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL3JldHJ5UG9saWN5LmpzP2VmMWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVDbGllbnRMb2dnZXIgfSBmcm9tIFwiQGF6dXJlL2xvZ2dlclwiO1xuaW1wb3J0IHsgREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyByZXRyeVBvbGljeSBhcyB0c3BSZXRyeVBvbGljeSwgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiO1xuY29uc3QgcmV0cnlQb2xpY3lMb2dnZXIgPSBjcmVhdGVDbGllbnRMb2dnZXIoXCJjb3JlLXJlc3QtcGlwZWxpbmUgcmV0cnlQb2xpY3lcIik7XG4vKipcbiAqIHJldHJ5UG9saWN5IGlzIGEgZ2VuZXJpYyBwb2xpY3kgdG8gZW5hYmxlIHJldHJ5aW5nIHJlcXVlc3RzIHdoZW4gY2VydGFpbiBjb25kaXRpb25zIGFyZSBtZXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJldHJ5UG9saWN5KHN0cmF0ZWdpZXMsIG9wdGlvbnMgPSB7IG1heFJldHJpZXM6IERFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5UIH0pIHtcbiAgICAvLyBDYXN0IGlzIHJlcXVpcmVkIHNpbmNlIHRoZSBUU1AgcnVudGltZSByZXRyeSBzdHJhdGVneSB0eXBlIGlzIHNsaWdodGx5IGRpZmZlcmVudFxuICAgIC8vIHZlcnkgZGVlcCBkb3duICh1c2luZyByZWFsIEFib3J0U2lnbmFsIHZzLiBBYm9ydFNpZ25hbExpa2UgaW4gUmVzdEVycm9yKS5cbiAgICAvLyBJbiBwcmFjdGljZSB0aGUgZGlmZmVyZW5jZSBkb2Vzbid0IGFjdHVhbGx5IG1hdHRlci5cbiAgICByZXR1cm4gdHNwUmV0cnlQb2xpY3koc3RyYXRlZ2llcywgT2JqZWN0LmFzc2lnbih7IGxvZ2dlcjogcmV0cnlQb2xpY3lMb2dnZXIgfSwgb3B0aW9ucykpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnlQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudExvZ2dlciIsIkRFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5UIiwicmV0cnlQb2xpY3kiLCJ0c3BSZXRyeVBvbGljeSIsInJldHJ5UG9saWN5TG9nZ2VyIiwic3RyYXRlZ2llcyIsIm9wdGlvbnMiLCJtYXhSZXRyaWVzIiwiT2JqZWN0IiwiYXNzaWduIiwibG9nZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setClientRequestIdPolicy: () => (/* binding */ setClientRequestIdPolicy),\n/* harmony export */   setClientRequestIdPolicyName: () => (/* binding */ setClientRequestIdPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */ const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */ function setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        async sendRequest (request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        }\n    };\n} //# sourceMappingURL=setClientRequestIdPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2xDOztDQUVDLEdBQ00sTUFBTUEsK0JBQStCLDJCQUEyQjtBQUN2RTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLHlCQUF5QkMsc0JBQXNCLHdCQUF3QjtJQUNuRixPQUFPO1FBQ0hDLE1BQU1IO1FBQ04sTUFBTUksYUFBWUMsT0FBTyxFQUFFQyxJQUFJO1lBQzNCLElBQUksQ0FBQ0QsUUFBUUUsT0FBTyxDQUFDQyxHQUFHLENBQUNOLHNCQUFzQjtnQkFDM0NHLFFBQVFFLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDUCxxQkFBcUJHLFFBQVFLLFNBQVM7WUFDOUQ7WUFDQSxPQUFPSixLQUFLRDtRQUNoQjtJQUNKO0FBQ0osRUFDQSxvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL3NldENsaWVudFJlcXVlc3RJZFBvbGljeS5qcz83ZjQyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIHNldENsaWVudFJlcXVlc3RJZFBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNldENsaWVudFJlcXVlc3RJZFBvbGljeU5hbWUgPSBcInNldENsaWVudFJlcXVlc3RJZFBvbGljeVwiO1xuLyoqXG4gKiBFYWNoIFBpcGVsaW5lUmVxdWVzdCBnZXRzIGEgdW5pcXVlIGlkIHVwb24gY3JlYXRpb24uXG4gKiBUaGlzIHBvbGljeSBwYXNzZXMgdGhhdCB1bmlxdWUgaWQgYWxvbmcgdmlhIGFuIEhUVFAgaGVhZGVyIHRvIGVuYWJsZSBiZXR0ZXJcbiAqIHRlbGVtZXRyeSBhbmQgdHJhY2luZy5cbiAqIEBwYXJhbSByZXF1ZXN0SWRIZWFkZXJOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGhlYWRlciB0byBwYXNzIHRoZSByZXF1ZXN0IElEIHRvLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5KHJlcXVlc3RJZEhlYWRlck5hbWUgPSBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHNldENsaWVudFJlcXVlc3RJZFBvbGljeU5hbWUsXG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgIGlmICghcmVxdWVzdC5oZWFkZXJzLmhhcyhyZXF1ZXN0SWRIZWFkZXJOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQocmVxdWVzdElkSGVhZGVyTmFtZSwgcmVxdWVzdC5yZXF1ZXN0SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldENsaWVudFJlcXVlc3RJZFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOlsic2V0Q2xpZW50UmVxdWVzdElkUG9saWN5TmFtZSIsInNldENsaWVudFJlcXVlc3RJZFBvbGljeSIsInJlcXVlc3RJZEhlYWRlck5hbWUiLCJuYW1lIiwic2VuZFJlcXVlc3QiLCJyZXF1ZXN0IiwibmV4dCIsImhlYWRlcnMiLCJoYXMiLCJzZXQiLCJyZXF1ZXN0SWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   systemErrorRetryPolicy: () => (/* binding */ systemErrorRetryPolicy),\n/* harmony export */   systemErrorRetryPolicyName: () => (/* binding */ systemErrorRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */ const systemErrorRetryPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.systemErrorRetryPolicyName;\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */ function systemErrorRetryPolicy(options = {}) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.systemErrorRetryPolicy)(options);\n} //# sourceMappingURL=systemErrorRetryPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9zeXN0ZW1FcnJvclJldHJ5UG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDOEk7QUFDaEw7O0NBRUMsR0FDTSxNQUFNRSw2QkFBNkJDLG1HQUE2QkEsQ0FBQztBQUN4RTs7Ozs7Q0FLQyxHQUNNLFNBQVNILHVCQUF1QkksVUFBVSxDQUFDLENBQUM7SUFDL0MsT0FBT0gsbUdBQXlCQSxDQUFDRztBQUNyQyxFQUNBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvc3lzdGVtRXJyb3JSZXRyeVBvbGljeS5qcz84MWI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgc3lzdGVtRXJyb3JSZXRyeVBvbGljeSBhcyB0c3BTeXN0ZW1FcnJvclJldHJ5UG9saWN5LCBzeXN0ZW1FcnJvclJldHJ5UG9saWN5TmFtZSBhcyB0c3BTeXN0ZW1FcnJvclJldHJ5UG9saWN5TmFtZSwgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9wb2xpY2llc1wiO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSB7QGxpbmsgc3lzdGVtRXJyb3JSZXRyeVBvbGljeX1cbiAqL1xuZXhwb3J0IGNvbnN0IHN5c3RlbUVycm9yUmV0cnlQb2xpY3lOYW1lID0gdHNwU3lzdGVtRXJyb3JSZXRyeVBvbGljeU5hbWU7XG4vKipcbiAqIEEgcmV0cnkgcG9saWN5IHRoYXQgc3BlY2lmaWNhbGx5IHNlZWtzIHRvIGhhbmRsZSBlcnJvcnMgaW4gdGhlXG4gKiB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllciAoZS5nLiBETlMgbG9va3VwIGZhaWx1cmVzKSByYXRoZXIgdGhhblxuICogcmV0cnlhYmxlIGVycm9yIGNvZGVzIGZyb20gdGhlIHNlcnZlciBpdHNlbGYuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdGhhdCBjdXN0b21pemUgdGhlIHBvbGljeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN5c3RlbUVycm9yUmV0cnlQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRzcFN5c3RlbUVycm9yUmV0cnlQb2xpY3kob3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeXN0ZW1FcnJvclJldHJ5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6WyJzeXN0ZW1FcnJvclJldHJ5UG9saWN5IiwidHNwU3lzdGVtRXJyb3JSZXRyeVBvbGljeSIsInN5c3RlbUVycm9yUmV0cnlQb2xpY3lOYW1lIiwidHNwU3lzdGVtRXJyb3JSZXRyeVBvbGljeU5hbWUiLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throttlingRetryPolicy: () => (/* binding */ throttlingRetryPolicy),\n/* harmony export */   throttlingRetryPolicyName: () => (/* binding */ throttlingRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Name of the {@link throttlingRetryPolicy}\n */ const throttlingRetryPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.throttlingRetryPolicyName;\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://learn.microsoft.com/azure/azure-resource-manager/resource-manager-request-limits,\n * https://learn.microsoft.com/azure/azure-subscription-service-limits and\n * https://learn.microsoft.com/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n *\n * @param options - Options that configure retry logic.\n */ function throttlingRetryPolicy(options = {}) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.throttlingRetryPolicy)(options);\n} //# sourceMappingURL=throttlingRetryPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy90aHJvdHRsaW5nUmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUMwSTtBQUM1Szs7Q0FFQyxHQUNNLE1BQU1BLDRCQUE0QkMsa0dBQTRCQSxDQUFDO0FBQ3RFOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNDLHNCQUFzQkUsVUFBVSxDQUFDLENBQUM7SUFDOUMsT0FBT0Qsa0dBQXdCQSxDQUFDQztBQUNwQyxFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvdGhyb3R0bGluZ1JldHJ5UG9saWN5LmpzPzE4M2YiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyB0aHJvdHRsaW5nUmV0cnlQb2xpY3lOYW1lIGFzIHRzcFRocm90dGxpbmdSZXRyeVBvbGljeU5hbWUsIHRocm90dGxpbmdSZXRyeVBvbGljeSBhcyB0c3BUaHJvdHRsaW5nUmV0cnlQb2xpY3ksIH0gZnJvbSBcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWUvaW50ZXJuYWwvcG9saWNpZXNcIjtcbi8qKlxuICogTmFtZSBvZiB0aGUge0BsaW5rIHRocm90dGxpbmdSZXRyeVBvbGljeX1cbiAqL1xuZXhwb3J0IGNvbnN0IHRocm90dGxpbmdSZXRyeVBvbGljeU5hbWUgPSB0c3BUaHJvdHRsaW5nUmV0cnlQb2xpY3lOYW1lO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IHJldHJpZXMgd2hlbiB0aGUgc2VydmVyIHNlbmRzIGEgNDI5IHJlc3BvbnNlIHdpdGggYSBSZXRyeS1BZnRlciBoZWFkZXIuXG4gKlxuICogVG8gbGVhcm4gbW9yZSwgcGxlYXNlIHJlZmVyIHRvXG4gKiBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vYXp1cmUvYXp1cmUtcmVzb3VyY2UtbWFuYWdlci9yZXNvdXJjZS1tYW5hZ2VyLXJlcXVlc3QtbGltaXRzLFxuICogaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2F6dXJlL2F6dXJlLXN1YnNjcmlwdGlvbi1zZXJ2aWNlLWxpbWl0cyBhbmRcbiAqIGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9henVyZS92aXJ0dWFsLW1hY2hpbmVzL3Ryb3VibGVzaG9vdGluZy90cm91Ymxlc2hvb3RpbmctdGhyb3R0bGluZy1lcnJvcnNcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdGhhdCBjb25maWd1cmUgcmV0cnkgbG9naWMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsaW5nUmV0cnlQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRzcFRocm90dGxpbmdSZXRyeVBvbGljeShvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxpbmdSZXRyeVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOlsidGhyb3R0bGluZ1JldHJ5UG9saWN5TmFtZSIsInRzcFRocm90dGxpbmdSZXRyeVBvbGljeU5hbWUiLCJ0aHJvdHRsaW5nUmV0cnlQb2xpY3kiLCJ0c3BUaHJvdHRsaW5nUmV0cnlQb2xpY3kiLCJvcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tlsPolicy: () => (/* binding */ tlsPolicy),\n/* harmony export */   tlsPolicyName: () => (/* binding */ tlsPolicyName)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/policies */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/policies/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Name of the TLS Policy\n */ const tlsPolicyName = _typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.tlsPolicyName;\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */ function tlsPolicy(tlsSettings) {\n    return (0,_typespec_ts_http_runtime_internal_policies__WEBPACK_IMPORTED_MODULE_0__.tlsPolicy)(tlsSettings);\n} //# sourceMappingURL=tlsPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy90bHNQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUMwRjtBQUM1SDs7Q0FFQyxHQUNNLE1BQU1FLGdCQUFnQkMsc0ZBQWdCQSxDQUFDO0FBQzlDOztDQUVDLEdBQ00sU0FBU0gsVUFBVUksV0FBVztJQUNqQyxPQUFPSCxzRkFBWUEsQ0FBQ0c7QUFDeEIsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL3Rsc1BvbGljeS5qcz8yYzdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgdGxzUG9saWN5IGFzIHRzcFRsc1BvbGljeSwgdGxzUG9saWN5TmFtZSBhcyB0c3BUbHNQb2xpY3lOYW1lLCB9IGZyb20gXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3BvbGljaWVzXCI7XG4vKipcbiAqIE5hbWUgb2YgdGhlIFRMUyBQb2xpY3lcbiAqL1xuZXhwb3J0IGNvbnN0IHRsc1BvbGljeU5hbWUgPSB0c3BUbHNQb2xpY3lOYW1lO1xuLyoqXG4gKiBHZXRzIGEgcGlwZWxpbmUgcG9saWN5IHRoYXQgYWRkcyB0aGUgY2xpZW50IGNlcnRpZmljYXRlIHRvIHRoZSBIdHRwQ2xpZW50IGFnZW50IGZvciBhdXRoZW50aWNhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRsc1BvbGljeSh0bHNTZXR0aW5ncykge1xuICAgIHJldHVybiB0c3BUbHNQb2xpY3kodGxzU2V0dGluZ3MpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGxzUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6WyJ0bHNQb2xpY3kiLCJ0c3BUbHNQb2xpY3kiLCJ0bHNQb2xpY3lOYW1lIiwidHNwVGxzUG9saWN5TmFtZSIsInRsc1NldHRpbmdzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tracingPolicy: () => (/* binding */ tracingPolicy),\n/* harmony export */   tracingPolicyName: () => (/* binding */ tracingPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-tracing */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n/* harmony import */ var _util_userAgent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/userAgent.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n/* harmony import */ var _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/util */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n/**\n * The programmatic identifier of the tracingPolicy.\n */ const tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */ function tracingPolicy(options = {}) {\n    const userAgentPromise = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgentValue)(options.userAgentPrefix);\n    const sanitizer = new _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_6__.Sanitizer({\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n    });\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest (request, next) {\n            var _a;\n            if (!tracingClient) {\n                return next(request);\n            }\n            const userAgent = await userAgentPromise;\n            const spanAttributes = {\n                \"http.url\": sanitizer.sanitizeUrl(request.url),\n                \"http.method\": request.method,\n                \"http.user_agent\": userAgent,\n                requestId: request.requestId\n            };\n            if (userAgent) {\n                spanAttributes[\"http.user_agent\"] = userAgent;\n            }\n            const { span, tracingContext } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            } catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        }\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return (0,_azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__.createTracingClient)({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: _constants_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION\n        });\n    } catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Error when creating the TracingClient: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, {\n            tracingOptions: request.tracingOptions\n        }, {\n            spanKind: \"client\",\n            spanAttributes\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)){\n            request.headers.set(key, value);\n        }\n        return {\n            span,\n            tracingContext: updatedOptions.tracingOptions.tracingContext\n        };\n    } catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping creating a tracing span due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.isError)(error) ? error : undefined\n        });\n        if ((0,_restError_js__WEBPACK_IMPORTED_MODULE_5__.isRestError)(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    } catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping tracing span processing due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        // Per semantic conventions, only set the status to error if the status code is 4xx or 5xx.\n        // Otherwise, the status MUST remain unset.\n        // https://opentelemetry.io/docs/specs/semconv/http/http-spans/#status\n        if (response.status >= 400) {\n            span.setStatus({\n                status: \"error\"\n            });\n        }\n        span.end();\n    } catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping tracing span processing due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n    }\n} //# sourceMappingURL=tracingPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userAgentPolicy: () => (/* binding */ userAgentPolicy),\n/* harmony export */   userAgentPolicyName: () => (/* binding */ userAgentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/userAgent.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst UserAgentHeaderName = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__.getUserAgentHeaderName)();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */ const userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */ function userAgentPolicy(options = {}) {\n    const userAgentValue = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__.getUserAgentValue)(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        async sendRequest (request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, await userAgentValue);\n            }\n            return next(request);\n        }\n    };\n} //# sourceMappingURL=userAgentPolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy91c2VyQWdlbnRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUMrQztBQUNqRixNQUFNRSxzQkFBc0JGLDBFQUFzQkE7QUFDbEQ7O0NBRUMsR0FDTSxNQUFNRyxzQkFBc0Isa0JBQWtCO0FBQ3JEOzs7O0NBSUMsR0FDTSxTQUFTQyxnQkFBZ0JDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hDLE1BQU1DLGlCQUFpQkwscUVBQWlCQSxDQUFDSSxRQUFRRSxlQUFlO0lBQ2hFLE9BQU87UUFDSEMsTUFBTUw7UUFDTixNQUFNTSxhQUFZQyxPQUFPLEVBQUVDLElBQUk7WUFDM0IsSUFBSSxDQUFDRCxRQUFRRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ1gsc0JBQXNCO2dCQUMzQ1EsUUFBUUUsT0FBTyxDQUFDRSxHQUFHLENBQUNaLHFCQUFxQixNQUFNSTtZQUNuRDtZQUNBLE9BQU9LLEtBQUtEO1FBQ2hCO0lBQ0o7QUFDSixFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvdXNlckFnZW50UG9saWN5LmpzPzVjOWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBnZXRVc2VyQWdlbnRIZWFkZXJOYW1lLCBnZXRVc2VyQWdlbnRWYWx1ZSB9IGZyb20gXCIuLi91dGlsL3VzZXJBZ2VudC5qc1wiO1xuY29uc3QgVXNlckFnZW50SGVhZGVyTmFtZSA9IGdldFVzZXJBZ2VudEhlYWRlck5hbWUoKTtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSB1c2VyQWdlbnRQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VyQWdlbnRQb2xpY3lOYW1lID0gXCJ1c2VyQWdlbnRQb2xpY3lcIjtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCBzZXRzIHRoZSBVc2VyLUFnZW50IGhlYWRlciAob3IgZXF1aXZhbGVudCkgdG8gcmVmbGVjdFxuICogdGhlIGxpYnJhcnkgdmVyc2lvbi5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjdXN0b21pemUgdGhlIHVzZXIgYWdlbnQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VyQWdlbnRQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgdXNlckFnZW50VmFsdWUgPSBnZXRVc2VyQWdlbnRWYWx1ZShvcHRpb25zLnVzZXJBZ2VudFByZWZpeCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogdXNlckFnZW50UG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LmhlYWRlcnMuaGFzKFVzZXJBZ2VudEhlYWRlck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnNldChVc2VyQWdlbnRIZWFkZXJOYW1lLCBhd2FpdCB1c2VyQWdlbnRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlckFnZW50UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRVc2VyQWdlbnRIZWFkZXJOYW1lIiwiZ2V0VXNlckFnZW50VmFsdWUiLCJVc2VyQWdlbnRIZWFkZXJOYW1lIiwidXNlckFnZW50UG9saWN5TmFtZSIsInVzZXJBZ2VudFBvbGljeSIsIm9wdGlvbnMiLCJ1c2VyQWdlbnRWYWx1ZSIsInVzZXJBZ2VudFByZWZpeCIsIm5hbWUiLCJzZW5kUmVxdWVzdCIsInJlcXVlc3QiLCJuZXh0IiwiaGVhZGVycyIsImhhcyIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/wrapAbortSignalLikePolicy.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/wrapAbortSignalLikePolicy.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapAbortSignalLikePolicy: () => (/* binding */ wrapAbortSignalLikePolicy),\n/* harmony export */   wrapAbortSignalLikePolicyName: () => (/* binding */ wrapAbortSignalLikePolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_wrapAbortSignal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/wrapAbortSignal.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/wrapAbortSignal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst wrapAbortSignalLikePolicyName = \"wrapAbortSignalLikePolicy\";\n/**\n * Policy that ensure that any AbortSignalLike is wrapped in a native AbortSignal for processing by the pipeline.\n * Since the ts-http-runtime expects a native AbortSignal, this policy is used to ensure that any AbortSignalLike is wrapped in a native AbortSignal.\n *\n * @returns - created policy\n */ function wrapAbortSignalLikePolicy() {\n    return {\n        name: wrapAbortSignalLikePolicyName,\n        sendRequest: async (request, next)=>{\n            if (!request.abortSignal) {\n                return next(request);\n            }\n            const { abortSignal, cleanup } = (0,_util_wrapAbortSignal_js__WEBPACK_IMPORTED_MODULE_0__.wrapAbortSignalLike)(request.abortSignal);\n            // eslint-disable-next-line no-param-reassign\n            request.abortSignal = abortSignal;\n            try {\n                return await next(request);\n            } finally{\n                cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n            }\n        }\n    };\n} //# sourceMappingURL=wrapAbortSignalLikePolicy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy93cmFwQWJvcnRTaWduYWxMaWtlUG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDK0I7QUFDMUQsTUFBTUMsZ0NBQWdDLDRCQUE0QjtBQUN6RTs7Ozs7Q0FLQyxHQUNNLFNBQVNDO0lBQ1osT0FBTztRQUNIQyxNQUFNRjtRQUNORyxhQUFhLE9BQU9DLFNBQVNDO1lBQ3pCLElBQUksQ0FBQ0QsUUFBUUUsV0FBVyxFQUFFO2dCQUN0QixPQUFPRCxLQUFLRDtZQUNoQjtZQUNBLE1BQU0sRUFBRUUsV0FBVyxFQUFFQyxPQUFPLEVBQUUsR0FBR1IsNkVBQW1CQSxDQUFDSyxRQUFRRSxXQUFXO1lBQ3hFLDZDQUE2QztZQUM3Q0YsUUFBUUUsV0FBVyxHQUFHQTtZQUN0QixJQUFJO2dCQUNBLE9BQU8sTUFBTUQsS0FBS0Q7WUFDdEIsU0FDUTtnQkFDSkcsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBO1lBQ3REO1FBQ0o7SUFDSjtBQUNKLEVBQ0EscURBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy93cmFwQWJvcnRTaWduYWxMaWtlUG9saWN5LmpzPzNmZTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyB3cmFwQWJvcnRTaWduYWxMaWtlIH0gZnJvbSBcIi4uL3V0aWwvd3JhcEFib3J0U2lnbmFsLmpzXCI7XG5leHBvcnQgY29uc3Qgd3JhcEFib3J0U2lnbmFsTGlrZVBvbGljeU5hbWUgPSBcIndyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3lcIjtcbi8qKlxuICogUG9saWN5IHRoYXQgZW5zdXJlIHRoYXQgYW55IEFib3J0U2lnbmFsTGlrZSBpcyB3cmFwcGVkIGluIGEgbmF0aXZlIEFib3J0U2lnbmFsIGZvciBwcm9jZXNzaW5nIGJ5IHRoZSBwaXBlbGluZS5cbiAqIFNpbmNlIHRoZSB0cy1odHRwLXJ1bnRpbWUgZXhwZWN0cyBhIG5hdGl2ZSBBYm9ydFNpZ25hbCwgdGhpcyBwb2xpY3kgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCBhbnkgQWJvcnRTaWduYWxMaWtlIGlzIHdyYXBwZWQgaW4gYSBuYXRpdmUgQWJvcnRTaWduYWwuXG4gKlxuICogQHJldHVybnMgLSBjcmVhdGVkIHBvbGljeVxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcEFib3J0U2lnbmFsTGlrZVBvbGljeSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiB3cmFwQWJvcnRTaWduYWxMaWtlUG9saWN5TmFtZSxcbiAgICAgICAgc2VuZFJlcXVlc3Q6IGFzeW5jIChyZXF1ZXN0LCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3QuYWJvcnRTaWduYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgYWJvcnRTaWduYWwsIGNsZWFudXAgfSA9IHdyYXBBYm9ydFNpZ25hbExpa2UocmVxdWVzdC5hYm9ydFNpZ25hbCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIHJlcXVlc3QuYWJvcnRTaWduYWwgPSBhYm9ydFNpZ25hbDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IG5leHQocmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwID09PSBudWxsIHx8IGNsZWFudXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNsZWFudXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEFib3J0U2lnbmFsTGlrZVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOlsid3JhcEFib3J0U2lnbmFsTGlrZSIsIndyYXBBYm9ydFNpZ25hbExpa2VQb2xpY3lOYW1lIiwid3JhcEFib3J0U2lnbmFsTGlrZVBvbGljeSIsIm5hbWUiLCJzZW5kUmVxdWVzdCIsInJlcXVlc3QiLCJuZXh0IiwiYWJvcnRTaWduYWwiLCJjbGVhbnVwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/wrapAbortSignalLikePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestError: () => (/* binding */ RestError),\n/* harmony export */   isRestError: () => (/* binding */ isRestError)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A custom error type for failed pipeline requests.\n */ // eslint-disable-next-line @typescript-eslint/no-redeclare\nconst RestError = _typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__.RestError;\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */ function isRestError(e) {\n    return (0,_typespec_ts_http_runtime__WEBPACK_IMPORTED_MODULE_0__.isRestError)(e);\n} //# sourceMappingURL=restError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9yZXN0RXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNvRTtBQUN0Rzs7Q0FFQyxHQUNELDJEQUEyRDtBQUNwRCxNQUFNQSxZQUFZQyxnRUFBWUEsQ0FBQztBQUN0Qzs7O0NBR0MsR0FDTSxTQUFTQyxZQUFZRSxDQUFDO0lBQ3pCLE9BQU9ELHNFQUFjQSxDQUFDQztBQUMxQixFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcmVzdEVycm9yLmpzPzg3NDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBSZXN0RXJyb3IgYXMgVHNwUmVzdEVycm9yLCBpc1Jlc3RFcnJvciBhcyB0c3BJc1Jlc3RFcnJvciwgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZVwiO1xuLyoqXG4gKiBBIGN1c3RvbSBlcnJvciB0eXBlIGZvciBmYWlsZWQgcGlwZWxpbmUgcmVxdWVzdHMuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlXG5leHBvcnQgY29uc3QgUmVzdEVycm9yID0gVHNwUmVzdEVycm9yO1xuLyoqXG4gKiBUeXBlZ3VhcmQgZm9yIFJlc3RFcnJvclxuICogQHBhcmFtIGUgLSBTb21ldGhpbmcgY2F1Z2h0IGJ5IGEgY2F0Y2ggY2xhdXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSZXN0RXJyb3IoZSkge1xuICAgIHJldHVybiB0c3BJc1Jlc3RFcnJvcihlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3RFcnJvci5qcy5tYXAiXSwibmFtZXMiOlsiUmVzdEVycm9yIiwiVHNwUmVzdEVycm9yIiwiaXNSZXN0RXJyb3IiLCJ0c3BJc1Jlc3RFcnJvciIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFile: () => (/* binding */ createFile),\n/* harmony export */   createFileFromStream: () => (/* binding */ createFileFromStream),\n/* harmony export */   getRawContent: () => (/* binding */ getRawContent),\n/* harmony export */   hasRawContent: () => (/* binding */ hasRawContent)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nfunction isNodeReadableStream(x) {\n    return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nconst unimplementedMethods = {\n    arrayBuffer: ()=>{\n        throw new Error(\"Not implemented\");\n    },\n    bytes: ()=>{\n        throw new Error(\"Not implemented\");\n    },\n    slice: ()=>{\n        throw new Error(\"Not implemented\");\n    },\n    text: ()=>{\n        throw new Error(\"Not implemented\");\n    }\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */ const rawContent = Symbol(\"rawContent\");\n/**\n * Type guard to check if a given object is a blob-like object with a raw content property.\n */ function hasRawContent(x) {\n    return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the actual blob.\n *\n * @internal\n */ function getRawContent(blob) {\n    if (hasRawContent(blob)) {\n        return blob[rawContent]();\n    } else {\n        return blob;\n    }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */ function createFileFromStream(stream, name, options = {}) {\n    var _a, _b, _c, _d;\n    return Object.assign(Object.assign({}, unimplementedMethods), {\n        type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\",\n        lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),\n        webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\",\n        size: (_d = options.size) !== null && _d !== void 0 ? _d : -1,\n        name,\n        stream: ()=>{\n            const s = stream();\n            if (isNodeReadableStream(s)) {\n                throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n            }\n            return s;\n        },\n        [rawContent]: stream\n    });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */ function createFile(content, name, options = {}) {\n    var _a, _b, _c;\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike) {\n        return Object.assign(Object.assign({}, unimplementedMethods), {\n            type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\",\n            lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(),\n            webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\",\n            size: content.byteLength,\n            name,\n            arrayBuffer: async ()=>content.buffer,\n            stream: ()=>new Blob([\n                    content\n                ]).stream(),\n            [rawContent]: ()=>content\n        });\n    } else {\n        return new File([\n            content\n        ], name, options);\n    }\n} //# sourceMappingURL=file.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CYCLER_OPTIONS: () => (/* binding */ DEFAULT_CYCLER_OPTIONS),\n/* harmony export */   createTokenCycler: () => (/* binding */ createTokenCycler)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000,\n    retryIntervalInMs: 3000,\n    refreshWindowInMs: 1000 * 60 * 2\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */ async function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            } catch (_a) {\n                return null;\n            }\n        } else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while(token === null){\n        await (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.delay)(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */ function createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */ const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */ get isRefreshing () {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */ get shouldRefresh () {\n            var _a;\n            if (cycler.isRefreshing) {\n                return false;\n            }\n            if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {\n                return true;\n            }\n            return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */ get mustRefresh () {\n            return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n        }\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */ function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = ()=>credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then((_token)=>{\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            }).catch((reason)=>{\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions)=>{\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        const hasClaimChallenge = Boolean(tokenOptions.claims);\n        const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n        if (hasClaimChallenge) {\n            // If we've received a claim, we know the existing token isn't valid\n            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n            token = null;\n        }\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n        if (mustRefresh) {\n            return refresh(scopes, tokenOptions);\n        }\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n} //# sourceMappingURL=tokenCycler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserAgentHeaderName: () => (/* binding */ getUserAgentHeaderName),\n/* harmony export */   getUserAgentValue: () => (/* binding */ getUserAgentValue)\n/* harmony export */ });\n/* harmony import */ var _userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userAgentPlatform.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo){\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */ function getUserAgentHeaderName() {\n    return (0,_userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__.getHeaderName)();\n}\n/**\n * @internal\n */ async function getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION);\n    await (0,_userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__.setPlatformSpecificData)(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n} //# sourceMappingURL=userAgent.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3VzZXJBZ2VudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUM4QztBQUNsQztBQUM5QyxTQUFTRyxtQkFBbUJDLGFBQWE7SUFDckMsTUFBTUMsUUFBUSxFQUFFO0lBQ2hCLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlILGNBQWU7UUFDdEMsTUFBTUksUUFBUUQsUUFBUSxDQUFDLEVBQUVELElBQUksQ0FBQyxFQUFFQyxNQUFNLENBQUMsR0FBR0Q7UUFDMUNELE1BQU1JLElBQUksQ0FBQ0Q7SUFDZjtJQUNBLE9BQU9ILE1BQU1LLElBQUksQ0FBQztBQUN0QjtBQUNBOztDQUVDLEdBQ00sU0FBU0M7SUFDWixPQUFPWCxvRUFBYUE7QUFDeEI7QUFDQTs7Q0FFQyxHQUNNLGVBQWVZLGtCQUFrQkMsTUFBTTtJQUMxQyxNQUFNQyxjQUFjLElBQUlDO0lBQ3hCRCxZQUFZRSxHQUFHLENBQUMsc0JBQXNCZCxzREFBV0E7SUFDakQsTUFBTUQsOEVBQXVCQSxDQUFDYTtJQUM5QixNQUFNRyxlQUFlZCxtQkFBbUJXO0lBQ3hDLE1BQU1JLGlCQUFpQkwsU0FBUyxDQUFDLEVBQUVBLE9BQU8sQ0FBQyxFQUFFSSxhQUFhLENBQUMsR0FBR0E7SUFDOUQsT0FBT0M7QUFDWCxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC91c2VyQWdlbnQuanM/Yjk3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGdldEhlYWRlck5hbWUsIHNldFBsYXRmb3JtU3BlY2lmaWNEYXRhIH0gZnJvbSBcIi4vdXNlckFnZW50UGxhdGZvcm0uanNcIjtcbmltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuZnVuY3Rpb24gZ2V0VXNlckFnZW50U3RyaW5nKHRlbGVtZXRyeUluZm8pIHtcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRlbGVtZXRyeUluZm8pIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB2YWx1ZSA/IGAke2tleX0vJHt2YWx1ZX1gIDoga2V5O1xuICAgICAgICBwYXJ0cy5wdXNoKHRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJBZ2VudEhlYWRlck5hbWUoKSB7XG4gICAgcmV0dXJuIGdldEhlYWRlck5hbWUoKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyQWdlbnRWYWx1ZShwcmVmaXgpIHtcbiAgICBjb25zdCBydW50aW1lSW5mbyA9IG5ldyBNYXAoKTtcbiAgICBydW50aW1lSW5mby5zZXQoXCJjb3JlLXJlc3QtcGlwZWxpbmVcIiwgU0RLX1ZFUlNJT04pO1xuICAgIGF3YWl0IHNldFBsYXRmb3JtU3BlY2lmaWNEYXRhKHJ1bnRpbWVJbmZvKTtcbiAgICBjb25zdCBkZWZhdWx0QWdlbnQgPSBnZXRVc2VyQWdlbnRTdHJpbmcocnVudGltZUluZm8pO1xuICAgIGNvbnN0IHVzZXJBZ2VudFZhbHVlID0gcHJlZml4ID8gYCR7cHJlZml4fSAke2RlZmF1bHRBZ2VudH1gIDogZGVmYXVsdEFnZW50O1xuICAgIHJldHVybiB1c2VyQWdlbnRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZXJBZ2VudC5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0SGVhZGVyTmFtZSIsInNldFBsYXRmb3JtU3BlY2lmaWNEYXRhIiwiU0RLX1ZFUlNJT04iLCJnZXRVc2VyQWdlbnRTdHJpbmciLCJ0ZWxlbWV0cnlJbmZvIiwicGFydHMiLCJrZXkiLCJ2YWx1ZSIsInRva2VuIiwicHVzaCIsImpvaW4iLCJnZXRVc2VyQWdlbnRIZWFkZXJOYW1lIiwiZ2V0VXNlckFnZW50VmFsdWUiLCJwcmVmaXgiLCJydW50aW1lSW5mbyIsIk1hcCIsInNldCIsImRlZmF1bHRBZ2VudCIsInVzZXJBZ2VudFZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHeaderName: () => (/* binding */ getHeaderName),\n/* harmony export */   setPlatformSpecificData: () => (/* binding */ setPlatformSpecificData)\n/* harmony export */ });\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:process */ \"node:process\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * @internal\n */ function getHeaderName() {\n    return \"User-Agent\";\n}\n/**\n * @internal\n */ async function setPlatformSpecificData(map) {\n    if (/*#__PURE__*/ (node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(node_process__WEBPACK_IMPORTED_MODULE_1__, 2))) && node_process__WEBPACK_IMPORTED_MODULE_1__.versions) {\n        const versions = node_process__WEBPACK_IMPORTED_MODULE_1__.versions;\n        if (versions.bun) {\n            map.set(\"Bun\", versions.bun);\n        } else if (versions.deno) {\n            map.set(\"Deno\", versions.deno);\n        } else if (versions.node) {\n            map.set(\"Node\", versions.node);\n        }\n    }\n    map.set(\"OS\", `(${node_os__WEBPACK_IMPORTED_MODULE_0__.arch()}-${node_os__WEBPACK_IMPORTED_MODULE_0__.type()}-${node_os__WEBPACK_IMPORTED_MODULE_0__.release()})`);\n} //# sourceMappingURL=userAgentPlatform.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3VzZXJBZ2VudFBsYXRmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNKO0FBQ1U7QUFDeEM7O0NBRUMsR0FDTSxTQUFTRTtJQUNaLE9BQU87QUFDWDtBQUNBOztDQUVDLEdBQ00sZUFBZUMsd0JBQXdCQyxHQUFHO0lBQzdDLElBQUlILDhNQUFPQSxJQUFJQSxrREFBZ0IsRUFBRTtRQUM3QixNQUFNSSxXQUFXSixrREFBZ0I7UUFDakMsSUFBSUksU0FBU0MsR0FBRyxFQUFFO1lBQ2RGLElBQUlHLEdBQUcsQ0FBQyxPQUFPRixTQUFTQyxHQUFHO1FBQy9CLE9BQ0ssSUFBSUQsU0FBU0csSUFBSSxFQUFFO1lBQ3BCSixJQUFJRyxHQUFHLENBQUMsUUFBUUYsU0FBU0csSUFBSTtRQUNqQyxPQUNLLElBQUlILFNBQVNJLElBQUksRUFBRTtZQUNwQkwsSUFBSUcsR0FBRyxDQUFDLFFBQVFGLFNBQVNJLElBQUk7UUFDakM7SUFDSjtJQUNBTCxJQUFJRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRVAseUNBQU8sR0FBRyxDQUFDLEVBQUVBLHlDQUFPLEdBQUcsQ0FBQyxFQUFFQSw0Q0FBVSxHQUFHLENBQUMsQ0FBQztBQUMvRCxFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC91c2VyQWdlbnRQbGF0Zm9ybS5qcz9jNDQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0ICogYXMgb3MgZnJvbSBcIm5vZGU6b3NcIjtcbmltcG9ydCAqIGFzIHByb2Nlc3MgZnJvbSBcIm5vZGU6cHJvY2Vzc1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhlYWRlck5hbWUoKSB7XG4gICAgcmV0dXJuIFwiVXNlci1BZ2VudFwiO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNldFBsYXRmb3JtU3BlY2lmaWNEYXRhKG1hcCkge1xuICAgIGlmIChwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMpIHtcbiAgICAgICAgY29uc3QgdmVyc2lvbnMgPSBwcm9jZXNzLnZlcnNpb25zO1xuICAgICAgICBpZiAodmVyc2lvbnMuYnVuKSB7XG4gICAgICAgICAgICBtYXAuc2V0KFwiQnVuXCIsIHZlcnNpb25zLmJ1bik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmVyc2lvbnMuZGVubykge1xuICAgICAgICAgICAgbWFwLnNldChcIkRlbm9cIiwgdmVyc2lvbnMuZGVubyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmVyc2lvbnMubm9kZSkge1xuICAgICAgICAgICAgbWFwLnNldChcIk5vZGVcIiwgdmVyc2lvbnMubm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbWFwLnNldChcIk9TXCIsIGAoJHtvcy5hcmNoKCl9LSR7b3MudHlwZSgpfS0ke29zLnJlbGVhc2UoKX0pYCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VyQWdlbnRQbGF0Zm9ybS5qcy5tYXAiXSwibmFtZXMiOlsib3MiLCJwcm9jZXNzIiwiZ2V0SGVhZGVyTmFtZSIsInNldFBsYXRmb3JtU3BlY2lmaWNEYXRhIiwibWFwIiwidmVyc2lvbnMiLCJidW4iLCJzZXQiLCJkZW5vIiwibm9kZSIsImFyY2giLCJ0eXBlIiwicmVsZWFzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/wrapAbortSignal.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/wrapAbortSignal.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapAbortSignalLike: () => (/* binding */ wrapAbortSignalLike)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Creates a native AbortSignal which reflects the state of the provided AbortSignalLike.\n * If the AbortSignalLike is already a native AbortSignal, it is returned as is.\n * @param abortSignalLike - The AbortSignalLike to wrap.\n * @returns - An object containing the native AbortSignal and an optional cleanup function. The cleanup function should be called when the AbortSignal is no longer needed.\n */ function wrapAbortSignalLike(abortSignalLike) {\n    if (abortSignalLike instanceof AbortSignal) {\n        return {\n            abortSignal: abortSignalLike\n        };\n    }\n    if (abortSignalLike.aborted) {\n        return {\n            abortSignal: AbortSignal.abort(abortSignalLike.reason)\n        };\n    }\n    const controller = new AbortController();\n    let needsCleanup = true;\n    function cleanup() {\n        if (needsCleanup) {\n            abortSignalLike.removeEventListener(\"abort\", listener);\n            needsCleanup = false;\n        }\n    }\n    function listener() {\n        controller.abort(abortSignalLike.reason);\n        cleanup();\n    }\n    abortSignalLike.addEventListener(\"abort\", listener);\n    return {\n        abortSignal: controller.signal,\n        cleanup\n    };\n} //# sourceMappingURL=wrapAbortSignal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3dyYXBBYm9ydFNpZ25hbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNsQzs7Ozs7Q0FLQyxHQUNNLFNBQVNBLG9CQUFvQkMsZUFBZTtJQUMvQyxJQUFJQSwyQkFBMkJDLGFBQWE7UUFDeEMsT0FBTztZQUFFQyxhQUFhRjtRQUFnQjtJQUMxQztJQUNBLElBQUlBLGdCQUFnQkcsT0FBTyxFQUFFO1FBQ3pCLE9BQU87WUFBRUQsYUFBYUQsWUFBWUcsS0FBSyxDQUFDSixnQkFBZ0JLLE1BQU07UUFBRTtJQUNwRTtJQUNBLE1BQU1DLGFBQWEsSUFBSUM7SUFDdkIsSUFBSUMsZUFBZTtJQUNuQixTQUFTQztRQUNMLElBQUlELGNBQWM7WUFDZFIsZ0JBQWdCVSxtQkFBbUIsQ0FBQyxTQUFTQztZQUM3Q0gsZUFBZTtRQUNuQjtJQUNKO0lBQ0EsU0FBU0c7UUFDTEwsV0FBV0YsS0FBSyxDQUFDSixnQkFBZ0JLLE1BQU07UUFDdkNJO0lBQ0o7SUFDQVQsZ0JBQWdCWSxnQkFBZ0IsQ0FBQyxTQUFTRDtJQUMxQyxPQUFPO1FBQUVULGFBQWFJLFdBQVdPLE1BQU07UUFBRUo7SUFBUTtBQUNyRCxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC93cmFwQWJvcnRTaWduYWwuanM/YWQ3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogQ3JlYXRlcyBhIG5hdGl2ZSBBYm9ydFNpZ25hbCB3aGljaCByZWZsZWN0cyB0aGUgc3RhdGUgb2YgdGhlIHByb3ZpZGVkIEFib3J0U2lnbmFsTGlrZS5cbiAqIElmIHRoZSBBYm9ydFNpZ25hbExpa2UgaXMgYWxyZWFkeSBhIG5hdGl2ZSBBYm9ydFNpZ25hbCwgaXQgaXMgcmV0dXJuZWQgYXMgaXMuXG4gKiBAcGFyYW0gYWJvcnRTaWduYWxMaWtlIC0gVGhlIEFib3J0U2lnbmFsTGlrZSB0byB3cmFwLlxuICogQHJldHVybnMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgbmF0aXZlIEFib3J0U2lnbmFsIGFuZCBhbiBvcHRpb25hbCBjbGVhbnVwIGZ1bmN0aW9uLiBUaGUgY2xlYW51cCBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIHdoZW4gdGhlIEFib3J0U2lnbmFsIGlzIG5vIGxvbmdlciBuZWVkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwQWJvcnRTaWduYWxMaWtlKGFib3J0U2lnbmFsTGlrZSkge1xuICAgIGlmIChhYm9ydFNpZ25hbExpa2UgaW5zdGFuY2VvZiBBYm9ydFNpZ25hbCkge1xuICAgICAgICByZXR1cm4geyBhYm9ydFNpZ25hbDogYWJvcnRTaWduYWxMaWtlIH07XG4gICAgfVxuICAgIGlmIChhYm9ydFNpZ25hbExpa2UuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4geyBhYm9ydFNpZ25hbDogQWJvcnRTaWduYWwuYWJvcnQoYWJvcnRTaWduYWxMaWtlLnJlYXNvbikgfTtcbiAgICB9XG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgbmVlZHNDbGVhbnVwID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICBpZiAobmVlZHNDbGVhbnVwKSB7XG4gICAgICAgICAgICBhYm9ydFNpZ25hbExpa2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIG5lZWRzQ2xlYW51cCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgICBjb250cm9sbGVyLmFib3J0KGFib3J0U2lnbmFsTGlrZS5yZWFzb24pO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgfVxuICAgIGFib3J0U2lnbmFsTGlrZS5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgbGlzdGVuZXIpO1xuICAgIHJldHVybiB7IGFib3J0U2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCwgY2xlYW51cCB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEFib3J0U2lnbmFsLmpzLm1hcCJdLCJuYW1lcyI6WyJ3cmFwQWJvcnRTaWduYWxMaWtlIiwiYWJvcnRTaWduYWxMaWtlIiwiQWJvcnRTaWduYWwiLCJhYm9ydFNpZ25hbCIsImFib3J0ZWQiLCJhYm9ydCIsInJlYXNvbiIsImNvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJuZWVkc0NsZWFudXAiLCJjbGVhbnVwIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNpZ25hbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/wrapAbortSignal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTracingClient: () => (/* reexport safe */ _tracingClient_js__WEBPACK_IMPORTED_MODULE_1__.createTracingClient),\n/* harmony export */   useInstrumenter: () => (/* reexport safe */ _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.useInstrumenter)\n/* harmony export */ });\n/* harmony import */ var _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumenter.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\");\n/* harmony import */ var _tracingClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracingClient.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNrQjtBQUNLLENBQ3pELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXRyYWNpbmcvZGlzdC9lc20vaW5kZXguanM/OTM5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmV4cG9ydCB7IHVzZUluc3RydW1lbnRlciB9IGZyb20gXCIuL2luc3RydW1lbnRlci5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlVHJhY2luZ0NsaWVudCB9IGZyb20gXCIuL3RyYWNpbmdDbGllbnQuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJ1c2VJbnN0cnVtZW50ZXIiLCJjcmVhdGVUcmFjaW5nQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/instrumenter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultInstrumenter: () => (/* binding */ createDefaultInstrumenter),\n/* harmony export */   createDefaultTracingSpan: () => (/* binding */ createDefaultTracingSpan),\n/* harmony export */   getInstrumenter: () => (/* binding */ getInstrumenter),\n/* harmony export */   useInstrumenter: () => (/* binding */ useInstrumenter)\n/* harmony export */ });\n/* harmony import */ var _tracingContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracingContext.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nfunction createDefaultTracingSpan() {\n    return {\n        end: ()=>{\n        // noop\n        },\n        isRecording: ()=>false,\n        recordException: ()=>{\n        // noop\n        },\n        setAttribute: ()=>{\n        // noop\n        },\n        setStatus: ()=>{\n        // noop\n        },\n        addEvent: ()=>{\n        // noop\n        }\n    };\n}\nfunction createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: ()=>{\n            return {};\n        },\n        parseTraceparentHeader: ()=>{\n            return undefined;\n        },\n        startSpan: (_name, spanOptions)=>{\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: (0,_tracingContext_js__WEBPACK_IMPORTED_MODULE_0__.createTracingContext)({\n                    parentContext: spanOptions.tracingContext\n                })\n            };\n        },\n        withContext (_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        }\n    };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */ function useInstrumenter(instrumenter) {\n    _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */ function getInstrumenter() {\n    if (!_state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation) {\n        _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation;\n} //# sourceMappingURL=instrumenter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9pbnN0cnVtZW50ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUN5QjtBQUN4QjtBQUM1QixTQUFTRTtJQUNaLE9BQU87UUFDSEMsS0FBSztRQUNELE9BQU87UUFDWDtRQUNBQyxhQUFhLElBQU07UUFDbkJDLGlCQUFpQjtRQUNiLE9BQU87UUFDWDtRQUNBQyxjQUFjO1FBQ1YsT0FBTztRQUNYO1FBQ0FDLFdBQVc7UUFDUCxPQUFPO1FBQ1g7UUFDQUMsVUFBVTtRQUNOLE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDTyxTQUFTQztJQUNaLE9BQU87UUFDSEMsc0JBQXNCO1lBQ2xCLE9BQU8sQ0FBQztRQUNaO1FBQ0FDLHdCQUF3QjtZQUNwQixPQUFPQztRQUNYO1FBQ0FDLFdBQVcsQ0FBQ0MsT0FBT0M7WUFDZixPQUFPO2dCQUNIQyxNQUFNZDtnQkFDTmUsZ0JBQWdCakIsd0VBQW9CQSxDQUFDO29CQUFFa0IsZUFBZUgsWUFBWUUsY0FBYztnQkFBQztZQUNyRjtRQUNKO1FBQ0FFLGFBQVlDLFFBQVEsRUFBRUMsUUFBUSxFQUFFLEdBQUdDLFlBQVk7WUFDM0MsT0FBT0QsWUFBWUM7UUFDdkI7SUFDSjtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNDLGdCQUFnQkMsWUFBWTtJQUN4Q3ZCLDRDQUFLQSxDQUFDd0IsMEJBQTBCLEdBQUdEO0FBQ3ZDO0FBQ0E7Ozs7Q0FJQyxHQUNNLFNBQVNFO0lBQ1osSUFBSSxDQUFDekIsNENBQUtBLENBQUN3QiwwQkFBMEIsRUFBRTtRQUNuQ3hCLDRDQUFLQSxDQUFDd0IsMEJBQTBCLEdBQUdoQjtJQUN2QztJQUNBLE9BQU9SLDRDQUFLQSxDQUFDd0IsMEJBQTBCO0FBQzNDLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9pbnN0cnVtZW50ZXIuanM/NmJmZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZVRyYWNpbmdDb250ZXh0IH0gZnJvbSBcIi4vdHJhY2luZ0NvbnRleHQuanNcIjtcbmltcG9ydCB7IHN0YXRlIH0gZnJvbSBcIi4vc3RhdGUuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0VHJhY2luZ1NwYW4oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0sXG4gICAgICAgIGlzUmVjb3JkaW5nOiAoKSA9PiBmYWxzZSxcbiAgICAgICAgcmVjb3JkRXhjZXB0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0sXG4gICAgICAgIHNldEF0dHJpYnV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9LFxuICAgICAgICBzZXRTdGF0dXM6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfSxcbiAgICAgICAgYWRkRXZlbnQ6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRJbnN0cnVtZW50ZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3JlYXRlUmVxdWVzdEhlYWRlcnM6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2VUcmFjZXBhcmVudEhlYWRlcjogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgc3RhcnRTcGFuOiAoX25hbWUsIHNwYW5PcHRpb25zKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNwYW46IGNyZWF0ZURlZmF1bHRUcmFjaW5nU3BhbigpLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdDb250ZXh0OiBjcmVhdGVUcmFjaW5nQ29udGV4dCh7IHBhcmVudENvbnRleHQ6IHNwYW5PcHRpb25zLnRyYWNpbmdDb250ZXh0IH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgd2l0aENvbnRleHQoX2NvbnRleHQsIGNhbGxiYWNrLCAuLi5jYWxsYmFja0FyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayguLi5jYWxsYmFja0FyZ3MpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEV4dGVuZHMgdGhlIEF6dXJlIFNESyB3aXRoIHN1cHBvcnQgZm9yIGEgZ2l2ZW4gaW5zdHJ1bWVudGVyIGltcGxlbWVudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBpbnN0cnVtZW50ZXIgLSBUaGUgaW5zdHJ1bWVudGVyIGltcGxlbWVudGF0aW9uIHRvIHVzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUluc3RydW1lbnRlcihpbnN0cnVtZW50ZXIpIHtcbiAgICBzdGF0ZS5pbnN0cnVtZW50ZXJJbXBsZW1lbnRhdGlvbiA9IGluc3RydW1lbnRlcjtcbn1cbi8qKlxuICogR2V0cyB0aGUgY3VycmVudGx5IHNldCBpbnN0cnVtZW50ZXIsIGEgTm8tT3AgaW5zdHJ1bWVudGVyIGJ5IGRlZmF1bHQuXG4gKlxuICogQHJldHVybnMgVGhlIGN1cnJlbnRseSBzZXQgaW5zdHJ1bWVudGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnN0cnVtZW50ZXIoKSB7XG4gICAgaWYgKCFzdGF0ZS5pbnN0cnVtZW50ZXJJbXBsZW1lbnRhdGlvbikge1xuICAgICAgICBzdGF0ZS5pbnN0cnVtZW50ZXJJbXBsZW1lbnRhdGlvbiA9IGNyZWF0ZURlZmF1bHRJbnN0cnVtZW50ZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLmluc3RydW1lbnRlckltcGxlbWVudGF0aW9uO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdHJ1bWVudGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVUcmFjaW5nQ29udGV4dCIsInN0YXRlIiwiY3JlYXRlRGVmYXVsdFRyYWNpbmdTcGFuIiwiZW5kIiwiaXNSZWNvcmRpbmciLCJyZWNvcmRFeGNlcHRpb24iLCJzZXRBdHRyaWJ1dGUiLCJzZXRTdGF0dXMiLCJhZGRFdmVudCIsImNyZWF0ZURlZmF1bHRJbnN0cnVtZW50ZXIiLCJjcmVhdGVSZXF1ZXN0SGVhZGVycyIsInBhcnNlVHJhY2VwYXJlbnRIZWFkZXIiLCJ1bmRlZmluZWQiLCJzdGFydFNwYW4iLCJfbmFtZSIsInNwYW5PcHRpb25zIiwic3BhbiIsInRyYWNpbmdDb250ZXh0IiwicGFyZW50Q29udGV4dCIsIndpdGhDb250ZXh0IiwiX2NvbnRleHQiLCJjYWxsYmFjayIsImNhbGxiYWNrQXJncyIsInVzZUluc3RydW1lbnRlciIsImluc3RydW1lbnRlciIsImluc3RydW1lbnRlckltcGxlbWVudGF0aW9uIiwiZ2V0SW5zdHJ1bWVudGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/state.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n/* harmony import */ var _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonjs/state.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.\n// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.\n\n/**\n * Defines the shared state between CJS and ESM by re-exporting the CJS state.\n */ const state = _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__.state; //# sourceMappingURL=state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9zdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDbEMseUZBQXlGO0FBQ3pGLHdHQUF3RztBQUMvQztBQUN6RDs7Q0FFQyxHQUNNLE1BQU1BLFFBQVFDLHFEQUFRQSxDQUFDLENBQzlCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXRyYWNpbmcvZGlzdC9lc20vc3RhdGUuanM/YTM5YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8vIEB0cy1leHBlY3QtZXJyb3IgVGhlIHJlY29tbWVuZGVkIGFwcHJvYWNoIHRvIHNoYXJpbmcgbW9kdWxlIHN0YXRlIGJldHdlZW4gRVNNIGFuZCBDSlMuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy90c2h5L2Jsb2IvbWFpbi9SRUFETUUubWQjbW9kdWxlLWxvY2FsLXN0YXRlIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxuaW1wb3J0IHsgc3RhdGUgYXMgY2pzU3RhdGUgfSBmcm9tIFwiLi4vY29tbW9uanMvc3RhdGUuanNcIjtcbi8qKlxuICogRGVmaW5lcyB0aGUgc2hhcmVkIHN0YXRlIGJldHdlZW4gQ0pTIGFuZCBFU00gYnkgcmUtZXhwb3J0aW5nIHRoZSBDSlMgc3RhdGUuXG4gKi9cbmV4cG9ydCBjb25zdCBzdGF0ZSA9IGNqc1N0YXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUuanMubWFwIl0sIm5hbWVzIjpbInN0YXRlIiwiY2pzU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/tracingClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTracingClient: () => (/* binding */ createTracingClient)\n/* harmony export */ });\n/* harmony import */ var _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumenter.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\");\n/* harmony import */ var _tracingContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracingContext.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */ function createTracingClient(options) {\n    const { namespace, packageName, packageVersion } = options;\n    function startSpan(name, operationOptions, spanOptions) {\n        var _a;\n        const startSpanResult = (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().startSpan(name, Object.assign(Object.assign({}, spanOptions), {\n            packageName: packageName,\n            packageVersion: packageVersion,\n            tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext\n        }));\n        let tracingContext = startSpanResult.tracingContext;\n        const span = startSpanResult.span;\n        if (!tracingContext.getValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace)) {\n            tracingContext = tracingContext.setValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace, namespace);\n        }\n        span.setAttribute(\"az.namespace\", tracingContext.getValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace));\n        const updatedOptions = Object.assign({}, operationOptions, {\n            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), {\n                tracingContext\n            })\n        });\n        return {\n            span,\n            updatedOptions\n        };\n    }\n    async function withSpan(name, operationOptions, callback, spanOptions) {\n        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n        try {\n            const result = await withContext(updatedOptions.tracingOptions.tracingContext, ()=>Promise.resolve(callback(updatedOptions, span)));\n            span.setStatus({\n                status: \"success\"\n            });\n            return result;\n        } catch (err) {\n            span.setStatus({\n                status: \"error\",\n                error: err\n            });\n            throw err;\n        } finally{\n            span.end();\n        }\n    }\n    function withContext(context, callback, ...callbackArgs) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().withContext(context, callback, ...callbackArgs);\n    }\n    /**\n     * Parses a traceparent header value into a span identifier.\n     *\n     * @param traceparentHeader - The traceparent header to parse.\n     * @returns An implementation-specific identifier for the span.\n     */ function parseTraceparentHeader(traceparentHeader) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().parseTraceparentHeader(traceparentHeader);\n    }\n    /**\n     * Creates a set of request headers to propagate tracing information to a backend.\n     *\n     * @param tracingContext - The context containing the span to serialize.\n     * @returns The set of headers to add to a request.\n     */ function createRequestHeaders(tracingContext) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().createRequestHeaders(tracingContext);\n    }\n    return {\n        startSpan,\n        withSpan,\n        withContext,\n        parseTraceparentHeader,\n        createRequestHeaders\n    };\n} //# sourceMappingURL=tracingClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDa0I7QUFDRztBQUN2RDs7Ozs7Q0FLQyxHQUNNLFNBQVNFLG9CQUFvQkMsT0FBTztJQUN2QyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxjQUFjLEVBQUUsR0FBR0g7SUFDbkQsU0FBU0ksVUFBVUMsSUFBSSxFQUFFQyxnQkFBZ0IsRUFBRUMsV0FBVztRQUNsRCxJQUFJQztRQUNKLE1BQU1DLGtCQUFrQlosaUVBQWVBLEdBQUdPLFNBQVMsQ0FBQ0MsTUFBTUssT0FBT0MsTUFBTSxDQUFDRCxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHSixjQUFjO1lBQUVMLGFBQWFBO1lBQWFDLGdCQUFnQkE7WUFBZ0JTLGdCQUFnQixDQUFDSixLQUFLRixxQkFBcUIsUUFBUUEscUJBQXFCLEtBQUssSUFBSSxLQUFLLElBQUlBLGlCQUFpQk8sY0FBYyxNQUFNLFFBQVFMLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0ksY0FBYztRQUFDO1FBQ3RWLElBQUlBLGlCQUFpQkgsZ0JBQWdCRyxjQUFjO1FBQ25ELE1BQU1FLE9BQU9MLGdCQUFnQkssSUFBSTtRQUNqQyxJQUFJLENBQUNGLGVBQWVHLFFBQVEsQ0FBQ2pCLGdFQUFnQkEsQ0FBQ0csU0FBUyxHQUFHO1lBQ3REVyxpQkFBaUJBLGVBQWVJLFFBQVEsQ0FBQ2xCLGdFQUFnQkEsQ0FBQ0csU0FBUyxFQUFFQTtRQUN6RTtRQUNBYSxLQUFLRyxZQUFZLENBQUMsZ0JBQWdCTCxlQUFlRyxRQUFRLENBQUNqQixnRUFBZ0JBLENBQUNHLFNBQVM7UUFDcEYsTUFBTWlCLGlCQUFpQlIsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR0wsa0JBQWtCO1lBQ3ZETyxnQkFBZ0JILE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR0wscUJBQXFCLFFBQVFBLHFCQUFxQixLQUFLLElBQUksS0FBSyxJQUFJQSxpQkFBaUJPLGNBQWMsR0FBRztnQkFBRUQ7WUFBZTtRQUMzSztRQUNBLE9BQU87WUFDSEU7WUFDQUk7UUFDSjtJQUNKO0lBQ0EsZUFBZUMsU0FBU2QsSUFBSSxFQUFFQyxnQkFBZ0IsRUFBRWMsUUFBUSxFQUFFYixXQUFXO1FBQ2pFLE1BQU0sRUFBRU8sSUFBSSxFQUFFSSxjQUFjLEVBQUUsR0FBR2QsVUFBVUMsTUFBTUMsa0JBQWtCQztRQUNuRSxJQUFJO1lBQ0EsTUFBTWMsU0FBUyxNQUFNQyxZQUFZSixlQUFlTCxjQUFjLENBQUNELGNBQWMsRUFBRSxJQUFNVyxRQUFRQyxPQUFPLENBQUNKLFNBQVNGLGdCQUFnQko7WUFDOUhBLEtBQUtXLFNBQVMsQ0FBQztnQkFBRUMsUUFBUTtZQUFVO1lBQ25DLE9BQU9MO1FBQ1gsRUFDQSxPQUFPTSxLQUFLO1lBQ1JiLEtBQUtXLFNBQVMsQ0FBQztnQkFBRUMsUUFBUTtnQkFBU0UsT0FBT0Q7WUFBSTtZQUM3QyxNQUFNQTtRQUNWLFNBQ1E7WUFDSmIsS0FBS2UsR0FBRztRQUNaO0lBQ0o7SUFDQSxTQUFTUCxZQUFZUSxPQUFPLEVBQUVWLFFBQVEsRUFBRSxHQUFHVyxZQUFZO1FBQ25ELE9BQU9sQyxpRUFBZUEsR0FBR3lCLFdBQVcsQ0FBQ1EsU0FBU1YsYUFBYVc7SUFDL0Q7SUFDQTs7Ozs7S0FLQyxHQUNELFNBQVNDLHVCQUF1QkMsaUJBQWlCO1FBQzdDLE9BQU9wQyxpRUFBZUEsR0FBR21DLHNCQUFzQixDQUFDQztJQUNwRDtJQUNBOzs7OztLQUtDLEdBQ0QsU0FBU0MscUJBQXFCdEIsY0FBYztRQUN4QyxPQUFPZixpRUFBZUEsR0FBR3FDLG9CQUFvQixDQUFDdEI7SUFDbEQ7SUFDQSxPQUFPO1FBQ0hSO1FBQ0FlO1FBQ0FHO1FBQ0FVO1FBQ0FFO0lBQ0o7QUFDSixFQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXRyYWNpbmcvZGlzdC9lc20vdHJhY2luZ0NsaWVudC5qcz8wYmI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgZ2V0SW5zdHJ1bWVudGVyIH0gZnJvbSBcIi4vaW5zdHJ1bWVudGVyLmpzXCI7XG5pbXBvcnQgeyBrbm93bkNvbnRleHRLZXlzIH0gZnJvbSBcIi4vdHJhY2luZ0NvbnRleHQuanNcIjtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0cmFjaW5nIGNsaWVudC5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdXNlZCB0byBjb25maWd1cmUgdGhlIHRyYWNpbmcgY2xpZW50LlxuICogQHJldHVybnMgLSBBbiBpbnN0YW5jZSBvZiB7QGxpbmsgVHJhY2luZ0NsaWVudH0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFjaW5nQ2xpZW50KG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IG5hbWVzcGFjZSwgcGFja2FnZU5hbWUsIHBhY2thZ2VWZXJzaW9uIH0gPSBvcHRpb25zO1xuICAgIGZ1bmN0aW9uIHN0YXJ0U3BhbihuYW1lLCBvcGVyYXRpb25PcHRpb25zLCBzcGFuT3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHN0YXJ0U3BhblJlc3VsdCA9IGdldEluc3RydW1lbnRlcigpLnN0YXJ0U3BhbihuYW1lLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNwYW5PcHRpb25zKSwgeyBwYWNrYWdlTmFtZTogcGFja2FnZU5hbWUsIHBhY2thZ2VWZXJzaW9uOiBwYWNrYWdlVmVyc2lvbiwgdHJhY2luZ0NvbnRleHQ6IChfYSA9IG9wZXJhdGlvbk9wdGlvbnMgPT09IG51bGwgfHwgb3BlcmF0aW9uT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3BlcmF0aW9uT3B0aW9ucy50cmFjaW5nT3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRyYWNpbmdDb250ZXh0IH0pKTtcbiAgICAgICAgbGV0IHRyYWNpbmdDb250ZXh0ID0gc3RhcnRTcGFuUmVzdWx0LnRyYWNpbmdDb250ZXh0O1xuICAgICAgICBjb25zdCBzcGFuID0gc3RhcnRTcGFuUmVzdWx0LnNwYW47XG4gICAgICAgIGlmICghdHJhY2luZ0NvbnRleHQuZ2V0VmFsdWUoa25vd25Db250ZXh0S2V5cy5uYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICB0cmFjaW5nQ29udGV4dCA9IHRyYWNpbmdDb250ZXh0LnNldFZhbHVlKGtub3duQ29udGV4dEtleXMubmFtZXNwYWNlLCBuYW1lc3BhY2UpO1xuICAgICAgICB9XG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKFwiYXoubmFtZXNwYWNlXCIsIHRyYWNpbmdDb250ZXh0LmdldFZhbHVlKGtub3duQ29udGV4dEtleXMubmFtZXNwYWNlKSk7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3BlcmF0aW9uT3B0aW9ucywge1xuICAgICAgICAgICAgdHJhY2luZ09wdGlvbnM6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3BlcmF0aW9uT3B0aW9ucyA9PT0gbnVsbCB8fCBvcGVyYXRpb25PcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcGVyYXRpb25PcHRpb25zLnRyYWNpbmdPcHRpb25zKSwgeyB0cmFjaW5nQ29udGV4dCB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzcGFuLFxuICAgICAgICAgICAgdXBkYXRlZE9wdGlvbnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIGZ1bmN0aW9uIHdpdGhTcGFuKG5hbWUsIG9wZXJhdGlvbk9wdGlvbnMsIGNhbGxiYWNrLCBzcGFuT3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHNwYW4sIHVwZGF0ZWRPcHRpb25zIH0gPSBzdGFydFNwYW4obmFtZSwgb3BlcmF0aW9uT3B0aW9ucywgc3Bhbk9wdGlvbnMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd2l0aENvbnRleHQodXBkYXRlZE9wdGlvbnMudHJhY2luZ09wdGlvbnMudHJhY2luZ0NvbnRleHQsICgpID0+IFByb21pc2UucmVzb2x2ZShjYWxsYmFjayh1cGRhdGVkT3B0aW9ucywgc3BhbikpKTtcbiAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHsgc3RhdHVzOiBcInN1Y2Nlc3NcIiB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoeyBzdGF0dXM6IFwiZXJyb3JcIiwgZXJyb3I6IGVyciB9KTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHNwYW4uZW5kKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd2l0aENvbnRleHQoY29udGV4dCwgY2FsbGJhY2ssIC4uLmNhbGxiYWNrQXJncykge1xuICAgICAgICByZXR1cm4gZ2V0SW5zdHJ1bWVudGVyKCkud2l0aENvbnRleHQoY29udGV4dCwgY2FsbGJhY2ssIC4uLmNhbGxiYWNrQXJncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHRyYWNlcGFyZW50IGhlYWRlciB2YWx1ZSBpbnRvIGEgc3BhbiBpZGVudGlmaWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYWNlcGFyZW50SGVhZGVyIC0gVGhlIHRyYWNlcGFyZW50IGhlYWRlciB0byBwYXJzZS5cbiAgICAgKiBAcmV0dXJucyBBbiBpbXBsZW1lbnRhdGlvbi1zcGVjaWZpYyBpZGVudGlmaWVyIGZvciB0aGUgc3Bhbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZVRyYWNlcGFyZW50SGVhZGVyKHRyYWNlcGFyZW50SGVhZGVyKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnN0cnVtZW50ZXIoKS5wYXJzZVRyYWNlcGFyZW50SGVhZGVyKHRyYWNlcGFyZW50SGVhZGVyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvZiByZXF1ZXN0IGhlYWRlcnMgdG8gcHJvcGFnYXRlIHRyYWNpbmcgaW5mb3JtYXRpb24gdG8gYSBiYWNrZW5kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRyYWNpbmdDb250ZXh0IC0gVGhlIGNvbnRleHQgY29udGFpbmluZyB0aGUgc3BhbiB0byBzZXJpYWxpemUuXG4gICAgICogQHJldHVybnMgVGhlIHNldCBvZiBoZWFkZXJzIHRvIGFkZCB0byBhIHJlcXVlc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVxdWVzdEhlYWRlcnModHJhY2luZ0NvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGdldEluc3RydW1lbnRlcigpLmNyZWF0ZVJlcXVlc3RIZWFkZXJzKHRyYWNpbmdDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnRTcGFuLFxuICAgICAgICB3aXRoU3BhbixcbiAgICAgICAgd2l0aENvbnRleHQsXG4gICAgICAgIHBhcnNlVHJhY2VwYXJlbnRIZWFkZXIsXG4gICAgICAgIGNyZWF0ZVJlcXVlc3RIZWFkZXJzLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRJbnN0cnVtZW50ZXIiLCJrbm93bkNvbnRleHRLZXlzIiwiY3JlYXRlVHJhY2luZ0NsaWVudCIsIm9wdGlvbnMiLCJuYW1lc3BhY2UiLCJwYWNrYWdlTmFtZSIsInBhY2thZ2VWZXJzaW9uIiwic3RhcnRTcGFuIiwibmFtZSIsIm9wZXJhdGlvbk9wdGlvbnMiLCJzcGFuT3B0aW9ucyIsIl9hIiwic3RhcnRTcGFuUmVzdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwidHJhY2luZ0NvbnRleHQiLCJ0cmFjaW5nT3B0aW9ucyIsInNwYW4iLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic2V0QXR0cmlidXRlIiwidXBkYXRlZE9wdGlvbnMiLCJ3aXRoU3BhbiIsImNhbGxiYWNrIiwicmVzdWx0Iiwid2l0aENvbnRleHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFN0YXR1cyIsInN0YXR1cyIsImVyciIsImVycm9yIiwiZW5kIiwiY29udGV4dCIsImNhbGxiYWNrQXJncyIsInBhcnNlVHJhY2VwYXJlbnRIZWFkZXIiLCJ0cmFjZXBhcmVudEhlYWRlciIsImNyZWF0ZVJlcXVlc3RIZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/tracingContext.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TracingContextImpl: () => (/* binding */ TracingContextImpl),\n/* harmony export */   createTracingContext: () => (/* binding */ createTracingContext),\n/* harmony export */   knownContextKeys: () => (/* binding */ knownContextKeys)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** @internal */ const knownContextKeys = {\n    span: Symbol.for(\"@azure/core-tracing span\"),\n    namespace: Symbol.for(\"@azure/core-tracing namespace\")\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */ function createTracingContext(options = {}) {\n    let context = new TracingContextImpl(options.parentContext);\n    if (options.span) {\n        context = context.setValue(knownContextKeys.span, options.span);\n    }\n    if (options.namespace) {\n        context = context.setValue(knownContextKeys.namespace, options.namespace);\n    }\n    return context;\n}\n/** @internal */ class TracingContextImpl {\n    constructor(initialContext){\n        this._contextMap = initialContext instanceof TracingContextImpl ? new Map(initialContext._contextMap) : new Map();\n    }\n    setValue(key, value) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.set(key, value);\n        return newContext;\n    }\n    getValue(key) {\n        return this._contextMap.get(key);\n    }\n    deleteValue(key) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.delete(key);\n        return newContext;\n    }\n} //# sourceMappingURL=tracingContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ2xDLGNBQWMsR0FDUCxNQUFNQSxtQkFBbUI7SUFDNUJDLE1BQU1DLE9BQU9DLEdBQUcsQ0FBQztJQUNqQkMsV0FBV0YsT0FBT0MsR0FBRyxDQUFDO0FBQzFCLEVBQUU7QUFDRjs7Ozs7O0NBTUMsR0FDTSxTQUFTRSxxQkFBcUJDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLElBQUlDLFVBQVUsSUFBSUMsbUJBQW1CRixRQUFRRyxhQUFhO0lBQzFELElBQUlILFFBQVFMLElBQUksRUFBRTtRQUNkTSxVQUFVQSxRQUFRRyxRQUFRLENBQUNWLGlCQUFpQkMsSUFBSSxFQUFFSyxRQUFRTCxJQUFJO0lBQ2xFO0lBQ0EsSUFBSUssUUFBUUYsU0FBUyxFQUFFO1FBQ25CRyxVQUFVQSxRQUFRRyxRQUFRLENBQUNWLGlCQUFpQkksU0FBUyxFQUFFRSxRQUFRRixTQUFTO0lBQzVFO0lBQ0EsT0FBT0c7QUFDWDtBQUNBLGNBQWMsR0FDUCxNQUFNQztJQUNURyxZQUFZQyxjQUFjLENBQUU7UUFDeEIsSUFBSSxDQUFDQyxXQUFXLEdBQ1pELDBCQUEwQkoscUJBQ3BCLElBQUlNLElBQUlGLGVBQWVDLFdBQVcsSUFDbEMsSUFBSUM7SUFDbEI7SUFDQUosU0FBU0ssR0FBRyxFQUFFQyxLQUFLLEVBQUU7UUFDakIsTUFBTUMsYUFBYSxJQUFJVCxtQkFBbUIsSUFBSTtRQUM5Q1MsV0FBV0osV0FBVyxDQUFDSyxHQUFHLENBQUNILEtBQUtDO1FBQ2hDLE9BQU9DO0lBQ1g7SUFDQUUsU0FBU0osR0FBRyxFQUFFO1FBQ1YsT0FBTyxJQUFJLENBQUNGLFdBQVcsQ0FBQ08sR0FBRyxDQUFDTDtJQUNoQztJQUNBTSxZQUFZTixHQUFHLEVBQUU7UUFDYixNQUFNRSxhQUFhLElBQUlULG1CQUFtQixJQUFJO1FBQzlDUyxXQUFXSixXQUFXLENBQUNTLE1BQU0sQ0FBQ1A7UUFDOUIsT0FBT0U7SUFDWDtBQUNKLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ29udGV4dC5qcz8yMzVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGtub3duQ29udGV4dEtleXMgPSB7XG4gICAgc3BhbjogU3ltYm9sLmZvcihcIkBhenVyZS9jb3JlLXRyYWNpbmcgc3BhblwiKSxcbiAgICBuYW1lc3BhY2U6IFN5bWJvbC5mb3IoXCJAYXp1cmUvY29yZS10cmFjaW5nIG5hbWVzcGFjZVwiKSxcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIFRyYWNpbmdDb250ZXh0fSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICogQHBhcmFtIG9wdGlvbnMgLSBBIHNldCBvZiBrbm93biBrZXlzIHRoYXQgbWF5IGJlIHNldCBvbiB0aGUgY29udGV4dC5cbiAqIEByZXR1cm5zIEEgbmV3IHtAbGluayBUcmFjaW5nQ29udGV4dH0gd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRyYWNpbmdDb250ZXh0KG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBjb250ZXh0ID0gbmV3IFRyYWNpbmdDb250ZXh0SW1wbChvcHRpb25zLnBhcmVudENvbnRleHQpO1xuICAgIGlmIChvcHRpb25zLnNwYW4pIHtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQuc2V0VmFsdWUoa25vd25Db250ZXh0S2V5cy5zcGFuLCBvcHRpb25zLnNwYW4pO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5uYW1lc3BhY2UpIHtcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQuc2V0VmFsdWUoa25vd25Db250ZXh0S2V5cy5uYW1lc3BhY2UsIG9wdGlvbnMubmFtZXNwYWNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQ7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgVHJhY2luZ0NvbnRleHRJbXBsIHtcbiAgICBjb25zdHJ1Y3Rvcihpbml0aWFsQ29udGV4dCkge1xuICAgICAgICB0aGlzLl9jb250ZXh0TWFwID1cbiAgICAgICAgICAgIGluaXRpYWxDb250ZXh0IGluc3RhbmNlb2YgVHJhY2luZ0NvbnRleHRJbXBsXG4gICAgICAgICAgICAgICAgPyBuZXcgTWFwKGluaXRpYWxDb250ZXh0Ll9jb250ZXh0TWFwKVxuICAgICAgICAgICAgICAgIDogbmV3IE1hcCgpO1xuICAgIH1cbiAgICBzZXRWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG5ld0NvbnRleHQgPSBuZXcgVHJhY2luZ0NvbnRleHRJbXBsKHRoaXMpO1xuICAgICAgICBuZXdDb250ZXh0Ll9jb250ZXh0TWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ld0NvbnRleHQ7XG4gICAgfVxuICAgIGdldFZhbHVlKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGV4dE1hcC5nZXQoa2V5KTtcbiAgICB9XG4gICAgZGVsZXRlVmFsdWUoa2V5KSB7XG4gICAgICAgIGNvbnN0IG5ld0NvbnRleHQgPSBuZXcgVHJhY2luZ0NvbnRleHRJbXBsKHRoaXMpO1xuICAgICAgICBuZXdDb250ZXh0Ll9jb250ZXh0TWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICByZXR1cm4gbmV3Q29udGV4dDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nQ29udGV4dC5qcy5tYXAiXSwibmFtZXMiOlsia25vd25Db250ZXh0S2V5cyIsInNwYW4iLCJTeW1ib2wiLCJmb3IiLCJuYW1lc3BhY2UiLCJjcmVhdGVUcmFjaW5nQ29udGV4dCIsIm9wdGlvbnMiLCJjb250ZXh0IiwiVHJhY2luZ0NvbnRleHRJbXBsIiwicGFyZW50Q29udGV4dCIsInNldFZhbHVlIiwiY29uc3RydWN0b3IiLCJpbml0aWFsQ29udGV4dCIsIl9jb250ZXh0TWFwIiwiTWFwIiwia2V5IiwidmFsdWUiLCJuZXdDb250ZXh0Iiwic2V0IiwiZ2V0VmFsdWUiLCJnZXQiLCJkZWxldGVWYWx1ZSIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/aborterUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelablePromiseRace: () => (/* binding */ cancelablePromiseRace)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */ async function cancelablePromiseRace(abortablePromiseBuilders, options) {\n    var _a, _b;\n    const aborter = new AbortController();\n    function abortHandler() {\n        aborter.abort();\n    }\n    (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener(\"abort\", abortHandler);\n    try {\n        return await Promise.race(abortablePromiseBuilders.map((p)=>p({\n                abortSignal: aborter.signal\n            })));\n    } finally{\n        aborter.abort();\n        (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener(\"abort\", abortHandler);\n    }\n} //# sourceMappingURL=aborterUtils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9hYm9ydGVyVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDbEM7O0NBRUMsR0FDTSxlQUFlQSxzQkFBc0JDLHdCQUF3QixFQUFFQyxPQUFPO0lBQ3pFLElBQUlDLElBQUlDO0lBQ1IsTUFBTUMsVUFBVSxJQUFJQztJQUNwQixTQUFTQztRQUNMRixRQUFRRyxLQUFLO0lBQ2pCO0lBQ0NMLENBQUFBLEtBQUtELFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTyxXQUFXLE1BQU0sUUFBUU4sT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHTyxnQkFBZ0IsQ0FBQyxTQUFTSDtJQUMvSSxJQUFJO1FBQ0EsT0FBTyxNQUFNSSxRQUFRQyxJQUFJLENBQUNYLHlCQUF5QlksR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUU7Z0JBQUVMLGFBQWFKLFFBQVFVLE1BQU07WUFBQztJQUNsRyxTQUNRO1FBQ0pWLFFBQVFHLEtBQUs7UUFDWkosQ0FBQUEsS0FBS0YsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFPLFdBQVcsTUFBTSxRQUFRTCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdZLG1CQUFtQixDQUFDLFNBQVNUO0lBQ3RKO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL2Fib3J0ZXJVdGlscy5qcz8zYjQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBwcm9taXNlLnJhY2UoKSB3cmFwcGVyIHRoYXQgYWJvcnRzIHJlc3Qgb2YgcHJvbWlzZXMgYXMgc29vbiBhcyB0aGUgZmlyc3QgcHJvbWlzZSBzZXR0bGVzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2FuY2VsYWJsZVByb21pc2VSYWNlKGFib3J0YWJsZVByb21pc2VCdWlsZGVycywgb3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgYWJvcnRlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBmdW5jdGlvbiBhYm9ydEhhbmRsZXIoKSB7XG4gICAgICAgIGFib3J0ZXIuYWJvcnQoKTtcbiAgICB9XG4gICAgKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFib3J0U2lnbmFsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IFByb21pc2UucmFjZShhYm9ydGFibGVQcm9taXNlQnVpbGRlcnMubWFwKChwKSA9PiBwKHsgYWJvcnRTaWduYWw6IGFib3J0ZXIuc2lnbmFsIH0pKSk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBhYm9ydGVyLmFib3J0KCk7XG4gICAgICAgIChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hYm9ydFNpZ25hbCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydEhhbmRsZXIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFib3J0ZXJVdGlscy5qcy5tYXAiXSwibmFtZXMiOlsiY2FuY2VsYWJsZVByb21pc2VSYWNlIiwiYWJvcnRhYmxlUHJvbWlzZUJ1aWxkZXJzIiwib3B0aW9ucyIsIl9hIiwiX2IiLCJhYm9ydGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYWJvcnRIYW5kbGVyIiwiYWJvcnQiLCJhYm9ydFNpZ25hbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJQcm9taXNlIiwicmFjZSIsIm1hcCIsInAiLCJzaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAbortablePromise: () => (/* binding */ createAbortablePromise)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */ function createAbortablePromise(buildPromise, options) {\n    const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return new Promise((resolve, reject)=>{\n        function rejectOnAbort() {\n            reject(new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n        }\n        function removeListeners() {\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n        }\n        function onAbort() {\n            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n            removeListeners();\n            rejectOnAbort();\n        }\n        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        try {\n            buildPromise((x)=>{\n                removeListeners();\n                resolve(x);\n            }, (x)=>{\n                removeListeners();\n                reject(x);\n            });\n        } catch (err) {\n            reject(err);\n        }\n        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n    });\n} //# sourceMappingURL=createAbortablePromise.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNtQjtBQUNyRDs7Ozs7Q0FLQyxHQUNNLFNBQVNDLHVCQUF1QkMsWUFBWSxFQUFFQyxPQUFPO0lBQ3hELE1BQU0sRUFBRUMsa0JBQWtCLEVBQUVDLFdBQVcsRUFBRUMsYUFBYSxFQUFFLEdBQUdILFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUlBLFVBQVUsQ0FBQztJQUMvRyxPQUFPLElBQUlJLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDekIsU0FBU0M7WUFDTEQsT0FBTyxJQUFJVCwrREFBVUEsQ0FBQ00sa0JBQWtCLFFBQVFBLGtCQUFrQixLQUFLLElBQUlBLGdCQUFnQjtRQUMvRjtRQUNBLFNBQVNLO1lBQ0xOLGdCQUFnQixRQUFRQSxnQkFBZ0IsS0FBSyxJQUFJLEtBQUssSUFBSUEsWUFBWU8sbUJBQW1CLENBQUMsU0FBU0M7UUFDdkc7UUFDQSxTQUFTQTtZQUNMVCx1QkFBdUIsUUFBUUEsdUJBQXVCLEtBQUssSUFBSSxLQUFLLElBQUlBO1lBQ3hFTztZQUNBRDtRQUNKO1FBQ0EsSUFBSUwsZ0JBQWdCLFFBQVFBLGdCQUFnQixLQUFLLElBQUksS0FBSyxJQUFJQSxZQUFZUyxPQUFPLEVBQUU7WUFDL0UsT0FBT0o7UUFDWDtRQUNBLElBQUk7WUFDQVIsYUFBYSxDQUFDYTtnQkFDVko7Z0JBQ0FILFFBQVFPO1lBQ1osR0FBRyxDQUFDQTtnQkFDQUo7Z0JBQ0FGLE9BQU9NO1lBQ1g7UUFDSixFQUNBLE9BQU9DLEtBQUs7WUFDUlAsT0FBT087UUFDWDtRQUNBWCxnQkFBZ0IsUUFBUUEsZ0JBQWdCLEtBQUssSUFBSSxLQUFLLElBQUlBLFlBQVlZLGdCQUFnQixDQUFDLFNBQVNKO0lBQ3BHO0FBQ0osRUFDQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL2NyZWF0ZUFib3J0YWJsZVByb21pc2UuanM/NDkwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXJcIjtcbi8qKlxuICogQ3JlYXRlcyBhbiBhYm9ydGFibGUgcHJvbWlzZS5cbiAqIEBwYXJhbSBidWlsZFByb21pc2UgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdGhlIHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMgYXMgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBhYm9ydGFibGUgcHJvbWlzZS5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IGNhbiBiZSBhYm9ydGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWJvcnRhYmxlUHJvbWlzZShidWlsZFByb21pc2UsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGNsZWFudXBCZWZvcmVBYm9ydCwgYWJvcnRTaWduYWwsIGFib3J0RXJyb3JNc2cgfSA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdE9uQWJvcnQoKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEFib3J0RXJyb3IoYWJvcnRFcnJvck1zZyAhPT0gbnVsbCAmJiBhYm9ydEVycm9yTXNnICE9PSB2b2lkIDAgPyBhYm9ydEVycm9yTXNnIDogXCJUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgICAgICAgYWJvcnRTaWduYWwgPT09IG51bGwgfHwgYWJvcnRTaWduYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFib3J0U2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbkFib3J0KCkge1xuICAgICAgICAgICAgY2xlYW51cEJlZm9yZUFib3J0ID09PSBudWxsIHx8IGNsZWFudXBCZWZvcmVBYm9ydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xlYW51cEJlZm9yZUFib3J0KCk7XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHJlamVjdE9uQWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWJvcnRTaWduYWwgPT09IG51bGwgfHwgYWJvcnRTaWduYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFib3J0U2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3RPbkFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJ1aWxkUHJvbWlzZSgoeCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoeCk7XG4gICAgICAgICAgICB9LCAoeCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgICAgIHJlamVjdCh4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGFib3J0U2lnbmFsID09PSBudWxsIHx8IGFib3J0U2lnbmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzLm1hcCJdLCJuYW1lcyI6WyJBYm9ydEVycm9yIiwiY3JlYXRlQWJvcnRhYmxlUHJvbWlzZSIsImJ1aWxkUHJvbWlzZSIsIm9wdGlvbnMiLCJjbGVhbnVwQmVmb3JlQWJvcnQiLCJhYm9ydFNpZ25hbCIsImFib3J0RXJyb3JNc2ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlamVjdE9uQWJvcnQiLCJyZW1vdmVMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25BYm9ydCIsImFib3J0ZWQiLCJ4IiwiZXJyIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/delay.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRetryDelay: () => (/* binding */ calculateRetryDelay),\n/* harmony export */   delay: () => (/* binding */ delay)\n/* harmony export */ });\n/* harmony import */ var _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createAbortablePromise.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\");\n/* harmony import */ var _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/util */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */ function delay(timeInMs, options) {\n    let token;\n    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return (0,_createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_0__.createAbortablePromise)((resolve)=>{\n        token = setTimeout(resolve, timeInMs);\n    }, {\n        cleanupBeforeAbort: ()=>clearTimeout(token),\n        abortSignal,\n        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage\n    });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */ function calculateRetryDelay(retryAttempt, config) {\n    // Exponentially increase the delay each time\n    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n    // Don't let the delay exceed the maximum\n    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const retryAfterInMs = clampedDelay / 2 + (0,_typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_1__.getRandomIntegerInclusive)(0, clampedDelay / 2);\n    return {\n        retryAfterInMs\n    };\n} //# sourceMappingURL=delay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9kZWxheS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNtQztBQUNlO0FBQ3BGLE1BQU1FLHVCQUF1QjtBQUM3Qjs7Ozs7Q0FLQyxHQUNNLFNBQVNDLE1BQU1DLFFBQVEsRUFBRUMsT0FBTztJQUNuQyxJQUFJQztJQUNKLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxhQUFhLEVBQUUsR0FBR0gsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSUEsVUFBVSxDQUFDO0lBQzNGLE9BQU9MLGtGQUFzQkEsQ0FBQyxDQUFDUztRQUMzQkgsUUFBUUksV0FBV0QsU0FBU0w7SUFDaEMsR0FBRztRQUNDTyxvQkFBb0IsSUFBTUMsYUFBYU47UUFDdkNDO1FBQ0FDLGVBQWVBLGtCQUFrQixRQUFRQSxrQkFBa0IsS0FBSyxJQUFJQSxnQkFBZ0JOO0lBQ3hGO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNNLFNBQVNXLG9CQUFvQkMsWUFBWSxFQUFFQyxNQUFNO0lBQ3BELDZDQUE2QztJQUM3QyxNQUFNQyxtQkFBbUJELE9BQU9FLGNBQWMsR0FBR0MsS0FBS0MsR0FBRyxDQUFDLEdBQUdMO0lBQzdELHlDQUF5QztJQUN6QyxNQUFNTSxlQUFlRixLQUFLRyxHQUFHLENBQUNOLE9BQU9PLGlCQUFpQixFQUFFTjtJQUN4RCxnRkFBZ0Y7SUFDaEYsbUVBQW1FO0lBQ25FLE1BQU1PLGlCQUFpQkgsZUFBZSxJQUFJbkIsa0dBQXlCQSxDQUFDLEdBQUdtQixlQUFlO0lBQ3RGLE9BQU87UUFBRUc7SUFBZTtBQUM1QixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9lc20vZGVsYXkuanM/ODIzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUFib3J0YWJsZVByb21pc2UgfSBmcm9tIFwiLi9jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzXCI7XG5pbXBvcnQgeyBnZXRSYW5kb21JbnRlZ2VySW5jbHVzaXZlIH0gZnJvbSBcIkB0eXBlc3BlYy90cy1odHRwLXJ1bnRpbWUvaW50ZXJuYWwvdXRpbFwiO1xuY29uc3QgU3RhbmRhcmRBYm9ydE1lc3NhZ2UgPSBcIlRoZSBkZWxheSB3YXMgYWJvcnRlZC5cIjtcbi8qKlxuICogQSB3cmFwcGVyIGZvciBzZXRUaW1lb3V0IHRoYXQgcmVzb2x2ZXMgYSBwcm9taXNlIGFmdGVyIHRpbWVJbk1zIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSB0aW1lSW5NcyAtIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGRlbGF5ZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciBkZWxheSAtIGN1cnJlbnRseSBhYm9ydCBvcHRpb25zXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYWZ0ZXIgdGltZUluTXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5KHRpbWVJbk1zLCBvcHRpb25zKSB7XG4gICAgbGV0IHRva2VuO1xuICAgIGNvbnN0IHsgYWJvcnRTaWduYWwsIGFib3J0RXJyb3JNc2cgfSA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9O1xuICAgIHJldHVybiBjcmVhdGVBYm9ydGFibGVQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRva2VuID0gc2V0VGltZW91dChyZXNvbHZlLCB0aW1lSW5Ncyk7XG4gICAgfSwge1xuICAgICAgICBjbGVhbnVwQmVmb3JlQWJvcnQ6ICgpID0+IGNsZWFyVGltZW91dCh0b2tlbiksXG4gICAgICAgIGFib3J0U2lnbmFsLFxuICAgICAgICBhYm9ydEVycm9yTXNnOiBhYm9ydEVycm9yTXNnICE9PSBudWxsICYmIGFib3J0RXJyb3JNc2cgIT09IHZvaWQgMCA/IGFib3J0RXJyb3JNc2cgOiBTdGFuZGFyZEFib3J0TWVzc2FnZSxcbiAgICB9KTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGVsYXkgaW50ZXJ2YWwgZm9yIHJldHJ5IGF0dGVtcHRzIHVzaW5nIGV4cG9uZW50aWFsIGRlbGF5IHdpdGggaml0dGVyLlxuICogQHBhcmFtIHJldHJ5QXR0ZW1wdCAtIFRoZSBjdXJyZW50IHJldHJ5IGF0dGVtcHQgbnVtYmVyLlxuICogQHBhcmFtIGNvbmZpZyAtIFRoZSBleHBvbmVudGlhbCByZXRyeSBjb25maWd1cmF0aW9uLlxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNhbGN1bGF0ZWQgcmV0cnkgZGVsYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVSZXRyeURlbGF5KHJldHJ5QXR0ZW1wdCwgY29uZmlnKSB7XG4gICAgLy8gRXhwb25lbnRpYWxseSBpbmNyZWFzZSB0aGUgZGVsYXkgZWFjaCB0aW1lXG4gICAgY29uc3QgZXhwb25lbnRpYWxEZWxheSA9IGNvbmZpZy5yZXRyeURlbGF5SW5NcyAqIE1hdGgucG93KDIsIHJldHJ5QXR0ZW1wdCk7XG4gICAgLy8gRG9uJ3QgbGV0IHRoZSBkZWxheSBleGNlZWQgdGhlIG1heGltdW1cbiAgICBjb25zdCBjbGFtcGVkRGVsYXkgPSBNYXRoLm1pbihjb25maWcubWF4UmV0cnlEZWxheUluTXMsIGV4cG9uZW50aWFsRGVsYXkpO1xuICAgIC8vIEFsbG93IHRoZSBmaW5hbCB2YWx1ZSB0byBoYXZlIHNvbWUgXCJqaXR0ZXJcIiAod2l0aGluIDUwJSBvZiB0aGUgZGVsYXkgc2l6ZSkgc29cbiAgICAvLyB0aGF0IHJldHJpZXMgYWNyb3NzIG11bHRpcGxlIGNsaWVudHMgZG9uJ3Qgb2NjdXIgc2ltdWx0YW5lb3VzbHkuXG4gICAgY29uc3QgcmV0cnlBZnRlckluTXMgPSBjbGFtcGVkRGVsYXkgLyAyICsgZ2V0UmFuZG9tSW50ZWdlckluY2x1c2l2ZSgwLCBjbGFtcGVkRGVsYXkgLyAyKTtcbiAgICByZXR1cm4geyByZXRyeUFmdGVySW5NcyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXkuanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZUFib3J0YWJsZVByb21pc2UiLCJnZXRSYW5kb21JbnRlZ2VySW5jbHVzaXZlIiwiU3RhbmRhcmRBYm9ydE1lc3NhZ2UiLCJkZWxheSIsInRpbWVJbk1zIiwib3B0aW9ucyIsInRva2VuIiwiYWJvcnRTaWduYWwiLCJhYm9ydEVycm9yTXNnIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJjbGVhbnVwQmVmb3JlQWJvcnQiLCJjbGVhclRpbWVvdXQiLCJjYWxjdWxhdGVSZXRyeURlbGF5IiwicmV0cnlBdHRlbXB0IiwiY29uZmlnIiwiZXhwb25lbnRpYWxEZWxheSIsInJldHJ5RGVsYXlJbk1zIiwiTWF0aCIsInBvdyIsImNsYW1wZWREZWxheSIsIm1pbiIsIm1heFJldHJ5RGVsYXlJbk1zIiwicmV0cnlBZnRlckluTXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/error.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/error.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/util */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */ function getErrorMessage(e) {\n    if ((0,_typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isError)(e)) {\n        return e.message;\n    } else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            } else {\n                stringified = String(e);\n            }\n        } catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDZ0M7QUFDbEU7Ozs7O0NBS0MsR0FDTSxTQUFTQyxnQkFBZ0JDLENBQUM7SUFDN0IsSUFBSUYsZ0ZBQU9BLENBQUNFLElBQUk7UUFDWixPQUFPQSxFQUFFQyxPQUFPO0lBQ3BCLE9BQ0s7UUFDRCxJQUFJQztRQUNKLElBQUk7WUFDQSxJQUFJLE9BQU9GLE1BQU0sWUFBWUEsR0FBRztnQkFDNUJFLGNBQWNDLEtBQUtDLFNBQVMsQ0FBQ0o7WUFDakMsT0FDSztnQkFDREUsY0FBY0csT0FBT0w7WUFDekI7UUFDSixFQUNBLE9BQU9NLEtBQUs7WUFDUkosY0FBYztRQUNsQjtRQUNBLE9BQU8sQ0FBQyxjQUFjLEVBQUVBLFlBQVksQ0FBQztJQUN6QztBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9lcnJvci5qcz9kNGYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgaXNFcnJvciB9IGZyb20gXCJAdHlwZXNwZWMvdHMtaHR0cC1ydW50aW1lL2ludGVybmFsL3V0aWxcIjtcbi8qKlxuICogR2l2ZW4gd2hhdCBpcyB0aG91Z2h0IHRvIGJlIGFuIGVycm9yIG9iamVjdCwgcmV0dXJuIHRoZSBtZXNzYWdlIGlmIHBvc3NpYmxlLlxuICogSWYgdGhlIG1lc3NhZ2UgaXMgbWlzc2luZywgcmV0dXJucyBhIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIGlucHV0LlxuICogQHBhcmFtIGUgLSBTb21ldGhpbmcgdGhyb3duIGZyb20gYSB0cnkgYmxvY2tcbiAqIEByZXR1cm5zIFRoZSBlcnJvciBtZXNzYWdlIG9yIGEgc3RyaW5nIG9mIHRoZSBpbnB1dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKGUpIHtcbiAgICBpZiAoaXNFcnJvcihlKSkge1xuICAgICAgICByZXR1cm4gZS5tZXNzYWdlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHN0cmluZ2lmaWVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlID09PSBcIm9iamVjdFwiICYmIGUpIHtcbiAgICAgICAgICAgICAgICBzdHJpbmdpZmllZCA9IEpTT04uc3RyaW5naWZ5KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyaW5naWZpZWQgPSBTdHJpbmcoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3RyaW5naWZpZWQgPSBcIlt1bmFibGUgdG8gc3RyaW5naWZ5IGlucHV0XVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgVW5rbm93biBlcnJvciAke3N0cmluZ2lmaWVkfWA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbImlzRXJyb3IiLCJnZXRFcnJvck1lc3NhZ2UiLCJlIiwibWVzc2FnZSIsInN0cmluZ2lmaWVkIiwiSlNPTiIsInN0cmluZ2lmeSIsIlN0cmluZyIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRetryDelay: () => (/* binding */ calculateRetryDelay),\n/* harmony export */   cancelablePromiseRace: () => (/* reexport safe */ _aborterUtils_js__WEBPACK_IMPORTED_MODULE_1__.cancelablePromiseRace),\n/* harmony export */   computeSha256Hash: () => (/* binding */ computeSha256Hash),\n/* harmony export */   computeSha256Hmac: () => (/* binding */ computeSha256Hmac),\n/* harmony export */   createAbortablePromise: () => (/* reexport safe */ _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_2__.createAbortablePromise),\n/* harmony export */   delay: () => (/* reexport safe */ _delay_js__WEBPACK_IMPORTED_MODULE_3__.delay),\n/* harmony export */   getErrorMessage: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage),\n/* harmony export */   getRandomIntegerInclusive: () => (/* binding */ getRandomIntegerInclusive),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isBun: () => (/* binding */ isBun),\n/* harmony export */   isDefined: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_5__.isDefined),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isNodeLike: () => (/* binding */ isNodeLike),\n/* harmony export */   isNodeRuntime: () => (/* binding */ isNodeRuntime),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isObjectWithProperties: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_5__.isObjectWithProperties),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker),\n/* harmony export */   objectHasProperty: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_5__.objectHasProperty),\n/* harmony export */   randomUUID: () => (/* binding */ randomUUID),\n/* harmony export */   stringToUint8Array: () => (/* binding */ stringToUint8Array),\n/* harmony export */   uint8ArrayToString: () => (/* binding */ uint8ArrayToString)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/util */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/util/internal.js\");\n/* harmony import */ var _aborterUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aborterUtils.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js\");\n/* harmony import */ var _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createAbortablePromise.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\");\n/* harmony import */ var _delay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./delay.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./error.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/error.js\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./typeGuards.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n *\n * @param retryAttempt - The current retry attempt number.\n *\n * @param config - The exponential retry configuration.\n *\n * @returns An object containing the calculated retry delay.\n */ function calculateRetryDelay(retryAttempt, config) {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.calculateRetryDelay(retryAttempt, config);\n}\n/**\n * Generates a SHA-256 hash.\n *\n * @param content - The data to be included in the hash.\n *\n * @param encoding - The textual encoding to use for the returned hash.\n */ function computeSha256Hash(content, encoding) {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.computeSha256Hash(content, encoding);\n}\n/**\n * Generates a SHA-256 HMAC signature.\n *\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n *\n * @param stringToSign - The data to be signed.\n *\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */ function computeSha256Hmac(key, stringToSign, encoding) {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.computeSha256Hmac(key, stringToSign, encoding);\n}\n/**\n * Returns a random integer value between a lower and upper bound, inclusive of both bounds. Note that this uses Math.random and isn't secure. If you need to use this for any kind of security purpose, find a better source of random.\n *\n * @param min - The smallest integer value allowed.\n *\n * @param max - The largest integer value allowed.\n */ function getRandomIntegerInclusive(min, max) {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.getRandomIntegerInclusive(min, max);\n}\n/**\n * Typeguard for an error object shape (has name and message)\n *\n * @param e - Something caught by a catch clause.\n */ function isError(e) {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isError(e);\n}\n/**\n * Helper to determine when an input is a generic JS object.\n *\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */ function isObject(input) {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isObject(input);\n}\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */ function randomUUID() {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID();\n}\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */ const isBrowser = _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isBrowser;\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */ const isBun = _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isBun;\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */ const isDeno = _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isDeno;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n *\n * @deprecated\n *\n * Use `isNodeLike` instead.\n */ const isNode = _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */ const isNodeLike = _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */ const isNodeRuntime = _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isNodeRuntime;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */ const isReactNative = _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isReactNative;\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */ const isWebWorker = _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.isWebWorker;\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */ function uint8ArrayToString(bytes, format) {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToString(bytes, format);\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */ function stringToUint8Array(value, format) {\n    return _typespec_ts_http_runtime_internal_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array(value, format);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/typeGuards.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isObjectWithProperties: () => (/* binding */ isObjectWithProperties),\n/* harmony export */   objectHasProperty: () => (/* binding */ objectHasProperty)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n */ function isDefined(thing) {\n    return typeof thing !== \"undefined\" && thing !== null;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n */ function isObjectWithProperties(thing, properties) {\n    if (!isDefined(thing) || typeof thing !== \"object\") {\n        return false;\n    }\n    for (const property of properties){\n        if (!objectHasProperty(thing, property)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n */ function objectHasProperty(thing, property) {\n    return isDefined(thing) && typeof thing === \"object\" && property in thing;\n} //# sourceMappingURL=typeGuards.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS90eXBlR3VhcmRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDbEM7OztDQUdDLEdBQ00sU0FBU0EsVUFBVUMsS0FBSztJQUMzQixPQUFPLE9BQU9BLFVBQVUsZUFBZUEsVUFBVTtBQUNyRDtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTQyx1QkFBdUJELEtBQUssRUFBRUUsVUFBVTtJQUNwRCxJQUFJLENBQUNILFVBQVVDLFVBQVUsT0FBT0EsVUFBVSxVQUFVO1FBQ2hELE9BQU87SUFDWDtJQUNBLEtBQUssTUFBTUcsWUFBWUQsV0FBWTtRQUMvQixJQUFJLENBQUNFLGtCQUFrQkosT0FBT0csV0FBVztZQUNyQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU87QUFDWDtBQUNBOzs7O0NBSUMsR0FDTSxTQUFTQyxrQkFBa0JKLEtBQUssRUFBRUcsUUFBUTtJQUM3QyxPQUFRSixVQUFVQyxVQUFVLE9BQU9BLFVBQVUsWUFBWUcsWUFBWUg7QUFDekUsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL3R5cGVHdWFyZHMuanM/MmRkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogSGVscGVyIFR5cGVHdWFyZCB0aGF0IGNoZWNrcyBpZiBzb21ldGhpbmcgaXMgZGVmaW5lZCBvciBub3QuXG4gKiBAcGFyYW0gdGhpbmcgLSBBbnl0aGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0aGluZyAhPT0gbnVsbDtcbn1cbi8qKlxuICogSGVscGVyIFR5cGVHdWFyZCB0aGF0IGNoZWNrcyBpZiB0aGUgaW5wdXQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHRoaW5nIC0gQW55dGhpbmcuXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGFwcGVhciBpbiB0aGUgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3RXaXRoUHJvcGVydGllcyh0aGluZywgcHJvcGVydGllcykge1xuICAgIGlmICghaXNEZWZpbmVkKHRoaW5nKSB8fCB0eXBlb2YgdGhpbmcgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKCFvYmplY3RIYXNQcm9wZXJ0eSh0aGluZywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIEhlbHBlciBUeXBlR3VhcmQgdGhhdCBjaGVja3MgaWYgdGhlIGlucHV0IGlzIGFuIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkuXG4gKiBAcGFyYW0gdGhpbmcgLSBBbnkgb2JqZWN0LlxuICogQHBhcmFtIHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRoYXQgc2hvdWxkIGFwcGVhciBpbiB0aGUgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0SGFzUHJvcGVydHkodGhpbmcsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIChpc0RlZmluZWQodGhpbmcpICYmIHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJiBwcm9wZXJ0eSBpbiB0aGluZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlR3VhcmRzLmpzLm1hcCJdLCJuYW1lcyI6WyJpc0RlZmluZWQiLCJ0aGluZyIsImlzT2JqZWN0V2l0aFByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJvYmplY3RIYXNQcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */ class AbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"AbortError\";\n    }\n} //# sourceMappingURL=AbortError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vQWJvcnRFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQUNsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQkMsR0FDTSxNQUFNQSxtQkFBbUJDO0lBQzVCQyxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2hCO0FBQ0osRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL25vZGVfbW9kdWxlcy9AYXp1cmUvYWJvcnQtY29udHJvbGxlci9kaXN0L2VzbS9BYm9ydEVycm9yLmpzP2ExMDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4vKipcbiAqIFRoaXMgZXJyb3IgaXMgdGhyb3duIHdoZW4gYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbiBoYXMgYmVlbiBhYm9ydGVkLlxuICogQ2hlY2sgZm9yIHRoaXMgZXJyb3IgYnkgdGVzdGluZyB0aGUgYG5hbWVgIHRoYXQgdGhlIG5hbWUgcHJvcGVydHkgb2YgdGhlXG4gKiBlcnJvciBtYXRjaGVzIGBcIkFib3J0RXJyb3JcImAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogY29udHJvbGxlci5hYm9ydCgpO1xuICogdHJ5IHtcbiAqICAgZG9Bc3luY1dvcmsoY29udHJvbGxlci5zaWduYWwpXG4gKiB9IGNhdGNoIChlKSB7XG4gKiAgIGlmIChlLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICogICAgIC8vIGhhbmRsZSBhYm9ydCBlcnJvciBoZXJlLlxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEFib3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWJvcnRFcnJvci5qcy5tYXAiXSwibmFtZXMiOlsiQWJvcnRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _AbortError_js__WEBPACK_IMPORTED_MODULE_0__.AbortError)\n/* harmony export */ });\n/* harmony import */ var _AbortError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortError.js */ \"(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/AbortError.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx1Q0FBdUM7QUFDdkMsa0NBQWtDO0FBQ1csQ0FDN0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vaW5kZXguanM/NWYyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmV4cG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiLi9BYm9ydEVycm9yLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiQWJvcnRFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/node_modules/@azure/abort-controller/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/logger/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@azure/logger/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureLogger: () => (/* binding */ AzureLogger),\n/* harmony export */   createClientLogger: () => (/* binding */ createClientLogger),\n/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _typespec_ts_http_runtime_internal_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @typespec/ts-http-runtime/internal/logger */ \"(rsc)/./node_modules/@typespec/ts-http-runtime/dist/esm/logger/internal.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst context = (0,_typespec_ts_http_runtime_internal_logger__WEBPACK_IMPORTED_MODULE_0__.createLoggerContext)({\n    logLevelEnvVarName: \"AZURE_LOG_LEVEL\",\n    namespace: \"azure\"\n});\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */ const AzureLogger = context.logger;\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */ function setLogLevel(level) {\n    context.setLogLevel(level);\n}\n/**\n * Retrieves the currently specified log level.\n */ function getLogLevel() {\n    return context.getLogLevel();\n}\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */ function createClientLogger(namespace) {\n    return context.createClientLogger(namespace);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHVDQUF1QztBQUN2QyxrQ0FBa0M7QUFDOEM7QUFDaEYsTUFBTUMsVUFBVUQsOEZBQW1CQSxDQUFDO0lBQ2hDRSxvQkFBb0I7SUFDcEJDLFdBQVc7QUFDZjtBQUNBOzs7O0NBSUMsR0FDTSxNQUFNQyxjQUFjSCxRQUFRSSxNQUFNLENBQUM7QUFDMUM7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTQyxZQUFZQyxLQUFLO0lBQzdCTixRQUFRSyxXQUFXLENBQUNDO0FBQ3hCO0FBQ0E7O0NBRUMsR0FDTSxTQUFTQztJQUNaLE9BQU9QLFFBQVFPLFdBQVc7QUFDOUI7QUFDQTs7OztDQUlDLEdBQ00sU0FBU0MsbUJBQW1CTixTQUFTO0lBQ3hDLE9BQU9GLFFBQVFRLGtCQUFrQixDQUFDTjtBQUN0QyxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9sb2dnZXIvZGlzdC9lc20vaW5kZXguanM/MDUxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUxvZ2dlckNvbnRleHQgfSBmcm9tIFwiQHR5cGVzcGVjL3RzLWh0dHAtcnVudGltZS9pbnRlcm5hbC9sb2dnZXJcIjtcbmNvbnN0IGNvbnRleHQgPSBjcmVhdGVMb2dnZXJDb250ZXh0KHtcbiAgICBsb2dMZXZlbEVudlZhck5hbWU6IFwiQVpVUkVfTE9HX0xFVkVMXCIsXG4gICAgbmFtZXNwYWNlOiBcImF6dXJlXCIsXG59KTtcbi8qKlxuICogVGhlIEF6dXJlTG9nZ2VyIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBvdmVycmlkaW5nIHdoZXJlIGxvZ3MgYXJlIG91dHB1dCB0by5cbiAqIEJ5IGRlZmF1bHQsIGxvZ3MgYXJlIHNlbnQgdG8gc3RkZXJyLlxuICogT3ZlcnJpZGUgdGhlIGBsb2dgIG1ldGhvZCB0byByZWRpcmVjdCBsb2dzIHRvIGFub3RoZXIgbG9jYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBBenVyZUxvZ2dlciA9IGNvbnRleHQubG9nZ2VyO1xuLyoqXG4gKiBJbW1lZGlhdGVseSBlbmFibGVzIGxvZ2dpbmcgYXQgdGhlIHNwZWNpZmllZCBsb2cgbGV2ZWwuIElmIG5vIGxldmVsIGlzIHNwZWNpZmllZCwgbG9nZ2luZyBpcyBkaXNhYmxlZC5cbiAqIEBwYXJhbSBsZXZlbCAtIFRoZSBsb2cgbGV2ZWwgdG8gZW5hYmxlIGZvciBsb2dnaW5nLlxuICogT3B0aW9ucyBmcm9tIG1vc3QgdmVyYm9zZSB0byBsZWFzdCB2ZXJib3NlIGFyZTpcbiAqIC0gdmVyYm9zZVxuICogLSBpbmZvXG4gKiAtIHdhcm5pbmdcbiAqIC0gZXJyb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XG4gICAgY29udGV4dC5zZXRMb2dMZXZlbChsZXZlbCk7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY3VycmVudGx5IHNwZWNpZmllZCBsb2cgbGV2ZWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2dMZXZlbCgpIHtcbiAgICByZXR1cm4gY29udGV4dC5nZXRMb2dMZXZlbCgpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbG9nZ2VyIGZvciB1c2UgYnkgdGhlIEF6dXJlIFNES3MgdGhhdCBpbmhlcml0cyBmcm9tIGBBenVyZUxvZ2dlcmAuXG4gKiBAcGFyYW0gbmFtZXNwYWNlIC0gVGhlIG5hbWUgb2YgdGhlIFNESyBwYWNrYWdlLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpZW50TG9nZ2VyKG5hbWVzcGFjZSkge1xuICAgIHJldHVybiBjb250ZXh0LmNyZWF0ZUNsaWVudExvZ2dlcihuYW1lc3BhY2UpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbImNyZWF0ZUxvZ2dlckNvbnRleHQiLCJjb250ZXh0IiwibG9nTGV2ZWxFbnZWYXJOYW1lIiwibmFtZXNwYWNlIiwiQXp1cmVMb2dnZXIiLCJsb2dnZXIiLCJzZXRMb2dMZXZlbCIsImxldmVsIiwiZ2V0TG9nTGV2ZWwiLCJjcmVhdGVDbGllbnRMb2dnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/logger/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildTenantProfile: () => (/* binding */ buildTenantProfile),\n/* harmony export */   tenantIdMatchesHomeTenant: () => (/* binding */ tenantIdMatchesHomeTenant),\n/* harmony export */   updateAccountTenantProfileData: () => (/* binding */ updateAccountTenantProfileData)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */ function tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\n    return !!tenantId && !!homeAccountId && tenantId === homeAccountId.split(\".\")[1];\n}\n/**\r\n * Build tenant profile\r\n * @param homeAccountId - Home account identifier for this account object\r\n * @param localAccountId - Local account identifer for this account object\r\n * @param tenantId - Full tenant or organizational id that this account belongs to\r\n * @param idTokenClaims - Claims from the ID token\r\n * @returns\r\n */ function buildTenantProfile(homeAccountId, localAccountId, tenantId, idTokenClaims) {\n    if (idTokenClaims) {\n        const { oid, sub, tid, name, tfp, acr } = idTokenClaims;\n        /**\r\n         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n         */ const tenantId = tid || tfp || acr || \"\";\n        return {\n            tenantId: tenantId,\n            localAccountId: oid || sub || \"\",\n            name: name,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n        };\n    } else {\n        return {\n            tenantId,\n            localAccountId,\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId)\n        };\n    }\n}\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */ function updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims, idTokenSecret) {\n    let updatedAccountInfo = baseAccountInfo;\n    // Tenant Profile overrides passed in account info\n    if (tenantProfile) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\n        updatedAccountInfo = {\n            ...baseAccountInfo,\n            ...tenantProfileOverride\n        };\n    }\n    // ID token claims override passed in account info and tenant profile\n    if (idTokenClaims) {\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { isHomeTenant, ...claimsSourcedTenantProfile } = buildTenantProfile(baseAccountInfo.homeAccountId, baseAccountInfo.localAccountId, baseAccountInfo.tenantId, idTokenClaims);\n        updatedAccountInfo = {\n            ...updatedAccountInfo,\n            ...claimsSourcedTenantProfile,\n            idTokenClaims: idTokenClaims,\n            idToken: idTokenSecret\n        };\n        return updatedAccountInfo;\n    }\n    return updatedAccountInfo;\n}\n //# sourceMappingURL=AccountInfo.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9BY2NvdW50SW5mby5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7Ozs7O0NBS0MsR0FDRCxTQUFTQSwwQkFBMEJDLFFBQVEsRUFBRUMsYUFBYTtJQUN0RCxPQUFRLENBQUMsQ0FBQ0QsWUFDTixDQUFDLENBQUNDLGlCQUNGRCxhQUFhQyxjQUFjQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDaEQ7QUFDQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsbUJBQW1CRixhQUFhLEVBQUVHLGNBQWMsRUFBRUosUUFBUSxFQUFFSyxhQUFhO0lBQzlFLElBQUlBLGVBQWU7UUFDZixNQUFNLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR047UUFDMUM7Ozs7O1NBS0MsR0FDRCxNQUFNTCxXQUFXUSxPQUFPRSxPQUFPQyxPQUFPO1FBQ3RDLE9BQU87WUFDSFgsVUFBVUE7WUFDVkksZ0JBQWdCRSxPQUFPQyxPQUFPO1lBQzlCRSxNQUFNQTtZQUNORyxjQUFjYiwwQkFBMEJDLFVBQVVDO1FBQ3REO0lBQ0osT0FDSztRQUNELE9BQU87WUFDSEQ7WUFDQUk7WUFDQVEsY0FBY2IsMEJBQTBCQyxVQUFVQztRQUN0RDtJQUNKO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNZLCtCQUErQkMsZUFBZSxFQUFFQyxhQUFhLEVBQUVWLGFBQWEsRUFBRVcsYUFBYTtJQUNoRyxJQUFJQyxxQkFBcUJIO0lBQ3pCLGtEQUFrRDtJQUNsRCxJQUFJQyxlQUFlO1FBQ2YsNkRBQTZEO1FBQzdELE1BQU0sRUFBRUgsWUFBWSxFQUFFLEdBQUdNLHVCQUF1QixHQUFHSDtRQUNuREUscUJBQXFCO1lBQUUsR0FBR0gsZUFBZTtZQUFFLEdBQUdJLHFCQUFxQjtRQUFDO0lBQ3hFO0lBQ0EscUVBQXFFO0lBQ3JFLElBQUliLGVBQWU7UUFDZixxR0FBcUc7UUFDckcsNkRBQTZEO1FBQzdELE1BQU0sRUFBRU8sWUFBWSxFQUFFLEdBQUdPLDRCQUE0QixHQUFHaEIsbUJBQW1CVyxnQkFBZ0JiLGFBQWEsRUFBRWEsZ0JBQWdCVixjQUFjLEVBQUVVLGdCQUFnQmQsUUFBUSxFQUFFSztRQUNwS1kscUJBQXFCO1lBQ2pCLEdBQUdBLGtCQUFrQjtZQUNyQixHQUFHRSwwQkFBMEI7WUFDN0JkLGVBQWVBO1lBQ2ZlLFNBQVNKO1FBQ2I7UUFDQSxPQUFPQztJQUNYO0lBQ0EsT0FBT0E7QUFDWDtBQUV5RixDQUN6Rix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L0FjY291bnRJbmZvLm1qcz9hZGY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGVuYW50SWQgbWF0Y2hlcyB0aGUgdXRpZCBwb3J0aW9uIG9mIGhvbWVBY2NvdW50SWRcclxuICogQHBhcmFtIHRlbmFudElkXHJcbiAqIEBwYXJhbSBob21lQWNjb3VudElkXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5mdW5jdGlvbiB0ZW5hbnRJZE1hdGNoZXNIb21lVGVuYW50KHRlbmFudElkLCBob21lQWNjb3VudElkKSB7XHJcbiAgICByZXR1cm4gKCEhdGVuYW50SWQgJiZcclxuICAgICAgICAhIWhvbWVBY2NvdW50SWQgJiZcclxuICAgICAgICB0ZW5hbnRJZCA9PT0gaG9tZUFjY291bnRJZC5zcGxpdChcIi5cIilbMV0pO1xyXG59XHJcbi8qKlxyXG4gKiBCdWlsZCB0ZW5hbnQgcHJvZmlsZVxyXG4gKiBAcGFyYW0gaG9tZUFjY291bnRJZCAtIEhvbWUgYWNjb3VudCBpZGVudGlmaWVyIGZvciB0aGlzIGFjY291bnQgb2JqZWN0XHJcbiAqIEBwYXJhbSBsb2NhbEFjY291bnRJZCAtIExvY2FsIGFjY291bnQgaWRlbnRpZmVyIGZvciB0aGlzIGFjY291bnQgb2JqZWN0XHJcbiAqIEBwYXJhbSB0ZW5hbnRJZCAtIEZ1bGwgdGVuYW50IG9yIG9yZ2FuaXphdGlvbmFsIGlkIHRoYXQgdGhpcyBhY2NvdW50IGJlbG9uZ3MgdG9cclxuICogQHBhcmFtIGlkVG9rZW5DbGFpbXMgLSBDbGFpbXMgZnJvbSB0aGUgSUQgdG9rZW5cclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIGJ1aWxkVGVuYW50UHJvZmlsZShob21lQWNjb3VudElkLCBsb2NhbEFjY291bnRJZCwgdGVuYW50SWQsIGlkVG9rZW5DbGFpbXMpIHtcclxuICAgIGlmIChpZFRva2VuQ2xhaW1zKSB7XHJcbiAgICAgICAgY29uc3QgeyBvaWQsIHN1YiwgdGlkLCBuYW1lLCB0ZnAsIGFjciB9ID0gaWRUb2tlbkNsYWltcztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoZSBhdXRob3JpdHkgaXMgQUFEIG9yIEIyQywgd2UgZXhoYXVzdCBhbGwgdGhlIHBvc3NpYmxlIGNsYWltcyB0aGF0IGNhbiBzZXJ2ZSBhcyB0ZW5hbnQgSUQgd2l0aCB0aGUgZm9sbG93aW5nIHByZWNlZGVuY2U6XHJcbiAgICAgICAgICogdGlkIC0gVGVuYW50SUQgY2xhaW0gdGhhdCBpZGVudGlmaWVzIHRoZSB0ZW5hbnQgdGhhdCBpc3N1ZWQgdGhlIHRva2VuIGluIEFBRC4gRXhwZWN0ZWQgaW4gYWxsIEFBRCBJRCB0b2tlbnMsIG5vdCBwcmVzZW50IGluIEIyQyBJRCBUb2tlbnMuXHJcbiAgICAgICAgICogdGZwIC0gVHJ1c3QgRnJhbWV3b3JrIFBvbGljeSBjbGFpbSB0aGF0IGlkZW50aWZpZXMgdGhlIHBvbGljeSB0aGF0IHdhcyB1c2VkIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlci4gRnVuY3Rpb25zIGFzIHRlbmFudCBmb3IgQjJDIHNjZW5hcmlvcy5cclxuICAgICAgICAgKiBhY3IgLSBBdXRoZW50aWNhdGlvbiBDb250ZXh0IENsYXNzIFJlZmVyZW5jZSBjbGFpbSB1c2VkIG9ubHkgd2l0aCBvbGRlciBCMkMgcG9saWNpZXMuIEZhbGxiYWNrIGluIGNhc2UgdGZwIGlzIG5vdCBwcmVzZW50LCBidXQgbGlrZWx5IHdvbid0IGJlIHByZXNlbnQgYW55d2F5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHRlbmFudElkID0gdGlkIHx8IHRmcCB8fCBhY3IgfHwgXCJcIjtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0ZW5hbnRJZDogdGVuYW50SWQsXHJcbiAgICAgICAgICAgIGxvY2FsQWNjb3VudElkOiBvaWQgfHwgc3ViIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIGlzSG9tZVRlbmFudDogdGVuYW50SWRNYXRjaGVzSG9tZVRlbmFudCh0ZW5hbnRJZCwgaG9tZUFjY291bnRJZCksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRlbmFudElkLFxyXG4gICAgICAgICAgICBsb2NhbEFjY291bnRJZCxcclxuICAgICAgICAgICAgaXNIb21lVGVuYW50OiB0ZW5hbnRJZE1hdGNoZXNIb21lVGVuYW50KHRlbmFudElkLCBob21lQWNjb3VudElkKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXBsYWNlcyBhY2NvdW50IGluZm8gdGhhdCB2YXJpZXMgYnkgdGVuYW50IHByb2ZpbGUgc291cmNlZCBmcm9tIHRoZSBJRCB0b2tlbiBjbGFpbXMgcGFzc2VkIGluIHdpdGggdGhlIHRlbmFudC1zcGVjaWZpYyBhY2NvdW50IGluZm9cclxuICogQHBhcmFtIGJhc2VBY2NvdW50SW5mb1xyXG4gKiBAcGFyYW0gaWRUb2tlbkNsYWltc1xyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlQWNjb3VudFRlbmFudFByb2ZpbGVEYXRhKGJhc2VBY2NvdW50SW5mbywgdGVuYW50UHJvZmlsZSwgaWRUb2tlbkNsYWltcywgaWRUb2tlblNlY3JldCkge1xyXG4gICAgbGV0IHVwZGF0ZWRBY2NvdW50SW5mbyA9IGJhc2VBY2NvdW50SW5mbztcclxuICAgIC8vIFRlbmFudCBQcm9maWxlIG92ZXJyaWRlcyBwYXNzZWQgaW4gYWNjb3VudCBpbmZvXHJcbiAgICBpZiAodGVuYW50UHJvZmlsZSkge1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgICAgICBjb25zdCB7IGlzSG9tZVRlbmFudCwgLi4udGVuYW50UHJvZmlsZU92ZXJyaWRlIH0gPSB0ZW5hbnRQcm9maWxlO1xyXG4gICAgICAgIHVwZGF0ZWRBY2NvdW50SW5mbyA9IHsgLi4uYmFzZUFjY291bnRJbmZvLCAuLi50ZW5hbnRQcm9maWxlT3ZlcnJpZGUgfTtcclxuICAgIH1cclxuICAgIC8vIElEIHRva2VuIGNsYWltcyBvdmVycmlkZSBwYXNzZWQgaW4gYWNjb3VudCBpbmZvIGFuZCB0ZW5hbnQgcHJvZmlsZVxyXG4gICAgaWYgKGlkVG9rZW5DbGFpbXMpIHtcclxuICAgICAgICAvLyBJZ25vcmUgaXNIb21lVGVuYW50LCBsb2dpbkhpbnQsIGFuZCBzaWQgd2hpY2ggYXJlIHBhcnQgb2YgdGVuYW50IHByb2ZpbGUgYnV0IG5vdCBiYXNlIGFjY291bnQgaW5mb1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgICAgICBjb25zdCB7IGlzSG9tZVRlbmFudCwgLi4uY2xhaW1zU291cmNlZFRlbmFudFByb2ZpbGUgfSA9IGJ1aWxkVGVuYW50UHJvZmlsZShiYXNlQWNjb3VudEluZm8uaG9tZUFjY291bnRJZCwgYmFzZUFjY291bnRJbmZvLmxvY2FsQWNjb3VudElkLCBiYXNlQWNjb3VudEluZm8udGVuYW50SWQsIGlkVG9rZW5DbGFpbXMpO1xyXG4gICAgICAgIHVwZGF0ZWRBY2NvdW50SW5mbyA9IHtcclxuICAgICAgICAgICAgLi4udXBkYXRlZEFjY291bnRJbmZvLFxyXG4gICAgICAgICAgICAuLi5jbGFpbXNTb3VyY2VkVGVuYW50UHJvZmlsZSxcclxuICAgICAgICAgICAgaWRUb2tlbkNsYWltczogaWRUb2tlbkNsYWltcyxcclxuICAgICAgICAgICAgaWRUb2tlbjogaWRUb2tlblNlY3JldCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVkQWNjb3VudEluZm87XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdXBkYXRlZEFjY291bnRJbmZvO1xyXG59XG5cbmV4cG9ydCB7IGJ1aWxkVGVuYW50UHJvZmlsZSwgdGVuYW50SWRNYXRjaGVzSG9tZVRlbmFudCwgdXBkYXRlQWNjb3VudFRlbmFudFByb2ZpbGVEYXRhIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY2NvdW50SW5mby5tanMubWFwXG4iXSwibmFtZXMiOlsidGVuYW50SWRNYXRjaGVzSG9tZVRlbmFudCIsInRlbmFudElkIiwiaG9tZUFjY291bnRJZCIsInNwbGl0IiwiYnVpbGRUZW5hbnRQcm9maWxlIiwibG9jYWxBY2NvdW50SWQiLCJpZFRva2VuQ2xhaW1zIiwib2lkIiwic3ViIiwidGlkIiwibmFtZSIsInRmcCIsImFjciIsImlzSG9tZVRlbmFudCIsInVwZGF0ZUFjY291bnRUZW5hbnRQcm9maWxlRGF0YSIsImJhc2VBY2NvdW50SW5mbyIsInRlbmFudFByb2ZpbGUiLCJpZFRva2VuU2VjcmV0IiwidXBkYXRlZEFjY291bnRJbmZvIiwidGVuYW50UHJvZmlsZU92ZXJyaWRlIiwiY2xhaW1zU291cmNlZFRlbmFudFByb2ZpbGUiLCJpZFRva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/AuthToken.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkMaxAge: () => (/* binding */ checkMaxAge),\n/* harmony export */   extractTokenClaims: () => (/* binding */ extractTokenClaims),\n/* harmony export */   getJWSPayload: () => (/* binding */ getJWSPayload)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Extract token by decoding the rawToken\r\n *\r\n * @param encodedToken\r\n */ function extractTokenClaims(encodedToken, base64Decode) {\n    const jswPayload = getJWSPayload(encodedToken);\n    // token will be decoded to get the username\n    try {\n        // base64Decode() should throw an error if there is an issue\n        const base64Decoded = base64Decode(jswPayload);\n        return JSON.parse(base64Decoded);\n    } catch (err) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.tokenParsingError);\n    }\n}\n/**\r\n * decode a JWT\r\n *\r\n * @param authToken\r\n */ function getJWSPayload(authToken) {\n    if (!authToken) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nullOrEmptyToken);\n    }\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    const matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.tokenParsingError);\n    }\n    /**\r\n     * const crackedToken = {\r\n     *  header: matches[1],\r\n     *  JWSPayload: matches[2],\r\n     *  JWSSig: matches[3],\r\n     * };\r\n     */ return matches[2];\n}\n/**\r\n * Determine if the token's max_age has transpired\r\n */ function checkMaxAge(authTime, maxAge) {\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */ const fiveMinuteSkew = 300000; // five minutes in milliseconds\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.maxAgeTranspired);\n    }\n}\n //# sourceMappingURL=AuthToken.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9BdXRoVG9rZW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3FFO0FBQ3FDO0FBRTFHOzs7Q0FHQyxHQUNEOzs7O0NBSUMsR0FDRCxTQUFTSSxtQkFBbUJDLFlBQVksRUFBRUMsWUFBWTtJQUNsRCxNQUFNQyxhQUFhQyxjQUFjSDtJQUNqQyw0Q0FBNEM7SUFDNUMsSUFBSTtRQUNBLDREQUE0RDtRQUM1RCxNQUFNSSxnQkFBZ0JILGFBQWFDO1FBQ25DLE9BQU9HLEtBQUtDLEtBQUssQ0FBQ0Y7SUFDdEIsRUFDQSxPQUFPRyxLQUFLO1FBQ1IsTUFBTVosaUZBQXFCQSxDQUFDQyw4RUFBaUJBO0lBQ2pEO0FBQ0o7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU08sY0FBY0ssU0FBUztJQUM1QixJQUFJLENBQUNBLFdBQVc7UUFDWixNQUFNYixpRkFBcUJBLENBQUNFLDZFQUFnQkE7SUFDaEQ7SUFDQSxNQUFNWSxrQkFBa0I7SUFDeEIsTUFBTUMsVUFBVUQsZ0JBQWdCRSxJQUFJLENBQUNIO0lBQ3JDLElBQUksQ0FBQ0UsV0FBV0EsUUFBUUUsTUFBTSxHQUFHLEdBQUc7UUFDaEMsTUFBTWpCLGlGQUFxQkEsQ0FBQ0MsOEVBQWlCQTtJQUNqRDtJQUNBOzs7Ozs7S0FNQyxHQUNELE9BQU9jLE9BQU8sQ0FBQyxFQUFFO0FBQ3JCO0FBQ0E7O0NBRUMsR0FDRCxTQUFTRyxZQUFZQyxRQUFRLEVBQUVDLE1BQU07SUFDakM7Ozs7S0FJQyxHQUNELE1BQU1DLGlCQUFpQixRQUFRLCtCQUErQjtJQUM5RCxJQUFJRCxXQUFXLEtBQUtFLEtBQUtDLEdBQUcsS0FBS0YsaUJBQWlCRixXQUFXQyxRQUFRO1FBQ2pFLE1BQU1wQixpRkFBcUJBLENBQUNHLDZFQUFnQkE7SUFDaEQ7QUFDSjtBQUUwRCxDQUMxRCxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L0F1dGhUb2tlbi5tanM/N2FkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudEF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgdG9rZW5QYXJzaW5nRXJyb3IsIG51bGxPckVtcHR5VG9rZW4sIG1heEFnZVRyYW5zcGlyZWQgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEV4dHJhY3QgdG9rZW4gYnkgZGVjb2RpbmcgdGhlIHJhd1Rva2VuXHJcbiAqXHJcbiAqIEBwYXJhbSBlbmNvZGVkVG9rZW5cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3RUb2tlbkNsYWltcyhlbmNvZGVkVG9rZW4sIGJhc2U2NERlY29kZSkge1xyXG4gICAgY29uc3QganN3UGF5bG9hZCA9IGdldEpXU1BheWxvYWQoZW5jb2RlZFRva2VuKTtcclxuICAgIC8vIHRva2VuIHdpbGwgYmUgZGVjb2RlZCB0byBnZXQgdGhlIHVzZXJuYW1lXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIGJhc2U2NERlY29kZSgpIHNob3VsZCB0aHJvdyBhbiBlcnJvciBpZiB0aGVyZSBpcyBhbiBpc3N1ZVxyXG4gICAgICAgIGNvbnN0IGJhc2U2NERlY29kZWQgPSBiYXNlNjREZWNvZGUoanN3UGF5bG9hZCk7XHJcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0RGVjb2RlZCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKHRva2VuUGFyc2luZ0Vycm9yKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogZGVjb2RlIGEgSldUXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRoVG9rZW5cclxuICovXHJcbmZ1bmN0aW9uIGdldEpXU1BheWxvYWQoYXV0aFRva2VuKSB7XHJcbiAgICBpZiAoIWF1dGhUb2tlbikge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihudWxsT3JFbXB0eVRva2VuKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHRva2VuUGFydHNSZWdleCA9IC9eKFteXFwuXFxzXSopXFwuKFteXFwuXFxzXSspXFwuKFteXFwuXFxzXSopJC87XHJcbiAgICBjb25zdCBtYXRjaGVzID0gdG9rZW5QYXJ0c1JlZ2V4LmV4ZWMoYXV0aFRva2VuKTtcclxuICAgIGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzLmxlbmd0aCA8IDQpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IodG9rZW5QYXJzaW5nRXJyb3IpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBjb25zdCBjcmFja2VkVG9rZW4gPSB7XHJcbiAgICAgKiAgaGVhZGVyOiBtYXRjaGVzWzFdLFxyXG4gICAgICogIEpXU1BheWxvYWQ6IG1hdGNoZXNbMl0sXHJcbiAgICAgKiAgSldTU2lnOiBtYXRjaGVzWzNdLFxyXG4gICAgICogfTtcclxuICAgICAqL1xyXG4gICAgcmV0dXJuIG1hdGNoZXNbMl07XHJcbn1cclxuLyoqXHJcbiAqIERldGVybWluZSBpZiB0aGUgdG9rZW4ncyBtYXhfYWdlIGhhcyB0cmFuc3BpcmVkXHJcbiAqL1xyXG5mdW5jdGlvbiBjaGVja01heEFnZShhdXRoVGltZSwgbWF4QWdlKSB7XHJcbiAgICAvKlxyXG4gICAgICogcGVyIGh0dHBzOi8vb3BlbmlkLm5ldC9zcGVjcy9vcGVuaWQtY29ubmVjdC1jb3JlLTFfMC5odG1sI0F1dGhSZXF1ZXN0XHJcbiAgICAgKiBUbyBmb3JjZSBhbiBpbW1lZGlhdGUgcmUtYXV0aGVudGljYXRpb246IElmIGFuIGFwcCByZXF1aXJlcyB0aGF0IGEgdXNlciByZS1hdXRoZW50aWNhdGUgcHJpb3IgdG8gYWNjZXNzLFxyXG4gICAgICogcHJvdmlkZSBhIHZhbHVlIG9mIDAgZm9yIHRoZSBtYXhfYWdlIHBhcmFtZXRlciBhbmQgdGhlIEFTIHdpbGwgZm9yY2UgYSBmcmVzaCBsb2dpbi5cclxuICAgICAqL1xyXG4gICAgY29uc3QgZml2ZU1pbnV0ZVNrZXcgPSAzMDAwMDA7IC8vIGZpdmUgbWludXRlcyBpbiBtaWxsaXNlY29uZHNcclxuICAgIGlmIChtYXhBZ2UgPT09IDAgfHwgRGF0ZS5ub3coKSAtIGZpdmVNaW51dGVTa2V3ID4gYXV0aFRpbWUgKyBtYXhBZ2UpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWF4QWdlVHJhbnNwaXJlZCk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgY2hlY2tNYXhBZ2UsIGV4dHJhY3RUb2tlbkNsYWltcywgZ2V0SldTUGF5bG9hZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aFRva2VuLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnRBdXRoRXJyb3IiLCJ0b2tlblBhcnNpbmdFcnJvciIsIm51bGxPckVtcHR5VG9rZW4iLCJtYXhBZ2VUcmFuc3BpcmVkIiwiZXh0cmFjdFRva2VuQ2xhaW1zIiwiZW5jb2RlZFRva2VuIiwiYmFzZTY0RGVjb2RlIiwianN3UGF5bG9hZCIsImdldEpXU1BheWxvYWQiLCJiYXNlNjREZWNvZGVkIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwiYXV0aFRva2VuIiwidG9rZW5QYXJ0c1JlZ2V4IiwibWF0Y2hlcyIsImV4ZWMiLCJsZW5ndGgiLCJjaGVja01heEFnZSIsImF1dGhUaW1lIiwibWF4QWdlIiwiZml2ZU1pbnV0ZVNrZXciLCJEYXRlIiwibm93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CcsCredentialType: () => (/* binding */ CcsCredentialType)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CcsCredentialType = {\n    HOME_ACCOUNT_ID: \"home_account_id\",\n    UPN: \"UPN\"\n};\n //# sourceMappingURL=CcsCredential.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9DY3NDcmVkZW50aWFsLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUEsb0JBQW9CO0lBQ3RCQyxpQkFBaUI7SUFDakJDLEtBQUs7QUFDVDtBQUU2QixDQUM3QiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L0Njc0NyZWRlbnRpYWwubWpzPzQ3NTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQ2NzQ3JlZGVudGlhbFR5cGUgPSB7XHJcbiAgICBIT01FX0FDQ09VTlRfSUQ6IFwiaG9tZV9hY2NvdW50X2lkXCIsXHJcbiAgICBVUE46IFwiVVBOXCIsXHJcbn07XG5cbmV4cG9ydCB7IENjc0NyZWRlbnRpYWxUeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DY3NDcmVkZW50aWFsLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDY3NDcmVkZW50aWFsVHlwZSIsIkhPTUVfQUNDT1VOVF9JRCIsIlVQTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildClientInfo: () => (/* binding */ buildClientInfo),\n/* harmony export */   buildClientInfoFromHomeAccountId: () => (/* binding */ buildClientInfoFromHomeAccountId)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */ function buildClientInfo(rawClientInfo, base64Decode) {\n    if (!rawClientInfo) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoEmptyError);\n    }\n    try {\n        const decodedClientInfo = base64Decode(rawClientInfo);\n        return JSON.parse(decodedClientInfo);\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoDecodingError);\n    }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */ function buildClientInfoFromHomeAccountId(homeAccountId) {\n    if (!homeAccountId) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.clientInfoDecodingError);\n    }\n    const clientInfoParts = homeAccountId.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Separators.CLIENT_INFO_SEPARATOR, 2);\n    return {\n        uid: clientInfoParts[0],\n        utid: clientInfoParts.length < 2 ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING : clientInfoParts[1]\n    };\n}\n //# sourceMappingURL=ClientInfo.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9DbGllbnRJbmZvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNxRTtBQUNOO0FBQ21DO0FBRWxHOzs7Q0FHQyxHQUNEOzs7O0NBSUMsR0FDRCxTQUFTSyxnQkFBZ0JDLGFBQWEsRUFBRUMsWUFBWTtJQUNoRCxJQUFJLENBQUNELGVBQWU7UUFDaEIsTUFBTU4saUZBQXFCQSxDQUFDRyxpRkFBb0JBO0lBQ3BEO0lBQ0EsSUFBSTtRQUNBLE1BQU1LLG9CQUFvQkQsYUFBYUQ7UUFDdkMsT0FBT0csS0FBS0MsS0FBSyxDQUFDRjtJQUN0QixFQUNBLE9BQU9HLEdBQUc7UUFDTixNQUFNWCxpRkFBcUJBLENBQUNJLG9GQUF1QkE7SUFDdkQ7QUFDSjtBQUNBOzs7Q0FHQyxHQUNELFNBQVNRLGlDQUFpQ0MsYUFBYTtJQUNuRCxJQUFJLENBQUNBLGVBQWU7UUFDaEIsTUFBTWIsaUZBQXFCQSxDQUFDSSxvRkFBdUJBO0lBQ3ZEO0lBQ0EsTUFBTVUsa0JBQWtCRCxjQUFjRSxLQUFLLENBQUNkLDREQUFVQSxDQUFDZSxxQkFBcUIsRUFBRTtJQUM5RSxPQUFPO1FBQ0hDLEtBQUtILGVBQWUsQ0FBQyxFQUFFO1FBQ3ZCSSxNQUFNSixnQkFBZ0JLLE1BQU0sR0FBRyxJQUN6QmpCLDJEQUFTQSxDQUFDa0IsWUFBWSxHQUN0Qk4sZUFBZSxDQUFDLEVBQUU7SUFDNUI7QUFDSjtBQUU2RCxDQUM3RCx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hY2NvdW50L0NsaWVudEluZm8ubWpzPzNmNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IFNlcGFyYXRvcnMsIENvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgY2xpZW50SW5mb0VtcHR5RXJyb3IsIGNsaWVudEluZm9EZWNvZGluZ0Vycm9yIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBGdW5jdGlvbiB0byBidWlsZCBhIGNsaWVudCBpbmZvIG9iamVjdCBmcm9tIHNlcnZlciBjbGllbnRJbmZvIHN0cmluZ1xyXG4gKiBAcGFyYW0gcmF3Q2xpZW50SW5mb1xyXG4gKiBAcGFyYW0gY3J5cHRvXHJcbiAqL1xyXG5mdW5jdGlvbiBidWlsZENsaWVudEluZm8ocmF3Q2xpZW50SW5mbywgYmFzZTY0RGVjb2RlKSB7XHJcbiAgICBpZiAoIXJhd0NsaWVudEluZm8pIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoY2xpZW50SW5mb0VtcHR5RXJyb3IpO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkZWNvZGVkQ2xpZW50SW5mbyA9IGJhc2U2NERlY29kZShyYXdDbGllbnRJbmZvKTtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVkQ2xpZW50SW5mbyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihjbGllbnRJbmZvRGVjb2RpbmdFcnJvcik7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIHRvIGJ1aWxkIGEgY2xpZW50IGluZm8gb2JqZWN0IGZyb20gY2FjaGVkIGhvbWVBY2NvdW50SWQgc3RyaW5nXHJcbiAqIEBwYXJhbSBob21lQWNjb3VudElkXHJcbiAqL1xyXG5mdW5jdGlvbiBidWlsZENsaWVudEluZm9Gcm9tSG9tZUFjY291bnRJZChob21lQWNjb3VudElkKSB7XHJcbiAgICBpZiAoIWhvbWVBY2NvdW50SWQpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoY2xpZW50SW5mb0RlY29kaW5nRXJyb3IpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY2xpZW50SW5mb1BhcnRzID0gaG9tZUFjY291bnRJZC5zcGxpdChTZXBhcmF0b3JzLkNMSUVOVF9JTkZPX1NFUEFSQVRPUiwgMik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVpZDogY2xpZW50SW5mb1BhcnRzWzBdLFxyXG4gICAgICAgIHV0aWQ6IGNsaWVudEluZm9QYXJ0cy5sZW5ndGggPCAyXHJcbiAgICAgICAgICAgID8gQ29uc3RhbnRzLkVNUFRZX1NUUklOR1xyXG4gICAgICAgICAgICA6IGNsaWVudEluZm9QYXJ0c1sxXSxcclxuICAgIH07XHJcbn1cblxuZXhwb3J0IHsgYnVpbGRDbGllbnRJbmZvLCBidWlsZENsaWVudEluZm9Gcm9tSG9tZUFjY291bnRJZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xpZW50SW5mby5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwiU2VwYXJhdG9ycyIsIkNvbnN0YW50cyIsImNsaWVudEluZm9FbXB0eUVycm9yIiwiY2xpZW50SW5mb0RlY29kaW5nRXJyb3IiLCJidWlsZENsaWVudEluZm8iLCJyYXdDbGllbnRJbmZvIiwiYmFzZTY0RGVjb2RlIiwiZGVjb2RlZENsaWVudEluZm8iLCJKU09OIiwicGFyc2UiLCJlIiwiYnVpbGRDbGllbnRJbmZvRnJvbUhvbWVBY2NvdW50SWQiLCJob21lQWNjb3VudElkIiwiY2xpZW50SW5mb1BhcnRzIiwic3BsaXQiLCJDTElFTlRfSU5GT19TRVBBUkFUT1IiLCJ1aWQiLCJ1dGlkIiwibGVuZ3RoIiwiRU1QVFlfU1RSSU5HIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTenantIdFromIdTokenClaims: () => (/* binding */ getTenantIdFromIdTokenClaims)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\r\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\r\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\r\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\r\n * Downcased to match the realm case-insensitive comparison requirements\r\n * @param idTokenClaims\r\n * @returns\r\n */ function getTenantIdFromIdTokenClaims(idTokenClaims) {\n    if (idTokenClaims) {\n        const tenantId = idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\n        return tenantId || null;\n    }\n    return null;\n}\n //# sourceMappingURL=TokenClaims.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYWNjb3VudC9Ub2tlbkNsYWltcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNEOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0EsNkJBQTZCQyxhQUFhO0lBQy9DLElBQUlBLGVBQWU7UUFDZixNQUFNQyxXQUFXRCxjQUFjRSxHQUFHLElBQUlGLGNBQWNHLEdBQUcsSUFBSUgsY0FBY0ksR0FBRztRQUM1RSxPQUFPSCxZQUFZO0lBQ3ZCO0lBQ0EsT0FBTztBQUNYO0FBRXdDLENBQ3hDLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2FjY291bnQvVG9rZW5DbGFpbXMubWpzP2FmMzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEdldHMgdGVuYW50SWQgZnJvbSBhdmFpbGFibGUgSUQgdG9rZW4gY2xhaW1zIHRvIHNldCBhcyBjcmVkZW50aWFsIHJlYWxtIHdpdGggdGhlIGZvbGxvd2luZyBwcmVjZWRlbmNlOlxyXG4gKiAxLiB0aWQgLSBpZiB0aGUgdG9rZW4gaXMgYWNxdWlyZWQgZnJvbSBhbiBBenVyZSBBRCB0ZW5hbnQgdGlkIHdpbGwgYmUgcHJlc2VudFxyXG4gKiAyLiB0ZnAgLSBpZiB0aGUgdG9rZW4gaXMgYWNxdWlyZWQgZnJvbSBhIG1vZGVybiBCMkMgdGVuYW50IHRmcCBzaG91bGQgYmUgcHJlc2VudFxyXG4gKiAzLiBhY3IgLSBpZiB0aGUgdG9rZW4gaXMgYWNxdWlyZWQgZnJvbSBhIGxlZ2FjeSBCMkMgdGVuYW50IGFjciBzaG91bGQgYmUgcHJlc2VudFxyXG4gKiBEb3duY2FzZWQgdG8gbWF0Y2ggdGhlIHJlYWxtIGNhc2UtaW5zZW5zaXRpdmUgY29tcGFyaXNvbiByZXF1aXJlbWVudHNcclxuICogQHBhcmFtIGlkVG9rZW5DbGFpbXNcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIGdldFRlbmFudElkRnJvbUlkVG9rZW5DbGFpbXMoaWRUb2tlbkNsYWltcykge1xyXG4gICAgaWYgKGlkVG9rZW5DbGFpbXMpIHtcclxuICAgICAgICBjb25zdCB0ZW5hbnRJZCA9IGlkVG9rZW5DbGFpbXMudGlkIHx8IGlkVG9rZW5DbGFpbXMudGZwIHx8IGlkVG9rZW5DbGFpbXMuYWNyO1xyXG4gICAgICAgIHJldHVybiB0ZW5hbnRJZCB8fCBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuZXhwb3J0IHsgZ2V0VGVuYW50SWRGcm9tSWRUb2tlbkNsYWltcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG9rZW5DbGFpbXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImdldFRlbmFudElkRnJvbUlkVG9rZW5DbGFpbXMiLCJpZFRva2VuQ2xhaW1zIiwidGVuYW50SWQiLCJ0aWQiLCJ0ZnAiLCJhY3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/Authority.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Authority: () => (/* binding */ Authority),\n/* harmony export */   buildStaticAuthorityOptions: () => (/* binding */ buildStaticAuthorityOptions),\n/* harmony export */   formatAuthorityUri: () => (/* binding */ formatAuthorityUri),\n/* harmony export */   getTenantFromAuthorityString: () => (/* binding */ getTenantFromAuthorityString)\n/* harmony export */ });\n/* harmony import */ var _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AuthorityType.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\");\n/* harmony import */ var _OpenIdConfigResponse_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./OpenIdConfigResponse.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./AuthorityMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ProtocolMode.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./AuthorityOptions.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _CloudInstanceDiscoveryResponse_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CloudInstanceDiscoveryResponse.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs\");\n/* harmony import */ var _CloudInstanceDiscoveryErrorResponse_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./CloudInstanceDiscoveryErrorResponse.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs\");\n/* harmony import */ var _RegionDiscovery_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RegionDiscovery.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../error/AuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n * @internal\r\n */ class Authority {\n    constructor(authority, networkInterface, cacheManager, authorityOptions, logger, correlationId, performanceClient, managedIdentity){\n        this.canonicalAuthority = authority;\n        this._canonicalAuthority.validateAsUri();\n        this.networkInterface = networkInterface;\n        this.cacheManager = cacheManager;\n        this.authorityOptions = authorityOptions;\n        this.regionDiscoveryMetadata = {\n            region_used: undefined,\n            region_source: undefined,\n            region_outcome: undefined\n        };\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n        this.managedIdentity = managedIdentity || false;\n        this.regionDiscovery = new _RegionDiscovery_mjs__WEBPACK_IMPORTED_MODULE_0__.RegionDiscovery(networkInterface, this.logger, this.performanceClient, this.correlationId);\n    }\n    /**\r\n     * Get {@link AuthorityType}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */ getAuthorityType(authorityUri) {\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\n        if (authorityUri.HostNameAndPort.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CIAM_AUTH_URL)) {\n            return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Ciam;\n        }\n        const pathSegments = authorityUri.PathSegments;\n        if (pathSegments.length) {\n            switch(pathSegments[0].toLowerCase()){\n                case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.ADFS:\n                    return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs;\n                case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DSTS:\n                    return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Dsts;\n            }\n        }\n        return _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Default;\n    }\n    // See above for AuthorityType\n    get authorityType() {\n        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\n    }\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */ get protocolMode() {\n        return this.authorityOptions.protocolMode;\n    }\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */ get options() {\n        return this.authorityOptions;\n    }\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */ get canonicalAuthority() {\n        return this._canonicalAuthority.urlString;\n    }\n    /**\r\n     * Sets canonical authority.\r\n     */ set canonicalAuthority(url) {\n        this._canonicalAuthority = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(url);\n        this._canonicalAuthority.validateAsUri();\n        this._canonicalAuthorityUrlComponents = null;\n    }\n    /**\r\n     * Get authority components.\r\n     */ get canonicalAuthorityUrlComponents() {\n        if (!this._canonicalAuthorityUrlComponents) {\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n        }\n        return this._canonicalAuthorityUrlComponents;\n    }\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */ get hostnameAndPort() {\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    }\n    /**\r\n     * Get tenant for authority.\r\n     */ get tenant() {\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    }\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */ get authorizationEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.authorization_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */ get tokenEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    get deviceCodeEndpoint() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */ get endSessionEndpoint() {\n        if (this.discoveryComplete()) {\n            // ROPC policies may not have end_session_endpoint set\n            if (!this.metadata.end_session_endpoint) {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endSessionEndpointNotSupported);\n            }\n            return this.replacePath(this.metadata.end_session_endpoint);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * OAuth issuer for requests\r\n     */ get selfSignedJwtAudience() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.issuer);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */ get jwksUri() {\n        if (this.discoveryComplete()) {\n            return this.replacePath(this.metadata.jwks_uri);\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */ canReplaceTenant(authorityUri) {\n        return authorityUri.PathSegments.length === 1 && !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) && this.getAuthorityType(authorityUri) === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Default && this.protocolMode === _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__.ProtocolMode.AAD;\n    }\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */ replaceTenant(urlString) {\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n    }\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */ replacePath(urlString) {\n        let endpoint = urlString;\n        const cachedAuthorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(this.metadata.canonical_authority);\n        const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\n        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n        currentAuthorityParts.forEach((currentPart, index)=>{\n            let cachedPart = cachedAuthorityParts[index];\n            if (index === 0 && this.canReplaceTenant(cachedAuthorityUrlComponents)) {\n                const tenantId = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\n                /**\r\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n                 * always resolved with tenant id by OIDC.\r\n                 */ if (cachedPart !== tenantId) {\n                    this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);\n                    cachedPart = tenantId;\n                }\n            }\n            if (currentPart !== cachedPart) {\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\n            }\n        });\n        return this.replaceTenant(endpoint);\n    }\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */ get defaultOpenIdConfigurationEndpoint() {\n        const canonicalAuthorityHost = this.hostnameAndPort;\n        if (this.canonicalAuthority.endsWith(\"v2.0/\") || this.authorityType === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Adfs || this.protocolMode !== _ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_6__.ProtocolMode.AAD && !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost)) {\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\n        }\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\n    }\n    /**\r\n     * Boolean that returns whether or not tenant discovery has been completed.\r\n     */ discoveryComplete() {\n        return !!this.metadata;\n    }\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */ async resolveEndpointsAsync() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\n        const metadataEntity = this.getCurrentMetadataEntity();\n        const cloudDiscoverySource = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateCloudDiscoveryMetadata.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n        const endpointSource = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateEndpointMetadata.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\n        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\n            source: endpointSource\n        });\n        this.performanceClient?.addFields({\n            cloudDiscoverySource: cloudDiscoverySource,\n            authorityEndpointSource: endpointSource\n        }, this.correlationId);\n    }\n    /**\r\n     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\r\n     * from the configured canonical authority\r\n     * @returns\r\n     */ getCurrentMetadataEntity() {\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n        if (!metadataEntity) {\n            metadataEntity = {\n                aliases: [],\n                preferred_cache: this.hostnameAndPort,\n                preferred_network: this.hostnameAndPort,\n                canonical_authority: this.canonicalAuthority,\n                authorization_endpoint: \"\",\n                token_endpoint: \"\",\n                end_session_endpoint: \"\",\n                issuer: \"\",\n                aliasesFromNetwork: false,\n                endpointsFromNetwork: false,\n                expiresAt: (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.generateAuthorityMetadataExpiresAt)(),\n                jwks_uri: \"\"\n            };\n        }\n        return metadataEntity;\n    }\n    /**\r\n     * Updates cached metadata based on metadata source and sets the instance's metadata\r\n     * property to the same value\r\n     * @param metadataEntity\r\n     * @param cloudDiscoverySource\r\n     * @param endpointMetadataResult\r\n     */ updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {\n        if (cloudDiscoverySource !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE && endpointMetadataResult?.source !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE) {\n            // Reset the expiration time unless both values came from a successful cache lookup\n            metadataEntity.expiresAt = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.generateAuthorityMetadataExpiresAt)();\n            metadataEntity.canonical_authority = this.canonicalAuthority;\n        }\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n        this.metadata = metadataEntity;\n    }\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */ async updateEndpointMetadata(metadataEntity) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\n        const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);\n        // Further update may be required for hardcoded metadata if regional metadata is preferred\n        if (localMetadata) {\n            if (localMetadata.source === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES) {\n                // If the user prefers to use an azure region replace the global endpoints with regional information.\n                if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                    if (localMetadata.metadata) {\n                        const hardcodedMetadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateMetadataWithRegionalInformation.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);\n                        (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, hardcodedMetadata, false);\n                        metadataEntity.canonical_authority = this.canonicalAuthority;\n                    }\n                }\n            }\n            return localMetadata.source;\n        }\n        // Get metadata from network if local sources aren't available\n        let metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.getEndpointMetadataFromNetwork.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n        if (metadata) {\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\n                metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.updateMetadataWithRegionalInformation.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);\n            }\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, metadata, true);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.NETWORK;\n        } else {\n            // Metadata could not be obtained from the config, cache, network or hardcoded values\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.openIdConfigError, this.defaultOpenIdConfigurationEndpoint);\n        }\n    }\n    /**\r\n     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\r\n     * response if the source is hardcoded metadata\r\n     * @param metadataEntity\r\n     * @returns\r\n     */ updateEndpointMetadataFromLocalSources(metadataEntity) {\n        this.logger.verbose(\"Attempting to get endpoint metadata from authority configuration\");\n        const configMetadata = this.getEndpointMetadataFromConfig();\n        if (configMetadata) {\n            this.logger.verbose(\"Found endpoint metadata in authority configuration\");\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, configMetadata, false);\n            return {\n                source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG\n            };\n        }\n        this.logger.verbose(\"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\");\n        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\n        if (this.authorityOptions.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\");\n        } else {\n            const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\n            if (hardcodedMetadata) {\n                (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateAuthorityEndpointMetadata)(metadataEntity, hardcodedMetadata, false);\n                return {\n                    source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES,\n                    metadata: hardcodedMetadata\n                };\n            } else {\n                this.logger.verbose(\"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\");\n            }\n        }\n        // Check cached metadata entity expiration status\n        const metadataEntityExpired = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.isAuthorityMetadataExpired)(metadataEntity);\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntityExpired) {\n            // No need to update\n            this.logger.verbose(\"Found endpoint metadata in the cache.\");\n            return {\n                source: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE\n            };\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n        return null;\n    }\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached\r\n     * authority metadata can be used for the requested authority. Protects against same domain different\r\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */ isAuthoritySameType(metadataEntity) {\n        const cachedAuthorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(metadataEntity.canonical_authority);\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n    }\n    /**\r\n     * Parse authorityMetadata config option\r\n     */ getEndpointMetadataFromConfig() {\n        if (this.authorityOptions.authorityMetadata) {\n            try {\n                return JSON.parse(this.authorityOptions.authorityMetadata);\n            } catch (e) {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidAuthorityMetadata);\n            }\n        }\n        return null;\n    }\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */ async getEndpointMetadataFromNetwork() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\n        const options = {};\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */ const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;\n        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);\n            const isValidResponse = (0,_OpenIdConfigResponse_mjs__WEBPACK_IMPORTED_MODULE_12__.isOpenIdConfigResponse)(response.body);\n            if (isValidResponse) {\n                return response.body;\n            } else {\n                this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);\n                return null;\n            }\n        } catch (e) {\n            this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);\n            return null;\n        }\n    }\n    /**\r\n     * Get OAuth endpoints for common authorities.\r\n     */ getEndpointMetadataFromHardcodedValues() {\n        if (this.hostnameAndPort in _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.EndpointMetadata) {\n            return _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.EndpointMetadata[this.hostnameAndPort];\n        }\n        return null;\n    }\n    /**\r\n     * Update the retrieved metadata with regional information.\r\n     * User selected Azure region will be used if configured.\r\n     */ async updateMetadataWithRegionalInformation(metadata) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\n        const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;\n        if (userConfiguredAzureRegion) {\n            if (userConfiguredAzureRegion !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n                this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n                this.regionDiscoveryMetadata.region_used = userConfiguredAzureRegion;\n                return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);\n            }\n            const autodetectedRegionName = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration?.environmentRegion, this.regionDiscoveryMetadata);\n            if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\n                this.regionDiscoveryMetadata.region_used = autodetectedRegionName;\n                return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);\n            }\n            this.regionDiscoveryMetadata.region_outcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n        }\n        return metadata;\n    }\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n     * and returns where the information was retrieved from\r\n     * @param metadataEntity\r\n     * @returns AuthorityMetadataSource\r\n     */ async updateCloudDiscoveryMetadata(metadataEntity) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\n        const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\n        if (localMetadataSource) {\n            return localMetadataSource;\n        }\n        // Fallback to network as metadata source\n        const metadata = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_8__.invokeAsync)(this.getCloudDiscoveryMetadataFromNetwork.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\n        if (metadata) {\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, metadata, true);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.NETWORK;\n        }\n        // Metadata could not be obtained from the config, cache, network or hardcoded values\n        throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.untrustedAuthority);\n    }\n    updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {\n        this.logger.verbose(\"Attempting to get cloud discovery metadata  from authority configuration\");\n        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.NOT_APPLICABLE}`);\n        const metadata = this.getCloudDiscoveryMetadataFromConfig();\n        if (metadata) {\n            this.logger.verbose(\"Found cloud discovery metadata in authority configuration\");\n            (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, metadata, false);\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG;\n        }\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\n        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\");\n        if (this.options.skipAuthorityMetadataCache) {\n            this.logger.verbose(\"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\");\n        } else {\n            const hardcodedMetadata = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromHardcodedValues)(this.hostnameAndPort);\n            if (hardcodedMetadata) {\n                this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\n                (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.updateCloudDiscoveryMetadata)(metadataEntity, hardcodedMetadata, false);\n                return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES;\n            }\n            this.logger.verbose(\"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\");\n        }\n        const metadataEntityExpired = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_9__.isAuthorityMetadataExpired)(metadataEntity);\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {\n            this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\n            // No need to update\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CACHE;\n        } else if (metadataEntityExpired) {\n            this.logger.verbose(\"The metadata entity is expired.\");\n        }\n        return null;\n    }\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */ getCloudDiscoveryMetadataFromConfig() {\n        // CIAM does not support cloud discovery metadata\n        if (this.authorityType === _AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_2__.AuthorityType.Ciam) {\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        // Check if network response was provided in config\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\n            try {\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n                const metadata = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromNetworkResponse)(parsedResponse.metadata, this.hostnameAndPort);\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\n                if (metadata) {\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\n                    return metadata;\n                } else {\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\n                }\n            } catch (e) {\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidCloudDiscoveryMetadata);\n            }\n        }\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n        if (this.isInKnownAuthorities()) {\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return null;\n    }\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */ async getCloudDiscoveryMetadataFromNetwork() {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_7__.PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\n        const instanceDiscoveryEndpoint = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\n        const options = {};\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */ let match = null;\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);\n            let typedResponseBody;\n            let metadata;\n            if ((0,_CloudInstanceDiscoveryResponse_mjs__WEBPACK_IMPORTED_MODULE_14__.isCloudInstanceDiscoveryResponse)(response.body)) {\n                typedResponseBody = response.body;\n                metadata = typedResponseBody.metadata;\n                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\n            } else if ((0,_CloudInstanceDiscoveryErrorResponse_mjs__WEBPACK_IMPORTED_MODULE_15__.isCloudInstanceDiscoveryErrorResponse)(response.body)) {\n                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\n                typedResponseBody = response.body;\n                if (typedResponseBody.error === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.INVALID_INSTANCE) {\n                    this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\n                    return null;\n                }\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\n                this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\n                metadata = [];\n            } else {\n                this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\n                return null;\n            }\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            match = (0,_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.getCloudDiscoveryMetadataFromNetworkResponse)(metadata, this.hostnameAndPort);\n        } catch (error) {\n            if (error instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_16__.AuthError) {\n                this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\n            } else {\n                const typedError = error;\n                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\n            }\n            return null;\n        }\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n        if (!match) {\n            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\n            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n        }\n        return match;\n    }\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */ isInKnownAuthorities() {\n        const matches = this.authorityOptions.knownAuthorities.filter((authority)=>{\n            return authority && _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\n        });\n        return matches.length > 0;\n    }\n    /**\r\n     * helper function to populate the authority based on azureCloudOptions\r\n     * @param authorityString\r\n     * @param azureCloudOptions\r\n     */ static generateAuthority(authorityString, azureCloudOptions) {\n        let authorityAzureCloudInstance;\n        if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== _AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_17__.AzureCloudInstance.None) {\n            const tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DEFAULT_COMMON_TENANT;\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\n        }\n        return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;\n    }\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */ static createCloudDiscoveryMetadataFromHost(host) {\n        return {\n            preferred_network: host,\n            preferred_cache: host,\n            aliases: [\n                host\n            ]\n        };\n    }\n    /**\r\n     * helper function to generate environment from authority object\r\n     */ getPreferredCache() {\n        if (this.managedIdentity) {\n            return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.DEFAULT_AUTHORITY_HOST;\n        } else if (this.discoveryComplete()) {\n            return this.metadata.preferred_cache;\n        } else {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.endpointResolutionError);\n        }\n    }\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */ isAlias(host) {\n        return this.metadata.aliases.indexOf(host) > -1;\n    }\n    /**\r\n     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\r\n     * @param host\r\n     */ isAliasOfKnownMicrosoftAuthority(host) {\n        return _AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_13__.InstanceDiscoveryMetadataAliases.has(host);\n    }\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */ static isPublicCloudAuthority(host) {\n        return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n    }\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */ static buildRegionalAuthorityString(host, region, queryString) {\n        // Create and validate a Url string object with the initial authority string\n        const authorityUrlInstance = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(host);\n        authorityUrlInstance.validateAsUri();\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\n        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n            hostNameAndPort = `${region}.${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\n        }\n        // Include the query string portion of the url\n        const url = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.constructAuthorityUriFromObject({\n            ...authorityUrlInstance.getUrlComponents(),\n            HostNameAndPort: hostNameAndPort\n        }).urlString;\n        // Add the query string if a query string was provided\n        if (queryString) return `${url}?${queryString}`;\n        return url;\n    }\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */ static replaceWithRegionalInformation(metadata, azureRegion) {\n        const regionalMetadata = {\n            ...metadata\n        };\n        regionalMetadata.authorization_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);\n        regionalMetadata.token_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);\n        if (regionalMetadata.end_session_endpoint) {\n            regionalMetadata.end_session_endpoint = Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);\n        }\n        return regionalMetadata;\n    }\n    /**\r\n     * Transform CIAM_AUTHORIY as per the below rules:\r\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n     *\r\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n     *\r\n     * @param authority\r\n     */ static transformCIAMAuthority(authority) {\n        let ciamAuthority = authority;\n        const authorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(authority);\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\n        // check if transformation is needed\n        if (authorityUrlComponents.PathSegments.length === 0 && authorityUrlComponents.HostNameAndPort.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CIAM_AUTH_URL)) {\n            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\n        }\n        return ciamAuthority;\n    }\n}\n// Reserved tenant domain names that will not be replaced with tenant id\nAuthority.reservedTenantDomains = new Set([\n    \"{tenant}\",\n    \"{tenantid}\",\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.COMMON,\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.CONSUMERS,\n    _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.ORGANIZATIONS\n]);\n/**\r\n * Extract tenantId from authority\r\n */ function getTenantFromAuthorityString(authority) {\n    const authorityUrl = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString(authority);\n    const authorityUrlComponents = authorityUrl.getUrlComponents();\n    /**\r\n     * For credential matching purposes, tenantId is the last path segment of the authority URL:\r\n     *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId\r\n     *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy\r\n     *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased\r\n     *\r\n     * Note that we may not have any path segments in certain OIDC scenarios.\r\n     */ const tenantId = authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();\n    switch(tenantId){\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.COMMON:\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.ORGANIZATIONS:\n        case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AADAuthorityConstants.CONSUMERS:\n            return undefined;\n        default:\n            return tenantId;\n    }\n}\nfunction formatAuthorityUri(authorityUri) {\n    return authorityUri.endsWith(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.FORWARD_SLASH) ? authorityUri : `${authorityUri}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.FORWARD_SLASH}`;\n}\nfunction buildStaticAuthorityOptions(authOptions) {\n    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\n    let cloudDiscoveryMetadata = undefined;\n    if (rawCloudDiscoveryMetadata) {\n        try {\n            cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_10__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.invalidCloudDiscoveryMetadata);\n        }\n    }\n    return {\n        canonicalAuthority: authOptions.authority ? formatAuthorityUri(authOptions.authority) : undefined,\n        knownAuthorities: authOptions.knownAuthorities,\n        cloudDiscoveryMetadata: cloudDiscoveryMetadata\n    };\n}\n //# sourceMappingURL=Authority.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDiscoveredInstance: () => (/* binding */ createDiscoveredInstance)\n/* harmony export */ });\n/* harmony import */ var _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Authority.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Create an authority object of the correct type based on the url\r\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n *\r\n * Also performs endpoint discovery.\r\n *\r\n * @param authorityUri\r\n * @param networkClient\r\n * @param protocolMode\r\n * @internal\r\n */ async function createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient) {\n    performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\n    const authorityUriFinal = _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.Authority.transformCIAMAuthority((0,_Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.formatAuthorityUri)(authorityUri));\n    // Initialize authority and perform discovery endpoint check.\n    const acquireTokenAuthority = new _Authority_mjs__WEBPACK_IMPORTED_MODULE_1__.Authority(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient);\n    try {\n        await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\n        return acquireTokenAuthority;\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.endpointResolutionError);\n    }\n}\n //# sourceMappingURL=AuthorityFactory.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eUZhY3RvcnkubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNnRTtBQUNLO0FBQ2E7QUFDdEI7QUFDZ0I7QUFFNUU7OztDQUdDLEdBQ0Q7Ozs7Ozs7Ozs7Q0FVQyxHQUNELGVBQWVNLHlCQUF5QkMsWUFBWSxFQUFFQyxhQUFhLEVBQUVDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUVDLE1BQU0sRUFBRUMsYUFBYSxFQUFFQyxpQkFBaUI7SUFDeklBLG1CQUFtQkMsb0JBQW9CWCwwRkFBaUJBLENBQUNZLHdDQUF3QyxFQUFFSDtJQUNuRyxNQUFNSSxvQkFBb0JoQixxREFBU0EsQ0FBQ2lCLHNCQUFzQixDQUFDaEIsa0VBQWtCQSxDQUFDTTtJQUM5RSw2REFBNkQ7SUFDN0QsTUFBTVcsd0JBQXdCLElBQUlsQixxREFBU0EsQ0FBQ2dCLG1CQUFtQlIsZUFBZUMsY0FBY0Msa0JBQWtCQyxRQUFRQyxlQUFlQztJQUNySSxJQUFJO1FBQ0EsTUFBTVQsd0VBQVdBLENBQUNjLHNCQUFzQkMscUJBQXFCLENBQUNDLElBQUksQ0FBQ0Ysd0JBQXdCZiwwRkFBaUJBLENBQUNrQiw4QkFBOEIsRUFBRVYsUUFBUUUsbUJBQW1CRDtRQUN4SyxPQUFPTTtJQUNYLEVBQ0EsT0FBT0ksR0FBRztRQUNOLE1BQU1wQixpRkFBcUJBLENBQUNHLG9GQUF1QkE7SUFDdkQ7QUFDSjtBQUVvQyxDQUNwQyw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9hdXRob3JpdHkvQXV0aG9yaXR5RmFjdG9yeS5tanM/MGQxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEF1dGhvcml0eSwgZm9ybWF0QXV0aG9yaXR5VXJpIH0gZnJvbSAnLi9BdXRob3JpdHkubWpzJztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudEF1dGhFcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvci5tanMnO1xuaW1wb3J0IHsgUGVyZm9ybWFuY2VFdmVudHMgfSBmcm9tICcuLi90ZWxlbWV0cnkvcGVyZm9ybWFuY2UvUGVyZm9ybWFuY2VFdmVudC5tanMnO1xuaW1wb3J0IHsgaW52b2tlQXN5bmMgfSBmcm9tICcuLi91dGlscy9GdW5jdGlvbldyYXBwZXJzLm1qcyc7XG5pbXBvcnQgeyBlbmRwb2ludFJlc29sdXRpb25FcnJvciB9IGZyb20gJy4uL2Vycm9yL0NsaWVudEF1dGhFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ3JlYXRlIGFuIGF1dGhvcml0eSBvYmplY3Qgb2YgdGhlIGNvcnJlY3QgdHlwZSBiYXNlZCBvbiB0aGUgdXJsXHJcbiAqIFBlcmZvcm1zIGJhc2ljIGF1dGhvcml0eSB2YWxpZGF0aW9uIC0gY2hlY2tzIHRvIHNlZSBpZiB0aGUgYXV0aG9yaXR5IGlzIG9mIGEgdmFsaWQgdHlwZSAoaS5lLiBhYWQsIGIyYywgYWRmcylcclxuICpcclxuICogQWxzbyBwZXJmb3JtcyBlbmRwb2ludCBkaXNjb3ZlcnkuXHJcbiAqXHJcbiAqIEBwYXJhbSBhdXRob3JpdHlVcmlcclxuICogQHBhcmFtIG5ldHdvcmtDbGllbnRcclxuICogQHBhcmFtIHByb3RvY29sTW9kZVxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZURpc2NvdmVyZWRJbnN0YW5jZShhdXRob3JpdHlVcmksIG5ldHdvcmtDbGllbnQsIGNhY2hlTWFuYWdlciwgYXV0aG9yaXR5T3B0aW9ucywgbG9nZ2VyLCBjb3JyZWxhdGlvbklkLCBwZXJmb3JtYW5jZUNsaWVudCkge1xyXG4gICAgcGVyZm9ybWFuY2VDbGllbnQ/LmFkZFF1ZXVlTWVhc3VyZW1lbnQoUGVyZm9ybWFuY2VFdmVudHMuQXV0aG9yaXR5RmFjdG9yeUNyZWF0ZURpc2NvdmVyZWRJbnN0YW5jZSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICBjb25zdCBhdXRob3JpdHlVcmlGaW5hbCA9IEF1dGhvcml0eS50cmFuc2Zvcm1DSUFNQXV0aG9yaXR5KGZvcm1hdEF1dGhvcml0eVVyaShhdXRob3JpdHlVcmkpKTtcclxuICAgIC8vIEluaXRpYWxpemUgYXV0aG9yaXR5IGFuZCBwZXJmb3JtIGRpc2NvdmVyeSBlbmRwb2ludCBjaGVjay5cclxuICAgIGNvbnN0IGFjcXVpcmVUb2tlbkF1dGhvcml0eSA9IG5ldyBBdXRob3JpdHkoYXV0aG9yaXR5VXJpRmluYWwsIG5ldHdvcmtDbGllbnQsIGNhY2hlTWFuYWdlciwgYXV0aG9yaXR5T3B0aW9ucywgbG9nZ2VyLCBjb3JyZWxhdGlvbklkLCBwZXJmb3JtYW5jZUNsaWVudCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IGludm9rZUFzeW5jKGFjcXVpcmVUb2tlbkF1dGhvcml0eS5yZXNvbHZlRW5kcG9pbnRzQXN5bmMuYmluZChhY3F1aXJlVG9rZW5BdXRob3JpdHkpLCBQZXJmb3JtYW5jZUV2ZW50cy5BdXRob3JpdHlSZXNvbHZlRW5kcG9pbnRzQXN5bmMsIGxvZ2dlciwgcGVyZm9ybWFuY2VDbGllbnQsIGNvcnJlbGF0aW9uSWQpKCk7XHJcbiAgICAgICAgcmV0dXJuIGFjcXVpcmVUb2tlbkF1dGhvcml0eTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKGVuZHBvaW50UmVzb2x1dGlvbkVycm9yKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBjcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF1dGhvcml0eUZhY3RvcnkubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1dGhvcml0eSIsImZvcm1hdEF1dGhvcml0eVVyaSIsImNyZWF0ZUNsaWVudEF1dGhFcnJvciIsIlBlcmZvcm1hbmNlRXZlbnRzIiwiaW52b2tlQXN5bmMiLCJlbmRwb2ludFJlc29sdXRpb25FcnJvciIsImNyZWF0ZURpc2NvdmVyZWRJbnN0YW5jZSIsImF1dGhvcml0eVVyaSIsIm5ldHdvcmtDbGllbnQiLCJjYWNoZU1hbmFnZXIiLCJhdXRob3JpdHlPcHRpb25zIiwibG9nZ2VyIiwiY29ycmVsYXRpb25JZCIsInBlcmZvcm1hbmNlQ2xpZW50IiwiYWRkUXVldWVNZWFzdXJlbWVudCIsIkF1dGhvcml0eUZhY3RvcnlDcmVhdGVEaXNjb3ZlcmVkSW5zdGFuY2UiLCJhdXRob3JpdHlVcmlGaW5hbCIsInRyYW5zZm9ybUNJQU1BdXRob3JpdHkiLCJhY3F1aXJlVG9rZW5BdXRob3JpdHkiLCJyZXNvbHZlRW5kcG9pbnRzQXN5bmMiLCJiaW5kIiwiQXV0aG9yaXR5UmVzb2x2ZUVuZHBvaW50c0FzeW5jIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EndpointMetadata: () => (/* binding */ EndpointMetadata),\n/* harmony export */   InstanceDiscoveryMetadata: () => (/* binding */ InstanceDiscoveryMetadata),\n/* harmony export */   InstanceDiscoveryMetadataAliases: () => (/* binding */ InstanceDiscoveryMetadataAliases),\n/* harmony export */   getAliasesFromMetadata: () => (/* binding */ getAliasesFromMetadata),\n/* harmony export */   getAliasesFromStaticSources: () => (/* binding */ getAliasesFromStaticSources),\n/* harmony export */   getCloudDiscoveryMetadataFromHardcodedValues: () => (/* binding */ getCloudDiscoveryMetadataFromHardcodedValues),\n/* harmony export */   getCloudDiscoveryMetadataFromNetworkResponse: () => (/* binding */ getCloudDiscoveryMetadataFromNetworkResponse),\n/* harmony export */   rawMetdataJSON: () => (/* binding */ rawMetdataJSON)\n/* harmony export */ });\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const rawMetdataJSON = {\n    endpointMetadata: {\n        \"login.microsoftonline.com\": {\n            token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\"\n        },\n        \"login.chinacloudapi.cn\": {\n            token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\"\n        },\n        \"login.microsoftonline.us\": {\n            token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\n            jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\n            authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\n            end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\"\n        }\n    },\n    instanceDiscoveryMetadata: {\n        tenant_discovery_endpoint: \"https://{canonicalAuthority}/v2.0/.well-known/openid-configuration\",\n        metadata: [\n            {\n                preferred_network: \"login.microsoftonline.com\",\n                preferred_cache: \"login.windows.net\",\n                aliases: [\n                    \"login.microsoftonline.com\",\n                    \"login.windows.net\",\n                    \"login.microsoft.com\",\n                    \"sts.windows.net\"\n                ]\n            },\n            {\n                preferred_network: \"login.partner.microsoftonline.cn\",\n                preferred_cache: \"login.partner.microsoftonline.cn\",\n                aliases: [\n                    \"login.partner.microsoftonline.cn\",\n                    \"login.chinacloudapi.cn\"\n                ]\n            },\n            {\n                preferred_network: \"login.microsoftonline.de\",\n                preferred_cache: \"login.microsoftonline.de\",\n                aliases: [\n                    \"login.microsoftonline.de\"\n                ]\n            },\n            {\n                preferred_network: \"login.microsoftonline.us\",\n                preferred_cache: \"login.microsoftonline.us\",\n                aliases: [\n                    \"login.microsoftonline.us\",\n                    \"login.usgovcloudapi.net\"\n                ]\n            },\n            {\n                preferred_network: \"login-us.microsoftonline.com\",\n                preferred_cache: \"login-us.microsoftonline.com\",\n                aliases: [\n                    \"login-us.microsoftonline.com\"\n                ]\n            }\n        ]\n    }\n};\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\nconst InstanceDiscoveryMetadataAliases = new Set();\nInstanceDiscoveryMetadata.metadata.forEach((metadataEntry)=>{\n    metadataEntry.aliases.forEach((alias)=>{\n        InstanceDiscoveryMetadataAliases.add(alias);\n    });\n});\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */ function getAliasesFromStaticSources(staticAuthorityOptions, logger) {\n    let staticAliases;\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\n    if (canonicalAuthority) {\n        const authorityHost = new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_0__.UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\n        staticAliases = getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.CONFIG, logger) || getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityMetadataSource.HARDCODED_VALUES, logger) || staticAuthorityOptions.knownAuthorities;\n    }\n    return staticAliases || [];\n}\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */ function getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\n    if (authorityHost && cloudDiscoveryMetadata) {\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\n        if (metadata) {\n            logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\n            return metadata.aliases;\n        } else {\n            logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\n        }\n    }\n    return null;\n}\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */ function getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\n    return metadata;\n}\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */ function getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\n    for(let i = 0; i < response.length; i++){\n        const metadata = response[i];\n        if (metadata.aliases.includes(authorityHost)) {\n            return metadata;\n        }\n    }\n    return null;\n}\n //# sourceMappingURL=AuthorityMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureCloudInstance: () => (/* binding */ AzureCloudInstance)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const AzureCloudInstance = {\n    // AzureCloudInstance is not specified.\n    None: \"none\",\n    // Microsoft Azure public cloud\n    AzurePublic: \"https://login.microsoftonline.com\",\n    // Microsoft PPE\n    AzurePpe: \"https://login.windows-ppe.net\",\n    // Microsoft Chinese national/regional cloud\n    AzureChina: \"https://login.chinacloudapi.cn\",\n    // Microsoft German national/regional cloud (\"Black Forest\")\n    AzureGermany: \"https://login.microsoftonline.de\",\n    // US Government cloud\n    AzureUsGovernment: \"https://login.microsoftonline.us\"\n};\n //# sourceMappingURL=AuthorityOptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eU9wdGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxNQUFNQSxxQkFBcUI7SUFDdkIsdUNBQXVDO0lBQ3ZDQyxNQUFNO0lBQ04sK0JBQStCO0lBQy9CQyxhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCQyxVQUFVO0lBQ1YsNENBQTRDO0lBQzVDQyxZQUFZO0lBQ1osNERBQTREO0lBQzVEQyxjQUFjO0lBQ2Qsc0JBQXNCO0lBQ3RCQyxtQkFBbUI7QUFDdkI7QUFFOEIsQ0FDOUIsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eU9wdGlvbnMubWpzPzQ3YjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQXp1cmVDbG91ZEluc3RhbmNlID0ge1xyXG4gICAgLy8gQXp1cmVDbG91ZEluc3RhbmNlIGlzIG5vdCBzcGVjaWZpZWQuXHJcbiAgICBOb25lOiBcIm5vbmVcIixcclxuICAgIC8vIE1pY3Jvc29mdCBBenVyZSBwdWJsaWMgY2xvdWRcclxuICAgIEF6dXJlUHVibGljOiBcImh0dHBzOi8vbG9naW4ubWljcm9zb2Z0b25saW5lLmNvbVwiLFxyXG4gICAgLy8gTWljcm9zb2Z0IFBQRVxyXG4gICAgQXp1cmVQcGU6IFwiaHR0cHM6Ly9sb2dpbi53aW5kb3dzLXBwZS5uZXRcIixcclxuICAgIC8vIE1pY3Jvc29mdCBDaGluZXNlIG5hdGlvbmFsL3JlZ2lvbmFsIGNsb3VkXHJcbiAgICBBenVyZUNoaW5hOiBcImh0dHBzOi8vbG9naW4uY2hpbmFjbG91ZGFwaS5jblwiLFxyXG4gICAgLy8gTWljcm9zb2Z0IEdlcm1hbiBuYXRpb25hbC9yZWdpb25hbCBjbG91ZCAoXCJCbGFjayBGb3Jlc3RcIilcclxuICAgIEF6dXJlR2VybWFueTogXCJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5kZVwiLFxyXG4gICAgLy8gVVMgR292ZXJubWVudCBjbG91ZFxyXG4gICAgQXp1cmVVc0dvdmVybm1lbnQ6IFwiaHR0cHM6Ly9sb2dpbi5taWNyb3NvZnRvbmxpbmUudXNcIixcclxufTtcblxuZXhwb3J0IHsgQXp1cmVDbG91ZEluc3RhbmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRob3JpdHlPcHRpb25zLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBenVyZUNsb3VkSW5zdGFuY2UiLCJOb25lIiwiQXp1cmVQdWJsaWMiLCJBenVyZVBwZSIsIkF6dXJlQ2hpbmEiLCJBenVyZUdlcm1hbnkiLCJBenVyZVVzR292ZXJubWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthorityType: () => (/* binding */ AuthorityType)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Authority types supported by MSAL.\r\n */ const AuthorityType = {\n    Default: 0,\n    Adfs: 1,\n    Dsts: 2,\n    Ciam: 3\n};\n //# sourceMappingURL=AuthorityType.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0F1dGhvcml0eVR5cGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Q0FFQyxHQUNELE1BQU1BLGdCQUFnQjtJQUNsQkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsTUFBTTtBQUNWO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9BdXRob3JpdHlUeXBlLm1qcz9mZmExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBdXRob3JpdHkgdHlwZXMgc3VwcG9ydGVkIGJ5IE1TQUwuXHJcbiAqL1xyXG5jb25zdCBBdXRob3JpdHlUeXBlID0ge1xyXG4gICAgRGVmYXVsdDogMCxcclxuICAgIEFkZnM6IDEsXHJcbiAgICBEc3RzOiAyLFxyXG4gICAgQ2lhbTogMyxcclxufTtcblxuZXhwb3J0IHsgQXV0aG9yaXR5VHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aG9yaXR5VHlwZS5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aG9yaXR5VHlwZSIsIkRlZmF1bHQiLCJBZGZzIiwiRHN0cyIsIkNpYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCloudInstanceDiscoveryErrorResponse: () => (/* binding */ isCloudInstanceDiscoveryErrorResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isCloudInstanceDiscoveryErrorResponse(response) {\n    return response.hasOwnProperty(\"error\") && response.hasOwnProperty(\"error_description\");\n}\n //# sourceMappingURL=CloudInstanceDiscoveryErrorResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlFcnJvclJlc3BvbnNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0Esc0NBQXNDQyxRQUFRO0lBQ25ELE9BQVFBLFNBQVNDLGNBQWMsQ0FBQyxZQUM1QkQsU0FBU0MsY0FBYyxDQUFDO0FBQ2hDO0FBRWlELENBQ2pELGdFQUFnRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9DbG91ZEluc3RhbmNlRGlzY292ZXJ5RXJyb3JSZXNwb25zZS5tanM/ODRhYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlFcnJvclJlc3BvbnNlKHJlc3BvbnNlKSB7XHJcbiAgICByZXR1cm4gKHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwiZXJyb3JcIikgJiZcclxuICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcImVycm9yX2Rlc2NyaXB0aW9uXCIpKTtcclxufVxuXG5leHBvcnQgeyBpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlFcnJvclJlc3BvbnNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbG91ZEluc3RhbmNlRGlzY292ZXJ5RXJyb3JSZXNwb25zZS5tanMubWFwXG4iXSwibmFtZXMiOlsiaXNDbG91ZEluc3RhbmNlRGlzY292ZXJ5RXJyb3JSZXNwb25zZSIsInJlc3BvbnNlIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCloudInstanceDiscoveryResponse: () => (/* binding */ isCloudInstanceDiscoveryResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isCloudInstanceDiscoveryResponse(response) {\n    return response.hasOwnProperty(\"tenant_discovery_endpoint\") && response.hasOwnProperty(\"metadata\");\n}\n //# sourceMappingURL=CloudInstanceDiscoveryResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELFNBQVNBLGlDQUFpQ0MsUUFBUTtJQUM5QyxPQUFRQSxTQUFTQyxjQUFjLENBQUMsZ0NBQzVCRCxTQUFTQyxjQUFjLENBQUM7QUFDaEM7QUFFNEMsQ0FDNUMsMkRBQTJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZS5tanM/ZWY5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIChyZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcInRlbmFudF9kaXNjb3ZlcnlfZW5kcG9pbnRcIikgJiZcclxuICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcIm1ldGFkYXRhXCIpKTtcclxufVxuXG5leHBvcnQgeyBpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xvdWRJbnN0YW5jZURpc2NvdmVyeVJlc3BvbnNlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc0Nsb3VkSW5zdGFuY2VEaXNjb3ZlcnlSZXNwb25zZSIsInJlc3BvbnNlIiwiaGFzT3duUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isOpenIdConfigResponse: () => (/* binding */ isOpenIdConfigResponse)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function isOpenIdConfigResponse(response) {\n    return response.hasOwnProperty(\"authorization_endpoint\") && response.hasOwnProperty(\"token_endpoint\") && response.hasOwnProperty(\"issuer\") && response.hasOwnProperty(\"jwks_uri\");\n}\n //# sourceMappingURL=OpenIdConfigResponse.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L09wZW5JZENvbmZpZ1Jlc3BvbnNlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0QsU0FBU0EsdUJBQXVCQyxRQUFRO0lBQ3BDLE9BQVFBLFNBQVNDLGNBQWMsQ0FBQyw2QkFDNUJELFNBQVNDLGNBQWMsQ0FBQyxxQkFDeEJELFNBQVNDLGNBQWMsQ0FBQyxhQUN4QkQsU0FBU0MsY0FBYyxDQUFDO0FBQ2hDO0FBRWtDLENBQ2xDLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2F1dGhvcml0eS9PcGVuSWRDb25maWdSZXNwb25zZS5tanM/Y2ZkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc09wZW5JZENvbmZpZ1Jlc3BvbnNlKHJlc3BvbnNlKSB7XHJcbiAgICByZXR1cm4gKHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwiYXV0aG9yaXphdGlvbl9lbmRwb2ludFwiKSAmJlxyXG4gICAgICAgIHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwidG9rZW5fZW5kcG9pbnRcIikgJiZcclxuICAgICAgICByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShcImlzc3VlclwiKSAmJlxyXG4gICAgICAgIHJlc3BvbnNlLmhhc093blByb3BlcnR5KFwiandrc191cmlcIikpO1xyXG59XG5cbmV4cG9ydCB7IGlzT3BlbklkQ29uZmlnUmVzcG9uc2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZW5JZENvbmZpZ1Jlc3BvbnNlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJpc09wZW5JZENvbmZpZ1Jlc3BvbnNlIiwicmVzcG9uc2UiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/OpenIdConfigResponse.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProtocolMode: () => (/* binding */ ProtocolMode)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Protocol modes supported by MSAL.\r\n */ const ProtocolMode = {\n    AAD: \"AAD\",\n    OIDC: \"OIDC\"\n};\n //# sourceMappingURL=ProtocolMode.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L1Byb3RvY29sTW9kZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUEsZUFBZTtJQUNqQkMsS0FBSztJQUNMQyxNQUFNO0FBQ1Y7QUFFd0IsQ0FDeEIseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvYXV0aG9yaXR5L1Byb3RvY29sTW9kZS5tanM/NWQxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUHJvdG9jb2wgbW9kZXMgc3VwcG9ydGVkIGJ5IE1TQUwuXHJcbiAqL1xyXG5jb25zdCBQcm90b2NvbE1vZGUgPSB7XHJcbiAgICBBQUQ6IFwiQUFEXCIsXHJcbiAgICBPSURDOiBcIk9JRENcIixcclxufTtcblxuZXhwb3J0IHsgUHJvdG9jb2xNb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm90b2NvbE1vZGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlByb3RvY29sTW9kZSIsIkFBRCIsIk9JREMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RegionDiscovery: () => (/* binding */ RegionDiscovery)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class RegionDiscovery {\n    constructor(networkInterface, logger, performanceClient, correlationId){\n        this.networkInterface = networkInterface;\n        this.logger = logger;\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */ async detectRegion(environmentRegion, regionDiscoveryMetadata) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\n        // Initialize auto detected region with the region from the envrionment\n        let autodetectedRegionName = environmentRegion;\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\n        if (!autodetectedRegionName) {\n            const options = RegionDiscovery.IMDS_OPTIONS;\n            try {\n                const localIMDSVersionResponse = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getRegionFromIMDS.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_VERSION, options);\n                if (localIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpSuccess) {\n                    autodetectedRegionName = localIMDSVersionResponse.body;\n                    regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.IMDS;\n                }\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\n                if (localIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpBadRequest) {\n                    const currentIMDSVersion = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getCurrentVersion.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);\n                    if (!currentIMDSVersion) {\n                        regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                        return null;\n                    }\n                    const currentIMDSVersionResponse = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.getRegionFromIMDS.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);\n                    if (currentIMDSVersionResponse.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpSuccess) {\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\n                        regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.IMDS;\n                    }\n                }\n            } catch (e) {\n                regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n                return null;\n            }\n        } else {\n            regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n        }\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n        if (!autodetectedRegionName) {\n            regionDiscoveryMetadata.region_source = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RegionDiscoverySources.FAILED_AUTO_DETECTION;\n        }\n        return autodetectedRegionName || null;\n    }\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */ async getRegionFromIMDS(version, options) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\n        return this.networkInterface.sendGetRequestAsync(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_TIMEOUT);\n    }\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */ async getCurrentVersion(options) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\n        try {\n            const response = await this.networkInterface.sendGetRequestAsync(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.IMDS_ENDPOINT}?format=json`, options);\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n            if (response.status === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n                return response.body[\"newest-versions\"][0];\n            }\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n}\n// Options for the IMDS endpoint request\nRegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n        Metadata: \"true\"\n    }\n};\n //# sourceMappingURL=RegionDiscovery.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/authority/RegionDiscovery.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheManager: () => (/* binding */ CacheManager),\n/* harmony export */   DefaultStorageClass: () => (/* binding */ DefaultStorageClass)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/CacheHelpers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../request/ScopeSet.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./entities/AccountEntity.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../account/AccountInfo.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _authority_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../authority/AuthorityMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityMetadata.mjs\");\n/* harmony import */ var _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/CacheError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/CacheErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n * @internal\r\n */ class CacheManager {\n    constructor(clientId, cryptoImpl, logger, staticAuthorityOptions){\n        this.clientId = clientId;\n        this.cryptoImpl = cryptoImpl;\n        this.commonLogger = logger.clone(_packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_0__.version);\n        this.staticAuthorityOptions = staticAuthorityOptions;\n    }\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */ getAllAccounts(accountFilter) {\n        return this.buildTenantProfiles(this.getAccountsFilteredBy(accountFilter || {}), accountFilter);\n    }\n    /**\r\n     * Gets first tenanted AccountInfo object found based on provided filters\r\n     */ getAccountInfoFilteredBy(accountFilter) {\n        const allAccounts = this.getAllAccounts(accountFilter);\n        if (allAccounts.length > 1) {\n            // If one or more accounts are found, prioritize accounts that have an ID token\n            const sortedAccounts = allAccounts.sort((account)=>{\n                return account.idTokenClaims ? -1 : 1;\n            });\n            return sortedAccounts[0];\n        } else if (allAccounts.length === 1) {\n            // If only one account is found, return it regardless of whether a matching ID token was found\n            return allAccounts[0];\n        } else {\n            return null;\n        }\n    }\n    /**\r\n     * Returns a single matching\r\n     * @param accountFilter\r\n     * @returns\r\n     */ getBaseAccountInfo(accountFilter) {\n        const accountEntities = this.getAccountsFilteredBy(accountFilter);\n        if (accountEntities.length > 0) {\n            return accountEntities[0].getAccountInfo();\n        } else {\n            return null;\n        }\n    }\n    /**\r\n     * Matches filtered account entities with cached ID tokens that match the tenant profile-specific account filters\r\n     * and builds the account info objects from the matching ID token's claims\r\n     * @param cachedAccounts\r\n     * @param accountFilter\r\n     * @returns Array of AccountInfo objects that match account and tenant profile filters\r\n     */ buildTenantProfiles(cachedAccounts, accountFilter) {\n        return cachedAccounts.flatMap((accountEntity)=>{\n            return this.getTenantProfilesFromAccountEntity(accountEntity, accountFilter?.tenantId, accountFilter);\n        });\n    }\n    getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, tenantProfileFilter) {\n        let tenantedAccountInfo = null;\n        let idTokenClaims;\n        if (tenantProfileFilter) {\n            if (!this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter)) {\n                return null;\n            }\n        }\n        const idToken = this.getIdToken(accountInfo, tokenKeys, tenantProfile.tenantId);\n        if (idToken) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_1__.extractTokenClaims)(idToken.secret, this.cryptoImpl.base64Decode);\n            if (!this.idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter)) {\n                // ID token sourced claims don't match so this tenant profile is not a match\n                return null;\n            }\n        }\n        // Expand tenant profile into account info based on matching tenant profile and if available matching ID token claims\n        tenantedAccountInfo = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.updateAccountTenantProfileData)(accountInfo, tenantProfile, idTokenClaims, idToken?.secret);\n        return tenantedAccountInfo;\n    }\n    getTenantProfilesFromAccountEntity(accountEntity, targetTenantId, tenantProfileFilter) {\n        const accountInfo = accountEntity.getAccountInfo();\n        let searchTenantProfiles = accountInfo.tenantProfiles || new Map();\n        const tokenKeys = this.getTokenKeys();\n        // If a tenant ID was provided, only return the tenant profile for that tenant ID if it exists\n        if (targetTenantId) {\n            const tenantProfile = searchTenantProfiles.get(targetTenantId);\n            if (tenantProfile) {\n                // Reduce search field to just this tenant profile\n                searchTenantProfiles = new Map([\n                    [\n                        targetTenantId,\n                        tenantProfile\n                    ]\n                ]);\n            } else {\n                // No tenant profile for search tenant ID, return empty array\n                return [];\n            }\n        }\n        const matchingTenantProfiles = [];\n        searchTenantProfiles.forEach((tenantProfile)=>{\n            const tenantedAccountInfo = this.getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, tenantProfileFilter);\n            if (tenantedAccountInfo) {\n                matchingTenantProfiles.push(tenantedAccountInfo);\n            }\n        });\n        return matchingTenantProfiles;\n    }\n    tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter) {\n        if (!!tenantProfileFilter.localAccountId && !this.matchLocalAccountIdFromTenantProfile(tenantProfile, tenantProfileFilter.localAccountId)) {\n            return false;\n        }\n        if (!!tenantProfileFilter.name && !(tenantProfile.name === tenantProfileFilter.name)) {\n            return false;\n        }\n        if (tenantProfileFilter.isHomeTenant !== undefined && !(tenantProfile.isHomeTenant === tenantProfileFilter.isHomeTenant)) {\n            return false;\n        }\n        return true;\n    }\n    idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter) {\n        // Tenant Profile filtering\n        if (tenantProfileFilter) {\n            if (!!tenantProfileFilter.localAccountId && !this.matchLocalAccountIdFromTokenClaims(idTokenClaims, tenantProfileFilter.localAccountId)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.loginHint && !this.matchLoginHintFromTokenClaims(idTokenClaims, tenantProfileFilter.loginHint)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.username && !this.matchUsername(idTokenClaims.preferred_username, tenantProfileFilter.username)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.name && !this.matchName(idTokenClaims, tenantProfileFilter.name)) {\n                return false;\n            }\n            if (!!tenantProfileFilter.sid && !this.matchSid(idTokenClaims, tenantProfileFilter.sid)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord {CacheRecord}\r\n     * @param storeInCache {?StoreInCache}\r\n     * @param correlationId {?string} correlation id\r\n     */ async saveCacheRecord(cacheRecord, storeInCache, correlationId) {\n        if (!cacheRecord) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.invalidCacheRecord);\n        }\n        try {\n            if (!!cacheRecord.account) {\n                this.setAccount(cacheRecord.account);\n            }\n            if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\n                this.setIdTokenCredential(cacheRecord.idToken);\n            }\n            if (!!cacheRecord.accessToken && storeInCache?.accessToken !== false) {\n                await this.saveAccessToken(cacheRecord.accessToken);\n            }\n            if (!!cacheRecord.refreshToken && storeInCache?.refreshToken !== false) {\n                this.setRefreshTokenCredential(cacheRecord.refreshToken);\n            }\n            if (!!cacheRecord.appMetadata) {\n                this.setAppMetadata(cacheRecord.appMetadata);\n            }\n        } catch (e) {\n            this.commonLogger?.error(`CacheManager.saveCacheRecord: failed`);\n            if (e instanceof Error) {\n                this.commonLogger?.errorPii(`CacheManager.saveCacheRecord: ${e.message}`, correlationId);\n                if (e.name === \"QuotaExceededError\" || e.name === \"NS_ERROR_DOM_QUOTA_REACHED\" || e.message.includes(\"exceeded the quota\")) {\n                    this.commonLogger?.error(`CacheManager.saveCacheRecord: exceeded storage quota`, correlationId);\n                    throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(_error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cacheQuotaExceededErrorCode);\n                } else {\n                    throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(e.name, e.message);\n                }\n            } else {\n                this.commonLogger?.errorPii(`CacheManager.saveCacheRecord: ${e}`, correlationId);\n                throw new _error_CacheError_mjs__WEBPACK_IMPORTED_MODULE_5__.CacheError(_error_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.cacheUnknownErrorCode);\n            }\n        }\n    }\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */ async saveAccessToken(credential) {\n        const accessTokenFilter = {\n            clientId: credential.clientId,\n            credentialType: credential.credentialType,\n            environment: credential.environment,\n            homeAccountId: credential.homeAccountId,\n            realm: credential.realm,\n            tokenType: credential.tokenType,\n            requestedClaimsHash: credential.requestedClaimsHash\n        };\n        const tokenKeys = this.getTokenKeys();\n        const currentScopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(credential.target);\n        const removedAccessTokens = [];\n        tokenKeys.accessToken.forEach((key)=>{\n            if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\n                return;\n            }\n            const tokenEntity = this.getAccessTokenCredential(key);\n            if (tokenEntity && this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\n                const tokenScopeSet = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(tokenEntity.target);\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n                    removedAccessTokens.push(this.removeAccessToken(key));\n                }\n            }\n        });\n        await Promise.all(removedAccessTokens);\n        this.setAccessTokenCredential(credential);\n    }\n    /**\r\n     * Retrieve account entities matching all provided tenant-agnostic filters; if no filter is set, get all account entities in the cache\r\n     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param accountFilter - An object containing Account properties to filter by\r\n     */ getAccountsFilteredBy(accountFilter) {\n        const allAccountKeys = this.getAccountKeys();\n        const matchingAccounts = [];\n        allAccountKeys.forEach((cacheKey)=>{\n            if (!this.isAccountKey(cacheKey, accountFilter.homeAccountId)) {\n                // Don't parse value if the key doesn't match the account filters\n                return;\n            }\n            const entity = this.getAccount(cacheKey, this.commonLogger);\n            // Match base account fields\n            if (!entity) {\n                return;\n            }\n            if (!!accountFilter.homeAccountId && !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\n                return;\n            }\n            if (!!accountFilter.username && !this.matchUsername(entity.username, accountFilter.username)) {\n                return;\n            }\n            if (!!accountFilter.environment && !this.matchEnvironment(entity, accountFilter.environment)) {\n                return;\n            }\n            if (!!accountFilter.realm && !this.matchRealm(entity, accountFilter.realm)) {\n                return;\n            }\n            if (!!accountFilter.nativeAccountId && !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\n                return;\n            }\n            if (!!accountFilter.authorityType && !this.matchAuthorityType(entity, accountFilter.authorityType)) {\n                return;\n            }\n            // If at least one tenant profile matches the tenant profile filter, add the account to the list of matching accounts\n            const tenantProfileFilter = {\n                localAccountId: accountFilter?.localAccountId,\n                name: accountFilter?.name\n            };\n            const matchingTenantProfiles = entity.tenantProfiles?.filter((tenantProfile)=>{\n                return this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter);\n            });\n            if (matchingTenantProfiles && matchingTenantProfiles.length === 0) {\n                // No tenant profile for this account matches filter, don't add to list of matching accounts\n                return;\n            }\n            matchingAccounts.push(entity);\n        });\n        return matchingAccounts;\n    }\n    /**\r\n     * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided\r\n     * @param key\r\n     * @param homeAccountId\r\n     * @param tenantId\r\n     * @returns\r\n     */ isAccountKey(key, homeAccountId, tenantId) {\n        if (key.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR).length < 3) {\n            // Account cache keys contain 3 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n        if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {\n            return false;\n        }\n        if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {\n            return false;\n        }\n        // Do not check environment as aliasing can cause false negatives\n        return true;\n    }\n    /**\r\n     * Returns true if the given key matches our credential key schema.\r\n     * @param key\r\n     */ isCredentialKey(key) {\n        if (key.split(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR).length < 6) {\n            // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')\n            return false;\n        }\n        const lowerCaseKey = key.toLowerCase();\n        // Credential keys must indicate what credential type they represent\n        if (lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ID_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 && lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {\n            return false;\n        }\n        if (lowerCaseKey.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {\n            // Refresh tokens must contain the client id or family id\n            const clientIdValidation = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}${this.clientId}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}`;\n            const familyIdValidation = `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.Separators.CACHE_KEY_SEPARATOR}`;\n            if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {\n                return false;\n            }\n        } else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {\n            // Tokens must contain the clientId\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity\r\n     * @param filter\r\n     * @returns\r\n     */ credentialMatchesFilter(entity, filter) {\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n            return false;\n        }\n        if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\n            return false;\n        }\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */ if (typeof filter.homeAccountId === \"string\" && !this.matchHomeAccountId(entity, filter.homeAccountId)) {\n            return false;\n        }\n        if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n            return false;\n        }\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\n            return false;\n        }\n        if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {\n            return false;\n        }\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\n            return false;\n        }\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */ if (!!filter.target && !this.matchTarget(entity, filter.target)) {\n            return false;\n        }\n        // If request OR cached entity has requested Claims Hash, check if they match\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\n            // Don't match if either is undefined or they are different\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\n                return false;\n            }\n        }\n        // Access Token with Auth Scheme specific matching\n        if (entity.credentialType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\n            if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {\n                return false;\n            }\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\n            if (filter.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.SSH) {\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */ getAppMetadataFilteredBy(filter) {\n        const allCacheKeys = this.getKeys();\n        const matchingAppMetadata = {};\n        allCacheKeys.forEach((cacheKey)=>{\n            // don't parse any non-appMetadata type cache entities\n            if (!this.isAppMetadata(cacheKey)) {\n                return;\n            }\n            // Attempt retrieval\n            const entity = this.getAppMetadata(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {\n                return;\n            }\n            if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\n                return;\n            }\n            matchingAppMetadata[cacheKey] = entity;\n        });\n        return matchingAppMetadata;\n    }\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */ getAuthorityMetadataByAlias(host) {\n        const allCacheKeys = this.getAuthorityMetadataKeys();\n        let matchedEntity = null;\n        allCacheKeys.forEach((cacheKey)=>{\n            // don't parse any non-authorityMetadata type cache entities\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\n                return;\n            }\n            // Attempt retrieval\n            const entity = this.getAuthorityMetadata(cacheKey);\n            if (!entity) {\n                return;\n            }\n            if (entity.aliases.indexOf(host) === -1) {\n                return;\n            }\n            matchedEntity = entity;\n        });\n        return matchedEntity;\n    }\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */ async removeAllAccounts() {\n        const allAccountKeys = this.getAccountKeys();\n        const removedAccounts = [];\n        allAccountKeys.forEach((cacheKey)=>{\n            removedAccounts.push(this.removeAccount(cacheKey));\n        });\n        await Promise.all(removedAccounts);\n    }\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */ async removeAccount(accountKey) {\n        const account = this.getAccount(accountKey, this.commonLogger);\n        if (!account) {\n            return;\n        }\n        await this.removeAccountContext(account);\n        this.removeItem(accountKey);\n    }\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */ async removeAccountContext(account) {\n        const allTokenKeys = this.getTokenKeys();\n        const accountId = account.generateAccountId();\n        const removedCredentials = [];\n        allTokenKeys.idToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                this.removeIdToken(key);\n            }\n        });\n        allTokenKeys.accessToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                removedCredentials.push(this.removeAccessToken(key));\n            }\n        });\n        allTokenKeys.refreshToken.forEach((key)=>{\n            if (key.indexOf(accountId) === 0) {\n                this.removeRefreshToken(key);\n            }\n        });\n        await Promise.all(removedCredentials);\n    }\n    /**\r\n     * Migrates a single-tenant account and all it's associated alternate cross-tenant account objects in the\r\n     * cache into a condensed multi-tenant account object with tenant profiles.\r\n     * @param accountKey\r\n     * @param accountEntity\r\n     * @param logger\r\n     * @returns\r\n     */ updateOutdatedCachedAccount(accountKey, accountEntity, logger) {\n        // Only update if account entity is defined and has no tenantProfiles object (is outdated)\n        if (accountEntity && accountEntity.isSingleTenant()) {\n            this.commonLogger?.verbose(\"updateOutdatedCachedAccount: Found a single-tenant (outdated) account entity in the cache, migrating to multi-tenant account entity\");\n            // Get keys of all accounts belonging to user\n            const matchingAccountKeys = this.getAccountKeys().filter((key)=>{\n                return key.startsWith(accountEntity.homeAccountId);\n            });\n            // Get all account entities belonging to user\n            const accountsToMerge = [];\n            matchingAccountKeys.forEach((key)=>{\n                const account = this.getCachedAccountEntity(key);\n                if (account) {\n                    accountsToMerge.push(account);\n                }\n            });\n            // Set base account to home account if available, any account if not\n            const baseAccount = accountsToMerge.find((account)=>{\n                return (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.tenantIdMatchesHomeTenant)(account.realm, account.homeAccountId);\n            }) || accountsToMerge[0];\n            // Populate tenant profiles built from each account entity belonging to the user\n            baseAccount.tenantProfiles = accountsToMerge.map((account)=>{\n                return {\n                    tenantId: account.realm,\n                    localAccountId: account.localAccountId,\n                    name: account.name,\n                    isHomeTenant: (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_2__.tenantIdMatchesHomeTenant)(account.realm, account.homeAccountId)\n                };\n            });\n            const updatedAccount = CacheManager.toObject(new _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__.AccountEntity(), {\n                ...baseAccount\n            });\n            const newAccountKey = updatedAccount.generateAccountKey();\n            // Clear cache of legacy account objects that have been collpsed into tenant profiles\n            matchingAccountKeys.forEach((key)=>{\n                if (key !== newAccountKey) {\n                    this.removeOutdatedAccount(accountKey);\n                }\n            });\n            // Cache updated account object\n            this.setAccount(updatedAccount);\n            logger?.verbose(\"Updated an outdated account entity in the cache\");\n            return updatedAccount;\n        }\n        // No update is necessary\n        return accountEntity;\n    }\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */ async removeAccessToken(key) {\n        const credential = this.getAccessTokenCredential(key);\n        if (!credential) {\n            return;\n        }\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\n        if (credential.credentialType.toLowerCase() === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) {\n            if (credential.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.POP) {\n                const accessTokenWithAuthSchemeEntity = credential;\n                const kid = accessTokenWithAuthSchemeEntity.keyId;\n                if (kid) {\n                    try {\n                        await this.cryptoImpl.removeTokenBindingKey(kid);\n                    } catch (error) {\n                        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.bindingKeyNotRemoved);\n                    }\n                }\n            }\n        }\n        return this.removeItem(key);\n    }\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */ removeAppMetadata() {\n        const allCacheKeys = this.getKeys();\n        allCacheKeys.forEach((cacheKey)=>{\n            if (this.isAppMetadata(cacheKey)) {\n                this.removeItem(cacheKey);\n            }\n        });\n        return true;\n    }\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */ readAccountFromCache(account) {\n        const accountKey = _entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_9__.AccountEntity.generateAccountCacheKey(account);\n        return this.getAccount(accountKey, this.commonLogger);\n    }\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param targetRealm {?string}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getIdToken(account, tokenKeys, targetRealm, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\n        const idTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ID_TOKEN,\n            clientId: this.clientId,\n            realm: targetRealm\n        };\n        const idTokenMap = this.getIdTokensByFilter(idTokenFilter, tokenKeys);\n        const numIdTokens = idTokenMap.size;\n        if (numIdTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\n            return null;\n        } else if (numIdTokens > 1) {\n            let tokensToBeRemoved = idTokenMap;\n            // Multiple tenant profiles and no tenant specified, pick home account\n            if (!targetRealm) {\n                const homeIdTokenMap = new Map();\n                idTokenMap.forEach((idToken, key)=>{\n                    if (idToken.realm === account.tenantId) {\n                        homeIdTokenMap.set(key, idToken);\n                    }\n                });\n                const numHomeIdTokens = homeIdTokenMap.size;\n                if (numHomeIdTokens < 1) {\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result\");\n                    return idTokenMap.values().next().value;\n                } else if (numHomeIdTokens === 1) {\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile\");\n                    return homeIdTokenMap.values().next().value;\n                } else {\n                    // Multiple ID tokens for home tenant profile, remove all and return null\n                    tokensToBeRemoved = homeIdTokenMap;\n                }\n            }\n            // Multiple tokens for a single tenant profile, remove all and return null\n            this.commonLogger.info(\"CacheManager:getIdToken - Multiple matching ID tokens found, clearing them\");\n            tokensToBeRemoved.forEach((idToken, key)=>{\n                this.removeIdToken(key);\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields({\n                    multiMatchedID: idTokenMap.size\n                }, correlationId);\n            }\n            return null;\n        }\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning ID token\");\n        return idTokenMap.values().next().value;\n    }\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter\r\n     * @returns\r\n     */ getIdTokensByFilter(filter, tokenKeys) {\n        const idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;\n        const idTokens = new Map();\n        idTokenKeys.forEach((key)=>{\n            if (!this.idTokenKeyMatchesFilter(key, {\n                clientId: this.clientId,\n                ...filter\n            })) {\n                return;\n            }\n            const idToken = this.getIdTokenCredential(key);\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\n                idTokens.set(key, idToken);\n            }\n        });\n        return idTokens;\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @returns\r\n     */ idTokenKeyMatchesFilter(inputKey, filter) {\n        const key = inputKey.toLowerCase();\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key\r\n     */ removeIdToken(key) {\n        this.removeItem(key);\n    }\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key\r\n     */ removeRefreshToken(key) {\n        this.removeItem(key);\n    }\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param request {BaseAuthRequest}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getAccessToken(account, request, tokenKeys, targetRealm, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\");\n        const scopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.createSearchScopes(request.scopes);\n        const authScheme = request.authenticationScheme || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.BEARER;\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */ const credentialType = authScheme && authScheme.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AuthenticationScheme.BEARER.toLowerCase() ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN;\n        const accessTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: credentialType,\n            clientId: this.clientId,\n            realm: targetRealm || account.tenantId,\n            target: scopes,\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash\n        };\n        const accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;\n        const accessTokens = [];\n        accessTokenKeys.forEach((key)=>{\n            // Validate key\n            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\n                const accessToken = this.getAccessTokenCredential(key);\n                // Validate value\n                if (accessToken && this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\n                    accessTokens.push(accessToken);\n                }\n            }\n        });\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\");\n            return null;\n        } else if (numAccessTokens > 1) {\n            this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\");\n            accessTokens.forEach((accessToken)=>{\n                void this.removeAccessToken((0,_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_10__.generateCredentialKey)(accessToken));\n            });\n            if (performanceClient && correlationId) {\n                performanceClient.addFields({\n                    multiMatchedAT: accessTokens.length\n                }, correlationId);\n            }\n            return null;\n        }\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\");\n        return accessTokens[0];\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @param keyMustContainAllScopes\r\n     * @returns\r\n     */ accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {\n        const key = inputKey.toLowerCase();\n        if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.target) {\n            const scopes = filter.target.asArray();\n            for(let i = 0; i < scopes.length; i++){\n                if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {\n                    // When performing a cache lookup a missing scope would be a cache miss\n                    return false;\n                } else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\n                    return true;\n                }\n            }\n        }\n        return true;\n    }\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter\r\n     * @returns\r\n     */ getAccessTokensByFilter(filter) {\n        const tokenKeys = this.getTokenKeys();\n        const accessTokens = [];\n        tokenKeys.accessToken.forEach((key)=>{\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\n                return;\n            }\n            const accessToken = this.getAccessTokenCredential(key);\n            if (accessToken && this.credentialMatchesFilter(accessToken, filter)) {\n                accessTokens.push(accessToken);\n            }\n        });\n        return accessTokens;\n    }\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param account {AccountInfo}\r\n     * @param familyRT {boolean}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */ getRefreshToken(account, familyRT, tokenKeys, performanceClient, correlationId) {\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\n        const id = familyRT ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID : undefined;\n        const refreshTokenFilter = {\n            homeAccountId: account.homeAccountId,\n            environment: account.environment,\n            credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.REFRESH_TOKEN,\n            clientId: this.clientId,\n            familyId: id\n        };\n        const refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;\n        const refreshTokens = [];\n        refreshTokenKeys.forEach((key)=>{\n            // Validate key\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\n                const refreshToken = this.getRefreshTokenCredential(key);\n                // Validate value\n                if (refreshToken && this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\n                    refreshTokens.push(refreshToken);\n                }\n            }\n        });\n        const numRefreshTokens = refreshTokens.length;\n        if (numRefreshTokens < 1) {\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\n            return null;\n        }\n        // address the else case after remove functions address environment aliases\n        if (numRefreshTokens > 1 && performanceClient && correlationId) {\n            performanceClient.addFields({\n                multiMatchedRT: numRefreshTokens\n            }, correlationId);\n        }\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\n        return refreshTokens[0];\n    }\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */ refreshTokenKeyMatchesFilter(inputKey, filter) {\n        const key = inputKey.toLowerCase();\n        if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {\n            return false;\n        }\n        // If familyId is used, clientId is not in the key\n        if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {\n            return false;\n        }\n        if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\n            return false;\n        }\n        return true;\n    }\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */ readAppMetadataFromCache(environment) {\n        const appMetadataFilter = {\n            environment,\n            clientId: this.clientId\n        };\n        const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n        const appMetadataEntries = Object.keys(appMetadata).map((key)=>appMetadata[key]);\n        const numAppMetadata = appMetadataEntries.length;\n        if (numAppMetadata < 1) {\n            return null;\n        } else if (numAppMetadata > 1) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.multipleMatchingAppMetadata);\n        }\n        return appMetadataEntries[0];\n    }\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */ isAppMetadataFOCI(environment) {\n        const appMetadata = this.readAppMetadataFromCache(environment);\n        return !!(appMetadata && appMetadata.familyId === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.THE_FAMILY_ID);\n    }\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */ matchHomeAccountId(entity, homeAccountId) {\n        return !!(typeof entity.homeAccountId === \"string\" && homeAccountId === entity.homeAccountId);\n    }\n    /**\r\n     * helper to match account ids\r\n     * @param entity\r\n     * @param localAccountId\r\n     * @returns\r\n     */ matchLocalAccountIdFromTokenClaims(tokenClaims, localAccountId) {\n        const idTokenLocalAccountId = tokenClaims.oid || tokenClaims.sub;\n        return localAccountId === idTokenLocalAccountId;\n    }\n    matchLocalAccountIdFromTenantProfile(tenantProfile, localAccountId) {\n        return tenantProfile.localAccountId === localAccountId;\n    }\n    /**\r\n     * helper to match names\r\n     * @param entity\r\n     * @param name\r\n     * @returns true if the downcased name properties are present and match in the filter and the entity\r\n     */ matchName(claims, name) {\n        return !!(name.toLowerCase() === claims.name?.toLowerCase());\n    }\n    /**\r\n     * helper to match usernames\r\n     * @param entity\r\n     * @param username\r\n     * @returns\r\n     */ matchUsername(cachedUsername, filterUsername) {\n        return !!(cachedUsername && typeof cachedUsername === \"string\" && filterUsername?.toLowerCase() === cachedUsername.toLowerCase());\n    }\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */ matchUserAssertionHash(entity, userAssertionHash) {\n        return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);\n    }\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */ matchEnvironment(entity, environment) {\n        // Check static authority options first for cases where authority metadata has not been resolved and cached yet\n        if (this.staticAuthorityOptions) {\n            const staticAliases = (0,_authority_AuthorityMetadata_mjs__WEBPACK_IMPORTED_MODULE_11__.getAliasesFromStaticSources)(this.staticAuthorityOptions, this.commonLogger);\n            if (staticAliases.includes(environment) && staticAliases.includes(entity.environment)) {\n                return true;\n            }\n        }\n        // Query metadata cache if no static authority configuration has aliases that match enviroment\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n            return true;\n        }\n        return false;\n    }\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */ matchCredentialType(entity, credentialType) {\n        return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n    }\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */ matchClientId(entity, clientId) {\n        return !!(entity.clientId && clientId === entity.clientId);\n    }\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */ matchFamilyId(entity, familyId) {\n        return !!(entity.familyId && familyId === entity.familyId);\n    }\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */ matchRealm(entity, realm) {\n        return !!(entity.realm?.toLowerCase() === realm.toLowerCase());\n    }\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */ matchNativeAccountId(entity, nativeAccountId) {\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\n    }\n    /**\r\n     * helper to match loginHint which can be either:\r\n     * 1. login_hint ID token claim\r\n     * 2. username in cached account object\r\n     * 3. upn in ID token claims\r\n     * @param entity\r\n     * @param loginHint\r\n     * @returns\r\n     */ matchLoginHintFromTokenClaims(tokenClaims, loginHint) {\n        if (tokenClaims.login_hint === loginHint) {\n            return true;\n        }\n        if (tokenClaims.preferred_username === loginHint) {\n            return true;\n        }\n        if (tokenClaims.upn === loginHint) {\n            return true;\n        }\n        return false;\n    }\n    /**\r\n     * Helper to match sid\r\n     * @param entity\r\n     * @param sid\r\n     * @returns true if the sid claim is present and matches the filter\r\n     */ matchSid(idTokenClaims, sid) {\n        return idTokenClaims.sid === sid;\n    }\n    matchAuthorityType(entity, authorityType) {\n        return !!(entity.authorityType && authorityType.toLowerCase() === entity.authorityType.toLowerCase());\n    }\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */ matchTarget(entity, target) {\n        const isNotAccessTokenCredential = entity.credentialType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN && entity.credentialType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        if (isNotAccessTokenCredential || !entity.target) {\n            return false;\n        }\n        const entityScopeSet = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_7__.ScopeSet.fromString(entity.target);\n        return entityScopeSet.containsScopeSet(target);\n    }\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */ matchTokenType(entity, tokenType) {\n        return !!(entity.tokenType && entity.tokenType === tokenType);\n    }\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param keyId\r\n     */ matchKeyId(entity, keyId) {\n        return !!(entity.keyId && entity.keyId === keyId);\n    }\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */ isAppMetadata(key) {\n        return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.APP_METADATA) !== -1;\n    }\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */ isAuthorityMetadata(key) {\n        return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n    }\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */ generateAuthorityMetadataCacheKey(authority) {\n        return `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_8__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\n    }\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */ static toObject(obj, json) {\n        for(const propertyName in json){\n            obj[propertyName] = json[propertyName];\n        }\n        return obj;\n    }\n}\n/** @internal */ class DefaultStorageClass extends CacheManager {\n    setAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getCachedAccountEntity() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setIdTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getIdTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAccessTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccessTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setRefreshTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getRefreshTokenCredential() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAppMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAppMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setServerTelemetry() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getServerTelemetry() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setAuthorityMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAuthorityMetadata() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAuthorityMetadataKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    setThrottlingCache() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getThrottlingCache() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    removeItem() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getAccountKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    getTokenKeys() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    updateCredentialCacheKey() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n    removeOutdatedAccount() {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.methodNotImplemented);\n    }\n}\n //# sourceMappingURL=CacheManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountEntity: () => (/* binding */ AccountEntity)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../account/ClientInfo.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../account/AccountInfo.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../authority/AuthorityType.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityType.mjs\");\n/* harmony import */ var _account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../account/TokenClaims.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\");\n/* harmony import */ var _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../authority/ProtocolMode.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      nativeAccountId: Account identifier on the native device\r\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\r\n * }\r\n * @internal\r\n */ class AccountEntity {\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */ generateAccountId() {\n        const accountId = [\n            this.homeAccountId,\n            this.environment\n        ];\n        return accountId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */ generateAccountKey() {\n        return AccountEntity.generateAccountCacheKey({\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId\n        });\n    }\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */ getAccountInfo() {\n        return {\n            homeAccountId: this.homeAccountId,\n            environment: this.environment,\n            tenantId: this.realm,\n            username: this.username,\n            localAccountId: this.localAccountId,\n            name: this.name,\n            nativeAccountId: this.nativeAccountId,\n            authorityType: this.authorityType,\n            // Deserialize tenant profiles array into a Map\n            tenantProfiles: new Map((this.tenantProfiles || []).map((tenantProfile)=>{\n                return [\n                    tenantProfile.tenantId,\n                    tenantProfile\n                ];\n            }))\n        };\n    }\n    /**\r\n     * Returns true if the account entity is in single tenant format (outdated), false otherwise\r\n     */ isSingleTenant() {\n        return !this.tenantProfiles;\n    }\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */ static generateAccountCacheKey(accountInterface) {\n        const homeTenantId = accountInterface.homeAccountId.split(\".\")[1];\n        const accountKey = [\n            accountInterface.homeAccountId,\n            accountInterface.environment || \"\",\n            homeTenantId || accountInterface.tenantId || \"\"\n        ];\n        return accountKey.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n    }\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param accountDetails\r\n     */ static createAccount(accountDetails, authority, base64Decode) {\n        const account = new AccountEntity();\n        if (authority.authorityType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Adfs) {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.ADFS_ACCOUNT_TYPE;\n        } else if (authority.protocolMode === _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_2__.ProtocolMode.AAD) {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.MSSTS_ACCOUNT_TYPE;\n        } else {\n            account.authorityType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        }\n        let clientInfo;\n        if (accountDetails.clientInfo && base64Decode) {\n            clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__.buildClientInfo)(accountDetails.clientInfo, base64Decode);\n        }\n        account.clientInfo = accountDetails.clientInfo;\n        account.homeAccountId = accountDetails.homeAccountId;\n        account.nativeAccountId = accountDetails.nativeAccountId;\n        const env = accountDetails.environment || authority && authority.getPreferredCache();\n        if (!env) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.invalidCacheEnvironment);\n        }\n        account.environment = env;\n        // non AAD scenarios can have empty realm\n        account.realm = clientInfo?.utid || (0,_account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_6__.getTenantIdFromIdTokenClaims)(accountDetails.idTokenClaims) || \"\";\n        // How do you account for MSA CID here?\n        account.localAccountId = clientInfo?.uid || accountDetails.idTokenClaims?.oid || accountDetails.idTokenClaims?.sub || \"\";\n        /*\r\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n         * policy is configured to return more than 1 email.\r\n         */ const preferredUsername = accountDetails.idTokenClaims?.preferred_username || accountDetails.idTokenClaims?.upn;\n        const email = accountDetails.idTokenClaims?.emails ? accountDetails.idTokenClaims.emails[0] : null;\n        account.username = preferredUsername || email || \"\";\n        account.name = accountDetails.idTokenClaims?.name || \"\";\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\n        account.msGraphHost = accountDetails.msGraphHost;\n        if (accountDetails.tenantProfiles) {\n            account.tenantProfiles = accountDetails.tenantProfiles;\n        } else {\n            const tenantProfile = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_7__.buildTenantProfile)(accountDetails.homeAccountId, account.localAccountId, account.realm, accountDetails.idTokenClaims);\n            account.tenantProfiles = [\n                tenantProfile\n            ];\n        }\n        return account;\n    }\n    /**\r\n     * Creates an AccountEntity object from AccountInfo\r\n     * @param accountInfo\r\n     * @param cloudGraphHostName\r\n     * @param msGraphHost\r\n     * @returns\r\n     */ static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\n        const account = new AccountEntity();\n        account.authorityType = accountInfo.authorityType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheAccountType.GENERIC_ACCOUNT_TYPE;\n        account.homeAccountId = accountInfo.homeAccountId;\n        account.localAccountId = accountInfo.localAccountId;\n        account.nativeAccountId = accountInfo.nativeAccountId;\n        account.realm = accountInfo.tenantId;\n        account.environment = accountInfo.environment;\n        account.username = accountInfo.username;\n        account.name = accountInfo.name;\n        account.cloudGraphHostName = cloudGraphHostName;\n        account.msGraphHost = msGraphHost;\n        // Serialize tenant profiles map into an array\n        account.tenantProfiles = Array.from(accountInfo.tenantProfiles?.values() || []);\n        return account;\n    }\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */ static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\n        // since ADFS/DSTS do not have tid and does not set client_info\n        if (!(authType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Adfs || authType === _authority_AuthorityType_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthorityType.Dsts)) {\n            // for cases where there is clientInfo\n            if (serverClientInfo) {\n                try {\n                    const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_3__.buildClientInfo)(serverClientInfo, cryptoObj.base64Decode);\n                    if (clientInfo.uid && clientInfo.utid) {\n                        return `${clientInfo.uid}.${clientInfo.utid}`;\n                    }\n                } catch (e) {}\n            }\n            logger.warning(\"No client info in response\");\n        }\n        // default to \"sub\" claim\n        return idTokenClaims?.sub || \"\";\n    }\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */ static isAccountEntity(entity) {\n        if (!entity) {\n            return false;\n        }\n        return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n    }\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */ static accountInfoIsEqual(accountA, accountB, compareClaims) {\n        if (!accountA || !accountB) {\n            return false;\n        }\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n        if (compareClaims) {\n            const accountAClaims = accountA.idTokenClaims || {};\n            const accountBClaims = accountB.idTokenClaims || {};\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\n            claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n        }\n        return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && accountA.nativeAccountId === accountB.nativeAccountId && claimsMatch;\n    }\n}\n //# sourceMappingURL=AccountEntity.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenCacheContext: () => (/* binding */ TokenCacheContext)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class instance helps track the memory changes facilitating\r\n * decisions to read from and write to the persistent cache\r\n */ class TokenCacheContext {\n    constructor(tokenCache, hasChanged){\n        this.cache = tokenCache;\n        this.hasChanged = hasChanged;\n    }\n    /**\r\n     * boolean which indicates the changes in cache\r\n     */ get cacheHasChanged() {\n        return this.hasChanged;\n    }\n    /**\r\n     * function to retrieve the token cache\r\n     */ get tokenCache() {\n        return this.cache;\n    }\n}\n //# sourceMappingURL=TokenCacheContext.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY2FjaGUvcGVyc2lzdGVuY2UvVG9rZW5DYWNoZUNvbnRleHQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7O0NBR0MsR0FBRyxNQUFNQTtJQUNOQyxZQUFZQyxVQUFVLEVBQUVDLFVBQVUsQ0FBRTtRQUNoQyxJQUFJLENBQUNDLEtBQUssR0FBR0Y7UUFDYixJQUFJLENBQUNDLFVBQVUsR0FBR0E7SUFDdEI7SUFDQTs7S0FFQyxHQUNELElBQUlFLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQ0YsVUFBVTtJQUMxQjtJQUNBOztLQUVDLEdBQ0QsSUFBSUQsYUFBYTtRQUNiLE9BQU8sSUFBSSxDQUFDRSxLQUFLO0lBQ3JCO0FBQ0o7QUFFNkIsQ0FDN0IsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY2FjaGUvcGVyc2lzdGVuY2UvVG9rZW5DYWNoZUNvbnRleHQubWpzPzlkNjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgaW5zdGFuY2UgaGVscHMgdHJhY2sgdGhlIG1lbW9yeSBjaGFuZ2VzIGZhY2lsaXRhdGluZ1xyXG4gKiBkZWNpc2lvbnMgdG8gcmVhZCBmcm9tIGFuZCB3cml0ZSB0byB0aGUgcGVyc2lzdGVudCBjYWNoZVxyXG4gKi8gY2xhc3MgVG9rZW5DYWNoZUNvbnRleHQge1xyXG4gICAgY29uc3RydWN0b3IodG9rZW5DYWNoZSwgaGFzQ2hhbmdlZCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGUgPSB0b2tlbkNhY2hlO1xyXG4gICAgICAgIHRoaXMuaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGJvb2xlYW4gd2hpY2ggaW5kaWNhdGVzIHRoZSBjaGFuZ2VzIGluIGNhY2hlXHJcbiAgICAgKi9cclxuICAgIGdldCBjYWNoZUhhc0NoYW5nZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQ2hhbmdlZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gcmV0cmlldmUgdGhlIHRva2VuIGNhY2hlXHJcbiAgICAgKi9cclxuICAgIGdldCB0b2tlbkNhY2hlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFRva2VuQ2FjaGVDb250ZXh0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ub2tlbkNhY2hlQ29udGV4dC5tanMubWFwXG4iXSwibmFtZXMiOlsiVG9rZW5DYWNoZUNvbnRleHQiLCJjb25zdHJ1Y3RvciIsInRva2VuQ2FjaGUiLCJoYXNDaGFuZ2VkIiwiY2FjaGUiLCJjYWNoZUhhc0NoYW5nZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAccessTokenEntity: () => (/* binding */ createAccessTokenEntity),\n/* harmony export */   createIdTokenEntity: () => (/* binding */ createIdTokenEntity),\n/* harmony export */   createRefreshTokenEntity: () => (/* binding */ createRefreshTokenEntity),\n/* harmony export */   generateAppMetadataKey: () => (/* binding */ generateAppMetadataKey),\n/* harmony export */   generateAuthorityMetadataExpiresAt: () => (/* binding */ generateAuthorityMetadataExpiresAt),\n/* harmony export */   generateCredentialKey: () => (/* binding */ generateCredentialKey),\n/* harmony export */   isAccessTokenEntity: () => (/* binding */ isAccessTokenEntity),\n/* harmony export */   isAppMetadataEntity: () => (/* binding */ isAppMetadataEntity),\n/* harmony export */   isAuthorityMetadataEntity: () => (/* binding */ isAuthorityMetadataEntity),\n/* harmony export */   isAuthorityMetadataExpired: () => (/* binding */ isAuthorityMetadataExpired),\n/* harmony export */   isCredentialEntity: () => (/* binding */ isCredentialEntity),\n/* harmony export */   isIdTokenEntity: () => (/* binding */ isIdTokenEntity),\n/* harmony export */   isRefreshTokenEntity: () => (/* binding */ isRefreshTokenEntity),\n/* harmony export */   isServerTelemetryEntity: () => (/* binding */ isServerTelemetryEntity),\n/* harmony export */   isThrottlingEntity: () => (/* binding */ isThrottlingEntity),\n/* harmony export */   updateAuthorityEndpointMetadata: () => (/* binding */ updateAuthorityEndpointMetadata),\n/* harmony export */   updateCloudDiscoveryMetadata: () => (/* binding */ updateCloudDiscoveryMetadata)\n/* harmony export */ });\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../account/AuthToken.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/TimeUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Cache Key: <home_account_id>-<environment>-<credential_type>-<client_id or familyId>-<realm>-<scopes>-<claims hash>-<scheme>\r\n * IdToken Example: uid.utid-login.microsoftonline.com-idtoken-app_client_id-contoso.com\r\n * AccessToken Example: uid.utid-login.microsoftonline.com-accesstoken-app_client_id-contoso.com-scope1 scope2--pop\r\n * RefreshToken Example: uid.utid-login.microsoftonline.com-refreshtoken-1-contoso.com\r\n * @param credentialEntity\r\n * @returns\r\n */ function generateCredentialKey(credentialEntity) {\n    const credentialKey = [\n        generateAccountId(credentialEntity),\n        generateCredentialId(credentialEntity),\n        generateTarget(credentialEntity),\n        generateClaimsHash(credentialEntity),\n        generateScheme(credentialEntity)\n    ];\n    return credentialKey.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Create IdTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */ function createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\n    const idTokenEntity = {\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: idToken,\n        realm: tenantId\n    };\n    return idTokenEntity;\n}\n/**\r\n * Create AccessTokenEntity\r\n * @param homeAccountId\r\n * @param environment\r\n * @param accessToken\r\n * @param clientId\r\n * @param tenantId\r\n * @param scopes\r\n * @param expiresOn\r\n * @param extExpiresOn\r\n */ function createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\n    const atEntity = {\n        homeAccountId: homeAccountId,\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN,\n        secret: accessToken,\n        cachedAt: (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)().toString(),\n        expiresOn: expiresOn.toString(),\n        extendedExpiresOn: extExpiresOn.toString(),\n        environment: environment,\n        clientId: clientId,\n        realm: tenantId,\n        target: scopes,\n        tokenType: tokenType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER\n    };\n    if (userAssertionHash) {\n        atEntity.userAssertionHash = userAssertionHash;\n    }\n    if (refreshOn) {\n        atEntity.refreshOn = refreshOn.toString();\n    }\n    if (requestedClaims) {\n        atEntity.requestedClaims = requestedClaims;\n        atEntity.requestedClaimsHash = requestedClaimsHash;\n    }\n    /*\r\n     * Create Access Token With Auth Scheme instead of regular access token\r\n     * Cast to lower to handle \"bearer\" from ADFS\r\n     */ if (atEntity.tokenType?.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER.toLowerCase()) {\n        atEntity.credentialType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n        switch(atEntity.tokenType){\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.POP:\n                // Make sure keyId is present and add it to credential\n                const tokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_2__.extractTokenClaims)(accessToken, base64Decode);\n                if (!tokenClaims?.cnf?.kid) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenClaimsCnfRequiredForSignedJwt);\n                }\n                atEntity.keyId = tokenClaims.cnf.kid;\n                break;\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.SSH:\n                atEntity.keyId = keyId;\n        }\n    }\n    return atEntity;\n}\n/**\r\n * Create RefreshTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */ function createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {\n    const rtEntity = {\n        credentialType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN,\n        homeAccountId: homeAccountId,\n        environment: environment,\n        clientId: clientId,\n        secret: refreshToken\n    };\n    if (userAssertionHash) {\n        rtEntity.userAssertionHash = userAssertionHash;\n    }\n    if (familyId) {\n        rtEntity.familyId = familyId;\n    }\n    if (expiresOn) {\n        rtEntity.expiresOn = expiresOn.toString();\n    }\n    return rtEntity;\n}\nfunction isCredentialEntity(entity) {\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAccessTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"target\") && (entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN || entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isIdTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity.hasOwnProperty(\"realm\") && entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.ID_TOKEN;\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isRefreshTokenEntity(entity) {\n    if (!entity) {\n        return false;\n    }\n    return isCredentialEntity(entity) && entity[\"credentialType\"] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN;\n}\n/**\r\n * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n */ function generateAccountId(credentialEntity) {\n    const accountId = [\n        credentialEntity.homeAccountId,\n        credentialEntity.environment\n    ];\n    return accountId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n */ function generateCredentialId(credentialEntity) {\n    const clientOrFamilyId = credentialEntity.credentialType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CredentialType.REFRESH_TOKEN ? credentialEntity.familyId || credentialEntity.clientId : credentialEntity.clientId;\n    const credentialId = [\n        credentialEntity.credentialType,\n        clientOrFamilyId,\n        credentialEntity.realm || \"\"\n    ];\n    return credentialId.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/**\r\n * Generate target key component as per schema: <target>\r\n */ function generateTarget(credentialEntity) {\n    return (credentialEntity.target || \"\").toLowerCase();\n}\n/**\r\n * Generate requested claims key component as per schema: <requestedClaims>\r\n */ function generateClaimsHash(credentialEntity) {\n    return (credentialEntity.requestedClaimsHash || \"\").toLowerCase();\n}\n/**\r\n * Generate scheme key componenet as per schema: <scheme>\r\n */ function generateScheme(credentialEntity) {\n    /*\r\n     * PoP Tokens and SSH certs include scheme in cache key\r\n     * Cast to lowercase to handle \"bearer\" from ADFS\r\n     */ return credentialEntity.tokenType && credentialEntity.tokenType.toLowerCase() !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationScheme.BEARER.toLowerCase() ? credentialEntity.tokenType.toLowerCase() : \"\";\n}\n/**\r\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */ function isServerTelemetryEntity(key, entity) {\n    const validateKey = key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n    let validateEntity = true;\n    if (entity) {\n        validateEntity = entity.hasOwnProperty(\"failedRequests\") && entity.hasOwnProperty(\"errors\") && entity.hasOwnProperty(\"cacheHits\");\n    }\n    return validateKey && validateEntity;\n}\n/**\r\n * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */ function isThrottlingEntity(key, entity) {\n    let validateKey = false;\n    if (key) {\n        validateKey = key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.THROTTLING_PREFIX) === 0;\n    }\n    let validateEntity = true;\n    if (entity) {\n        validateEntity = entity.hasOwnProperty(\"throttleTime\");\n    }\n    return validateKey && validateEntity;\n}\n/**\r\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n */ function generateAppMetadataKey({ environment, clientId }) {\n    const appMetaDataKeyArray = [\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.APP_METADATA,\n        environment,\n        clientId\n    ];\n    return appMetaDataKeyArray.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n}\n/*\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAppMetadataEntity(key, entity) {\n    if (!entity) {\n        return false;\n    }\n    return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.APP_METADATA) === 0 && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"environment\");\n}\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */ function isAuthorityMetadataEntity(key, entity) {\n    if (!entity) {\n        return false;\n    }\n    return key.indexOf(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\") && entity.hasOwnProperty(\"jwks_uri\");\n}\n/**\r\n * Reset the exiresAt value\r\n */ function generateAuthorityMetadataExpiresAt() {\n    return (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)() + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n}\nfunction updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {\n    authorityMetadata.authorization_endpoint = updatedValues.authorization_endpoint;\n    authorityMetadata.token_endpoint = updatedValues.token_endpoint;\n    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\n    authorityMetadata.issuer = updatedValues.issuer;\n    authorityMetadata.endpointsFromNetwork = fromNetwork;\n    authorityMetadata.jwks_uri = updatedValues.jwks_uri;\n}\nfunction updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {\n    authorityMetadata.aliases = updatedValues.aliases;\n    authorityMetadata.preferred_cache = updatedValues.preferred_cache;\n    authorityMetadata.preferred_network = updatedValues.preferred_network;\n    authorityMetadata.aliasesFromNetwork = fromNetwork;\n}\n/**\r\n * Returns whether or not the data needs to be refreshed\r\n */ function isAuthorityMetadataExpired(metadata) {\n    return metadata.expiresAt <= (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.nowSeconds)();\n}\n //# sourceMappingURL=CacheHelpers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthorizationCodeClient: () => (/* binding */ AuthorizationCodeClient)\n/* harmony export */ });\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _request_RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../request/RequestValidator.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/ClientAssertionUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Oauth2.0 Authorization Code client\r\n * @internal\r\n */ class AuthorizationCodeClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n        // Flag to indicate if client is for hybrid spa auth code redemption\n        this.includeRedirectUri = true;\n        this.oidcDefaultScopes = this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\n    }\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */ async getAuthCodeUrl(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.GetAuthCodeUrl, request.correlationId);\n        const queryString = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.createAuthCodeUrlQueryString.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateQueryString, this.logger, this.performanceClient, request.correlationId)(request);\n        return _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\n    }\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */ async acquireToken(request, authCodePayload) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientAcquireToken, request.correlationId);\n        if (!request.code) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.requestCannotBeMade);\n        }\n        const reqTimestamp = (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.nowSeconds)();\n        const response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.executeTokenRequest.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\n    }\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */ handleFragmentResponse(serverParams, cachedState) {\n        // Handle responses.\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n        // Get code response\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState);\n        // throw when there is no auth code in the response\n        if (!serverParams.code) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.authorizationCodeMissingFromServerResponse);\n        }\n        return serverParams;\n    }\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */ getLogoutUri(logoutRequest) {\n        // Throw error if logoutRequest is null/undefined\n        if (!logoutRequest) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__.logoutRequestEmpty);\n        }\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\n        // Construct logout URI\n        return _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n    }\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */ async executeTokenRequest(authority, request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.createTokenRequestBody.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        let ccsCredential = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfo)(request.clientInfo, this.cryptoUtils.base64Decode);\n                ccsCredential = {\n                    credential: `${clientInfo.uid}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        }\n        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n        const thumbprint = {\n            clientId: request.tokenBodyParameters?.clientId || this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(this.executePostToTokenEndpoint.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint);\n    }\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */ async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.tokenBodyParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.CLIENT_ID] || this.config.authOptions.clientId);\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */ if (!this.includeRedirectUri) {\n            // Just validate\n            _request_RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_15__.RequestValidator.validateRedirectUri(request.redirectUri);\n        } else {\n            // Validate and include redirect uri\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        // Add scope array, parameter builder will add default scopes and dedupe\n        parameterBuilder.addScopes(request.scopes, true, this.oidcDefaultScopes);\n        // add code: user set, not validated\n        parameterBuilder.addAuthorizationCode(request.code);\n        // Add library metadata\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        // add code_verifier if passed\n        if (request.codeVerifier) {\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\n        }\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(await (0,_utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_17__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        parameterBuilder.addGrantType(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.GrantType.AUTHORIZATION_CODE_GRANT);\n        parameterBuilder.addClientInfo();\n        if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.POP) {\n            const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__.PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_9__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_10__.missingSshJwk);\n            }\n        }\n        if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_19__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        let ccsCred = undefined;\n        if (request.clientInfo) {\n            try {\n                const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfo)(request.clientInfo, this.cryptoUtils.base64Decode);\n                ccsCred = {\n                    credential: `${clientInfo.uid}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\n                    type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID\n                };\n            } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n            }\n        } else {\n            ccsCred = request.ccsCredential;\n        }\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch(ccsCred.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(ccsCred.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_12__.CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\n                    break;\n            }\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        // Add hybrid spa parameters if not already provided\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.RETURN_SPA_CODE])) {\n            parameterBuilder.addExtraQueryParameters({\n                [_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.RETURN_SPA_CODE]: \"1\"\n            });\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */ async createAuthCodeUrlQueryString(request) {\n        // generate the correlationId if not set by the user and add\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.AuthClientCreateQueryString, correlationId);\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.extraQueryParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_14__.CLIENT_ID] || this.config.authOptions.clientId);\n        const requestScopes = [\n            ...request.scopes || [],\n            ...request.extraScopesToConsent || []\n        ];\n        parameterBuilder.addScopes(requestScopes, true, this.oidcDefaultScopes);\n        // validate the redirectUri (to be a non null value)\n        parameterBuilder.addRedirectUri(request.redirectUri);\n        parameterBuilder.addCorrelationId(correlationId);\n        // add response_mode. If not passed in it defaults to query.\n        parameterBuilder.addResponseMode(request.responseMode);\n        // add response_type = code\n        parameterBuilder.addResponseTypeCode();\n        // add library info parameters\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        if (!(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_16__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        }\n        // add client_info=1\n        parameterBuilder.addClientInfo();\n        if (request.codeChallenge && request.codeChallengeMethod) {\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n        }\n        if (request.prompt) {\n            parameterBuilder.addPrompt(request.prompt);\n        }\n        if (request.domainHint) {\n            parameterBuilder.addDomainHint(request.domainHint);\n        }\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n        if (request.prompt !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.SELECT_ACCOUNT) {\n            // AAD will throw if prompt=select_account is passed with an account hint\n            if (request.sid && request.prompt === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n            } else if (request.account) {\n                const accountSid = this.extractAccountSid(request.account);\n                let accountLoginHintClaim = this.extractLoginHint(request.account);\n                if (accountLoginHintClaim && request.domainHint) {\n                    this.logger.warning(`AuthorizationCodeClient.createAuthCodeUrlQueryString: \"domainHint\" param is set, skipping opaque \"login_hint\" claim. Please consider not passing domainHint`);\n                    accountLoginHintClaim = null;\n                }\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (accountSid && request.prompt === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.PromptValue.NONE) {\n                    /*\r\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                     * SessionId is only used in silent calls\r\n                     */ this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                    parameterBuilder.addSid(accountSid);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                } else if (request.loginHint) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                    parameterBuilder.addLoginHint(request.loginHint);\n                    parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                    // Fallback to account username if provided\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                    parameterBuilder.addLoginHint(request.account.username);\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_11__.buildClientInfoFromHomeAccountId)(request.account.homeAccountId);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                    }\n                }\n            } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n            }\n        } else {\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n        }\n        if (request.nonce) {\n            parameterBuilder.addNonce(request.nonce);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        this.addExtraQueryParams(request, parameterBuilder);\n        if (request.nativeBroker) {\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            // pass the req_cnf for POP\n            if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_7__.AuthenticationScheme.POP) {\n                const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_18__.PopTokenGenerator(this.cryptoUtils);\n                // req_cnf is always sent as a string for SPAs\n                let reqCnfData;\n                if (!request.popKid) {\n                    const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_2__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                    reqCnfData = generatedReqCnfData.reqCnfString;\n                } else {\n                    reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n                }\n                parameterBuilder.addPopToken(reqCnfData);\n            }\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */ createLogoutUrlQueryString(request) {\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_13__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        if (request.postLogoutRedirectUri) {\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n        }\n        if (request.correlationId) {\n            parameterBuilder.addCorrelationId(request.correlationId);\n        }\n        if (request.idTokenHint) {\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\n        }\n        if (request.state) {\n            parameterBuilder.addState(request.state);\n        }\n        if (request.logoutHint) {\n            parameterBuilder.addLogoutHint(request.logoutHint);\n        }\n        this.addExtraQueryParams(request, parameterBuilder);\n        return parameterBuilder.createQueryString();\n    }\n    addExtraQueryParams(request, parameterBuilder) {\n        const hasRequestInstanceAware = request.extraQueryParameters && request.extraQueryParameters.hasOwnProperty(\"instance_aware\");\n        // Set instance_aware flag if config auth param is set\n        if (!hasRequestInstanceAware && this.config.authOptions.instanceAware) {\n            request.extraQueryParameters = request.extraQueryParameters || {};\n            request.extraQueryParameters[\"instance_aware\"] = \"true\";\n        }\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n    }\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */ extractAccountSid(account) {\n        return account.idTokenClaims?.sid || null;\n    }\n    extractLoginHint(account) {\n        return account.idTokenClaims?.login_hint || null;\n    }\n}\n //# sourceMappingURL=AuthorizationCodeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/BaseClient.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseClient: () => (/* binding */ BaseClient)\n/* harmony export */ });\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger/Logger.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _authority_AuthorityFactory_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../authority/AuthorityFactory.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../network/ThrottlingUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/AuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_NetworkError_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/NetworkError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */ class BaseClient {\n    constructor(configuration, performanceClient){\n        // Set the configuration\n        this.config = (0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_0__.buildClientConfiguration)(configuration);\n        // Initialize the logger\n        this.logger = new _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.Logger(this.config.loggerOptions, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_2__.version);\n        // Initialize crypto\n        this.cryptoUtils = this.config.cryptoInterface;\n        // Initialize storage interface\n        this.cacheManager = this.config.storageInterface;\n        // Set the network interface\n        this.networkClient = this.config.networkInterface;\n        // Set TelemetryManager\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\n        // set Authority\n        this.authority = this.config.authOptions.authority;\n        // set performance telemetry client\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */ createTokenRequestHeaders(ccsCred) {\n        const headers = {};\n        headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_TYPE] = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.Constants.URL_FORM_CONTENT_TYPE;\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n            switch(ccsCred.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_5__.buildClientInfoFromHomeAccountId)(ccsCred.credential);\n                        headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_4__.CcsCredentialType.UPN:\n                    headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\n                    break;\n            }\n        }\n        return headers;\n    }\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */ async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\n        if (queuedEvent) {\n            this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\n        }\n        const response = await this.sendPostRequest(thumbprint, tokenEndpoint, {\n            body: queryString,\n            headers: headers\n        }, correlationId);\n        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n            // Telemetry data successfully logged by server, clear Telemetry cache\n            this.config.serverTelemetryManager.clearTelemetryCache();\n        }\n        return response;\n    }\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint - Request thumbprint for throttling\r\n     * @param tokenEndpoint - Endpoint to make the POST to\r\n     * @param options - Body and Headers to include on the POST request\r\n     * @param correlationId - CorrelationId for telemetry\r\n     */ async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {\n        _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\n        let response;\n        try {\n            response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_7__.invokeAsync)(this.networkClient.sendPostRequestAsync.bind(this.networkClient), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__.PerformanceEvents.NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);\n            const responseHeaders = response.headers || {};\n            this.performanceClient?.addFields({\n                refreshTokenSize: response.body.refresh_token?.length || 0,\n                httpVerToken: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_HTTP_VERSION] || \"\",\n                requestId: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_REQUEST_ID] || \"\"\n            }, correlationId);\n        } catch (e) {\n            if (e instanceof _error_NetworkError_mjs__WEBPACK_IMPORTED_MODULE_9__.NetworkError) {\n                const responseHeaders = e.responseHeaders;\n                if (responseHeaders) {\n                    this.performanceClient?.addFields({\n                        httpVerToken: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_HTTP_VERSION] || \"\",\n                        requestId: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.X_MS_REQUEST_ID] || \"\",\n                        contentTypeHeader: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_TYPE] || undefined,\n                        contentLengthHeader: responseHeaders[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HeaderNames.CONTENT_LENGTH] || undefined,\n                        httpStatus: e.httpStatus\n                    }, correlationId);\n                }\n                throw e.error;\n            }\n            if (e instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.AuthError) {\n                throw e;\n            } else {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_11__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_12__.networkError);\n            }\n        }\n        _network_ThrottlingUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\n        return response;\n    }\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */ async updateAuthority(cloudInstanceHostname, correlationId) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_8__.PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\n        const cloudInstanceAuthority = await (0,_authority_AuthorityFactory_mjs__WEBPACK_IMPORTED_MODULE_13__.createDiscoveredInstance)(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\n        this.authority = cloudInstanceAuthority;\n    }\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */ createTokenQueryParameters(request) {\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_14__.RequestParameterBuilder(request.correlationId, this.performanceClient);\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n        parameterBuilder.addCorrelationId(request.correlationId);\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=BaseClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RefreshTokenClient: () => (/* binding */ RefreshTokenClient)\n/* harmony export */ });\n/* harmony import */ var _config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../config/ClientConfiguration.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\");\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../request/RequestParameterBuilder.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../account/CcsCredential.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../account/ClientInfo.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/ClientInfo.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../error/InteractionRequiredAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/ClientAssertionUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../error/InteractionRequiredAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */ class RefreshTokenClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n    }\n    async acquireToken(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        const reqTimestamp = (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.nowSeconds)();\n        const response = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.executeTokenRequest.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HeaderNames.X_MS_REQUEST_ID];\n        const responseHandler = new _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_5__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        responseHandler.validateTokenResponse(response.body);\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(responseHandler.handleServerTokenResponse.bind(responseHandler), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\n    }\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */ async acquireTokenByRefreshToken(request) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__.tokenRequestEmpty);\n        }\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_8__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_9__.noAccountInSilentRequest);\n        }\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.InteractionRequiredAuthError && e.errorCode === _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.noTokensFound;\n                const clientMismatchErrorWithFamilyRT = e instanceof _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_12__.ServerError && e.errorCode === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Errors.INVALID_GRANT_ERROR && e.subError === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Errors.CLIENT_MISMATCH_ERROR;\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n                // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireTokenWithCachedRefreshToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\n    }\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */ async acquireTokenWithCachedRefreshToken(request, foci) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        // fetches family RT or application RT based on FOCI value\n        const refreshToken = (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invoke)(this.cacheManager.getRefreshToken.bind(this.cacheManager), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, undefined, this.performanceClient, request.correlationId);\n        if (!refreshToken) {\n            throw (0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.createInteractionRequiredAuthError)(_error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.noTokensFound);\n        }\n        if (refreshToken.expiresOn && (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.isTokenExpired)(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds || DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {\n            throw (0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.createInteractionRequiredAuthError)(_error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.refreshTokenExpired);\n        }\n        // attach cached RT size to the current measurement\n        const refreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n        try {\n            return await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.acquireToken.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\n        } catch (e) {\n            if (e instanceof _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_10__.InteractionRequiredAuthError && e.subError === _error_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_11__.badToken) {\n                // Remove bad refresh token from cache\n                this.logger.verbose(\"acquireTokenWithRefreshToken: bad refresh token, removing from cache\");\n                const badRefreshTokenKey = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_14__.generateCredentialKey)(refreshToken);\n                this.cacheManager.removeRefreshToken(badRefreshTokenKey);\n            }\n            throw e;\n        }\n    }\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */ async executeTokenRequest(request, authority) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_15__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.createTokenRequestBody.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\n        const headers = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint = {\n            clientId: request.tokenBodyParameters?.clientId || this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        return (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(this.executePostToTokenEndpoint.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\n    }\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */ async createTokenRequestBody(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\n        const correlationId = request.correlationId;\n        const parameterBuilder = new _request_RequestParameterBuilder_mjs__WEBPACK_IMPORTED_MODULE_16__.RequestParameterBuilder(correlationId, this.performanceClient);\n        parameterBuilder.addClientId(request.embeddedClientId || request.tokenBodyParameters?.[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_17__.CLIENT_ID] || this.config.authOptions.clientId);\n        if (request.redirectUri) {\n            parameterBuilder.addRedirectUri(request.redirectUri);\n        }\n        parameterBuilder.addScopes(request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\n        parameterBuilder.addGrantType(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.GrantType.REFRESH_TOKEN_GRANT);\n        parameterBuilder.addClientInfo();\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager && !(0,_config_ClientConfiguration_mjs__WEBPACK_IMPORTED_MODULE_18__.isOidcProtocolMode)(this.config)) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        parameterBuilder.addRefreshToken(request.refreshToken);\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(await (0,_utils_ClientAssertionUtils_mjs__WEBPACK_IMPORTED_MODULE_19__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.POP) {\n            const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_20__.PopTokenGenerator(this.cryptoUtils, this.performanceClient);\n            let reqCnfData;\n            if (!request.popKid) {\n                const generatedReqCnfData = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_3__.invokeAsync)(popTokenGenerator.generateCnf.bind(popTokenGenerator), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_1__.PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\n                reqCnfData = generatedReqCnfData.reqCnfString;\n            } else {\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\n            }\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData);\n        } else if (request.authenticationScheme === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_6__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__.missingSshJwk);\n            }\n        }\n        if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_21__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch(request.ccsCredential.type){\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = (0,_account_ClientInfo_mjs__WEBPACK_IMPORTED_MODULE_22__.buildClientInfoFromHomeAccountId)(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case _account_CcsCredential_mjs__WEBPACK_IMPORTED_MODULE_13__.CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        if (request.embeddedClientId) {\n            parameterBuilder.addBrokerParameters({\n                brokerClientId: this.config.authOptions.clientId,\n                brokerRedirectUri: this.config.authOptions.redirectUri\n            });\n        }\n        if (request.tokenBodyParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=RefreshTokenClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SilentFlowClient: () => (/* binding */ SilentFlowClient)\n/* harmony export */ });\n/* harmony import */ var _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseClient.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RefreshTokenClient.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../response/ResponseHandler.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/* harmony import */ var _authority_Authority_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../authority/Authority.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /** @internal */ class SilentFlowClient extends _BaseClient_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, performanceClient){\n        super(configuration, performanceClient);\n    }\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */ async acquireToken(request) {\n        try {\n            const [authResponse, cacheOutcome] = await this.acquireCachedToken({\n                ...request,\n                scopes: request.scopes?.length ? request.scopes : [\n                    ..._utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES\n                ]\n            });\n            // if the token is not expired but must be refreshed; get a new one in the background\n            if (cacheOutcome === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED) {\n                this.logger.info(\"SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\n                // refresh the access token in the background\n                const refreshTokenClient = new _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__.RefreshTokenClient(this.config, this.performanceClient);\n                refreshTokenClient.acquireTokenByRefreshToken(request).catch(()=>{\n                // do nothing, this is running in the background and no action is to be taken upon success or failure\n                });\n            }\n            // return the cached token\n            return authResponse;\n        } catch (e) {\n            if (e instanceof _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.ClientAuthError && e.errorCode === _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired) {\n                const refreshTokenClient = new _RefreshTokenClient_mjs__WEBPACK_IMPORTED_MODULE_2__.RefreshTokenClient(this.config, this.performanceClient);\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\n            } else {\n                throw e;\n            }\n        }\n    }\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */ async acquireCachedToken(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientAcquireCachedToken, request.correlationId);\n        let lastCacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NOT_APPLICABLE;\n        if (request.forceRefresh || !this.config.cacheOptions.claimsBasedCachingEnabled && !_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_6__.StringUtils.isEmptyObj(request.claims)) {\n            // Must refresh due to present force_refresh flag.\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.FORCE_REFRESH_OR_CLAIMS, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        }\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.noAccountInSilentRequest);\n        }\n        const requestTenantId = request.account.tenantId || (0,_authority_Authority_mjs__WEBPACK_IMPORTED_MODULE_7__.getTenantFromAuthorityString)(request.authority);\n        const tokenKeys = this.cacheManager.getTokenKeys();\n        const cachedAccessToken = this.cacheManager.getAccessToken(request.account, request, tokenKeys, requestTenantId, this.performanceClient, request.correlationId);\n        if (!cachedAccessToken) {\n            // must refresh due to non-existent access_token\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NO_CACHED_ACCESS_TOKEN, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        } else if ((0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.wasClockTurnedBack)(cachedAccessToken.cachedAt) || (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.isTokenExpired)(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            // must refresh due to the expires_in value\n            this.setCacheOutcome(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.tokenRefreshRequired);\n        } else if (cachedAccessToken.refreshOn && (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.isTokenExpired)(cachedAccessToken.refreshOn, 0)) {\n            // must refresh (in the background) due to the refresh_in value\n            lastCacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED;\n        // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\n        }\n        const environment = request.authority || this.authority.getPreferredCache();\n        const cacheRecord = {\n            account: this.cacheManager.readAccountFromCache(request.account),\n            accessToken: cachedAccessToken,\n            idToken: this.cacheManager.getIdToken(request.account, tokenKeys, requestTenantId, this.performanceClient, request.correlationId),\n            refreshToken: null,\n            appMetadata: this.cacheManager.readAppMetadataFromCache(environment)\n        };\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n        return [\n            await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_9__.invokeAsync)(this.generateResultFromCacheRecord.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request),\n            lastCacheOutcome\n        ];\n    }\n    setCacheOutcome(cacheOutcome, correlationId) {\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\n        this.performanceClient?.addFields({\n            cacheOutcome: cacheOutcome\n        }, correlationId);\n        if (cacheOutcome !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NOT_APPLICABLE) {\n            this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);\n        }\n    }\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */ async generateResultFromCacheRecord(cacheRecord, request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);\n        let idTokenClaims;\n        if (cacheRecord.idToken) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__.extractTokenClaims)(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\n        }\n        // token max_age check\n        if (request.maxAge || request.maxAge === 0) {\n            const authTime = idTokenClaims?.auth_time;\n            if (!authTime) {\n                throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.authTimeNotFound);\n            }\n            (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_10__.checkMaxAge)(authTime, request.maxAge);\n        }\n        return _response_ResponseHandler_mjs__WEBPACK_IMPORTED_MODULE_11__.ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\n    }\n}\n //# sourceMappingURL=SilentFlowClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_SYSTEM_OPTIONS: () => (/* binding */ DEFAULT_SYSTEM_OPTIONS),\n/* harmony export */   buildClientConfiguration: () => (/* binding */ buildClientConfiguration),\n/* harmony export */   isOidcProtocolMode: () => (/* binding */ isOidcProtocolMode)\n/* harmony export */ });\n/* harmony import */ var _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../crypto/ICrypto.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger/Logger.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\");\n/* harmony import */ var _authority_AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../authority/AuthorityOptions.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _cache_CacheManager_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../cache/CacheManager.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/* harmony import */ var _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../authority/ProtocolMode.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_SYSTEM_OPTIONS = {\n    tokenRenewalOffsetSeconds: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\n    preventCorsPreflight: false\n};\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\n    loggerCallback: ()=>{\n    // allow users to not set loggerCallback\n    },\n    piiLoggingEnabled: false,\n    logLevel: _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.LogLevel.Info,\n    correlationId: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n};\nconst DEFAULT_CACHE_OPTIONS = {\n    claimsBasedCachingEnabled: false\n};\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\n    async sendGetRequestAsync () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.methodNotImplemented);\n    },\n    async sendPostRequestAsync () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.methodNotImplemented);\n    }\n};\nconst DEFAULT_LIBRARY_INFO = {\n    sku: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.SKU,\n    version: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_4__.version,\n    cpu: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n    os: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n};\nconst DEFAULT_CLIENT_CREDENTIALS = {\n    clientSecret: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n    clientAssertion: undefined\n};\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\n    azureCloudInstance: _authority_AuthorityOptions_mjs__WEBPACK_IMPORTED_MODULE_5__.AzureCloudInstance.None,\n    tenant: `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.DEFAULT_COMMON_TENANT}`\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n    application: {\n        appName: \"\",\n        appVersion: \"\"\n    }\n};\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */ function buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache }) {\n    const loggerOptions = {\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\n        ...userLoggerOption\n    };\n    return {\n        authOptions: buildAuthOptions(userAuthOptions),\n        systemOptions: {\n            ...DEFAULT_SYSTEM_OPTIONS,\n            ...userSystemOptions\n        },\n        loggerOptions: loggerOptions,\n        cacheOptions: {\n            ...DEFAULT_CACHE_OPTIONS,\n            ...userCacheOptions\n        },\n        storageInterface: storageImplementation || new _cache_CacheManager_mjs__WEBPACK_IMPORTED_MODULE_6__.DefaultStorageClass(userAuthOptions.clientId, _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CRYPTO_IMPLEMENTATION, new _logger_Logger_mjs__WEBPACK_IMPORTED_MODULE_1__.Logger(loggerOptions)),\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\n        cryptoInterface: cryptoImplementation || _crypto_ICrypto_mjs__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_CRYPTO_IMPLEMENTATION,\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\n        libraryInfo: {\n            ...DEFAULT_LIBRARY_INFO,\n            ...libraryInfo\n        },\n        telemetry: {\n            ...DEFAULT_TELEMETRY_OPTIONS,\n            ...telemetry\n        },\n        serverTelemetryManager: serverTelemetryManager || null,\n        persistencePlugin: persistencePlugin || null,\n        serializableCache: serializableCache || null\n    };\n}\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */ function buildAuthOptions(authOptions) {\n    return {\n        clientCapabilities: [],\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\n        skipAuthorityMetadataCache: false,\n        instanceAware: false,\n        ...authOptions\n    };\n}\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */ function isOidcProtocolMode(config) {\n    return config.authOptions.authority.options.protocolMode === _authority_ProtocolMode_mjs__WEBPACK_IMPORTED_MODULE_8__.ProtocolMode.OIDC;\n}\n //# sourceMappingURL=ClientConfiguration.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/config/ClientConfiguration.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCESS_TOKEN: () => (/* binding */ ACCESS_TOKEN),\n/* harmony export */   BROKER_CLIENT_ID: () => (/* binding */ BROKER_CLIENT_ID),\n/* harmony export */   BROKER_REDIRECT_URI: () => (/* binding */ BROKER_REDIRECT_URI),\n/* harmony export */   CCS_HEADER: () => (/* binding */ CCS_HEADER),\n/* harmony export */   CLAIMS: () => (/* binding */ CLAIMS),\n/* harmony export */   CLIENT_ASSERTION: () => (/* binding */ CLIENT_ASSERTION),\n/* harmony export */   CLIENT_ASSERTION_TYPE: () => (/* binding */ CLIENT_ASSERTION_TYPE),\n/* harmony export */   CLIENT_ID: () => (/* binding */ CLIENT_ID),\n/* harmony export */   CLIENT_INFO: () => (/* binding */ CLIENT_INFO),\n/* harmony export */   CLIENT_REQUEST_ID: () => (/* binding */ CLIENT_REQUEST_ID),\n/* harmony export */   CLIENT_SECRET: () => (/* binding */ CLIENT_SECRET),\n/* harmony export */   CODE: () => (/* binding */ CODE),\n/* harmony export */   CODE_CHALLENGE: () => (/* binding */ CODE_CHALLENGE),\n/* harmony export */   CODE_CHALLENGE_METHOD: () => (/* binding */ CODE_CHALLENGE_METHOD),\n/* harmony export */   CODE_VERIFIER: () => (/* binding */ CODE_VERIFIER),\n/* harmony export */   DEVICE_CODE: () => (/* binding */ DEVICE_CODE),\n/* harmony export */   DOMAIN_HINT: () => (/* binding */ DOMAIN_HINT),\n/* harmony export */   ERROR: () => (/* binding */ ERROR),\n/* harmony export */   ERROR_DESCRIPTION: () => (/* binding */ ERROR_DESCRIPTION),\n/* harmony export */   EXPIRES_IN: () => (/* binding */ EXPIRES_IN),\n/* harmony export */   FOCI: () => (/* binding */ FOCI),\n/* harmony export */   GRANT_TYPE: () => (/* binding */ GRANT_TYPE),\n/* harmony export */   ID_TOKEN: () => (/* binding */ ID_TOKEN),\n/* harmony export */   ID_TOKEN_HINT: () => (/* binding */ ID_TOKEN_HINT),\n/* harmony export */   LOGIN_HINT: () => (/* binding */ LOGIN_HINT),\n/* harmony export */   LOGOUT_HINT: () => (/* binding */ LOGOUT_HINT),\n/* harmony export */   NATIVE_BROKER: () => (/* binding */ NATIVE_BROKER),\n/* harmony export */   NONCE: () => (/* binding */ NONCE),\n/* harmony export */   OBO_ASSERTION: () => (/* binding */ OBO_ASSERTION),\n/* harmony export */   ON_BEHALF_OF: () => (/* binding */ ON_BEHALF_OF),\n/* harmony export */   POST_LOGOUT_URI: () => (/* binding */ POST_LOGOUT_URI),\n/* harmony export */   PROMPT: () => (/* binding */ PROMPT),\n/* harmony export */   REDIRECT_URI: () => (/* binding */ REDIRECT_URI),\n/* harmony export */   REFRESH_TOKEN: () => (/* binding */ REFRESH_TOKEN),\n/* harmony export */   REFRESH_TOKEN_EXPIRES_IN: () => (/* binding */ REFRESH_TOKEN_EXPIRES_IN),\n/* harmony export */   REQUESTED_TOKEN_USE: () => (/* binding */ REQUESTED_TOKEN_USE),\n/* harmony export */   REQ_CNF: () => (/* binding */ REQ_CNF),\n/* harmony export */   RESPONSE_MODE: () => (/* binding */ RESPONSE_MODE),\n/* harmony export */   RESPONSE_TYPE: () => (/* binding */ RESPONSE_TYPE),\n/* harmony export */   RETURN_SPA_CODE: () => (/* binding */ RETURN_SPA_CODE),\n/* harmony export */   SCOPE: () => (/* binding */ SCOPE),\n/* harmony export */   SESSION_STATE: () => (/* binding */ SESSION_STATE),\n/* harmony export */   SID: () => (/* binding */ SID),\n/* harmony export */   STATE: () => (/* binding */ STATE),\n/* harmony export */   TOKEN_TYPE: () => (/* binding */ TOKEN_TYPE),\n/* harmony export */   X_APP_NAME: () => (/* binding */ X_APP_NAME),\n/* harmony export */   X_APP_VER: () => (/* binding */ X_APP_VER),\n/* harmony export */   X_CLIENT_CPU: () => (/* binding */ X_CLIENT_CPU),\n/* harmony export */   X_CLIENT_CURR_TELEM: () => (/* binding */ X_CLIENT_CURR_TELEM),\n/* harmony export */   X_CLIENT_EXTRA_SKU: () => (/* binding */ X_CLIENT_EXTRA_SKU),\n/* harmony export */   X_CLIENT_LAST_TELEM: () => (/* binding */ X_CLIENT_LAST_TELEM),\n/* harmony export */   X_CLIENT_OS: () => (/* binding */ X_CLIENT_OS),\n/* harmony export */   X_CLIENT_SKU: () => (/* binding */ X_CLIENT_SKU),\n/* harmony export */   X_CLIENT_VER: () => (/* binding */ X_CLIENT_VER),\n/* harmony export */   X_MS_LIB_CAPABILITY: () => (/* binding */ X_MS_LIB_CAPABILITY)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CLIENT_ID = \"client_id\";\nconst REDIRECT_URI = \"redirect_uri\";\nconst RESPONSE_TYPE = \"response_type\";\nconst RESPONSE_MODE = \"response_mode\";\nconst GRANT_TYPE = \"grant_type\";\nconst CLAIMS = \"claims\";\nconst SCOPE = \"scope\";\nconst ERROR = \"error\";\nconst ERROR_DESCRIPTION = \"error_description\";\nconst ACCESS_TOKEN = \"access_token\";\nconst ID_TOKEN = \"id_token\";\nconst REFRESH_TOKEN = \"refresh_token\";\nconst EXPIRES_IN = \"expires_in\";\nconst REFRESH_TOKEN_EXPIRES_IN = \"refresh_token_expires_in\";\nconst STATE = \"state\";\nconst NONCE = \"nonce\";\nconst PROMPT = \"prompt\";\nconst SESSION_STATE = \"session_state\";\nconst CLIENT_INFO = \"client_info\";\nconst CODE = \"code\";\nconst CODE_CHALLENGE = \"code_challenge\";\nconst CODE_CHALLENGE_METHOD = \"code_challenge_method\";\nconst CODE_VERIFIER = \"code_verifier\";\nconst CLIENT_REQUEST_ID = \"client-request-id\";\nconst X_CLIENT_SKU = \"x-client-SKU\";\nconst X_CLIENT_VER = \"x-client-VER\";\nconst X_CLIENT_OS = \"x-client-OS\";\nconst X_CLIENT_CPU = \"x-client-CPU\";\nconst X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\";\nconst X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\";\nconst X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\";\nconst X_APP_NAME = \"x-app-name\";\nconst X_APP_VER = \"x-app-ver\";\nconst POST_LOGOUT_URI = \"post_logout_redirect_uri\";\nconst ID_TOKEN_HINT = \"id_token_hint\";\nconst DEVICE_CODE = \"device_code\";\nconst CLIENT_SECRET = \"client_secret\";\nconst CLIENT_ASSERTION = \"client_assertion\";\nconst CLIENT_ASSERTION_TYPE = \"client_assertion_type\";\nconst TOKEN_TYPE = \"token_type\";\nconst REQ_CNF = \"req_cnf\";\nconst OBO_ASSERTION = \"assertion\";\nconst REQUESTED_TOKEN_USE = \"requested_token_use\";\nconst ON_BEHALF_OF = \"on_behalf_of\";\nconst FOCI = \"foci\";\nconst CCS_HEADER = \"X-AnchorMailbox\";\nconst RETURN_SPA_CODE = \"return_spa_code\";\nconst NATIVE_BROKER = \"nativebroker\";\nconst LOGOUT_HINT = \"logout_hint\";\nconst SID = \"sid\";\nconst LOGIN_HINT = \"login_hint\";\nconst DOMAIN_HINT = \"domain_hint\";\nconst X_CLIENT_EXTRA_SKU = \"x-client-xtra-sku\";\nconst BROKER_CLIENT_ID = \"brk_client_id\";\nconst BROKER_REDIRECT_URI = \"brk_redirect_uri\";\n //# sourceMappingURL=AADServerParamKeys.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY29uc3RhbnRzL0FBRFNlcnZlclBhcmFtS2V5cy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLFlBQVk7QUFDbEIsTUFBTUMsZUFBZTtBQUNyQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsU0FBUztBQUNmLE1BQU1DLFFBQVE7QUFDZCxNQUFNQyxRQUFRO0FBQ2QsTUFBTUMsb0JBQW9CO0FBQzFCLE1BQU1DLGVBQWU7QUFDckIsTUFBTUMsV0FBVztBQUNqQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQywyQkFBMkI7QUFDakMsTUFBTUMsUUFBUTtBQUNkLE1BQU1DLFFBQVE7QUFDZCxNQUFNQyxTQUFTO0FBQ2YsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsT0FBTztBQUNiLE1BQU1DLGlCQUFpQjtBQUN2QixNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLGVBQWU7QUFDckIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxlQUFlO0FBQ3JCLE1BQU1DLHNCQUFzQjtBQUM1QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsc0JBQXNCO0FBQzVCLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsWUFBWTtBQUNsQixNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG1CQUFtQjtBQUN6QixNQUFNQyx3QkFBd0I7QUFDOUIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxVQUFVO0FBQ2hCLE1BQU1DLGdCQUFnQjtBQUN0QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsZUFBZTtBQUNyQixNQUFNQyxPQUFPO0FBQ2IsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxrQkFBa0I7QUFDeEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGNBQWM7QUFDcEIsTUFBTUMsTUFBTTtBQUNaLE1BQU1DLGFBQWE7QUFDbkIsTUFBTUMsY0FBYztBQUNwQixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsbUJBQW1CO0FBQ3pCLE1BQU1DLHNCQUFzQjtBQUV5dkIsQ0FDcnhCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2NvbnN0YW50cy9BQURTZXJ2ZXJQYXJhbUtleXMubWpzPzNlYjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQ0xJRU5UX0lEID0gXCJjbGllbnRfaWRcIjtcclxuY29uc3QgUkVESVJFQ1RfVVJJID0gXCJyZWRpcmVjdF91cmlcIjtcclxuY29uc3QgUkVTUE9OU0VfVFlQRSA9IFwicmVzcG9uc2VfdHlwZVwiO1xyXG5jb25zdCBSRVNQT05TRV9NT0RFID0gXCJyZXNwb25zZV9tb2RlXCI7XHJcbmNvbnN0IEdSQU5UX1RZUEUgPSBcImdyYW50X3R5cGVcIjtcclxuY29uc3QgQ0xBSU1TID0gXCJjbGFpbXNcIjtcclxuY29uc3QgU0NPUEUgPSBcInNjb3BlXCI7XHJcbmNvbnN0IEVSUk9SID0gXCJlcnJvclwiO1xyXG5jb25zdCBFUlJPUl9ERVNDUklQVElPTiA9IFwiZXJyb3JfZGVzY3JpcHRpb25cIjtcclxuY29uc3QgQUNDRVNTX1RPS0VOID0gXCJhY2Nlc3NfdG9rZW5cIjtcclxuY29uc3QgSURfVE9LRU4gPSBcImlkX3Rva2VuXCI7XHJcbmNvbnN0IFJFRlJFU0hfVE9LRU4gPSBcInJlZnJlc2hfdG9rZW5cIjtcclxuY29uc3QgRVhQSVJFU19JTiA9IFwiZXhwaXJlc19pblwiO1xyXG5jb25zdCBSRUZSRVNIX1RPS0VOX0VYUElSRVNfSU4gPSBcInJlZnJlc2hfdG9rZW5fZXhwaXJlc19pblwiO1xyXG5jb25zdCBTVEFURSA9IFwic3RhdGVcIjtcclxuY29uc3QgTk9OQ0UgPSBcIm5vbmNlXCI7XHJcbmNvbnN0IFBST01QVCA9IFwicHJvbXB0XCI7XHJcbmNvbnN0IFNFU1NJT05fU1RBVEUgPSBcInNlc3Npb25fc3RhdGVcIjtcclxuY29uc3QgQ0xJRU5UX0lORk8gPSBcImNsaWVudF9pbmZvXCI7XHJcbmNvbnN0IENPREUgPSBcImNvZGVcIjtcclxuY29uc3QgQ09ERV9DSEFMTEVOR0UgPSBcImNvZGVfY2hhbGxlbmdlXCI7XHJcbmNvbnN0IENPREVfQ0hBTExFTkdFX01FVEhPRCA9IFwiY29kZV9jaGFsbGVuZ2VfbWV0aG9kXCI7XHJcbmNvbnN0IENPREVfVkVSSUZJRVIgPSBcImNvZGVfdmVyaWZpZXJcIjtcclxuY29uc3QgQ0xJRU5UX1JFUVVFU1RfSUQgPSBcImNsaWVudC1yZXF1ZXN0LWlkXCI7XHJcbmNvbnN0IFhfQ0xJRU5UX1NLVSA9IFwieC1jbGllbnQtU0tVXCI7XHJcbmNvbnN0IFhfQ0xJRU5UX1ZFUiA9IFwieC1jbGllbnQtVkVSXCI7XHJcbmNvbnN0IFhfQ0xJRU5UX09TID0gXCJ4LWNsaWVudC1PU1wiO1xyXG5jb25zdCBYX0NMSUVOVF9DUFUgPSBcIngtY2xpZW50LUNQVVwiO1xyXG5jb25zdCBYX0NMSUVOVF9DVVJSX1RFTEVNID0gXCJ4LWNsaWVudC1jdXJyZW50LXRlbGVtZXRyeVwiO1xyXG5jb25zdCBYX0NMSUVOVF9MQVNUX1RFTEVNID0gXCJ4LWNsaWVudC1sYXN0LXRlbGVtZXRyeVwiO1xyXG5jb25zdCBYX01TX0xJQl9DQVBBQklMSVRZID0gXCJ4LW1zLWxpYi1jYXBhYmlsaXR5XCI7XHJcbmNvbnN0IFhfQVBQX05BTUUgPSBcIngtYXBwLW5hbWVcIjtcclxuY29uc3QgWF9BUFBfVkVSID0gXCJ4LWFwcC12ZXJcIjtcclxuY29uc3QgUE9TVF9MT0dPVVRfVVJJID0gXCJwb3N0X2xvZ291dF9yZWRpcmVjdF91cmlcIjtcclxuY29uc3QgSURfVE9LRU5fSElOVCA9IFwiaWRfdG9rZW5faGludFwiO1xyXG5jb25zdCBERVZJQ0VfQ09ERSA9IFwiZGV2aWNlX2NvZGVcIjtcclxuY29uc3QgQ0xJRU5UX1NFQ1JFVCA9IFwiY2xpZW50X3NlY3JldFwiO1xyXG5jb25zdCBDTElFTlRfQVNTRVJUSU9OID0gXCJjbGllbnRfYXNzZXJ0aW9uXCI7XHJcbmNvbnN0IENMSUVOVF9BU1NFUlRJT05fVFlQRSA9IFwiY2xpZW50X2Fzc2VydGlvbl90eXBlXCI7XHJcbmNvbnN0IFRPS0VOX1RZUEUgPSBcInRva2VuX3R5cGVcIjtcclxuY29uc3QgUkVRX0NORiA9IFwicmVxX2NuZlwiO1xyXG5jb25zdCBPQk9fQVNTRVJUSU9OID0gXCJhc3NlcnRpb25cIjtcclxuY29uc3QgUkVRVUVTVEVEX1RPS0VOX1VTRSA9IFwicmVxdWVzdGVkX3Rva2VuX3VzZVwiO1xyXG5jb25zdCBPTl9CRUhBTEZfT0YgPSBcIm9uX2JlaGFsZl9vZlwiO1xyXG5jb25zdCBGT0NJID0gXCJmb2NpXCI7XHJcbmNvbnN0IENDU19IRUFERVIgPSBcIlgtQW5jaG9yTWFpbGJveFwiO1xyXG5jb25zdCBSRVRVUk5fU1BBX0NPREUgPSBcInJldHVybl9zcGFfY29kZVwiO1xyXG5jb25zdCBOQVRJVkVfQlJPS0VSID0gXCJuYXRpdmVicm9rZXJcIjtcclxuY29uc3QgTE9HT1VUX0hJTlQgPSBcImxvZ291dF9oaW50XCI7XHJcbmNvbnN0IFNJRCA9IFwic2lkXCI7XHJcbmNvbnN0IExPR0lOX0hJTlQgPSBcImxvZ2luX2hpbnRcIjtcclxuY29uc3QgRE9NQUlOX0hJTlQgPSBcImRvbWFpbl9oaW50XCI7XHJcbmNvbnN0IFhfQ0xJRU5UX0VYVFJBX1NLVSA9IFwieC1jbGllbnQteHRyYS1za3VcIjtcclxuY29uc3QgQlJPS0VSX0NMSUVOVF9JRCA9IFwiYnJrX2NsaWVudF9pZFwiO1xyXG5jb25zdCBCUk9LRVJfUkVESVJFQ1RfVVJJID0gXCJicmtfcmVkaXJlY3RfdXJpXCI7XG5cbmV4cG9ydCB7IEFDQ0VTU19UT0tFTiwgQlJPS0VSX0NMSUVOVF9JRCwgQlJPS0VSX1JFRElSRUNUX1VSSSwgQ0NTX0hFQURFUiwgQ0xBSU1TLCBDTElFTlRfQVNTRVJUSU9OLCBDTElFTlRfQVNTRVJUSU9OX1RZUEUsIENMSUVOVF9JRCwgQ0xJRU5UX0lORk8sIENMSUVOVF9SRVFVRVNUX0lELCBDTElFTlRfU0VDUkVULCBDT0RFLCBDT0RFX0NIQUxMRU5HRSwgQ09ERV9DSEFMTEVOR0VfTUVUSE9ELCBDT0RFX1ZFUklGSUVSLCBERVZJQ0VfQ09ERSwgRE9NQUlOX0hJTlQsIEVSUk9SLCBFUlJPUl9ERVNDUklQVElPTiwgRVhQSVJFU19JTiwgRk9DSSwgR1JBTlRfVFlQRSwgSURfVE9LRU4sIElEX1RPS0VOX0hJTlQsIExPR0lOX0hJTlQsIExPR09VVF9ISU5ULCBOQVRJVkVfQlJPS0VSLCBOT05DRSwgT0JPX0FTU0VSVElPTiwgT05fQkVIQUxGX09GLCBQT1NUX0xPR09VVF9VUkksIFBST01QVCwgUkVESVJFQ1RfVVJJLCBSRUZSRVNIX1RPS0VOLCBSRUZSRVNIX1RPS0VOX0VYUElSRVNfSU4sIFJFUVVFU1RFRF9UT0tFTl9VU0UsIFJFUV9DTkYsIFJFU1BPTlNFX01PREUsIFJFU1BPTlNFX1RZUEUsIFJFVFVSTl9TUEFfQ09ERSwgU0NPUEUsIFNFU1NJT05fU1RBVEUsIFNJRCwgU1RBVEUsIFRPS0VOX1RZUEUsIFhfQVBQX05BTUUsIFhfQVBQX1ZFUiwgWF9DTElFTlRfQ1BVLCBYX0NMSUVOVF9DVVJSX1RFTEVNLCBYX0NMSUVOVF9FWFRSQV9TS1UsIFhfQ0xJRU5UX0xBU1RfVEVMRU0sIFhfQ0xJRU5UX09TLCBYX0NMSUVOVF9TS1UsIFhfQ0xJRU5UX1ZFUiwgWF9NU19MSUJfQ0FQQUJJTElUWSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QUFEU2VydmVyUGFyYW1LZXlzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDTElFTlRfSUQiLCJSRURJUkVDVF9VUkkiLCJSRVNQT05TRV9UWVBFIiwiUkVTUE9OU0VfTU9ERSIsIkdSQU5UX1RZUEUiLCJDTEFJTVMiLCJTQ09QRSIsIkVSUk9SIiwiRVJST1JfREVTQ1JJUFRJT04iLCJBQ0NFU1NfVE9LRU4iLCJJRF9UT0tFTiIsIlJFRlJFU0hfVE9LRU4iLCJFWFBJUkVTX0lOIiwiUkVGUkVTSF9UT0tFTl9FWFBJUkVTX0lOIiwiU1RBVEUiLCJOT05DRSIsIlBST01QVCIsIlNFU1NJT05fU1RBVEUiLCJDTElFTlRfSU5GTyIsIkNPREUiLCJDT0RFX0NIQUxMRU5HRSIsIkNPREVfQ0hBTExFTkdFX01FVEhPRCIsIkNPREVfVkVSSUZJRVIiLCJDTElFTlRfUkVRVUVTVF9JRCIsIlhfQ0xJRU5UX1NLVSIsIlhfQ0xJRU5UX1ZFUiIsIlhfQ0xJRU5UX09TIiwiWF9DTElFTlRfQ1BVIiwiWF9DTElFTlRfQ1VSUl9URUxFTSIsIlhfQ0xJRU5UX0xBU1RfVEVMRU0iLCJYX01TX0xJQl9DQVBBQklMSVRZIiwiWF9BUFBfTkFNRSIsIlhfQVBQX1ZFUiIsIlBPU1RfTE9HT1VUX1VSSSIsIklEX1RPS0VOX0hJTlQiLCJERVZJQ0VfQ09ERSIsIkNMSUVOVF9TRUNSRVQiLCJDTElFTlRfQVNTRVJUSU9OIiwiQ0xJRU5UX0FTU0VSVElPTl9UWVBFIiwiVE9LRU5fVFlQRSIsIlJFUV9DTkYiLCJPQk9fQVNTRVJUSU9OIiwiUkVRVUVTVEVEX1RPS0VOX1VTRSIsIk9OX0JFSEFMRl9PRiIsIkZPQ0kiLCJDQ1NfSEVBREVSIiwiUkVUVVJOX1NQQV9DT0RFIiwiTkFUSVZFX0JST0tFUiIsIkxPR09VVF9ISU5UIiwiU0lEIiwiTE9HSU5fSElOVCIsIkRPTUFJTl9ISU5UIiwiWF9DTElFTlRfRVhUUkFfU0tVIiwiQlJPS0VSX0NMSUVOVF9JRCIsIkJST0tFUl9SRURJUkVDVF9VUkkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CRYPTO_IMPLEMENTATION: () => (/* binding */ DEFAULT_CRYPTO_IMPLEMENTATION)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_CRYPTO_IMPLEMENTATION = {\n    createNewGuid: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64Decode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64Encode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    base64UrlEncode: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    encodeKid: ()=>{\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async getPublicKeyThumbprint () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async removeTokenBindingKey () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async clearKeystore () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async signJwt () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    },\n    async hashString () {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.methodNotImplemented);\n    }\n};\n //# sourceMappingURL=ICrypto.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY3J5cHRvL0lDcnlwdG8ubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNxRTtBQUNJO0FBRXpFOzs7Q0FHQyxHQUNELE1BQU1FLGdDQUFnQztJQUNsQ0MsZUFBZTtRQUNYLE1BQU1ILGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBRyxjQUFjO1FBQ1YsTUFBTUosaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0FJLGNBQWM7UUFDVixNQUFNTCxpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQUssaUJBQWlCO1FBQ2IsTUFBTU4saUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0FNLFdBQVc7UUFDUCxNQUFNUCxpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQSxNQUFNTztRQUNGLE1BQU1SLGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBLE1BQU1RO1FBQ0YsTUFBTVQsaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0lBQ0EsTUFBTVM7UUFDRixNQUFNVixpRkFBcUJBLENBQUNDLGlGQUFvQkE7SUFDcEQ7SUFDQSxNQUFNVTtRQUNGLE1BQU1YLGlGQUFxQkEsQ0FBQ0MsaUZBQW9CQTtJQUNwRDtJQUNBLE1BQU1XO1FBQ0YsTUFBTVosaUZBQXFCQSxDQUFDQyxpRkFBb0JBO0lBQ3BEO0FBQ0o7QUFFeUMsQ0FDekMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvY3J5cHRvL0lDcnlwdG8ubWpzPzZlNGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IG1ldGhvZE5vdEltcGxlbWVudGVkIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IERFRkFVTFRfQ1JZUFRPX0lNUExFTUVOVEFUSU9OID0ge1xyXG4gICAgY3JlYXRlTmV3R3VpZDogKCkgPT4ge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYmFzZTY0RGVjb2RlOiAoKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1ldGhvZE5vdEltcGxlbWVudGVkKTtcclxuICAgIH0sXHJcbiAgICBiYXNlNjRFbmNvZGU6ICgpID0+IHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxuICAgIGJhc2U2NFVybEVuY29kZTogKCkgPT4ge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgZW5jb2RlS2lkOiAoKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1ldGhvZE5vdEltcGxlbWVudGVkKTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRQdWJsaWNLZXlUaHVtYnByaW50KCkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgcmVtb3ZlVG9rZW5CaW5kaW5nS2V5KCkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgY2xlYXJLZXlzdG9yZSgpIHtcclxuICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IobWV0aG9kTm90SW1wbGVtZW50ZWQpO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIHNpZ25Kd3QoKSB7XHJcbiAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKG1ldGhvZE5vdEltcGxlbWVudGVkKTtcclxuICAgIH0sXHJcbiAgICBhc3luYyBoYXNoU3RyaW5nKCkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihtZXRob2ROb3RJbXBsZW1lbnRlZCk7XHJcbiAgICB9LFxyXG59O1xuXG5leHBvcnQgeyBERUZBVUxUX0NSWVBUT19JTVBMRU1FTlRBVElPTiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SUNyeXB0by5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwibWV0aG9kTm90SW1wbGVtZW50ZWQiLCJERUZBVUxUX0NSWVBUT19JTVBMRU1FTlRBVElPTiIsImNyZWF0ZU5ld0d1aWQiLCJiYXNlNjREZWNvZGUiLCJiYXNlNjRFbmNvZGUiLCJiYXNlNjRVcmxFbmNvZGUiLCJlbmNvZGVLaWQiLCJnZXRQdWJsaWNLZXlUaHVtYnByaW50IiwicmVtb3ZlVG9rZW5CaW5kaW5nS2V5IiwiY2xlYXJLZXlzdG9yZSIsInNpZ25Kd3QiLCJoYXNoU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PopTokenGenerator: () => (/* binding */ PopTokenGenerator)\n/* harmony export */ });\n/* harmony import */ var _utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/TimeUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../url/UrlString.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/FunctionWrappers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const KeyLocation = {\n    SW: \"sw\",\n    UHW: \"uhw\"\n};\n/** @internal */ class PopTokenGenerator {\n    constructor(cryptoUtils, performanceClient){\n        this.cryptoUtils = cryptoUtils;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */ async generateCnf(request, logger) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\n        const reqCnf = await (0,_utils_FunctionWrappers_mjs__WEBPACK_IMPORTED_MODULE_1__.invokeAsync)(this.generateKid.bind(this), _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\n        const reqCnfString = this.cryptoUtils.base64UrlEncode(JSON.stringify(reqCnf));\n        return {\n            kid: reqCnf.kid,\n            reqCnfString\n        };\n    }\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */ async generateKid(request) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_0__.PerformanceEvents.PopTokenGenerateKid, request.correlationId);\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\n        return {\n            kid: kidThumbprint,\n            xms_ksl: KeyLocation.SW\n        };\n    }\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */ async signPopToken(accessToken, keyId, request) {\n        return this.signPayload(accessToken, keyId, request);\n    }\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */ async signPayload(payload, keyId, request, claims) {\n        // Deconstruct request to extract SHR parameters\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, shrOptions } = request;\n        const resourceUrlString = resourceRequestUri ? new _url_UrlString_mjs__WEBPACK_IMPORTED_MODULE_2__.UrlString(resourceRequestUri) : undefined;\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\n        return this.cryptoUtils.signJwt({\n            at: payload,\n            ts: (0,_utils_TimeUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.nowSeconds)(),\n            m: resourceRequestMethod?.toUpperCase(),\n            u: resourceUrlComponents?.HostNameAndPort,\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\n            p: resourceUrlComponents?.AbsolutePath,\n            q: resourceUrlComponents?.QueryString ? [\n                [],\n                resourceUrlComponents.QueryString\n            ] : undefined,\n            client_claims: shrClaims || undefined,\n            ...claims\n        }, keyId, shrOptions, request.correlationId);\n    }\n}\n //# sourceMappingURL=PopTokenGenerator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/AuthError.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthError: () => (/* binding */ AuthError),\n/* harmony export */   AuthErrorCodes: () => (/* reexport module object */ _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   AuthErrorMessage: () => (/* binding */ AuthErrorMessage),\n/* harmony export */   AuthErrorMessages: () => (/* binding */ AuthErrorMessages),\n/* harmony export */   createAuthError: () => (/* binding */ createAuthError)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const AuthErrorMessages = {\n    [_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError]: \"Unexpected error in authentication.\",\n    [_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\"\n};\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use AuthErrorCodes instead\r\n */ const AuthErrorMessage = {\n    unexpectedError: {\n        code: _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError,\n        desc: AuthErrorMessages[_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedError]\n    },\n    postRequestFailed: {\n        code: _AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed,\n        desc: AuthErrorMessages[_AuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.postRequestFailed]\n    }\n};\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */ class AuthError extends Error {\n    constructor(errorCode, errorMessage, suberror){\n        const errorString = errorMessage ? `${errorCode}: ${errorMessage}` : errorCode;\n        super(errorString);\n        Object.setPrototypeOf(this, AuthError.prototype);\n        this.errorCode = errorCode || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.errorMessage = errorMessage || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.subError = suberror || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        this.name = \"AuthError\";\n    }\n    setCorrelationId(correlationId) {\n        this.correlationId = correlationId;\n    }\n}\nfunction createAuthError(code, additionalMessage) {\n    return new AuthError(code, additionalMessage ? `${AuthErrorMessages[code]} ${additionalMessage}` : AuthErrorMessages[code]);\n}\n //# sourceMappingURL=AuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQXV0aEVycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ21EO0FBQ3VCO0FBQ25CO0FBQzdCO0FBRTFCOzs7Q0FHQyxHQUNELE1BQU1JLG9CQUFvQjtJQUN0QixDQUFDSCxnRUFBZUEsQ0FBQyxFQUFFO0lBQ25CLENBQUNDLGtFQUFpQkEsQ0FBQyxFQUFFO0FBQ3pCO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUcsbUJBQW1CO0lBQ3JCSixpQkFBaUI7UUFDYkssTUFBTUwsZ0VBQWVBO1FBQ3JCTSxNQUFNSCxpQkFBaUIsQ0FBQ0gsZ0VBQWVBLENBQUM7SUFDNUM7SUFDQUMsbUJBQW1CO1FBQ2ZJLE1BQU1KLGtFQUFpQkE7UUFDdkJLLE1BQU1ILGlCQUFpQixDQUFDRixrRUFBaUJBLENBQUM7SUFDOUM7QUFDSjtBQUNBOztDQUVDLEdBQ0QsTUFBTU0sa0JBQWtCQztJQUNwQkMsWUFBWUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLFFBQVEsQ0FBRTtRQUMzQyxNQUFNQyxjQUFjRixlQUNkLENBQUMsRUFBRUQsVUFBVSxFQUFFLEVBQUVDLGFBQWEsQ0FBQyxHQUMvQkQ7UUFDTixLQUFLLENBQUNHO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUVSLFVBQVVTLFNBQVM7UUFDL0MsSUFBSSxDQUFDTixTQUFTLEdBQUdBLGFBQWFYLDJEQUFTQSxDQUFDa0IsWUFBWTtRQUNwRCxJQUFJLENBQUNOLFlBQVksR0FBR0EsZ0JBQWdCWiwyREFBU0EsQ0FBQ2tCLFlBQVk7UUFDMUQsSUFBSSxDQUFDQyxRQUFRLEdBQUdOLFlBQVliLDJEQUFTQSxDQUFDa0IsWUFBWTtRQUNsRCxJQUFJLENBQUNFLElBQUksR0FBRztJQUNoQjtJQUNBQyxpQkFBaUJDLGFBQWEsRUFBRTtRQUM1QixJQUFJLENBQUNBLGFBQWEsR0FBR0E7SUFDekI7QUFDSjtBQUNBLFNBQVNDLGdCQUFnQmpCLElBQUksRUFBRWtCLGlCQUFpQjtJQUM1QyxPQUFPLElBQUloQixVQUFVRixNQUFNa0Isb0JBQ3JCLENBQUMsRUFBRXBCLGlCQUFpQixDQUFDRSxLQUFLLENBQUMsQ0FBQyxFQUFFa0Isa0JBQWtCLENBQUMsR0FDakRwQixpQkFBaUIsQ0FBQ0UsS0FBSztBQUNqQztBQUUyRSxDQUMzRSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9BdXRoRXJyb3IubWpzPzM0ZTciXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi91dGlscy9Db25zdGFudHMubWpzJztcbmltcG9ydCB7IHVuZXhwZWN0ZWRFcnJvciwgcG9zdFJlcXVlc3RGYWlsZWQgfSBmcm9tICcuL0F1dGhFcnJvckNvZGVzLm1qcyc7XG5pbXBvcnQgKiBhcyBBdXRoRXJyb3JDb2RlcyBmcm9tICcuL0F1dGhFcnJvckNvZGVzLm1qcyc7XG5leHBvcnQgeyBBdXRoRXJyb3JDb2RlcyB9O1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgQXV0aEVycm9yTWVzc2FnZXMgPSB7XHJcbiAgICBbdW5leHBlY3RlZEVycm9yXTogXCJVbmV4cGVjdGVkIGVycm9yIGluIGF1dGhlbnRpY2F0aW9uLlwiLFxyXG4gICAgW3Bvc3RSZXF1ZXN0RmFpbGVkXTogXCJQb3N0IHJlcXVlc3QgZmFpbGVkIGZyb20gdGhlIG5ldHdvcmssIGNvdWxkIGJlIGEgNHh4LzV4eCBvciBhIG5ldHdvcmsgdW5hdmFpbGFiaWxpdHkuIFBsZWFzZSBjaGVjayB0aGUgZXhhY3QgZXJyb3IgY29kZSBmb3IgZGV0YWlscy5cIixcclxufTtcclxuLyoqXHJcbiAqIEF1dGhFcnJvck1lc3NhZ2UgY2xhc3MgY29udGFpbmluZyBzdHJpbmcgY29uc3RhbnRzIHVzZWQgYnkgZXJyb3IgY29kZXMgYW5kIG1lc3NhZ2VzLlxyXG4gKiBAZGVwcmVjYXRlZCBVc2UgQXV0aEVycm9yQ29kZXMgaW5zdGVhZFxyXG4gKi9cclxuY29uc3QgQXV0aEVycm9yTWVzc2FnZSA9IHtcclxuICAgIHVuZXhwZWN0ZWRFcnJvcjoge1xyXG4gICAgICAgIGNvZGU6IHVuZXhwZWN0ZWRFcnJvcixcclxuICAgICAgICBkZXNjOiBBdXRoRXJyb3JNZXNzYWdlc1t1bmV4cGVjdGVkRXJyb3JdLFxyXG4gICAgfSxcclxuICAgIHBvc3RSZXF1ZXN0RmFpbGVkOiB7XHJcbiAgICAgICAgY29kZTogcG9zdFJlcXVlc3RGYWlsZWQsXHJcbiAgICAgICAgZGVzYzogQXV0aEVycm9yTWVzc2FnZXNbcG9zdFJlcXVlc3RGYWlsZWRdLFxyXG4gICAgfSxcclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYWwgZXJyb3IgY2xhc3MgdGhyb3duIGJ5IHRoZSBNU0FMLmpzIGxpYnJhcnkuXHJcbiAqL1xyXG5jbGFzcyBBdXRoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSwgc3ViZXJyb3IpIHtcclxuICAgICAgICBjb25zdCBlcnJvclN0cmluZyA9IGVycm9yTWVzc2FnZVxyXG4gICAgICAgICAgICA/IGAke2Vycm9yQ29kZX06ICR7ZXJyb3JNZXNzYWdlfWBcclxuICAgICAgICAgICAgOiBlcnJvckNvZGU7XHJcbiAgICAgICAgc3VwZXIoZXJyb3JTdHJpbmcpO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBBdXRoRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICB0aGlzLmVycm9yQ29kZSA9IGVycm9yQ29kZSB8fCBDb25zdGFudHMuRU1QVFlfU1RSSU5HO1xyXG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgdGhpcy5zdWJFcnJvciA9IHN1YmVycm9yIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJBdXRoRXJyb3JcIjtcclxuICAgIH1cclxuICAgIHNldENvcnJlbGF0aW9uSWQoY29ycmVsYXRpb25JZCkge1xyXG4gICAgICAgIHRoaXMuY29ycmVsYXRpb25JZCA9IGNvcnJlbGF0aW9uSWQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlQXV0aEVycm9yKGNvZGUsIGFkZGl0aW9uYWxNZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbmV3IEF1dGhFcnJvcihjb2RlLCBhZGRpdGlvbmFsTWVzc2FnZVxyXG4gICAgICAgID8gYCR7QXV0aEVycm9yTWVzc2FnZXNbY29kZV19ICR7YWRkaXRpb25hbE1lc3NhZ2V9YFxyXG4gICAgICAgIDogQXV0aEVycm9yTWVzc2FnZXNbY29kZV0pO1xyXG59XG5cbmV4cG9ydCB7IEF1dGhFcnJvciwgQXV0aEVycm9yTWVzc2FnZSwgQXV0aEVycm9yTWVzc2FnZXMsIGNyZWF0ZUF1dGhFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aEVycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDb25zdGFudHMiLCJ1bmV4cGVjdGVkRXJyb3IiLCJwb3N0UmVxdWVzdEZhaWxlZCIsIkF1dGhFcnJvckNvZGVzIiwiQXV0aEVycm9yTWVzc2FnZXMiLCJBdXRoRXJyb3JNZXNzYWdlIiwiY29kZSIsImRlc2MiLCJBdXRoRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiZXJyb3JDb2RlIiwiZXJyb3JNZXNzYWdlIiwic3ViZXJyb3IiLCJlcnJvclN0cmluZyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiRU1QVFlfU1RSSU5HIiwic3ViRXJyb3IiLCJuYW1lIiwic2V0Q29ycmVsYXRpb25JZCIsImNvcnJlbGF0aW9uSWQiLCJjcmVhdGVBdXRoRXJyb3IiLCJhZGRpdGlvbmFsTWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postRequestFailed: () => (/* binding */ postRequestFailed),\n/* harmony export */   unexpectedError: () => (/* binding */ unexpectedError)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const unexpectedError = \"unexpected_error\";\nconst postRequestFailed = \"post_request_failed\";\n //# sourceMappingURL=AuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQXV0aEVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNQSxrQkFBa0I7QUFDeEIsTUFBTUMsb0JBQW9CO0FBRW9CLENBQzlDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL0F1dGhFcnJvckNvZGVzLm1qcz9jYzdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBdXRoRXJyb3JNZXNzYWdlIGNsYXNzIGNvbnRhaW5pbmcgc3RyaW5nIGNvbnN0YW50cyB1c2VkIGJ5IGVycm9yIGNvZGVzIGFuZCBtZXNzYWdlcy5cclxuICovXHJcbmNvbnN0IHVuZXhwZWN0ZWRFcnJvciA9IFwidW5leHBlY3RlZF9lcnJvclwiO1xyXG5jb25zdCBwb3N0UmVxdWVzdEZhaWxlZCA9IFwicG9zdF9yZXF1ZXN0X2ZhaWxlZFwiO1xuXG5leHBvcnQgeyBwb3N0UmVxdWVzdEZhaWxlZCwgdW5leHBlY3RlZEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRoRXJyb3JDb2Rlcy5tanMubWFwXG4iXSwibmFtZXMiOlsidW5leHBlY3RlZEVycm9yIiwicG9zdFJlcXVlc3RGYWlsZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/CacheError.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CacheError: () => (/* binding */ CacheError),\n/* harmony export */   CacheErrorCodes: () => (/* reexport module object */ _CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   CacheErrorMessages: () => (/* binding */ CacheErrorMessages)\n/* harmony export */ });\n/* harmony import */ var _CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CacheErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const CacheErrorMessages = {\n    [_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheQuotaExceededErrorCode]: \"Exceeded cache storage capacity.\",\n    [_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheUnknownErrorCode]: \"Unexpected error occurred when using cache storage.\"\n};\n/**\r\n * Error thrown when there is an error with the cache\r\n */ class CacheError extends Error {\n    constructor(errorCode, errorMessage){\n        const message = errorMessage || (CacheErrorMessages[errorCode] ? CacheErrorMessages[errorCode] : CacheErrorMessages[_CacheErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cacheUnknownErrorCode]);\n        super(`${errorCode}: ${message}`);\n        Object.setPrototypeOf(this, CacheError.prototype);\n        this.name = \"CacheError\";\n        this.errorCode = errorCode;\n        this.errorMessage = message;\n    }\n}\n //# sourceMappingURL=CacheError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUMyRjtBQUNsQztBQUM5QjtBQUUzQjs7O0NBR0MsR0FDRCxNQUFNRyxxQkFBcUI7SUFDdkIsQ0FBQ0YsNkVBQTJCQSxDQUFDLEVBQUU7SUFDL0IsQ0FBQ0QsdUVBQXFCQSxDQUFDLEVBQUU7QUFDN0I7QUFDQTs7Q0FFQyxHQUNELE1BQU1JLG1CQUFtQkM7SUFDckJDLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxDQUFFO1FBQ2pDLE1BQU1DLFVBQVVELGdCQUNYTCxDQUFBQSxrQkFBa0IsQ0FBQ0ksVUFBVSxHQUN4Qkosa0JBQWtCLENBQUNJLFVBQVUsR0FDN0JKLGtCQUFrQixDQUFDSCx1RUFBcUJBLENBQUM7UUFDbkQsS0FBSyxDQUFDLENBQUMsRUFBRU8sVUFBVSxFQUFFLEVBQUVFLFFBQVEsQ0FBQztRQUNoQ0MsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRVAsV0FBV1EsU0FBUztRQUNoRCxJQUFJLENBQUNDLElBQUksR0FBRztRQUNaLElBQUksQ0FBQ04sU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNDLFlBQVksR0FBR0M7SUFDeEI7QUFDSjtBQUUwQyxDQUMxQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9lcnJvci9DYWNoZUVycm9yLm1qcz8xMGIwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY2FjaGVVbmtub3duRXJyb3JDb2RlLCBjYWNoZVF1b3RhRXhjZWVkZWRFcnJvckNvZGUgfSBmcm9tICcuL0NhY2hlRXJyb3JDb2Rlcy5tanMnO1xuaW1wb3J0ICogYXMgQ2FjaGVFcnJvckNvZGVzIGZyb20gJy4vQ2FjaGVFcnJvckNvZGVzLm1qcyc7XG5leHBvcnQgeyBDYWNoZUVycm9yQ29kZXMgfTtcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IENhY2hlRXJyb3JNZXNzYWdlcyA9IHtcclxuICAgIFtjYWNoZVF1b3RhRXhjZWVkZWRFcnJvckNvZGVdOiBcIkV4Y2VlZGVkIGNhY2hlIHN0b3JhZ2UgY2FwYWNpdHkuXCIsXHJcbiAgICBbY2FjaGVVbmtub3duRXJyb3JDb2RlXTogXCJVbmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIHdoZW4gdXNpbmcgY2FjaGUgc3RvcmFnZS5cIixcclxufTtcclxuLyoqXHJcbiAqIEVycm9yIHRocm93biB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIHdpdGggdGhlIGNhY2hlXHJcbiAqL1xyXG5jbGFzcyBDYWNoZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gZXJyb3JNZXNzYWdlIHx8XHJcbiAgICAgICAgICAgIChDYWNoZUVycm9yTWVzc2FnZXNbZXJyb3JDb2RlXVxyXG4gICAgICAgICAgICAgICAgPyBDYWNoZUVycm9yTWVzc2FnZXNbZXJyb3JDb2RlXVxyXG4gICAgICAgICAgICAgICAgOiBDYWNoZUVycm9yTWVzc2FnZXNbY2FjaGVVbmtub3duRXJyb3JDb2RlXSk7XHJcbiAgICAgICAgc3VwZXIoYCR7ZXJyb3JDb2RlfTogJHttZXNzYWdlfWApO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDYWNoZUVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJDYWNoZUVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XHJcbiAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENhY2hlRXJyb3IsIENhY2hlRXJyb3JNZXNzYWdlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FjaGVFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiY2FjaGVVbmtub3duRXJyb3JDb2RlIiwiY2FjaGVRdW90YUV4Y2VlZGVkRXJyb3JDb2RlIiwiQ2FjaGVFcnJvckNvZGVzIiwiQ2FjaGVFcnJvck1lc3NhZ2VzIiwiQ2FjaGVFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvckNvZGUiLCJlcnJvck1lc3NhZ2UiLCJtZXNzYWdlIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/CacheError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cacheQuotaExceededErrorCode: () => (/* binding */ cacheQuotaExceededErrorCode),\n/* harmony export */   cacheUnknownErrorCode: () => (/* binding */ cacheUnknownErrorCode)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const cacheQuotaExceededErrorCode = \"cache_quota_exceeded\";\nconst cacheUnknownErrorCode = \"cache_error_unknown\";\n //# sourceMappingURL=CacheErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvckNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BLDhCQUE4QjtBQUNwQyxNQUFNQyx3QkFBd0I7QUFFZ0MsQ0FDOUQsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2FjaGVFcnJvckNvZGVzLm1qcz85MDVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGNhY2hlUXVvdGFFeGNlZWRlZEVycm9yQ29kZSA9IFwiY2FjaGVfcXVvdGFfZXhjZWVkZWRcIjtcclxuY29uc3QgY2FjaGVVbmtub3duRXJyb3JDb2RlID0gXCJjYWNoZV9lcnJvcl91bmtub3duXCI7XG5cbmV4cG9ydCB7IGNhY2hlUXVvdGFFeGNlZWRlZEVycm9yQ29kZSwgY2FjaGVVbmtub3duRXJyb3JDb2RlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYWNoZUVycm9yQ29kZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNhY2hlUXVvdGFFeGNlZWRlZEVycm9yQ29kZSIsImNhY2hlVW5rbm93bkVycm9yQ29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/CacheErrorCodes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientAuthError: () => (/* binding */ ClientAuthError),\n/* harmony export */   ClientAuthErrorCodes: () => (/* reexport module object */ _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   ClientAuthErrorMessage: () => (/* binding */ ClientAuthErrorMessage),\n/* harmony export */   ClientAuthErrorMessages: () => (/* binding */ ClientAuthErrorMessages),\n/* harmony export */   createClientAuthError: () => (/* binding */ createClientAuthError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const ClientAuthErrorMessages = {\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError]: \"The client info was empty\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError]: \"Token cannot be parsed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken]: \"The token is null or empty\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError]: \"Endpoints cannot be resolved\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError]: \"Network request failed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized]: \"The hash parameters could not be deserialized\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState]: \"State was not the expected format\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch]: \"State mismatch error\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound]: \"State not found\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch]: \"Nonce mismatch error\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet]: \"Cannot append ScopeSet\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired]: \"Device code is expired.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord]: \"Cache record object was null or undefined.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound]: \"No account found in cache for given key.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject]: \"No crypto object detected.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType]: \"Unexpected credential type.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached]: \"User defined timeout for device code polling reached\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled]: \"User cancelled the flow.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.methodNotImplemented]: \"This method has not been implemented\",\n    [_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\"\n};\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */ const ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoDecodingError]\n    },\n    clientInfoEmptyError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.clientInfoEmptyError]\n    },\n    tokenParsingError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenParsingError]\n    },\n    nullOrEmptyToken: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nullOrEmptyToken]\n    },\n    endpointResolutionError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endpointResolutionError]\n    },\n    networkError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkError]\n    },\n    unableToGetOpenidConfigError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.openIdConfigError]\n    },\n    hashNotDeserialized: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.hashNotDeserialized]\n    },\n    invalidStateError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidState]\n    },\n    stateMismatchError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateMismatch]\n    },\n    stateNotFoundError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.stateNotFound]\n    },\n    nonceMismatchError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nonceMismatch]\n    },\n    authTimeNotFoundError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authTimeNotFound]\n    },\n    maxAgeTranspired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.maxAgeTranspired]\n    },\n    multipleMatchingTokens: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingTokens]\n    },\n    multipleMatchingAccounts: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAccounts]\n    },\n    multipleMatchingAppMetadata: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.multipleMatchingAppMetadata]\n    },\n    tokenRequestCannotBeMade: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.requestCannotBeMade]\n    },\n    removeEmptyScopeError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotRemoveEmptyScope]\n    },\n    appendScopeSetError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAppendScopeSet]\n    },\n    emptyInputScopeSetError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopeSet]\n    },\n    DeviceCodePollingCancelled: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodePollingCancelled]\n    },\n    DeviceCodeExpired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeExpired]\n    },\n    DeviceCodeUnknownError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.deviceCodeUnknownError]\n    },\n    NoAccountInSilentRequest: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountInSilentRequest]\n    },\n    invalidCacheRecord: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheRecord]\n    },\n    invalidCacheEnvironment: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCacheEnvironment]\n    },\n    noAccountFound: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noAccountFound]\n    },\n    noCryptoObj: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noCryptoObject]\n    },\n    unexpectedCredentialType: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unexpectedCredentialType]\n    },\n    invalidAssertion: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAssertion]\n    },\n    invalidClientCredential: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClientCredential]\n    },\n    tokenRefreshRequired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRefreshRequired]\n    },\n    userTimeoutReached: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userTimeoutReached]\n    },\n    tokenClaimsRequired: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenClaimsCnfRequiredForSignedJwt]\n    },\n    noAuthorizationCodeFromServer: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorizationCodeMissingFromServerResponse]\n    },\n    bindingKeyNotRemovedError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.bindingKeyNotRemoved]\n    },\n    logoutNotSupported: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.endSessionEndpointNotSupported]\n    },\n    keyIdMissing: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.keyIdMissing]\n    },\n    noNetworkConnectivity: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noNetworkConnectivity]\n    },\n    userCanceledError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userCanceled]\n    },\n    missingTenantIdError: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingTenantIdError]\n    },\n    nestedAppAuthBridgeDisabled: {\n        code: _ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled,\n        desc: ClientAuthErrorMessages[_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nestedAppAuthBridgeDisabled]\n    }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */ class ClientAuthError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, additionalMessage){\n        super(errorCode, additionalMessage ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}` : ClientAuthErrorMessages[errorCode]);\n        this.name = \"ClientAuthError\";\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n}\nfunction createClientAuthError(errorCode, additionalMessage) {\n    return new ClientAuthError(errorCode, additionalMessage);\n}\n //# sourceMappingURL=ClientAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authTimeNotFound: () => (/* binding */ authTimeNotFound),\n/* harmony export */   authorizationCodeMissingFromServerResponse: () => (/* binding */ authorizationCodeMissingFromServerResponse),\n/* harmony export */   bindingKeyNotRemoved: () => (/* binding */ bindingKeyNotRemoved),\n/* harmony export */   cannotAppendScopeSet: () => (/* binding */ cannotAppendScopeSet),\n/* harmony export */   cannotRemoveEmptyScope: () => (/* binding */ cannotRemoveEmptyScope),\n/* harmony export */   clientInfoDecodingError: () => (/* binding */ clientInfoDecodingError),\n/* harmony export */   clientInfoEmptyError: () => (/* binding */ clientInfoEmptyError),\n/* harmony export */   deviceCodeExpired: () => (/* binding */ deviceCodeExpired),\n/* harmony export */   deviceCodePollingCancelled: () => (/* binding */ deviceCodePollingCancelled),\n/* harmony export */   deviceCodeUnknownError: () => (/* binding */ deviceCodeUnknownError),\n/* harmony export */   emptyInputScopeSet: () => (/* binding */ emptyInputScopeSet),\n/* harmony export */   endSessionEndpointNotSupported: () => (/* binding */ endSessionEndpointNotSupported),\n/* harmony export */   endpointResolutionError: () => (/* binding */ endpointResolutionError),\n/* harmony export */   hashNotDeserialized: () => (/* binding */ hashNotDeserialized),\n/* harmony export */   invalidAssertion: () => (/* binding */ invalidAssertion),\n/* harmony export */   invalidCacheEnvironment: () => (/* binding */ invalidCacheEnvironment),\n/* harmony export */   invalidCacheRecord: () => (/* binding */ invalidCacheRecord),\n/* harmony export */   invalidClientCredential: () => (/* binding */ invalidClientCredential),\n/* harmony export */   invalidState: () => (/* binding */ invalidState),\n/* harmony export */   keyIdMissing: () => (/* binding */ keyIdMissing),\n/* harmony export */   maxAgeTranspired: () => (/* binding */ maxAgeTranspired),\n/* harmony export */   methodNotImplemented: () => (/* binding */ methodNotImplemented),\n/* harmony export */   missingTenantIdError: () => (/* binding */ missingTenantIdError),\n/* harmony export */   multipleMatchingAccounts: () => (/* binding */ multipleMatchingAccounts),\n/* harmony export */   multipleMatchingAppMetadata: () => (/* binding */ multipleMatchingAppMetadata),\n/* harmony export */   multipleMatchingTokens: () => (/* binding */ multipleMatchingTokens),\n/* harmony export */   nestedAppAuthBridgeDisabled: () => (/* binding */ nestedAppAuthBridgeDisabled),\n/* harmony export */   networkError: () => (/* binding */ networkError),\n/* harmony export */   noAccountFound: () => (/* binding */ noAccountFound),\n/* harmony export */   noAccountInSilentRequest: () => (/* binding */ noAccountInSilentRequest),\n/* harmony export */   noCryptoObject: () => (/* binding */ noCryptoObject),\n/* harmony export */   noNetworkConnectivity: () => (/* binding */ noNetworkConnectivity),\n/* harmony export */   nonceMismatch: () => (/* binding */ nonceMismatch),\n/* harmony export */   nullOrEmptyToken: () => (/* binding */ nullOrEmptyToken),\n/* harmony export */   openIdConfigError: () => (/* binding */ openIdConfigError),\n/* harmony export */   requestCannotBeMade: () => (/* binding */ requestCannotBeMade),\n/* harmony export */   stateMismatch: () => (/* binding */ stateMismatch),\n/* harmony export */   stateNotFound: () => (/* binding */ stateNotFound),\n/* harmony export */   tokenClaimsCnfRequiredForSignedJwt: () => (/* binding */ tokenClaimsCnfRequiredForSignedJwt),\n/* harmony export */   tokenParsingError: () => (/* binding */ tokenParsingError),\n/* harmony export */   tokenRefreshRequired: () => (/* binding */ tokenRefreshRequired),\n/* harmony export */   unexpectedCredentialType: () => (/* binding */ unexpectedCredentialType),\n/* harmony export */   userCanceled: () => (/* binding */ userCanceled),\n/* harmony export */   userTimeoutReached: () => (/* binding */ userTimeoutReached)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const clientInfoDecodingError = \"client_info_decoding_error\";\nconst clientInfoEmptyError = \"client_info_empty_error\";\nconst tokenParsingError = \"token_parsing_error\";\nconst nullOrEmptyToken = \"null_or_empty_token\";\nconst endpointResolutionError = \"endpoints_resolution_error\";\nconst networkError = \"network_error\";\nconst openIdConfigError = \"openid_config_error\";\nconst hashNotDeserialized = \"hash_not_deserialized\";\nconst invalidState = \"invalid_state\";\nconst stateMismatch = \"state_mismatch\";\nconst stateNotFound = \"state_not_found\";\nconst nonceMismatch = \"nonce_mismatch\";\nconst authTimeNotFound = \"auth_time_not_found\";\nconst maxAgeTranspired = \"max_age_transpired\";\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\nconst requestCannotBeMade = \"request_cannot_be_made\";\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\nconst emptyInputScopeSet = \"empty_input_scopeset\";\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\nconst deviceCodeExpired = \"device_code_expired\";\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\nconst invalidCacheRecord = \"invalid_cache_record\";\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\nconst noAccountFound = \"no_account_found\";\nconst noCryptoObject = \"no_crypto_object\";\nconst unexpectedCredentialType = \"unexpected_credential_type\";\nconst invalidAssertion = \"invalid_assertion\";\nconst invalidClientCredential = \"invalid_client_credential\";\nconst tokenRefreshRequired = \"token_refresh_required\";\nconst userTimeoutReached = \"user_timeout_reached\";\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\nconst keyIdMissing = \"key_id_missing\";\nconst noNetworkConnectivity = \"no_network_connectivity\";\nconst userCanceled = \"user_canceled\";\nconst missingTenantIdError = \"missing_tenant_id_error\";\nconst methodNotImplemented = \"method_not_implemented\";\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n //# sourceMappingURL=ClientAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientConfigurationError: () => (/* binding */ ClientConfigurationError),\n/* harmony export */   ClientConfigurationErrorCodes: () => (/* reexport module object */ _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   ClientConfigurationErrorMessage: () => (/* binding */ ClientConfigurationErrorMessage),\n/* harmony export */   ClientConfigurationErrorMessages: () => (/* binding */ ClientConfigurationErrorMessages),\n/* harmony export */   createClientConfigurationError: () => (/* binding */ createClientConfigurationError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientConfigurationErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const ClientConfigurationErrorMessages = {\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError]: \"Could not parse the given claims request object.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError]: \"URL could not be parsed into appropriate segments.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError]: \"URL was empty or null.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue]: \"Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty]: \"The logout request was null or undefined.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader]: \"Invalid authentication header provided\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker]: \"Cannot set allowNativeBroker parameter to true when not in AAD protocol mode.\",\n    [_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\"\n};\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */ const ClientConfigurationErrorMessage = {\n    redirectUriNotSet: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.redirectUriEmpty]\n    },\n    claimsRequestParsingError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.claimsRequestParsingError]\n    },\n    authorityUriInsecure: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityUriInsecure]\n    },\n    urlParseError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlParseError]\n    },\n    urlEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.urlEmptyError]\n    },\n    emptyScopesError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.emptyInputScopesError]\n    },\n    invalidPrompt: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidPromptValue]\n    },\n    invalidClaimsRequest: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidClaims]\n    },\n    tokenRequestEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.tokenRequestEmpty]\n    },\n    logoutRequestEmptyError: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.logoutRequestEmpty]\n    },\n    invalidCodeChallengeMethod: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCodeChallengeMethod]\n    },\n    invalidCodeChallengeParams: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.pkceParamsMissing]\n    },\n    invalidCloudDiscoveryMetadata: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidCloudDiscoveryMetadata]\n    },\n    invalidAuthorityMetadata: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthorityMetadata]\n    },\n    untrustedAuthority: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.untrustedAuthority]\n    },\n    missingSshJwk: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshJwk]\n    },\n    missingSshKid: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingSshKid]\n    },\n    missingNonceAuthenticationHeader: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingNonceAuthenticationHeader]\n    },\n    invalidAuthenticationHeader: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidAuthenticationHeader]\n    },\n    cannotSetOIDCOptions: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotSetOIDCOptions]\n    },\n    cannotAllowNativeBroker: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.cannotAllowNativeBroker]\n    },\n    authorityMismatch: {\n        code: _ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch,\n        desc: ClientConfigurationErrorMessages[_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.authorityMismatch]\n    }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */ class ClientConfigurationError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode){\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\n        this.name = \"ClientConfigurationError\";\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\n    }\n}\nfunction createClientConfigurationError(errorCode) {\n    return new ClientConfigurationError(errorCode);\n}\n //# sourceMappingURL=ClientConfigurationError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorityMismatch: () => (/* binding */ authorityMismatch),\n/* harmony export */   authorityUriInsecure: () => (/* binding */ authorityUriInsecure),\n/* harmony export */   cannotAllowNativeBroker: () => (/* binding */ cannotAllowNativeBroker),\n/* harmony export */   cannotSetOIDCOptions: () => (/* binding */ cannotSetOIDCOptions),\n/* harmony export */   claimsRequestParsingError: () => (/* binding */ claimsRequestParsingError),\n/* harmony export */   emptyInputScopesError: () => (/* binding */ emptyInputScopesError),\n/* harmony export */   invalidAuthenticationHeader: () => (/* binding */ invalidAuthenticationHeader),\n/* harmony export */   invalidAuthorityMetadata: () => (/* binding */ invalidAuthorityMetadata),\n/* harmony export */   invalidClaims: () => (/* binding */ invalidClaims),\n/* harmony export */   invalidCloudDiscoveryMetadata: () => (/* binding */ invalidCloudDiscoveryMetadata),\n/* harmony export */   invalidCodeChallengeMethod: () => (/* binding */ invalidCodeChallengeMethod),\n/* harmony export */   invalidPromptValue: () => (/* binding */ invalidPromptValue),\n/* harmony export */   logoutRequestEmpty: () => (/* binding */ logoutRequestEmpty),\n/* harmony export */   missingNonceAuthenticationHeader: () => (/* binding */ missingNonceAuthenticationHeader),\n/* harmony export */   missingSshJwk: () => (/* binding */ missingSshJwk),\n/* harmony export */   missingSshKid: () => (/* binding */ missingSshKid),\n/* harmony export */   pkceParamsMissing: () => (/* binding */ pkceParamsMissing),\n/* harmony export */   redirectUriEmpty: () => (/* binding */ redirectUriEmpty),\n/* harmony export */   tokenRequestEmpty: () => (/* binding */ tokenRequestEmpty),\n/* harmony export */   untrustedAuthority: () => (/* binding */ untrustedAuthority),\n/* harmony export */   urlEmptyError: () => (/* binding */ urlEmptyError),\n/* harmony export */   urlParseError: () => (/* binding */ urlParseError)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const redirectUriEmpty = \"redirect_uri_empty\";\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\nconst authorityUriInsecure = \"authority_uri_insecure\";\nconst urlParseError = \"url_parse_error\";\nconst urlEmptyError = \"empty_url_error\";\nconst emptyInputScopesError = \"empty_input_scopes_error\";\nconst invalidPromptValue = \"invalid_prompt_value\";\nconst invalidClaims = \"invalid_claims\";\nconst tokenRequestEmpty = \"token_request_empty\";\nconst logoutRequestEmpty = \"logout_request_empty\";\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\nconst pkceParamsMissing = \"pkce_params_missing\";\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\nconst untrustedAuthority = \"untrusted_authority\";\nconst missingSshJwk = \"missing_ssh_jwk\";\nconst missingSshKid = \"missing_ssh_kid\";\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\nconst cannotAllowNativeBroker = \"cannot_allow_native_broker\";\nconst authorityMismatch = \"authority_mismatch\";\n //# sourceMappingURL=ClientConfigurationErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxNQUFNQSxtQkFBbUI7QUFDekIsTUFBTUMsNEJBQTRCO0FBQ2xDLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLHdCQUF3QjtBQUM5QixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxxQkFBcUI7QUFDM0IsTUFBTUMsNkJBQTZCO0FBQ25DLE1BQU1DLG9CQUFvQjtBQUMxQixNQUFNQyxnQ0FBZ0M7QUFDdEMsTUFBTUMsMkJBQTJCO0FBQ2pDLE1BQU1DLHFCQUFxQjtBQUMzQixNQUFNQyxnQkFBZ0I7QUFDdEIsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLG1DQUFtQztBQUN6QyxNQUFNQyw4QkFBOEI7QUFDcEMsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLDBCQUEwQjtBQUNoQyxNQUFNQyxvQkFBb0I7QUFFNmMsQ0FDdmUsMERBQTBEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yQ29kZXMubWpzP2NmZDAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgcmVkaXJlY3RVcmlFbXB0eSA9IFwicmVkaXJlY3RfdXJpX2VtcHR5XCI7XHJcbmNvbnN0IGNsYWltc1JlcXVlc3RQYXJzaW5nRXJyb3IgPSBcImNsYWltc19yZXF1ZXN0X3BhcnNpbmdfZXJyb3JcIjtcclxuY29uc3QgYXV0aG9yaXR5VXJpSW5zZWN1cmUgPSBcImF1dGhvcml0eV91cmlfaW5zZWN1cmVcIjtcclxuY29uc3QgdXJsUGFyc2VFcnJvciA9IFwidXJsX3BhcnNlX2Vycm9yXCI7XHJcbmNvbnN0IHVybEVtcHR5RXJyb3IgPSBcImVtcHR5X3VybF9lcnJvclwiO1xyXG5jb25zdCBlbXB0eUlucHV0U2NvcGVzRXJyb3IgPSBcImVtcHR5X2lucHV0X3Njb3Blc19lcnJvclwiO1xyXG5jb25zdCBpbnZhbGlkUHJvbXB0VmFsdWUgPSBcImludmFsaWRfcHJvbXB0X3ZhbHVlXCI7XHJcbmNvbnN0IGludmFsaWRDbGFpbXMgPSBcImludmFsaWRfY2xhaW1zXCI7XHJcbmNvbnN0IHRva2VuUmVxdWVzdEVtcHR5ID0gXCJ0b2tlbl9yZXF1ZXN0X2VtcHR5XCI7XHJcbmNvbnN0IGxvZ291dFJlcXVlc3RFbXB0eSA9IFwibG9nb3V0X3JlcXVlc3RfZW1wdHlcIjtcclxuY29uc3QgaW52YWxpZENvZGVDaGFsbGVuZ2VNZXRob2QgPSBcImludmFsaWRfY29kZV9jaGFsbGVuZ2VfbWV0aG9kXCI7XHJcbmNvbnN0IHBrY2VQYXJhbXNNaXNzaW5nID0gXCJwa2NlX3BhcmFtc19taXNzaW5nXCI7XHJcbmNvbnN0IGludmFsaWRDbG91ZERpc2NvdmVyeU1ldGFkYXRhID0gXCJpbnZhbGlkX2Nsb3VkX2Rpc2NvdmVyeV9tZXRhZGF0YVwiO1xyXG5jb25zdCBpbnZhbGlkQXV0aG9yaXR5TWV0YWRhdGEgPSBcImludmFsaWRfYXV0aG9yaXR5X21ldGFkYXRhXCI7XHJcbmNvbnN0IHVudHJ1c3RlZEF1dGhvcml0eSA9IFwidW50cnVzdGVkX2F1dGhvcml0eVwiO1xyXG5jb25zdCBtaXNzaW5nU3NoSndrID0gXCJtaXNzaW5nX3NzaF9qd2tcIjtcclxuY29uc3QgbWlzc2luZ1NzaEtpZCA9IFwibWlzc2luZ19zc2hfa2lkXCI7XHJcbmNvbnN0IG1pc3NpbmdOb25jZUF1dGhlbnRpY2F0aW9uSGVhZGVyID0gXCJtaXNzaW5nX25vbmNlX2F1dGhlbnRpY2F0aW9uX2hlYWRlclwiO1xyXG5jb25zdCBpbnZhbGlkQXV0aGVudGljYXRpb25IZWFkZXIgPSBcImludmFsaWRfYXV0aGVudGljYXRpb25faGVhZGVyXCI7XHJcbmNvbnN0IGNhbm5vdFNldE9JRENPcHRpb25zID0gXCJjYW5ub3Rfc2V0X09JRENPcHRpb25zXCI7XHJcbmNvbnN0IGNhbm5vdEFsbG93TmF0aXZlQnJva2VyID0gXCJjYW5ub3RfYWxsb3dfbmF0aXZlX2Jyb2tlclwiO1xyXG5jb25zdCBhdXRob3JpdHlNaXNtYXRjaCA9IFwiYXV0aG9yaXR5X21pc21hdGNoXCI7XG5cbmV4cG9ydCB7IGF1dGhvcml0eU1pc21hdGNoLCBhdXRob3JpdHlVcmlJbnNlY3VyZSwgY2Fubm90QWxsb3dOYXRpdmVCcm9rZXIsIGNhbm5vdFNldE9JRENPcHRpb25zLCBjbGFpbXNSZXF1ZXN0UGFyc2luZ0Vycm9yLCBlbXB0eUlucHV0U2NvcGVzRXJyb3IsIGludmFsaWRBdXRoZW50aWNhdGlvbkhlYWRlciwgaW52YWxpZEF1dGhvcml0eU1ldGFkYXRhLCBpbnZhbGlkQ2xhaW1zLCBpbnZhbGlkQ2xvdWREaXNjb3ZlcnlNZXRhZGF0YSwgaW52YWxpZENvZGVDaGFsbGVuZ2VNZXRob2QsIGludmFsaWRQcm9tcHRWYWx1ZSwgbG9nb3V0UmVxdWVzdEVtcHR5LCBtaXNzaW5nTm9uY2VBdXRoZW50aWNhdGlvbkhlYWRlciwgbWlzc2luZ1NzaEp3aywgbWlzc2luZ1NzaEtpZCwgcGtjZVBhcmFtc01pc3NpbmcsIHJlZGlyZWN0VXJpRW1wdHksIHRva2VuUmVxdWVzdEVtcHR5LCB1bnRydXN0ZWRBdXRob3JpdHksIHVybEVtcHR5RXJyb3IsIHVybFBhcnNlRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJyZWRpcmVjdFVyaUVtcHR5IiwiY2xhaW1zUmVxdWVzdFBhcnNpbmdFcnJvciIsImF1dGhvcml0eVVyaUluc2VjdXJlIiwidXJsUGFyc2VFcnJvciIsInVybEVtcHR5RXJyb3IiLCJlbXB0eUlucHV0U2NvcGVzRXJyb3IiLCJpbnZhbGlkUHJvbXB0VmFsdWUiLCJpbnZhbGlkQ2xhaW1zIiwidG9rZW5SZXF1ZXN0RW1wdHkiLCJsb2dvdXRSZXF1ZXN0RW1wdHkiLCJpbnZhbGlkQ29kZUNoYWxsZW5nZU1ldGhvZCIsInBrY2VQYXJhbXNNaXNzaW5nIiwiaW52YWxpZENsb3VkRGlzY292ZXJ5TWV0YWRhdGEiLCJpbnZhbGlkQXV0aG9yaXR5TWV0YWRhdGEiLCJ1bnRydXN0ZWRBdXRob3JpdHkiLCJtaXNzaW5nU3NoSndrIiwibWlzc2luZ1NzaEtpZCIsIm1pc3NpbmdOb25jZUF1dGhlbnRpY2F0aW9uSGVhZGVyIiwiaW52YWxpZEF1dGhlbnRpY2F0aW9uSGVhZGVyIiwiY2Fubm90U2V0T0lEQ09wdGlvbnMiLCJjYW5ub3RBbGxvd05hdGl2ZUJyb2tlciIsImF1dGhvcml0eU1pc21hdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractionRequiredAuthError: () => (/* binding */ InteractionRequiredAuthError),\n/* harmony export */   InteractionRequiredAuthErrorCodes: () => (/* reexport module object */ _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   InteractionRequiredAuthErrorMessage: () => (/* binding */ InteractionRequiredAuthErrorMessage),\n/* harmony export */   InteractionRequiredAuthSubErrorMessage: () => (/* binding */ InteractionRequiredAuthSubErrorMessage),\n/* harmony export */   InteractionRequiredServerErrorMessage: () => (/* binding */ InteractionRequiredServerErrorMessage),\n/* harmony export */   createInteractionRequiredAuthError: () => (/* binding */ createInteractionRequiredAuthError),\n/* harmony export */   isInteractionRequiredError: () => (/* binding */ isInteractionRequiredError)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InteractionRequiredAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */ const InteractionRequiredServerErrorMessage = [\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.interactionRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.consentRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.loginRequired,\n    _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken\n];\nconst InteractionRequiredAuthSubErrorMessage = [\n    \"message_only\",\n    \"additional_action\",\n    \"basic_action\",\n    \"user_password_expired\",\n    \"consent_required\",\n    \"bad_token\"\n];\nconst InteractionRequiredAuthErrorMessages = {\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.refreshTokenExpired]: \"Refresh token has expired.\",\n    [_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken]: \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\"\n};\n/**\r\n * Interaction required errors defined by the SDK\r\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\r\n */ const InteractionRequiredAuthErrorMessage = {\n    noTokensFoundError: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.noTokensFound]\n    },\n    native_account_unavailable: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.nativeAccountUnavailable]\n    },\n    bad_token: {\n        code: _InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken,\n        desc: InteractionRequiredAuthErrorMessages[_InteractionRequiredAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.badToken]\n    }\n};\n/**\r\n * Error thrown when user interaction is required.\r\n */ class InteractionRequiredAuthError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo){\n        super(errorCode, errorMessage, subError);\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\n        this.timestamp = timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.traceId = traceId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.correlationId = correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.claims = claims || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.EMPTY_STRING;\n        this.name = \"InteractionRequiredAuthError\";\n        this.errorNo = errorNo;\n    }\n}\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param errorCode\r\n * @param errorString\r\n * @param subError\r\n */ function isInteractionRequiredError(errorCode, errorString, subError) {\n    const isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\n    const isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\n    const isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some((irErrorCode)=>{\n        return errorString.indexOf(irErrorCode) > -1;\n    });\n    return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;\n}\n/**\r\n * Creates an InteractionRequiredAuthError\r\n */ function createInteractionRequiredAuthError(errorCode) {\n    return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\n}\n //# sourceMappingURL=InteractionRequiredAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNtRDtBQUNQO0FBQzBJO0FBQ3pGO0FBQ2hEO0FBRTdDOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTVUsd0NBQXdDO0lBQzFDSix1RkFBbUJBO0lBQ25CQyxtRkFBZUE7SUFDZkMsaUZBQWFBO0lBQ2JKLDRFQUFRQTtDQUNYO0FBQ0QsTUFBTU8seUNBQXlDO0lBQzNDO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsTUFBTUMsdUNBQXVDO0lBQ3pDLENBQUNWLGlGQUFhQSxDQUFDLEVBQUU7SUFDakIsQ0FBQ0MsNEZBQXdCQSxDQUFDLEVBQUU7SUFDNUIsQ0FBQ0UsdUZBQW1CQSxDQUFDLEVBQUU7SUFDdkIsQ0FBQ0QsNEVBQVFBLENBQUMsRUFBRTtBQUNoQjtBQUNBOzs7Q0FHQyxHQUNELE1BQU1TLHNDQUFzQztJQUN4Q0Msb0JBQW9CO1FBQ2hCQyxNQUFNYixpRkFBYUE7UUFDbkJjLE1BQU1KLG9DQUFvQyxDQUFDVixpRkFBYUEsQ0FBQztJQUM3RDtJQUNBZSw0QkFBNEI7UUFDeEJGLE1BQU1aLDRGQUF3QkE7UUFDOUJhLE1BQU1KLG9DQUFvQyxDQUFDVCw0RkFBd0JBLENBQUM7SUFDeEU7SUFDQWUsV0FBVztRQUNQSCxNQUFNWCw0RUFBUUE7UUFDZFksTUFBTUosb0NBQW9DLENBQUNSLDRFQUFRQSxDQUFDO0lBQ3hEO0FBQ0o7QUFDQTs7Q0FFQyxHQUNELE1BQU1lLHFDQUFxQ2xCLHFEQUFTQTtJQUNoRG1CLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsT0FBTyxFQUFFQyxhQUFhLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxDQUFFO1FBQy9GLEtBQUssQ0FBQ1AsV0FBV0MsY0FBY0M7UUFDL0JNLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUVYLDZCQUE2QlksU0FBUztRQUNsRSxJQUFJLENBQUNQLFNBQVMsR0FBR0EsYUFBYXhCLDJEQUFTQSxDQUFDZ0MsWUFBWTtRQUNwRCxJQUFJLENBQUNQLE9BQU8sR0FBR0EsV0FBV3pCLDJEQUFTQSxDQUFDZ0MsWUFBWTtRQUNoRCxJQUFJLENBQUNOLGFBQWEsR0FBR0EsaUJBQWlCMUIsMkRBQVNBLENBQUNnQyxZQUFZO1FBQzVELElBQUksQ0FBQ0wsTUFBTSxHQUFHQSxVQUFVM0IsMkRBQVNBLENBQUNnQyxZQUFZO1FBQzlDLElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDTCxPQUFPLEdBQUdBO0lBQ25CO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNNLDJCQUEyQmIsU0FBUyxFQUFFYyxXQUFXLEVBQUVaLFFBQVE7SUFDaEUsTUFBTWEsaUNBQWlDLENBQUMsQ0FBQ2YsYUFDckNYLHNDQUFzQzJCLE9BQU8sQ0FBQ2hCLGFBQWEsQ0FBQztJQUNoRSxNQUFNaUIsZ0NBQWdDLENBQUMsQ0FBQ2YsWUFDcENaLHVDQUF1QzBCLE9BQU8sQ0FBQ2QsWUFBWSxDQUFDO0lBQ2hFLE1BQU1nQixpQ0FBaUMsQ0FBQyxDQUFDSixlQUNyQ3pCLHNDQUFzQzhCLElBQUksQ0FBQyxDQUFDQztRQUN4QyxPQUFPTixZQUFZRSxPQUFPLENBQUNJLGVBQWUsQ0FBQztJQUMvQztJQUNKLE9BQVFMLGtDQUNKRyxrQ0FDQUQ7QUFDUjtBQUNBOztDQUVDLEdBQ0QsU0FBU0ksbUNBQW1DckIsU0FBUztJQUNqRCxPQUFPLElBQUlGLDZCQUE2QkUsV0FBV1Qsb0NBQW9DLENBQUNTLFVBQVU7QUFDdEc7QUFFNE4sQ0FDNU4seURBQXlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvci5tanM/NDcxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuaW1wb3J0IHsgQXV0aEVycm9yIH0gZnJvbSAnLi9BdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IG5vVG9rZW5zRm91bmQsIG5hdGl2ZUFjY291bnRVbmF2YWlsYWJsZSwgYmFkVG9rZW4sIHJlZnJlc2hUb2tlbkV4cGlyZWQsIGludGVyYWN0aW9uUmVxdWlyZWQsIGNvbnNlbnRSZXF1aXJlZCwgbG9naW5SZXF1aXJlZCB9IGZyb20gJy4vSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvckNvZGVzLm1qcyc7XG5pbXBvcnQgKiBhcyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMgZnJvbSAnLi9JbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMubWpzJztcbmV4cG9ydCB7IEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2RlcyB9O1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEludGVyYWN0aW9uUmVxdWlyZWRTZXJ2ZXJFcnJvck1lc3NhZ2UgY29udGFpbnMgc3RyaW5nIGNvbnN0YW50cyB1c2VkIGJ5IGVycm9yIGNvZGVzIGFuZCBtZXNzYWdlcyByZXR1cm5lZCBieSB0aGUgc2VydmVyIGluZGljYXRpbmcgaW50ZXJhY3Rpb24gaXMgcmVxdWlyZWRcclxuICovXHJcbmNvbnN0IEludGVyYWN0aW9uUmVxdWlyZWRTZXJ2ZXJFcnJvck1lc3NhZ2UgPSBbXHJcbiAgICBpbnRlcmFjdGlvblJlcXVpcmVkLFxyXG4gICAgY29uc2VudFJlcXVpcmVkLFxyXG4gICAgbG9naW5SZXF1aXJlZCxcclxuICAgIGJhZFRva2VuLFxyXG5dO1xyXG5jb25zdCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aFN1YkVycm9yTWVzc2FnZSA9IFtcclxuICAgIFwibWVzc2FnZV9vbmx5XCIsXHJcbiAgICBcImFkZGl0aW9uYWxfYWN0aW9uXCIsXHJcbiAgICBcImJhc2ljX2FjdGlvblwiLFxyXG4gICAgXCJ1c2VyX3Bhc3N3b3JkX2V4cGlyZWRcIixcclxuICAgIFwiY29uc2VudF9yZXF1aXJlZFwiLFxyXG4gICAgXCJiYWRfdG9rZW5cIixcclxuXTtcclxuY29uc3QgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvck1lc3NhZ2VzID0ge1xyXG4gICAgW25vVG9rZW5zRm91bmRdOiBcIk5vIHJlZnJlc2ggdG9rZW4gZm91bmQgaW4gdGhlIGNhY2hlLiBQbGVhc2Ugc2lnbi1pbi5cIixcclxuICAgIFtuYXRpdmVBY2NvdW50VW5hdmFpbGFibGVdOiBcIlRoZSByZXF1ZXN0ZWQgYWNjb3VudCBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBuYXRpdmUgYnJva2VyLiBJdCBtYXkgaGF2ZSBiZWVuIGRlbGV0ZWQgb3IgbG9nZ2VkIG91dC4gUGxlYXNlIHNpZ24taW4gYWdhaW4gdXNpbmcgYW4gaW50ZXJhY3RpdmUgQVBJLlwiLFxyXG4gICAgW3JlZnJlc2hUb2tlbkV4cGlyZWRdOiBcIlJlZnJlc2ggdG9rZW4gaGFzIGV4cGlyZWQuXCIsXHJcbiAgICBbYmFkVG9rZW5dOiBcIklkZW50aXR5IHByb3ZpZGVyIHJldHVybmVkIGJhZF90b2tlbiBkdWUgdG8gYW4gZXhwaXJlZCBvciBpbnZhbGlkIHJlZnJlc2ggdG9rZW4uIFBsZWFzZSBpbnZva2UgYW4gaW50ZXJhY3RpdmUgQVBJIHRvIHJlc29sdmUuXCIsXHJcbn07XHJcbi8qKlxyXG4gKiBJbnRlcmFjdGlvbiByZXF1aXJlZCBlcnJvcnMgZGVmaW5lZCBieSB0aGUgU0RLXHJcbiAqIEBkZXByZWNhdGVkIFVzZSBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMgaW5zdGVhZFxyXG4gKi9cclxuY29uc3QgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvck1lc3NhZ2UgPSB7XHJcbiAgICBub1Rva2Vuc0ZvdW5kRXJyb3I6IHtcclxuICAgICAgICBjb2RlOiBub1Rva2Vuc0ZvdW5kLFxyXG4gICAgICAgIGRlc2M6IEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JNZXNzYWdlc1tub1Rva2Vuc0ZvdW5kXSxcclxuICAgIH0sXHJcbiAgICBuYXRpdmVfYWNjb3VudF91bmF2YWlsYWJsZToge1xyXG4gICAgICAgIGNvZGU6IG5hdGl2ZUFjY291bnRVbmF2YWlsYWJsZSxcclxuICAgICAgICBkZXNjOiBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZXNbbmF0aXZlQWNjb3VudFVuYXZhaWxhYmxlXSxcclxuICAgIH0sXHJcbiAgICBiYWRfdG9rZW46IHtcclxuICAgICAgICBjb2RlOiBiYWRUb2tlbixcclxuICAgICAgICBkZXNjOiBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZXNbYmFkVG9rZW5dLFxyXG4gICAgfSxcclxufTtcclxuLyoqXHJcbiAqIEVycm9yIHRocm93biB3aGVuIHVzZXIgaW50ZXJhY3Rpb24gaXMgcmVxdWlyZWQuXHJcbiAqL1xyXG5jbGFzcyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGVycm9yQ29kZSwgZXJyb3JNZXNzYWdlLCBzdWJFcnJvciwgdGltZXN0YW1wLCB0cmFjZUlkLCBjb3JyZWxhdGlvbklkLCBjbGFpbXMsIGVycm9yTm8pIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSwgc3ViRXJyb3IpO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSB0aW1lc3RhbXAgfHwgQ29uc3RhbnRzLkVNUFRZX1NUUklORztcclxuICAgICAgICB0aGlzLnRyYWNlSWQgPSB0cmFjZUlkIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgdGhpcy5jb3JyZWxhdGlvbklkID0gY29ycmVsYXRpb25JZCB8fCBDb25zdGFudHMuRU1QVFlfU1RSSU5HO1xyXG4gICAgICAgIHRoaXMuY2xhaW1zID0gY2xhaW1zIHx8IENvbnN0YW50cy5FTVBUWV9TVFJJTkc7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yXCI7XHJcbiAgICAgICAgdGhpcy5lcnJvck5vID0gZXJyb3JObztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGFuIGVycm9yIHRocm93biBieSB0aGUgc2VydmVyIHJlcXVpcmVzIGludGVyYWN0aW9uIHRvIHJlc29sdmVcclxuICogQHBhcmFtIGVycm9yQ29kZVxyXG4gKiBAcGFyYW0gZXJyb3JTdHJpbmdcclxuICogQHBhcmFtIHN1YkVycm9yXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvcihlcnJvckNvZGUsIGVycm9yU3RyaW5nLCBzdWJFcnJvcikge1xyXG4gICAgY29uc3QgaXNJbnRlcmFjdGlvblJlcXVpcmVkRXJyb3JDb2RlID0gISFlcnJvckNvZGUgJiZcclxuICAgICAgICBJbnRlcmFjdGlvblJlcXVpcmVkU2VydmVyRXJyb3JNZXNzYWdlLmluZGV4T2YoZXJyb3JDb2RlKSA+IC0xO1xyXG4gICAgY29uc3QgaXNJbnRlcmFjdGlvblJlcXVpcmVkU3ViRXJyb3IgPSAhIXN1YkVycm9yICYmXHJcbiAgICAgICAgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhTdWJFcnJvck1lc3NhZ2UuaW5kZXhPZihzdWJFcnJvcikgPiAtMTtcclxuICAgIGNvbnN0IGlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yRGVzYyA9ICEhZXJyb3JTdHJpbmcgJiZcclxuICAgICAgICBJbnRlcmFjdGlvblJlcXVpcmVkU2VydmVyRXJyb3JNZXNzYWdlLnNvbWUoKGlyRXJyb3JDb2RlKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvclN0cmluZy5pbmRleE9mKGlyRXJyb3JDb2RlKSA+IC0xO1xyXG4gICAgICAgIH0pO1xyXG4gICAgcmV0dXJuIChpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckNvZGUgfHxcclxuICAgICAgICBpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckRlc2MgfHxcclxuICAgICAgICBpc0ludGVyYWN0aW9uUmVxdWlyZWRTdWJFcnJvcik7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvclxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvcihlcnJvckNvZGUpIHtcclxuICAgIHJldHVybiBuZXcgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvcihlcnJvckNvZGUsIEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JNZXNzYWdlc1tlcnJvckNvZGVdKTtcclxufVxuXG5leHBvcnQgeyBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZSwgSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhTdWJFcnJvck1lc3NhZ2UsIEludGVyYWN0aW9uUmVxdWlyZWRTZXJ2ZXJFcnJvck1lc3NhZ2UsIGNyZWF0ZUludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3IsIGlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDb25zdGFudHMiLCJBdXRoRXJyb3IiLCJub1Rva2Vuc0ZvdW5kIiwibmF0aXZlQWNjb3VudFVuYXZhaWxhYmxlIiwiYmFkVG9rZW4iLCJyZWZyZXNoVG9rZW5FeHBpcmVkIiwiaW50ZXJhY3Rpb25SZXF1aXJlZCIsImNvbnNlbnRSZXF1aXJlZCIsImxvZ2luUmVxdWlyZWQiLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMiLCJJbnRlcmFjdGlvblJlcXVpcmVkU2VydmVyRXJyb3JNZXNzYWdlIiwiSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhTdWJFcnJvck1lc3NhZ2UiLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZXMiLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yTWVzc2FnZSIsIm5vVG9rZW5zRm91bmRFcnJvciIsImNvZGUiLCJkZXNjIiwibmF0aXZlX2FjY291bnRfdW5hdmFpbGFibGUiLCJiYWRfdG9rZW4iLCJJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvckNvZGUiLCJlcnJvck1lc3NhZ2UiLCJzdWJFcnJvciIsInRpbWVzdGFtcCIsInRyYWNlSWQiLCJjb3JyZWxhdGlvbklkIiwiY2xhaW1zIiwiZXJyb3JObyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiRU1QVFlfU1RSSU5HIiwibmFtZSIsImlzSW50ZXJhY3Rpb25SZXF1aXJlZEVycm9yIiwiZXJyb3JTdHJpbmciLCJpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckNvZGUiLCJpbmRleE9mIiwiaXNJbnRlcmFjdGlvblJlcXVpcmVkU3ViRXJyb3IiLCJpc0ludGVyYWN0aW9uUmVxdWlyZWRFcnJvckRlc2MiLCJzb21lIiwiaXJFcnJvckNvZGUiLCJjcmVhdGVJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   badToken: () => (/* binding */ badToken),\n/* harmony export */   consentRequired: () => (/* binding */ consentRequired),\n/* harmony export */   interactionRequired: () => (/* binding */ interactionRequired),\n/* harmony export */   loginRequired: () => (/* binding */ loginRequired),\n/* harmony export */   nativeAccountUnavailable: () => (/* binding */ nativeAccountUnavailable),\n/* harmony export */   noTokensFound: () => (/* binding */ noTokensFound),\n/* harmony export */   refreshTokenExpired: () => (/* binding */ refreshTokenExpired)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // Codes defined by MSAL\nconst noTokensFound = \"no_tokens_found\";\nconst nativeAccountUnavailable = \"native_account_unavailable\";\nconst refreshTokenExpired = \"refresh_token_expired\";\n// Codes potentially returned by server\nconst interactionRequired = \"interaction_required\";\nconst consentRequired = \"consent_required\";\nconst loginRequired = \"login_required\";\nconst badToken = \"bad_token\";\n //# sourceMappingURL=InteractionRequiredAuthErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvckNvZGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Qsd0JBQXdCO0FBQ3hCLE1BQU1BLGdCQUFnQjtBQUN0QixNQUFNQywyQkFBMkI7QUFDakMsTUFBTUMsc0JBQXNCO0FBQzVCLHVDQUF1QztBQUN2QyxNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsa0JBQWtCO0FBQ3hCLE1BQU1DLGdCQUFnQjtBQUN0QixNQUFNQyxXQUFXO0FBRXNILENBQ3ZJLDhEQUE4RCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL0ludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2Rlcy5tanM/NGYwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb2RlcyBkZWZpbmVkIGJ5IE1TQUxcclxuY29uc3Qgbm9Ub2tlbnNGb3VuZCA9IFwibm9fdG9rZW5zX2ZvdW5kXCI7XHJcbmNvbnN0IG5hdGl2ZUFjY291bnRVbmF2YWlsYWJsZSA9IFwibmF0aXZlX2FjY291bnRfdW5hdmFpbGFibGVcIjtcclxuY29uc3QgcmVmcmVzaFRva2VuRXhwaXJlZCA9IFwicmVmcmVzaF90b2tlbl9leHBpcmVkXCI7XHJcbi8vIENvZGVzIHBvdGVudGlhbGx5IHJldHVybmVkIGJ5IHNlcnZlclxyXG5jb25zdCBpbnRlcmFjdGlvblJlcXVpcmVkID0gXCJpbnRlcmFjdGlvbl9yZXF1aXJlZFwiO1xyXG5jb25zdCBjb25zZW50UmVxdWlyZWQgPSBcImNvbnNlbnRfcmVxdWlyZWRcIjtcclxuY29uc3QgbG9naW5SZXF1aXJlZCA9IFwibG9naW5fcmVxdWlyZWRcIjtcclxuY29uc3QgYmFkVG9rZW4gPSBcImJhZF90b2tlblwiO1xuXG5leHBvcnQgeyBiYWRUb2tlbiwgY29uc2VudFJlcXVpcmVkLCBpbnRlcmFjdGlvblJlcXVpcmVkLCBsb2dpblJlcXVpcmVkLCBuYXRpdmVBY2NvdW50VW5hdmFpbGFibGUsIG5vVG9rZW5zRm91bmQsIHJlZnJlc2hUb2tlbkV4cGlyZWQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2Rlcy5tanMubWFwXG4iXSwibmFtZXMiOlsibm9Ub2tlbnNGb3VuZCIsIm5hdGl2ZUFjY291bnRVbmF2YWlsYWJsZSIsInJlZnJlc2hUb2tlbkV4cGlyZWQiLCJpbnRlcmFjdGlvblJlcXVpcmVkIiwiY29uc2VudFJlcXVpcmVkIiwibG9naW5SZXF1aXJlZCIsImJhZFRva2VuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/NetworkError.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   createNetworkError: () => (/* binding */ createNetworkError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Represents network related errors\r\n */ class NetworkError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(error, httpStatus, responseHeaders){\n        super(error.errorCode, error.errorMessage, error.subError);\n        Object.setPrototypeOf(this, NetworkError.prototype);\n        this.name = \"NetworkError\";\n        this.error = error;\n        this.httpStatus = httpStatus;\n        this.responseHeaders = responseHeaders;\n    }\n}\n/**\r\n * Creates NetworkError object for a failed network request\r\n * @param error - Error to be thrown back to the caller\r\n * @param httpStatus - Status code of the network request\r\n * @param responseHeaders - Response headers of the network request, when available\r\n * @returns NetworkError object\r\n */ function createNetworkError(error, httpStatus, responseHeaders) {\n    return new NetworkError(error, httpStatus, responseHeaders);\n}\n //# sourceMappingURL=NetworkError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvTmV0d29ya0Vycm9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDNEM7QUFFNUM7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNQyxxQkFBcUJELHFEQUFTQTtJQUNoQ0UsWUFBWUMsS0FBSyxFQUFFQyxVQUFVLEVBQUVDLGVBQWUsQ0FBRTtRQUM1QyxLQUFLLENBQUNGLE1BQU1HLFNBQVMsRUFBRUgsTUFBTUksWUFBWSxFQUFFSixNQUFNSyxRQUFRO1FBQ3pEQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFVCxhQUFhVSxTQUFTO1FBQ2xELElBQUksQ0FBQ0MsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDVCxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtJQUMzQjtBQUNKO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU1EsbUJBQW1CVixLQUFLLEVBQUVDLFVBQVUsRUFBRUMsZUFBZTtJQUMxRCxPQUFPLElBQUlKLGFBQWFFLE9BQU9DLFlBQVlDO0FBQy9DO0FBRTRDLENBQzVDLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL05ldHdvcmtFcnJvci5tanM/YmIyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gJy4vQXV0aEVycm9yLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmVwcmVzZW50cyBuZXR3b3JrIHJlbGF0ZWQgZXJyb3JzXHJcbiAqL1xyXG5jbGFzcyBOZXR3b3JrRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3IsIGh0dHBTdGF0dXMsIHJlc3BvbnNlSGVhZGVycykge1xyXG4gICAgICAgIHN1cGVyKGVycm9yLmVycm9yQ29kZSwgZXJyb3IuZXJyb3JNZXNzYWdlLCBlcnJvci5zdWJFcnJvcik7XHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIE5ldHdvcmtFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiTmV0d29ya0Vycm9yXCI7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMuaHR0cFN0YXR1cyA9IGh0dHBTdGF0dXM7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZUhlYWRlcnMgPSByZXNwb25zZUhlYWRlcnM7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgTmV0d29ya0Vycm9yIG9iamVjdCBmb3IgYSBmYWlsZWQgbmV0d29yayByZXF1ZXN0XHJcbiAqIEBwYXJhbSBlcnJvciAtIEVycm9yIHRvIGJlIHRocm93biBiYWNrIHRvIHRoZSBjYWxsZXJcclxuICogQHBhcmFtIGh0dHBTdGF0dXMgLSBTdGF0dXMgY29kZSBvZiB0aGUgbmV0d29yayByZXF1ZXN0XHJcbiAqIEBwYXJhbSByZXNwb25zZUhlYWRlcnMgLSBSZXNwb25zZSBoZWFkZXJzIG9mIHRoZSBuZXR3b3JrIHJlcXVlc3QsIHdoZW4gYXZhaWxhYmxlXHJcbiAqIEByZXR1cm5zIE5ldHdvcmtFcnJvciBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZU5ldHdvcmtFcnJvcihlcnJvciwgaHR0cFN0YXR1cywgcmVzcG9uc2VIZWFkZXJzKSB7XHJcbiAgICByZXR1cm4gbmV3IE5ldHdvcmtFcnJvcihlcnJvciwgaHR0cFN0YXR1cywgcmVzcG9uc2VIZWFkZXJzKTtcclxufVxuXG5leHBvcnQgeyBOZXR3b3JrRXJyb3IsIGNyZWF0ZU5ldHdvcmtFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmV0d29ya0Vycm9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdXRoRXJyb3IiLCJOZXR3b3JrRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yIiwiaHR0cFN0YXR1cyIsInJlc3BvbnNlSGVhZGVycyIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsInN1YkVycm9yIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJuYW1lIiwiY3JlYXRlTmV0d29ya0Vycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/NetworkError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/error/ServerError.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerError: () => (/* binding */ ServerError)\n/* harmony export */ });\n/* harmony import */ var _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */ class ServerError extends _AuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(errorCode, errorMessage, subError, errorNo, status){\n        super(errorCode, errorMessage, subError);\n        this.name = \"ServerError\";\n        this.errorNo = errorNo;\n        this.status = status;\n        Object.setPrototypeOf(this, ServerError.prototype);\n    }\n}\n //# sourceMappingURL=ServerError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvZXJyb3IvU2VydmVyRXJyb3IubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQzRDO0FBRTVDOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUMsb0JBQW9CRCxxREFBU0E7SUFDL0JFLFlBQVlDLFNBQVMsRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxDQUFFO1FBQzVELEtBQUssQ0FBQ0osV0FBV0MsY0FBY0M7UUFDL0IsSUFBSSxDQUFDRyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNGLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZEUsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRVQsWUFBWVUsU0FBUztJQUNyRDtBQUNKO0FBRXVCLENBQ3ZCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L2Vycm9yL1NlcnZlckVycm9yLm1qcz9mNTA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQXV0aEVycm9yIH0gZnJvbSAnLi9BdXRoRXJyb3IubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFcnJvciB0aHJvd24gd2hlbiB0aGVyZSBpcyBhbiBlcnJvciB3aXRoIHRoZSBzZXJ2ZXIgY29kZSwgZm9yIGV4YW1wbGUsIHVuYXZhaWxhYmlsaXR5LlxyXG4gKi9cclxuY2xhc3MgU2VydmVyRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UsIHN1YkVycm9yLCBlcnJvck5vLCBzdGF0dXMpIHtcclxuICAgICAgICBzdXBlcihlcnJvckNvZGUsIGVycm9yTWVzc2FnZSwgc3ViRXJyb3IpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IFwiU2VydmVyRXJyb3JcIjtcclxuICAgICAgICB0aGlzLmVycm9yTm8gPSBlcnJvck5vO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBTZXJ2ZXJFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IFNlcnZlckVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXJ2ZXJFcnJvci5tanMubWFwXG4iXSwibmFtZXMiOlsiQXV0aEVycm9yIiwiU2VydmVyRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsInN1YkVycm9yIiwiZXJyb3JObyIsInN0YXR1cyIsIm5hbWUiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/logger/Logger.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   Logger: () => (/* binding */ Logger)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Log message level.\r\n */ var LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */ class Logger {\n    constructor(loggerOptions, packageName, packageVersion){\n        // Current log level, defaults to info.\n        this.level = LogLevel.Info;\n        const defaultLoggerCallback = ()=>{\n            return;\n        };\n        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\n        this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\n        this.level = typeof setLoggerOptions.logLevel === \"number\" ? setLoggerOptions.logLevel : LogLevel.Info;\n        this.correlationId = setLoggerOptions.correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.packageName = packageName || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.packageVersion = packageVersion || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n    }\n    static createDefaultLoggerOptions() {\n        return {\n            loggerCallback: ()=>{\n            // allow users to not set loggerCallback\n            },\n            piiLoggingEnabled: false,\n            logLevel: LogLevel.Info\n        };\n    }\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */ clone(packageName, packageVersion, correlationId) {\n        return new Logger({\n            loggerCallback: this.localCallback,\n            piiLoggingEnabled: this.piiLoggingEnabled,\n            logLevel: this.level,\n            correlationId: correlationId || this.correlationId\n        }, packageName, packageVersion);\n    }\n    /**\r\n     * Log message with required options.\r\n     */ logMessage(logMessage, options) {\n        if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n            return;\n        }\n        const timestamp = new Date().toUTCString();\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\n        const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\n    }\n    /**\r\n     * Execute callback with message.\r\n     */ executeCallback(level, message, containsPii) {\n        if (this.localCallback) {\n            this.localCallback(level, message, containsPii);\n        }\n    }\n    /**\r\n     * Logs error messages.\r\n     */ error(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs error messages with PII.\r\n     */ errorPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Error,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs warning messages.\r\n     */ warning(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs warning messages with PII.\r\n     */ warningPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Warning,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs info messages.\r\n     */ info(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs info messages with PII.\r\n     */ infoPii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Info,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs verbose messages.\r\n     */ verbose(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs verbose messages with PII.\r\n     */ verbosePii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Verbose,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs trace messages.\r\n     */ trace(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: false,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Logs trace messages with PII.\r\n     */ tracePii(message, correlationId) {\n        this.logMessage(message, {\n            logLevel: LogLevel.Trace,\n            containsPii: true,\n            correlationId: correlationId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING\n        });\n    }\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */ isPiiLoggingEnabled() {\n        return this.piiLoggingEnabled || false;\n    }\n}\n //# sourceMappingURL=Logger.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThrottlingUtils: () => (/* binding */ ThrottlingUtils)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /** @internal */ class ThrottlingUtils {\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */ static generateThrottlingStorageKey(thumbprint) {\n        return `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\n    }\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */ static preProcess(cacheManager, thumbprint) {\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n        const value = cacheManager.getThrottlingCache(key);\n        if (value) {\n            if (value.throttleTime < Date.now()) {\n                cacheManager.removeItem(key);\n                return;\n            }\n            throw new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_1__.ServerError(value.errorCodes?.join(\" \") || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING, value.errorMessage, value.subError);\n        }\n    }\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */ static postProcess(cacheManager, thumbprint, response) {\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n            const thumbprintValue = {\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.RETRY_AFTER])),\n                error: response.body.error,\n                errorCodes: response.body.error_codes,\n                errorMessage: response.body.error_description,\n                subError: response.body.suberror\n            };\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n        }\n    }\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */ static checkResponseStatus(response) {\n        return response.status === 429 || response.status >= 500 && response.status < 600;\n    }\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */ static checkResponseForRetryAfter(response) {\n        if (response.headers) {\n            return response.headers.hasOwnProperty(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n        }\n        return false;\n    }\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */ static calculateThrottleTime(throttleTime) {\n        const time = throttleTime <= 0 ? 0 : throttleTime;\n        const currentSeconds = Date.now() / 1000;\n        return Math.floor(Math.min(currentSeconds + (time || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n    }\n    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\n        const thumbprint = {\n            clientId: clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            homeAccountIdentifier: homeAccountIdentifier,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const key = this.generateThrottlingStorageKey(thumbprint);\n        cacheManager.removeItem(key);\n    }\n}\n //# sourceMappingURL=ThrottlingUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/network/ThrottlingUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/packageMetadata.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/* eslint-disable header/header */ const name = \"@azure/msal-common\";\nconst version = \"14.16.0\";\n //# sourceMappingURL=packageMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvcGFja2FnZU1ldGFkYXRhLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUNBLGdDQUFnQyxHQUNoQyxNQUFNQSxPQUFPO0FBQ2IsTUFBTUMsVUFBVTtBQUVTLENBQ3pCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3BhY2thZ2VNZXRhZGF0YS5tanM/ZTBmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGhlYWRlci9oZWFkZXIgKi9cclxuY29uc3QgbmFtZSA9IFwiQGF6dXJlL21zYWwtY29tbW9uXCI7XHJcbmNvbnN0IHZlcnNpb24gPSBcIjE0LjE2LjBcIjtcblxuZXhwb3J0IHsgbmFtZSwgdmVyc2lvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFja2FnZU1ldGFkYXRhLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJuYW1lIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/packageMetadata.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestParameterBuilder: () => (/* binding */ RequestParameterBuilder)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/AADServerParamKeys.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScopeSet.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestValidator.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function instrumentBrokerParams(parameters, correlationId, performanceClient) {\n    if (!correlationId) {\n        return;\n    }\n    const clientId = parameters.get(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ID);\n    if (clientId && parameters.has(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_CLIENT_ID)) {\n        performanceClient?.addFields({\n            embeddedClientId: clientId,\n            embeddedRedirectUri: parameters.get(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REDIRECT_URI)\n        }, correlationId);\n    }\n}\n/** @internal */ class RequestParameterBuilder {\n    constructor(correlationId, performanceClient){\n        this.parameters = new Map();\n        this.performanceClient = performanceClient;\n        this.correlationId = correlationId;\n    }\n    /**\r\n     * add response_type = code\r\n     */ addResponseTypeCode() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_TYPE, encodeURIComponent(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.CODE_RESPONSE_TYPE));\n    }\n    /**\r\n     * add response_type = token id_token\r\n     */ addResponseTypeForTokenAndIdToken() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_TYPE, encodeURIComponent(`${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.TOKEN_RESPONSE_TYPE} ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.ID_TOKEN_RESPONSE_TYPE}`));\n    }\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */ addResponseMode(responseMode) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ResponseMode.QUERY));\n    }\n    /**\r\n     * Add flag to indicate STS should attempt to use WAM if available\r\n     */ addNativeBroker() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.NATIVE_BROKER, encodeURIComponent(\"1\"));\n    }\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */ addScopes(scopes, addOidcScopes = true, defaultScopes = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_DEFAULT_SCOPES) {\n        // Always add openid to the scopes when adding OIDC scopes\n        if (addOidcScopes && !defaultScopes.includes(\"openid\") && !scopes.includes(\"openid\")) {\n            defaultScopes.push(\"openid\");\n        }\n        const requestScopes = addOidcScopes ? [\n            ...scopes || [],\n            ...defaultScopes\n        ] : scopes || [];\n        const scopeSet = new _ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_2__.ScopeSet(requestScopes);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n    }\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */ addClientId(clientId) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ID, encodeURIComponent(clientId));\n    }\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */ addRedirectUri(redirectUri) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REDIRECT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */ addPostLogoutRedirectUri(redirectUri) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateRedirectUri(redirectUri);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n    }\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */ addIdTokenHint(idTokenHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n    }\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */ addDomainHint(domainHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.DOMAIN_HINT, encodeURIComponent(domainHint));\n    }\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */ addLoginHint(loginHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.LOGIN_HINT, encodeURIComponent(loginHint));\n    }\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint\r\n     */ addCcsUpn(loginHint) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\n    }\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint\r\n     */ addCcsOid(clientInfo) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\n    }\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */ addSid(sid) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.SID, encodeURIComponent(sid));\n    }\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */ addClaims(claims, clientCapabilities) {\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateClaims(mergedClaims);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLAIMS, encodeURIComponent(mergedClaims));\n    }\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */ addCorrelationId(correlationId) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n    }\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */ addLibraryInfo(libraryInfo) {\n        // Telemetry Info\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_SKU, libraryInfo.sku);\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_VER, libraryInfo.version);\n        if (libraryInfo.os) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_OS, libraryInfo.os);\n        }\n        if (libraryInfo.cpu) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_CPU, libraryInfo.cpu);\n        }\n    }\n    /**\r\n     * Add client telemetry parameters\r\n     * @param appTelemetry\r\n     */ addApplicationTelemetry(appTelemetry) {\n        if (appTelemetry?.appName) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_APP_NAME, appTelemetry.appName);\n        }\n        if (appTelemetry?.appVersion) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_APP_VER, appTelemetry.appVersion);\n        }\n    }\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */ addPrompt(prompt) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validatePrompt(prompt);\n        this.parameters.set(`${_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.PROMPT}`, encodeURIComponent(prompt));\n    }\n    /**\r\n     * add state\r\n     * @param state\r\n     */ addState(state) {\n        if (state) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.STATE, encodeURIComponent(state));\n        }\n    }\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */ addNonce(nonce) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.NONCE, encodeURIComponent(nonce));\n    }\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */ addCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        _RequestValidator_mjs__WEBPACK_IMPORTED_MODULE_3__.RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n        if (codeChallenge && codeChallengeMethod) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n        } else {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.pkceParamsMissing);\n        }\n    }\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */ addAuthorizationCode(code) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE, encodeURIComponent(code));\n    }\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */ addDeviceCode(code) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.DEVICE_CODE, encodeURIComponent(code));\n    }\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */ addRefreshToken(refreshToken) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n    }\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */ addCodeVerifier(codeVerifier) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n    }\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */ addClientSecret(clientSecret) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_SECRET, encodeURIComponent(clientSecret));\n    }\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */ addClientAssertion(clientAssertion) {\n        if (clientAssertion) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n        }\n    }\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */ addClientAssertionType(clientAssertionType) {\n        if (clientAssertionType) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n        }\n    }\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */ addOboAssertion(oboAssertion) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n    }\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */ addRequestTokenUse(tokenUse) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n    }\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */ addGrantType(grantType) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.GRANT_TYPE, encodeURIComponent(grantType));\n    }\n    /**\r\n     * add client info\r\n     *\r\n     */ addClientInfo() {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.CLIENT_INFO, \"1\");\n    }\n    /**\r\n     * add extraQueryParams\r\n     * @param eQParams\r\n     */ addExtraQueryParameters(eQParams) {\n        Object.entries(eQParams).forEach(([key, value])=>{\n            if (!this.parameters.has(key) && value) {\n                this.parameters.set(key, value);\n            }\n        });\n    }\n    addClientCapabilitiesToClaims(claims, clientCapabilities) {\n        let mergedClaims;\n        // Parse provided claims into JSON object or initialize empty object\n        if (!claims) {\n            mergedClaims = {};\n        } else {\n            try {\n                mergedClaims = JSON.parse(claims);\n            } catch (e) {\n                throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.invalidClaims);\n            }\n        }\n        if (clientCapabilities && clientCapabilities.length > 0) {\n            if (!mergedClaims.hasOwnProperty(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN)) {\n                // Add access_token key to claims object\n                mergedClaims[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN] = {};\n            }\n            // Add xms_cc claim with provided clientCapabilities to access_token key\n            mergedClaims[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.ACCESS_TOKEN][_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ClaimsRequestKeys.XMS_CC] = {\n                values: clientCapabilities\n            };\n        }\n        return JSON.stringify(mergedClaims);\n    }\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */ addUsername(username) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.PasswordGrantConstants.username, encodeURIComponent(username));\n    }\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */ addPassword(password) {\n        this.parameters.set(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.PasswordGrantConstants.password, encodeURIComponent(password));\n    }\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */ addPopToken(cnfString) {\n        if (cnfString) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.TOKEN_TYPE, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.POP);\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQ_CNF, encodeURIComponent(cnfString));\n        }\n    }\n    /**\r\n     * add SSH JWK and key ID to query params\r\n     */ addSshJwk(sshJwkString) {\n        if (sshJwkString) {\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.TOKEN_TYPE, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.SSH);\n            this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.REQ_CNF, encodeURIComponent(sshJwkString));\n        }\n    }\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager\r\n     */ addServerTelemetry(serverTelemetryManager) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n    }\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */ addThrottling() {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.X_MS_LIB_CAPABILITY, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n    }\n    /**\r\n     * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n     */ addLogoutHint(logoutHint) {\n        this.parameters.set(_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.LOGOUT_HINT, encodeURIComponent(logoutHint));\n    }\n    addBrokerParameters(params) {\n        const brokerParams = {};\n        brokerParams[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_CLIENT_ID] = params.brokerClientId;\n        brokerParams[_constants_AADServerParamKeys_mjs__WEBPACK_IMPORTED_MODULE_0__.BROKER_REDIRECT_URI] = params.brokerRedirectUri;\n        this.addExtraQueryParameters(brokerParams);\n    }\n    /**\r\n     * Utility to create a URL from the params map\r\n     */ createQueryString() {\n        const queryParameterArray = new Array();\n        this.parameters.forEach((value, key)=>{\n            queryParameterArray.push(`${key}=${value}`);\n        });\n        instrumentBrokerParams(this.parameters, this.correlationId, this.performanceClient);\n        return queryParameterArray.join(\"&\");\n    }\n}\n //# sourceMappingURL=RequestParameterBuilder.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestValidator: () => (/* binding */ RequestValidator)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Validates server consumable params from the \"request\" objects\r\n */ class RequestValidator {\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */ static validateRedirectUri(redirectUri) {\n        if (!redirectUri) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.redirectUriEmpty);\n        }\n    }\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */ static validatePrompt(prompt) {\n        const promptValues = [];\n        for(const value in _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.PromptValue){\n            promptValues.push(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.PromptValue[value]);\n        }\n        if (promptValues.indexOf(prompt) < 0) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidPromptValue);\n        }\n    }\n    static validateClaims(claims) {\n        try {\n            JSON.parse(claims);\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidClaims);\n        }\n    }\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */ static validateCodeChallengeParams(codeChallenge, codeChallengeMethod) {\n        if (!codeChallenge || !codeChallengeMethod) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.pkceParamsMissing);\n        } else {\n            this.validateCodeChallengeMethod(codeChallengeMethod);\n        }\n    }\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */ static validateCodeChallengeMethod(codeChallengeMethod) {\n        if ([\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.CodeChallengeMethodValues.PLAIN,\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.CodeChallengeMethodValues.S256\n        ].indexOf(codeChallengeMethod) < 0) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidCodeChallengeMethod);\n        }\n    }\n}\n //# sourceMappingURL=RequestValidator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvcmVxdWVzdC9SZXF1ZXN0VmFsaWRhdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ3VGO0FBQ1A7QUFDZ0Y7QUFFaEs7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRCxNQUFNUTtJQUNGOzs7S0FHQyxHQUNELE9BQU9DLG9CQUFvQkMsV0FBVyxFQUFFO1FBQ3BDLElBQUksQ0FBQ0EsYUFBYTtZQUNkLE1BQU1WLG1HQUE4QkEsQ0FBQ0csc0ZBQWdCQTtRQUN6RDtJQUNKO0lBQ0E7OztLQUdDLEdBQ0QsT0FBT1EsZUFBZUMsTUFBTSxFQUFFO1FBQzFCLE1BQU1DLGVBQWUsRUFBRTtRQUN2QixJQUFLLE1BQU1DLFNBQVNaLDZEQUFXQSxDQUFFO1lBQzdCVyxhQUFhRSxJQUFJLENBQUNiLDZEQUFXLENBQUNZLE1BQU07UUFDeEM7UUFDQSxJQUFJRCxhQUFhRyxPQUFPLENBQUNKLFVBQVUsR0FBRztZQUNsQyxNQUFNWixtR0FBOEJBLENBQUNJLHdGQUFrQkE7UUFDM0Q7SUFDSjtJQUNBLE9BQU9hLGVBQWVDLE1BQU0sRUFBRTtRQUMxQixJQUFJO1lBQ0FDLEtBQUtDLEtBQUssQ0FBQ0Y7UUFDZixFQUNBLE9BQU9HLEdBQUc7WUFDTixNQUFNckIsbUdBQThCQSxDQUFDSyxtRkFBYUE7UUFDdEQ7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPaUIsNEJBQTRCQyxhQUFhLEVBQUVDLG1CQUFtQixFQUFFO1FBQ25FLElBQUksQ0FBQ0QsaUJBQWlCLENBQUNDLHFCQUFxQjtZQUN4QyxNQUFNeEIsbUdBQThCQSxDQUFDTSx1RkFBaUJBO1FBQzFELE9BQ0s7WUFDRCxJQUFJLENBQUNtQiwyQkFBMkIsQ0FBQ0Q7UUFDckM7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE9BQU9DLDRCQUE0QkQsbUJBQW1CLEVBQUU7UUFDcEQsSUFBSTtZQUNBdkIsMkVBQXlCQSxDQUFDeUIsS0FBSztZQUMvQnpCLDJFQUF5QkEsQ0FBQzBCLElBQUk7U0FDakMsQ0FBQ1gsT0FBTyxDQUFDUSx1QkFBdUIsR0FBRztZQUNoQyxNQUFNeEIsbUdBQThCQSxDQUFDTyxnR0FBMEJBO1FBQ25FO0lBQ0o7QUFDSjtBQUU0QixDQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC9yZXF1ZXN0L1JlcXVlc3RWYWxpZGF0b3IubWpzPzM1OTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRDb25maWd1cmF0aW9uRXJyb3IubWpzJztcbmltcG9ydCB7IENvZGVDaGFsbGVuZ2VNZXRob2RWYWx1ZXMsIFByb21wdFZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyByZWRpcmVjdFVyaUVtcHR5LCBpbnZhbGlkUHJvbXB0VmFsdWUsIGludmFsaWRDbGFpbXMsIHBrY2VQYXJhbXNNaXNzaW5nLCBpbnZhbGlkQ29kZUNoYWxsZW5nZU1ldGhvZCB9IGZyb20gJy4uL2Vycm9yL0NsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVmFsaWRhdGVzIHNlcnZlciBjb25zdW1hYmxlIHBhcmFtcyBmcm9tIHRoZSBcInJlcXVlc3RcIiBvYmplY3RzXHJcbiAqL1xyXG5jbGFzcyBSZXF1ZXN0VmFsaWRhdG9yIHtcclxuICAgIC8qKlxyXG4gICAgICogVXRpbGl0eSB0byBjaGVjayBpZiB0aGUgYHJlZGlyZWN0VXJpYCBpbiB0aGUgcmVxdWVzdCBpcyBhIG5vbi1udWxsIHZhbHVlXHJcbiAgICAgKiBAcGFyYW0gcmVkaXJlY3RVcmlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHZhbGlkYXRlUmVkaXJlY3RVcmkocmVkaXJlY3RVcmkpIHtcclxuICAgICAgICBpZiAoIXJlZGlyZWN0VXJpKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvcihyZWRpcmVjdFVyaUVtcHR5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gdmFsaWRhdGUgcHJvbXB0IHNlbnQgYnkgdGhlIHVzZXIgaW4gdGhlIHJlcXVlc3RcclxuICAgICAqIEBwYXJhbSBwcm9tcHRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHZhbGlkYXRlUHJvbXB0KHByb21wdCkge1xyXG4gICAgICAgIGNvbnN0IHByb21wdFZhbHVlcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgaW4gUHJvbXB0VmFsdWUpIHtcclxuICAgICAgICAgICAgcHJvbXB0VmFsdWVzLnB1c2goUHJvbXB0VmFsdWVbdmFsdWVdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByb21wdFZhbHVlcy5pbmRleE9mKHByb21wdCkgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvcihpbnZhbGlkUHJvbXB0VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyB2YWxpZGF0ZUNsYWltcyhjbGFpbXMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBKU09OLnBhcnNlKGNsYWltcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudENvbmZpZ3VyYXRpb25FcnJvcihpbnZhbGlkQ2xhaW1zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFV0aWxpdHkgdG8gdmFsaWRhdGUgY29kZV9jaGFsbGVuZ2UgYW5kIGNvZGVfY2hhbGxlbmdlX21ldGhvZFxyXG4gICAgICogQHBhcmFtIGNvZGVDaGFsbGVuZ2VcclxuICAgICAqIEBwYXJhbSBjb2RlQ2hhbGxlbmdlTWV0aG9kXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB2YWxpZGF0ZUNvZGVDaGFsbGVuZ2VQYXJhbXMoY29kZUNoYWxsZW5nZSwgY29kZUNoYWxsZW5nZU1ldGhvZCkge1xyXG4gICAgICAgIGlmICghY29kZUNoYWxsZW5nZSB8fCAhY29kZUNoYWxsZW5nZU1ldGhvZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRDb25maWd1cmF0aW9uRXJyb3IocGtjZVBhcmFtc01pc3NpbmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZUNvZGVDaGFsbGVuZ2VNZXRob2QoY29kZUNoYWxsZW5nZU1ldGhvZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVdGlsaXR5IHRvIHZhbGlkYXRlIGNvZGVfY2hhbGxlbmdlX21ldGhvZFxyXG4gICAgICogQHBhcmFtIGNvZGVDaGFsbGVuZ2VNZXRob2RcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHZhbGlkYXRlQ29kZUNoYWxsZW5nZU1ldGhvZChjb2RlQ2hhbGxlbmdlTWV0aG9kKSB7XHJcbiAgICAgICAgaWYgKFtcclxuICAgICAgICAgICAgQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcy5QTEFJTixcclxuICAgICAgICAgICAgQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcy5TMjU2LFxyXG4gICAgICAgIF0uaW5kZXhPZihjb2RlQ2hhbGxlbmdlTWV0aG9kKSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yKGludmFsaWRDb2RlQ2hhbGxlbmdlTWV0aG9kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgUmVxdWVzdFZhbGlkYXRvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVxdWVzdFZhbGlkYXRvci5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIiwiQ29kZUNoYWxsZW5nZU1ldGhvZFZhbHVlcyIsIlByb21wdFZhbHVlIiwicmVkaXJlY3RVcmlFbXB0eSIsImludmFsaWRQcm9tcHRWYWx1ZSIsImludmFsaWRDbGFpbXMiLCJwa2NlUGFyYW1zTWlzc2luZyIsImludmFsaWRDb2RlQ2hhbGxlbmdlTWV0aG9kIiwiUmVxdWVzdFZhbGlkYXRvciIsInZhbGlkYXRlUmVkaXJlY3RVcmkiLCJyZWRpcmVjdFVyaSIsInZhbGlkYXRlUHJvbXB0IiwicHJvbXB0IiwicHJvbXB0VmFsdWVzIiwidmFsdWUiLCJwdXNoIiwiaW5kZXhPZiIsInZhbGlkYXRlQ2xhaW1zIiwiY2xhaW1zIiwiSlNPTiIsInBhcnNlIiwiZSIsInZhbGlkYXRlQ29kZUNoYWxsZW5nZVBhcmFtcyIsImNvZGVDaGFsbGVuZ2UiLCJjb2RlQ2hhbGxlbmdlTWV0aG9kIiwidmFsaWRhdGVDb2RlQ2hhbGxlbmdlTWV0aG9kIiwiUExBSU4iLCJTMjU2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/request/RequestValidator.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ScopeSet: () => (/* binding */ ScopeSet)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */ class ScopeSet {\n    constructor(inputScopes){\n        // Filter empty string and null/undefined array items\n        const scopeArr = inputScopes ? _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.StringUtils.trimArrayEntries([\n            ...inputScopes\n        ]) : [];\n        const filteredInput = scopeArr ? _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n        // Validate and filter scopes (validate function throws if validation fails)\n        this.validateInputScopes(filteredInput);\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\n        filteredInput.forEach((scope)=>this.scopes.add(scope));\n    }\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */ static fromString(inputScopeString) {\n        const scopeString = inputScopeString || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n        const inputScopes = scopeString.split(\" \");\n        return new ScopeSet(inputScopes);\n    }\n    /**\r\n     * Creates the set of scopes to search for in cache lookups\r\n     * @param inputScopeString\r\n     * @returns\r\n     */ static createSearchScopes(inputScopeString) {\n        const scopeSet = new ScopeSet(inputScopeString);\n        if (!scopeSet.containsOnlyOIDCScopes()) {\n            scopeSet.removeOIDCScopes();\n        } else {\n            scopeSet.removeScope(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.OFFLINE_ACCESS_SCOPE);\n        }\n        return scopeSet;\n    }\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */ validateInputScopes(inputScopes) {\n        // Check if scopes are required but not given or is an empty array\n        if (!inputScopes || inputScopes.length < 1) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_2__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_3__.emptyInputScopesError);\n        }\n    }\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */ containsScope(scope) {\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n        // compare lowercase scopes\n        return scope ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n    }\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */ containsScopeSet(scopeSet) {\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\n            return false;\n        }\n        return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every((scope)=>this.containsScope(scope));\n    }\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */ containsOnlyOIDCScopes() {\n        let defaultScopeCount = 0;\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_SCOPES.forEach((defaultScope)=>{\n            if (this.containsScope(defaultScope)) {\n                defaultScopeCount += 1;\n            }\n        });\n        return this.scopes.size === defaultScopeCount;\n    }\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */ appendScope(newScope) {\n        if (newScope) {\n            this.scopes.add(newScope.trim());\n        }\n    }\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */ appendScopes(newScopes) {\n        try {\n            newScopes.forEach((newScope)=>this.appendScope(newScope));\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.cannotAppendScopeSet);\n        }\n    }\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */ removeScope(scope) {\n        if (!scope) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.cannotRemoveEmptyScope);\n        }\n        this.scopes.delete(scope.trim());\n    }\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */ removeOIDCScopes() {\n        _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.OIDC_SCOPES.forEach((defaultScope)=>{\n            this.scopes.delete(defaultScope);\n        });\n    }\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */ unionScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.emptyInputScopeSet);\n        }\n        const unionScopes = new Set(); // Iterator in constructor not supported in IE11\n        otherScopes.scopes.forEach((scope)=>unionScopes.add(scope.toLowerCase()));\n        this.scopes.forEach((scope)=>unionScopes.add(scope.toLowerCase()));\n        return unionScopes;\n    }\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */ intersectingScopeSets(otherScopes) {\n        if (!otherScopes) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_5__.emptyInputScopeSet);\n        }\n        // Do not allow OIDC scopes to be the only intersecting scopes\n        if (!otherScopes.containsOnlyOIDCScopes()) {\n            otherScopes.removeOIDCScopes();\n        }\n        const unionScopes = this.unionScopeSets(otherScopes);\n        const sizeOtherScopes = otherScopes.getScopeCount();\n        const sizeThisScopes = this.getScopeCount();\n        const sizeUnionScopes = unionScopes.size;\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n    }\n    /**\r\n     * Returns size of set of scopes.\r\n     */ getScopeCount() {\n        return this.scopes.size;\n    }\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */ asArray() {\n        const array = [];\n        this.scopes.forEach((val)=>array.push(val));\n        return array;\n    }\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */ printScopes() {\n        if (this.scopes) {\n            const scopeArr = this.asArray();\n            return scopeArr.join(\" \");\n        }\n        return _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING;\n    }\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */ printScopesLowerCase() {\n        return this.printScopes().toLowerCase();\n    }\n}\n //# sourceMappingURL=ScopeSet.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResponseHandler: () => (/* binding */ ResponseHandler),\n/* harmony export */   buildAccountToCache: () => (/* binding */ buildAccountToCache)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/ServerError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../request/ScopeSet.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../cache/entities/AccountEntity.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/InteractionRequiredAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _utils_ProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/ProtocolUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../crypto/PopTokenGenerator.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/crypto/PopTokenGenerator.mjs\");\n/* harmony import */ var _cache_persistence_TokenCacheContext_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../cache/persistence/TokenCacheContext.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\");\n/* harmony import */ var _telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../telemetry/performance/PerformanceEvent.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\");\n/* harmony import */ var _account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../account/AuthToken.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../account/TokenClaims.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/TokenClaims.mjs\");\n/* harmony import */ var _account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../account/AccountInfo.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/AccountInfo.mjs\");\n/* harmony import */ var _cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../cache/utils/CacheHelpers.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ function parseServerErrorNo(serverResponse) {\n    const errorCodePrefix = \"code=\";\n    const errorCodePrefixIndex = serverResponse.error_uri?.lastIndexOf(errorCodePrefix);\n    return errorCodePrefixIndex && errorCodePrefixIndex >= 0 ? serverResponse.error_uri?.substring(errorCodePrefixIndex + errorCodePrefix.length) : undefined;\n}\n/**\r\n * Class that handles response parsing.\r\n * @internal\r\n */ class ResponseHandler {\n    constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient){\n        this.clientId = clientId;\n        this.cacheStorage = cacheStorage;\n        this.cryptoObj = cryptoObj;\n        this.logger = logger;\n        this.serializableCache = serializableCache;\n        this.persistencePlugin = persistencePlugin;\n        this.performanceClient = performanceClient;\n    }\n    /**\r\n     * Function which validates server authorization code response.\r\n     * @param serverResponseHash\r\n     * @param requestState\r\n     * @param cryptoObj\r\n     */ validateServerAuthorizationCodeResponse(serverResponse, requestState) {\n        if (!serverResponse.state || !requestState) {\n            throw serverResponse.state ? (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateNotFound, \"Cached State\") : (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateNotFound, \"Server State\");\n        }\n        let decodedServerResponseState;\n        let decodedRequestState;\n        try {\n            decodedServerResponseState = decodeURIComponent(serverResponse.state);\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidState, serverResponse.state);\n        }\n        try {\n            decodedRequestState = decodeURIComponent(requestState);\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidState, serverResponse.state);\n        }\n        if (decodedServerResponseState !== decodedRequestState) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.stateMismatch);\n        }\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            const serverErrorNo = parseServerErrorNo(serverResponse);\n            if ((0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.isInteractionRequiredError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionRequiredAuthError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || \"\", serverResponse.trace_id || \"\", serverResponse.correlation_id || \"\", serverResponse.claims || \"\", serverErrorNo);\n            }\n            throw new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__.ServerError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverErrorNo);\n        }\n    }\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     * @param refreshAccessToken\r\n     */ validateTokenResponse(serverResponse, refreshAccessToken) {\n        // Check for error\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n            const errString = `Error(s): ${serverResponse.error_codes || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Timestamp: ${serverResponse.timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Description: ${serverResponse.error_description || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Correlation ID: ${serverResponse.correlation_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE} - Trace ID: ${serverResponse.trace_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.NOT_AVAILABLE}`;\n            const serverErrorNo = serverResponse.error_codes?.length ? serverResponse.error_codes[0] : undefined;\n            const serverError = new _error_ServerError_mjs__WEBPACK_IMPORTED_MODULE_3__.ServerError(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);\n            // check if 500 error\n            if (refreshAccessToken && serverResponse.status && serverResponse.status >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SERVER_ERROR_RANGE_START && serverResponse.status <= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SERVER_ERROR_RANGE_END) {\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`);\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            // check if 400 error\n            } else if (refreshAccessToken && serverResponse.status && serverResponse.status >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.CLIENT_ERROR_RANGE_START && serverResponse.status <= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.CLIENT_ERROR_RANGE_END) {\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`);\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\n                return;\n            }\n            if ((0,_error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.isInteractionRequiredError)(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n                throw new _error_InteractionRequiredAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.trace_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.correlation_id || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverResponse.claims || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, serverErrorNo);\n            }\n            throw serverError;\n        }\n    }\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */ async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\n        this.performanceClient?.addQueueMeasurement(_telemetry_performance_PerformanceEvent_mjs__WEBPACK_IMPORTED_MODULE_5__.PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\n        // create an idToken object (not entity)\n        let idTokenClaims;\n        if (serverTokenResponse.id_token) {\n            idTokenClaims = (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__.extractTokenClaims)(serverTokenResponse.id_token || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, this.cryptoObj.base64Decode);\n            // token nonce check (TODO: Add a warning if no nonce is given?)\n            if (authCodePayload && authCodePayload.nonce) {\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.nonceMismatch);\n                }\n            }\n            // token max_age check\n            if (request.maxAge || request.maxAge === 0) {\n                const authTime = idTokenClaims.auth_time;\n                if (!authTime) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.authTimeNotFound);\n                }\n                (0,_account_AuthToken_mjs__WEBPACK_IMPORTED_MODULE_6__.checkMaxAge)(authTime, request.maxAge);\n            }\n        }\n        // generate homeAccountId\n        this.homeAccountIdentifier = _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__.AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\n        // save the response tokens\n        let requestStateObj;\n        if (!!authCodePayload && !!authCodePayload.state) {\n            requestStateObj = _utils_ProtocolUtils_mjs__WEBPACK_IMPORTED_MODULE_8__.ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\n        }\n        // Add keyId from request to serverTokenResponse if defined\n        serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\n        let cacheContext;\n        try {\n            if (this.persistencePlugin && this.serializableCache) {\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n                cacheContext = new _cache_persistence_TokenCacheContext_mjs__WEBPACK_IMPORTED_MODULE_9__.TokenCacheContext(this.serializableCache, true);\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\n            }\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n             */ if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {\n                const key = cacheRecord.account.generateAccountKey();\n                const account = this.cacheStorage.getAccount(key, this.logger);\n                if (!account) {\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                    return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\n                }\n            }\n            await this.cacheStorage.saveCacheRecord(cacheRecord, request.storeInCache, request.correlationId);\n        } finally{\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\n            }\n        }\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\n    }\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */ generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\n        const env = authority.getPreferredCache();\n        if (!env) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.invalidCacheEnvironment);\n        }\n        const claimsTenantId = (0,_account_TokenClaims_mjs__WEBPACK_IMPORTED_MODULE_10__.getTenantIdFromIdTokenClaims)(idTokenClaims);\n        // IdToken: non AAD scenarios can have empty realm\n        let cachedIdToken;\n        let cachedAccount;\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\n            cachedIdToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createIdTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || \"\");\n            cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined, this.logger);\n        }\n        // AccessToken\n        let cachedAccessToken = null;\n        if (serverTokenResponse.access_token) {\n            // If scopes not returned in server response, use request scopes\n            const responseScopes = serverTokenResponse.scope ? _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet.fromString(serverTokenResponse.scope) : new _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet(request.scopes || []);\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */ const expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n            const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n            const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n            // non AAD scenarios can have empty realm\n            cachedAccessToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createAccessTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || \"\", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\n        }\n        // refreshToken\n        let cachedRefreshToken = null;\n        if (serverTokenResponse.refresh_token) {\n            let rtExpiresOn;\n            if (serverTokenResponse.refresh_token_expires_in) {\n                const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in === \"string\" ? parseInt(serverTokenResponse.refresh_token_expires_in, 10) : serverTokenResponse.refresh_token_expires_in;\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\n            }\n            cachedRefreshToken = (0,_cache_utils_CacheHelpers_mjs__WEBPACK_IMPORTED_MODULE_11__.createRefreshTokenEntity)(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);\n        }\n        // appMetadata\n        let cachedAppMetadata = null;\n        if (serverTokenResponse.foci) {\n            cachedAppMetadata = {\n                clientId: this.clientId,\n                environment: env,\n                familyId: serverTokenResponse.foci\n            };\n        }\n        return {\n            account: cachedAccount,\n            idToken: cachedIdToken,\n            accessToken: cachedAccessToken,\n            refreshToken: cachedRefreshToken,\n            appMetadata: cachedAppMetadata\n        };\n    }\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */ static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\n        let accessToken = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;\n        let responseScopes = [];\n        let expiresOn = null;\n        let extExpiresOn;\n        let refreshOn;\n        let familyId = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING;\n        if (cacheRecord.accessToken) {\n            /*\r\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\r\n             * the token will be returned unsigned\r\n             */ if (cacheRecord.accessToken.tokenType === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.AuthenticationScheme.POP && !request.popKid) {\n                const popTokenGenerator = new _crypto_PopTokenGenerator_mjs__WEBPACK_IMPORTED_MODULE_13__.PopTokenGenerator(cryptoObj);\n                const { secret, keyId } = cacheRecord.accessToken;\n                if (!keyId) {\n                    throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.keyIdMissing);\n                }\n                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\n            } else {\n                accessToken = cacheRecord.accessToken.secret;\n            }\n            responseScopes = _request_ScopeSet_mjs__WEBPACK_IMPORTED_MODULE_12__.ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n            if (cacheRecord.accessToken.refreshOn) {\n                refreshOn = new Date(Number(cacheRecord.accessToken.refreshOn) * 1000);\n            }\n        }\n        if (cacheRecord.appMetadata) {\n            familyId = cacheRecord.appMetadata.familyId === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.THE_FAMILY_ID ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.THE_FAMILY_ID : \"\";\n        }\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\n        const tid = idTokenClaims?.tid || \"\";\n        // for hybrid + native bridge enablement, send back the native account Id\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\n            cacheRecord.account.nativeAccountId = serverTokenResponse?.spa_accountid;\n        }\n        const accountInfo = cacheRecord.account ? (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__.updateAccountTenantProfileData)(cacheRecord.account.getAccountInfo(), undefined, idTokenClaims, cacheRecord.idToken?.secret) : null;\n        return {\n            authority: authority.canonicalAuthority,\n            uniqueId: uid,\n            tenantId: tid,\n            scopes: responseScopes,\n            account: accountInfo,\n            idToken: cacheRecord?.idToken?.secret || \"\",\n            idTokenClaims: idTokenClaims || {},\n            accessToken: accessToken,\n            fromCache: fromTokenCache,\n            expiresOn: expiresOn,\n            extExpiresOn: extExpiresOn,\n            refreshOn: refreshOn,\n            correlationId: request.correlationId,\n            requestId: requestId || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            familyId: familyId,\n            tokenType: cacheRecord.accessToken?.tokenType || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            state: requestState ? requestState.userRequestState : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            msGraphHost: cacheRecord.account?.msGraphHost || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING,\n            code: serverTokenResponse?.spa_code,\n            fromNativeBroker: false\n        };\n    }\n}\nfunction buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {\n    logger?.verbose(\"setCachedAccount called\");\n    // Check if base account is already cached\n    const accountKeys = cacheStorage.getAccountKeys();\n    const baseAccountKey = accountKeys.find((accountKey)=>{\n        return accountKey.startsWith(homeAccountId);\n    });\n    let cachedAccount = null;\n    if (baseAccountKey) {\n        cachedAccount = cacheStorage.getAccount(baseAccountKey, logger);\n    }\n    const baseAccount = cachedAccount || _cache_entities_AccountEntity_mjs__WEBPACK_IMPORTED_MODULE_7__.AccountEntity.createAccount({\n        homeAccountId,\n        idTokenClaims,\n        clientInfo,\n        environment,\n        cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\n        msGraphHost: authCodePayload?.msgraph_host,\n        nativeAccountId: nativeAccountId\n    }, authority, base64Decode);\n    const tenantProfiles = baseAccount.tenantProfiles || [];\n    const tenantId = claimsTenantId || baseAccount.realm;\n    if (tenantId && !tenantProfiles.find((tenantProfile)=>{\n        return tenantProfile.tenantId === tenantId;\n    })) {\n        const newTenantProfile = (0,_account_AccountInfo_mjs__WEBPACK_IMPORTED_MODULE_14__.buildTenantProfile)(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);\n        tenantProfiles.push(newTenantProfile);\n    }\n    baseAccount.tenantProfiles = tenantProfiles;\n    return baseAccount;\n}\n //# sourceMappingURL=ResponseHandler.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntFields: () => (/* binding */ IntFields),\n/* harmony export */   PerformanceEventAbbreviations: () => (/* binding */ PerformanceEventAbbreviations),\n/* harmony export */   PerformanceEventStatus: () => (/* binding */ PerformanceEventStatus),\n/* harmony export */   PerformanceEvents: () => (/* binding */ PerformanceEvents)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */ const PerformanceEvents = {\n    /**\r\n     * acquireTokenByCode API (msal-browser and msal-node).\r\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n     */ AcquireTokenByCode: \"acquireTokenByCode\",\n    /**\r\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n     * Used to renew an access token using a refresh token against the token endpoint.\r\n     */ AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\n    /**\r\n     * acquireTokenSilent API (msal-browser and msal-node).\r\n     * Used to silently acquire a new access token (from the cache or the network).\r\n     */ AcquireTokenSilent: \"acquireTokenSilent\",\n    /**\r\n     * acquireTokenSilentAsync (msal-browser).\r\n     * Internal API for acquireTokenSilent.\r\n     */ AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\n    /**\r\n     * acquireTokenPopup (msal-browser).\r\n     * Used to acquire a new access token interactively through pop ups\r\n     */ AcquireTokenPopup: \"acquireTokenPopup\",\n    /**\r\n     * acquireTokenPreRedirect (msal-browser).\r\n     * First part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */ AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\n    /**\r\n     * acquireTokenRedirect (msal-browser).\r\n     * Second part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */ AcquireTokenRedirect: \"acquireTokenRedirect\",\n    /**\r\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n     */ CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\n    /**\r\n     * signJwt API in CryptoOpts class (msal-browser).\r\n     * Used to signed a pop token.\r\n     */ CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\n    /**\r\n     * acquireToken API in the SilentCacheClient class (msal-browser).\r\n     * Used to read access tokens from the cache.\r\n     */ SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\n    /**\r\n     * acquireToken API in the SilentIframeClient class (msal-browser).\r\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n     */ SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\",\n    /**\r\n     * acquireToken API in SilentRereshClient (msal-browser).\r\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n     */ SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\n    /**\r\n     * ssoSilent API (msal-browser).\r\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n     */ SsoSilent: \"ssoSilent\",\n    /**\r\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n     * Used to load authority metadata for a request.\r\n     */ StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\n    /**\r\n     * acquireToken APIs in msal-browser.\r\n     * Used to make an /authorize endpoint call with native brokering enabled.\r\n     */ FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\n    /**\r\n     * acquireToken API in NativeInteractionClient class (msal-browser).\r\n     * Used to acquire a token from Native component when native brokering is enabled.\r\n     */ NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\n    /**\r\n     * Time spent creating default headers for requests to token endpoint\r\n     */ BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\n    /**\r\n     * Time spent sending/waiting for the response of a request to the token endpoint\r\n     */ NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\n    RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\n    AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\n    /**\r\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n     */ BrokerHandhshake: \"brokerHandshake\",\n    /**\r\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n     */ AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\n    /**\r\n     * Time taken for token acquisition by broker\r\n     */ AcquireTokenByBroker: \"acquireTokenByBroker\",\n    /**\r\n     * Time spent on the network for refresh token acquisition\r\n     */ RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\n    /**\r\n     * Time taken for acquiring refresh token , records RT size\r\n     */ RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\n    /**\r\n     * Time taken for acquiring cached refresh token\r\n     */ RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\n    /**\r\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n     */ RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\n    /**\r\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n     */ RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\n    /**\r\n     * acquireTokenFromCache (msal-browser).\r\n     * Internal API for acquiring token from cache\r\n     */ AcquireTokenFromCache: \"acquireTokenFromCache\",\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\n    SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\n    /**\r\n     * acquireTokenBySilentIframe (msal-browser).\r\n     * Internal API for acquiring token by silent Iframe\r\n     */ AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\n    /**\r\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n     */ InitializeBaseRequest: \"initializeBaseRequest\",\n    /**\r\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n     */ InitializeSilentRequest: \"initializeSilentRequest\",\n    InitializeClientApplication: \"initializeClientApplication\",\n    /**\r\n     * Helper function in SilentIframeClient class (msal-browser).\r\n     */ SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\n    /**\r\n     * SilentHandler\r\n     */ SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\n    /**\r\n     * Helper functions in StandardInteractionClient class (msal-browser)\r\n     */ StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\n    StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\n    StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\n    StandardInteractionClientInitializeAuthorizationCodeRequest: \"standardInteractionClientInitializeAuthorizationCodeRequest\",\n    /**\r\n     * getAuthCodeUrl API (msal-browser and msal-node).\r\n     */ GetAuthCodeUrl: \"getAuthCodeUrl\",\n    /**\r\n     * Functions from InteractionHandler (msal-browser)\r\n     */ HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\n    HandleCodeResponse: \"handleCodeResponse\",\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\n    /**\r\n     * APIs in Authorization Code Client (msal-common)\r\n     */ AuthClientAcquireToken: \"authClientAcquireToken\",\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\n    AuthClientCreateQueryString: \"authClientCreateQueryString\",\n    /**\r\n     * Generate functions in PopTokenGenerator (msal-common)\r\n     */ PopTokenGenerateCnf: \"popTokenGenerateCnf\",\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\n    /**\r\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n     */ HandleServerTokenResponse: \"handleServerTokenResponse\",\n    DeserializeResponse: \"deserializeResponse\",\n    /**\r\n     * Authority functions\r\n     */ AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\n    AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\n    AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\n    AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\n    AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\n    AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\n    /**\r\n     * Region Discovery functions\r\n     */ RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\n    GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\n    UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\n    RemoveHiddenIframe: \"removeHiddenIframe\",\n    /**\r\n     * Cache operations\r\n     */ ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\n    /**\r\n     * Crypto Operations\r\n     */ GeneratePkceCodes: \"generatePkceCodes\",\n    GenerateCodeVerifier: \"generateCodeVerifier\",\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\n    Sha256Digest: \"sha256Digest\",\n    GetRandomValues: \"getRandomValues\"\n};\nconst PerformanceEventAbbreviations = new Map([\n    [\n        PerformanceEvents.AcquireTokenByCode,\n        \"ATByCode\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByRefreshToken,\n        \"ATByRT\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenSilent,\n        \"ATS\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenSilentAsync,\n        \"ATSAsync\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenPopup,\n        \"ATPopup\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenRedirect,\n        \"ATRedirect\"\n    ],\n    [\n        PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\n        \"CryptoGetPKThumb\"\n    ],\n    [\n        PerformanceEvents.CryptoOptsSignJwt,\n        \"CryptoSignJwt\"\n    ],\n    [\n        PerformanceEvents.SilentCacheClientAcquireToken,\n        \"SltCacheClientAT\"\n    ],\n    [\n        PerformanceEvents.SilentIframeClientAcquireToken,\n        \"SltIframeClientAT\"\n    ],\n    [\n        PerformanceEvents.SilentRefreshClientAcquireToken,\n        \"SltRClientAT\"\n    ],\n    [\n        PerformanceEvents.SsoSilent,\n        \"SsoSlt\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n        \"StdIntClientGetDiscAuth\"\n    ],\n    [\n        PerformanceEvents.FetchAccountIdWithNativeBroker,\n        \"FetchAccIdWithNtvBroker\"\n    ],\n    [\n        PerformanceEvents.NativeInteractionClientAcquireToken,\n        \"NtvIntClientAT\"\n    ],\n    [\n        PerformanceEvents.BaseClientCreateTokenRequestHeaders,\n        \"BaseClientCreateTReqHead\"\n    ],\n    [\n        PerformanceEvents.NetworkClientSendPostRequestAsync,\n        \"NetClientSendPost\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\n        \"RTClientExecPost\"\n    ],\n    [\n        PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\n        \"AuthCodeClientExecPost\"\n    ],\n    [\n        PerformanceEvents.BrokerHandhshake,\n        \"BrokerHandshake\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByRefreshTokenInBroker,\n        \"ATByRTInBroker\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByBroker,\n        \"ATByBroker\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\n        \"RTClientExecTReq\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireToken,\n        \"RTClientAT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\n        \"RTClientATWithCachedRT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\n        \"RTClientATByRT\"\n    ],\n    [\n        PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\n        \"RTClientCreateTReqBody\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenFromCache,\n        \"ATFromCache\"\n    ],\n    [\n        PerformanceEvents.SilentFlowClientAcquireCachedToken,\n        \"SltFlowClientATCached\"\n    ],\n    [\n        PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\n        \"SltFlowClientGenResFromCache\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenBySilentIframe,\n        \"ATBySltIframe\"\n    ],\n    [\n        PerformanceEvents.InitializeBaseRequest,\n        \"InitBaseReq\"\n    ],\n    [\n        PerformanceEvents.InitializeSilentRequest,\n        \"InitSltReq\"\n    ],\n    [\n        PerformanceEvents.InitializeClientApplication,\n        \"InitClientApplication\"\n    ],\n    [\n        PerformanceEvents.SilentIframeClientTokenHelper,\n        \"SIClientTHelper\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\n        \"SHandlerInitAuthReq\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\n        \"SltHandlerMonitorIframeForHash\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerLoadFrame,\n        \"SHandlerLoadFrame\"\n    ],\n    [\n        PerformanceEvents.SilentHandlerLoadFrameSync,\n        \"SHandlerLoadFrameSync\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n        \"StdIntClientCreateAuthCodeClient\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientGetClientConfiguration,\n        \"StdIntClientGetClientConf\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n        \"StdIntClientInitAuthReq\"\n    ],\n    [\n        PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest,\n        \"StdIntClientInitAuthCodeReq\"\n    ],\n    [\n        PerformanceEvents.GetAuthCodeUrl,\n        \"GetAuthCodeUrl\"\n    ],\n    [\n        PerformanceEvents.HandleCodeResponseFromServer,\n        \"HandleCodeResFromServer\"\n    ],\n    [\n        PerformanceEvents.HandleCodeResponse,\n        \"HandleCodeResp\"\n    ],\n    [\n        PerformanceEvents.UpdateTokenEndpointAuthority,\n        \"UpdTEndpointAuth\"\n    ],\n    [\n        PerformanceEvents.AuthClientAcquireToken,\n        \"AuthClientAT\"\n    ],\n    [\n        PerformanceEvents.AuthClientExecuteTokenRequest,\n        \"AuthClientExecTReq\"\n    ],\n    [\n        PerformanceEvents.AuthClientCreateTokenRequestBody,\n        \"AuthClientCreateTReqBody\"\n    ],\n    [\n        PerformanceEvents.AuthClientCreateQueryString,\n        \"AuthClientCreateQueryStr\"\n    ],\n    [\n        PerformanceEvents.PopTokenGenerateCnf,\n        \"PopTGenCnf\"\n    ],\n    [\n        PerformanceEvents.PopTokenGenerateKid,\n        \"PopTGenKid\"\n    ],\n    [\n        PerformanceEvents.HandleServerTokenResponse,\n        \"HandleServerTRes\"\n    ],\n    [\n        PerformanceEvents.DeserializeResponse,\n        \"DeserializeRes\"\n    ],\n    [\n        PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\n        \"AuthFactCreateDiscInst\"\n    ],\n    [\n        PerformanceEvents.AuthorityResolveEndpointsAsync,\n        \"AuthResolveEndpointsAsync\"\n    ],\n    [\n        PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,\n        \"AuthResolveEndpointsFromLocal\"\n    ],\n    [\n        PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\n        \"AuthGetCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\n        \"AuthUpdCDMeta\"\n    ],\n    [\n        PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\n        \"AuthUpdCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateEndpointMetadata,\n        \"AuthUpdEndpointMeta\"\n    ],\n    [\n        PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\n        \"AuthUpdMetaWithRegInfo\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryDetectRegion,\n        \"RegDiscDetectReg\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\n        \"RegDiscGetRegFromIMDS\"\n    ],\n    [\n        PerformanceEvents.RegionDiscoveryGetCurrentVersion,\n        \"RegDiscGetCurrentVer\"\n    ],\n    [\n        PerformanceEvents.AcquireTokenByCodeAsync,\n        \"ATByCodeAsync\"\n    ],\n    [\n        PerformanceEvents.GetEndpointMetadataFromNetwork,\n        \"GetEndpointMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,\n        \"GetCDMetaFromNet\"\n    ],\n    [\n        PerformanceEvents.HandleRedirectPromiseMeasurement,\n        \"HandleRedirectPromise\"\n    ],\n    [\n        PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\n        \"HandleNtvRedirectPromise\"\n    ],\n    [\n        PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,\n        \"UpdateCDMeta\"\n    ],\n    [\n        PerformanceEvents.UsernamePasswordClientAcquireToken,\n        \"UserPassClientAT\"\n    ],\n    [\n        PerformanceEvents.NativeMessageHandlerHandshake,\n        \"NtvMsgHandlerHandshake\"\n    ],\n    [\n        PerformanceEvents.NativeGenerateAuthResult,\n        \"NtvGenAuthRes\"\n    ],\n    [\n        PerformanceEvents.RemoveHiddenIframe,\n        \"RemoveHiddenIframe\"\n    ],\n    [\n        PerformanceEvents.ClearTokensAndKeysWithClaims,\n        \"ClearTAndKeysWithClaims\"\n    ],\n    [\n        PerformanceEvents.CacheManagerGetRefreshToken,\n        \"CacheManagerGetRT\"\n    ],\n    [\n        PerformanceEvents.GeneratePkceCodes,\n        \"GenPkceCodes\"\n    ],\n    [\n        PerformanceEvents.GenerateCodeVerifier,\n        \"GenCodeVerifier\"\n    ],\n    [\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\n        \"GenCodeChallengeFromVerifier\"\n    ],\n    [\n        PerformanceEvents.Sha256Digest,\n        \"Sha256Digest\"\n    ],\n    [\n        PerformanceEvents.GetRandomValues,\n        \"GetRandomValues\"\n    ]\n]);\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */ const PerformanceEventStatus = {\n    NotStarted: 0,\n    InProgress: 1,\n    Completed: 2\n};\nconst IntFields = new Set([\n    \"accessTokenSize\",\n    \"durationMs\",\n    \"idTokenSize\",\n    \"matsSilentStatus\",\n    \"matsHttpStatus\",\n    \"refreshTokenSize\",\n    \"queuedTimeMs\",\n    \"startTimeMs\",\n    \"status\",\n    \"multiMatchedAT\",\n    \"multiMatchedID\",\n    \"multiMatchedRT\"\n]);\n //# sourceMappingURL=PerformanceEvent.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServerTelemetryManager: () => (/* binding */ ServerTelemetryManager)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/AuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const skuGroupSeparator = \",\";\nconst skuValueSeparator = \"|\";\nfunction makeExtraSkuString(params) {\n    const { skus, libraryName, libraryVersion, extensionName, extensionVersion } = params;\n    const skuMap = new Map([\n        [\n            0,\n            [\n                libraryName,\n                libraryVersion\n            ]\n        ],\n        [\n            2,\n            [\n                extensionName,\n                extensionVersion\n            ]\n        ]\n    ]);\n    let skuArr = [];\n    if (skus?.length) {\n        skuArr = skus.split(skuGroupSeparator);\n        // Ignore invalid input sku param\n        if (skuArr.length < 4) {\n            return skus;\n        }\n    } else {\n        skuArr = Array.from({\n            length: 4\n        }, ()=>skuValueSeparator);\n    }\n    skuMap.forEach((value, key)=>{\n        if (value.length === 2 && value[0]?.length && value[1]?.length) {\n            setSku({\n                skuArr,\n                index: key,\n                skuName: value[0],\n                skuVersion: value[1]\n            });\n        }\n    });\n    return skuArr.join(skuGroupSeparator);\n}\nfunction setSku(params) {\n    const { skuArr, index, skuName, skuVersion } = params;\n    if (index >= skuArr.length) {\n        return;\n    }\n    skuArr[index] = [\n        skuName,\n        skuVersion\n    ].join(skuValueSeparator);\n}\n/** @internal */ class ServerTelemetryManager {\n    constructor(telemetryRequest, cacheManager){\n        this.cacheOutcome = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CacheOutcome.NOT_APPLICABLE;\n        this.cacheManager = cacheManager;\n        this.apiId = telemetryRequest.apiId;\n        this.correlationId = telemetryRequest.correlationId;\n        this.wrapperSKU = telemetryRequest.wrapperSKU || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.wrapperVer = telemetryRequest.wrapperVer || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n        this.telemetryCacheKey = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CACHE_KEY + _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n    }\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */ generateCurrentRequestHeaderValue() {\n        const request = `${this.apiId}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\n        const platformFieldsArr = [\n            this.wrapperSKU,\n            this.wrapperVer\n        ];\n        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\n        if (nativeBrokerErrorCode?.length) {\n            platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);\n        }\n        const platformFields = platformFieldsArr.join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\n        const requestWithRegionDiscoveryFields = [\n            request,\n            regionDiscoveryFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            requestWithRegionDiscoveryFields,\n            platformFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */ generateLastRequestHeaderValue() {\n        const lastRequests = this.getLastRequests();\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errors = lastRequests.errors.slice(0, maxErrors).join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        const errorCount = lastRequests.errors.length;\n        // Indicate whether this header contains all data or partial data\n        const overflow = maxErrors < errorCount ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n        const platformFields = [\n            errorCount,\n            overflow\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n        return [\n            _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\n            lastRequests.cacheHits,\n            failedRequests,\n            errors,\n            platformFields\n        ].join(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n    }\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */ cacheFailedRequest(error) {\n        const lastRequests = this.getLastRequests();\n        if (lastRequests.errors.length >= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n            // Remove a cached error to make room, first in first out\n            lastRequests.failedRequests.shift(); // apiId\n            lastRequests.failedRequests.shift(); // correlationId\n            lastRequests.errors.shift();\n        }\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\n        if (error instanceof Error && !!error && error.toString()) {\n            if (error instanceof _error_AuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthError) {\n                if (error.subError) {\n                    lastRequests.errors.push(error.subError);\n                } else if (error.errorCode) {\n                    lastRequests.errors.push(error.errorCode);\n                } else {\n                    lastRequests.errors.push(error.toString());\n                }\n            } else {\n                lastRequests.errors.push(error.toString());\n            }\n        } else {\n            lastRequests.errors.push(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n        }\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return;\n    }\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */ incrementCacheHits() {\n        const lastRequests = this.getLastRequests();\n        lastRequests.cacheHits += 1;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n        return lastRequests.cacheHits;\n    }\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */ getLastRequests() {\n        const initialValue = {\n            failedRequests: [],\n            errors: [],\n            cacheHits: 0\n        };\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n        return lastRequests || initialValue;\n    }\n    /**\r\n     * Remove server telemetry cache entry\r\n     */ clearTelemetryCache() {\n        const lastRequests = this.getLastRequests();\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n        const errorCount = lastRequests.errors.length;\n        if (numErrorsFlushed === errorCount) {\n            // All errors were sent on last request, clear Telemetry cache\n            this.cacheManager.removeItem(this.telemetryCacheKey);\n        } else {\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n            const serverTelemEntity = {\n                failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\n                errors: lastRequests.errors.slice(numErrorsFlushed),\n                cacheHits: 0\n            };\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n        }\n    }\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */ static maxErrorsToSend(serverTelemetryEntity) {\n        let i;\n        let maxErrors = 0;\n        let dataSize = 0;\n        const errorCount = serverTelemetryEntity.errors.length;\n        for(i = 0; i < errorCount; i++){\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n            const apiId = serverTelemetryEntity.failedRequests[2 * i] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const errorCode = serverTelemetryEntity.errors[i] || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n            if (dataSize < _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n                // Adding this entry to the header would still keep header size below the limit\n                maxErrors += 1;\n            } else {\n                break;\n            }\n        }\n        return maxErrors;\n    }\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */ getRegionDiscoveryFields() {\n        const regionDiscoveryFields = [];\n        regionDiscoveryFields.push(this.regionUsed || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionSource || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        regionDiscoveryFields.push(this.regionOutcome || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING);\n        return regionDiscoveryFields.join(\",\");\n    }\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */ updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\n        this.regionUsed = regionDiscoveryMetadata.region_used;\n        this.regionSource = regionDiscoveryMetadata.region_source;\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n    }\n    /**\r\n     * Set cache outcome\r\n     */ setCacheOutcome(cacheOutcome) {\n        this.cacheOutcome = cacheOutcome;\n    }\n    setNativeBrokerErrorCode(errorCode) {\n        const lastRequests = this.getLastRequests();\n        lastRequests.nativeBrokerErrorCode = errorCode;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    }\n    getNativeBrokerErrorCode() {\n        return this.getLastRequests().nativeBrokerErrorCode;\n    }\n    clearNativeBrokerErrorCode() {\n        const lastRequests = this.getLastRequests();\n        delete lastRequests.nativeBrokerErrorCode;\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    }\n    static makeExtraSkuString(params) {\n        return makeExtraSkuString(params);\n    }\n}\n //# sourceMappingURL=ServerTelemetryManager.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/url/UrlString.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UrlString: () => (/* binding */ UrlString)\n/* harmony export */ });\n/* harmony import */ var _error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientConfigurationError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/StringUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_UrlUtils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/UrlUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\");\n/* harmony import */ var _error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientConfigurationErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Url object class which can perform various transformations on url strings.\r\n */ class UrlString {\n    get urlString() {\n        return this._urlString;\n    }\n    constructor(url){\n        this._urlString = url;\n        if (!this._urlString) {\n            // Throws error if url is empty\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlEmptyError);\n        }\n        if (!url.includes(\"#\")) {\n            this._urlString = UrlString.canonicalizeUri(url);\n        }\n    }\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */ static canonicalizeUri(url) {\n        if (url) {\n            let lowerCaseUrl = url.toLowerCase();\n            if (_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"?\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n            } else if (_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n            }\n            if (!_utils_StringUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.StringUtils.endsWith(lowerCaseUrl, \"/\")) {\n                lowerCaseUrl += \"/\";\n            }\n            return lowerCaseUrl;\n        }\n        return url;\n    }\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */ validateAsUri() {\n        // Attempts to parse url for uri components\n        let components;\n        try {\n            components = this.getUrlComponents();\n        } catch (e) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Throw error if URI or path segments are not parseable.\n        if (!components.HostNameAndPort || !components.PathSegments) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Throw error if uri is insecure.\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.authorityUriInsecure);\n        }\n    }\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */ static appendQueryString(url, queryString) {\n        if (!queryString) {\n            return url;\n        }\n        return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\n    }\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */ static removeHashFromUrl(url) {\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n    }\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */ replaceTenantPath(tenantId) {\n        const urlObject = this.getUrlComponents();\n        const pathArray = urlObject.PathSegments;\n        if (tenantId && pathArray.length !== 0 && (pathArray[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.AADAuthorityConstants.COMMON || pathArray[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.AADAuthorityConstants.ORGANIZATIONS)) {\n            pathArray[0] = tenantId;\n        }\n        return UrlString.constructAuthorityUriFromObject(urlObject);\n    }\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */ getUrlComponents() {\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n        // If url string does not match regEx, we throw an error\n        const match = this.urlString.match(regEx);\n        if (!match) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        // Url component object\n        const urlComponents = {\n            Protocol: match[1],\n            HostNameAndPort: match[4],\n            AbsolutePath: match[5],\n            QueryString: match[7]\n        };\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\n        pathSegments = pathSegments.filter((val)=>val && val.length > 0); // remove empty elements\n        urlComponents.PathSegments = pathSegments;\n        if (urlComponents.QueryString && urlComponents.QueryString.endsWith(\"/\")) {\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n        }\n        return urlComponents;\n    }\n    static getDomainFromUrl(url) {\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n        const match = url.match(regEx);\n        if (!match) {\n            throw (0,_error_ClientConfigurationError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientConfigurationError)(_error_ClientConfigurationErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.urlParseError);\n        }\n        return match[2];\n    }\n    static getAbsoluteUrl(relativeUrl, baseUrl) {\n        if (relativeUrl[0] === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.Constants.FORWARD_SLASH) {\n            const url = new UrlString(baseUrl);\n            const baseComponents = url.getUrlComponents();\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n        }\n        return relativeUrl;\n    }\n    static constructAuthorityUriFromObject(urlObject) {\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n    }\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     * @deprecated This API will be removed in a future version\r\n     */ static hashContainsKnownProperties(response) {\n        return !!(0,_utils_UrlUtils_mjs__WEBPACK_IMPORTED_MODULE_4__.getDeserializedResponse)(response);\n    }\n}\n //# sourceMappingURL=UrlString.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClientAssertion: () => (/* binding */ getClientAssertion)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ async function getClientAssertion(clientAssertion, clientId, tokenEndpoint) {\n    if (typeof clientAssertion === \"string\") {\n        return clientAssertion;\n    } else {\n        const config = {\n            clientId: clientId,\n            tokenEndpoint: tokenEndpoint\n        };\n        return clientAssertion(config);\n    }\n}\n //# sourceMappingURL=ClientAssertionUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvQ2xpZW50QXNzZXJ0aW9uVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRCxlQUFlQSxtQkFBbUJDLGVBQWUsRUFBRUMsUUFBUSxFQUFFQyxhQUFhO0lBQ3RFLElBQUksT0FBT0Ysb0JBQW9CLFVBQVU7UUFDckMsT0FBT0E7SUFDWCxPQUNLO1FBQ0QsTUFBTUcsU0FBUztZQUNYRixVQUFVQTtZQUNWQyxlQUFlQTtRQUNuQjtRQUNBLE9BQU9GLGdCQUFnQkc7SUFDM0I7QUFDSjtBQUU4QixDQUM5QixpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1jb21tb24vZGlzdC91dGlscy9DbGllbnRBc3NlcnRpb25VdGlscy5tanM/MWIwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRDbGllbnRBc3NlcnRpb24oY2xpZW50QXNzZXJ0aW9uLCBjbGllbnRJZCwgdG9rZW5FbmRwb2ludCkge1xyXG4gICAgaWYgKHR5cGVvZiBjbGllbnRBc3NlcnRpb24gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gY2xpZW50QXNzZXJ0aW9uO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xyXG4gICAgICAgICAgICBjbGllbnRJZDogY2xpZW50SWQsXHJcbiAgICAgICAgICAgIHRva2VuRW5kcG9pbnQ6IHRva2VuRW5kcG9pbnQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2xpZW50QXNzZXJ0aW9uKGNvbmZpZyk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgZ2V0Q2xpZW50QXNzZXJ0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbGllbnRBc3NlcnRpb25VdGlscy5tanMubWFwXG4iXSwibmFtZXMiOlsiZ2V0Q2xpZW50QXNzZXJ0aW9uIiwiY2xpZW50QXNzZXJ0aW9uIiwiY2xpZW50SWQiLCJ0b2tlbkVuZHBvaW50IiwiY29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/Constants.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AADAuthorityConstants: () => (/* binding */ AADAuthorityConstants),\n/* harmony export */   APP_METADATA: () => (/* binding */ APP_METADATA),\n/* harmony export */   AUTHORITY_METADATA_CONSTANTS: () => (/* binding */ AUTHORITY_METADATA_CONSTANTS),\n/* harmony export */   AuthenticationScheme: () => (/* binding */ AuthenticationScheme),\n/* harmony export */   AuthorityMetadataSource: () => (/* binding */ AuthorityMetadataSource),\n/* harmony export */   CLIENT_INFO: () => (/* binding */ CLIENT_INFO),\n/* harmony export */   CacheAccountType: () => (/* binding */ CacheAccountType),\n/* harmony export */   CacheOutcome: () => (/* binding */ CacheOutcome),\n/* harmony export */   CacheType: () => (/* binding */ CacheType),\n/* harmony export */   ClaimsRequestKeys: () => (/* binding */ ClaimsRequestKeys),\n/* harmony export */   CodeChallengeMethodValues: () => (/* binding */ CodeChallengeMethodValues),\n/* harmony export */   Constants: () => (/* binding */ Constants),\n/* harmony export */   CredentialType: () => (/* binding */ CredentialType),\n/* harmony export */   DEFAULT_TOKEN_RENEWAL_OFFSET_SEC: () => (/* binding */ DEFAULT_TOKEN_RENEWAL_OFFSET_SEC),\n/* harmony export */   Errors: () => (/* binding */ Errors),\n/* harmony export */   GrantType: () => (/* binding */ GrantType),\n/* harmony export */   HeaderNames: () => (/* binding */ HeaderNames),\n/* harmony export */   HttpStatus: () => (/* binding */ HttpStatus),\n/* harmony export */   JsonWebTokenTypes: () => (/* binding */ JsonWebTokenTypes),\n/* harmony export */   OIDC_DEFAULT_SCOPES: () => (/* binding */ OIDC_DEFAULT_SCOPES),\n/* harmony export */   OIDC_SCOPES: () => (/* binding */ OIDC_SCOPES),\n/* harmony export */   ONE_DAY_IN_MS: () => (/* binding */ ONE_DAY_IN_MS),\n/* harmony export */   PasswordGrantConstants: () => (/* binding */ PasswordGrantConstants),\n/* harmony export */   PersistentCacheKeys: () => (/* binding */ PersistentCacheKeys),\n/* harmony export */   PromptValue: () => (/* binding */ PromptValue),\n/* harmony export */   RegionDiscoveryOutcomes: () => (/* binding */ RegionDiscoveryOutcomes),\n/* harmony export */   RegionDiscoverySources: () => (/* binding */ RegionDiscoverySources),\n/* harmony export */   ResponseCodes: () => (/* binding */ ResponseCodes),\n/* harmony export */   ResponseMode: () => (/* binding */ ResponseMode),\n/* harmony export */   SERVER_TELEM_CONSTANTS: () => (/* binding */ SERVER_TELEM_CONSTANTS),\n/* harmony export */   Separators: () => (/* binding */ Separators),\n/* harmony export */   ServerResponseType: () => (/* binding */ ServerResponseType),\n/* harmony export */   THE_FAMILY_ID: () => (/* binding */ THE_FAMILY_ID),\n/* harmony export */   ThrottlingConstants: () => (/* binding */ ThrottlingConstants)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const Constants = {\n    LIBRARY_NAME: \"MSAL.JS\",\n    SKU: \"msal.js.common\",\n    // Prefix for all library cache entries\n    CACHE_PREFIX: \"msal\",\n    // default authority\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n    DEFAULT_COMMON_TENANT: \"common\",\n    // ADFS String\n    ADFS: \"adfs\",\n    DSTS: \"dstsv2\",\n    // Default AAD Instance Discovery Endpoint\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n    // CIAM URL\n    CIAM_AUTH_URL: \".ciamlogin.com\",\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\n    // Resource delimiter - used for certain cache entries\n    RESOURCE_DELIM: \"|\",\n    // Placeholder for non-existent account ids/objects\n    NO_ACCOUNT: \"NO_ACCOUNT\",\n    // Claims\n    CLAIMS: \"claims\",\n    // Consumer UTID\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n    // Default scopes\n    OPENID_SCOPE: \"openid\",\n    PROFILE_SCOPE: \"profile\",\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\n    EMAIL_SCOPE: \"email\",\n    // Default response type for authorization code flow\n    CODE_RESPONSE_TYPE: \"code\",\n    CODE_GRANT_TYPE: \"authorization_code\",\n    RT_GRANT_TYPE: \"refresh_token\",\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    NOT_DEFINED: \"not_defined\",\n    EMPTY_STRING: \"\",\n    NOT_APPLICABLE: \"N/A\",\n    NOT_AVAILABLE: \"Not Available\",\n    FORWARD_SLASH: \"/\",\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n    IMDS_VERSION: \"2020-06-01\",\n    IMDS_TIMEOUT: 2000,\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n    KNOWN_PUBLIC_CLOUDS: [\n        \"login.microsoftonline.com\",\n        \"login.windows.net\",\n        \"login.microsoft.com\",\n        \"sts.windows.net\"\n    ],\n    TOKEN_RESPONSE_TYPE: \"token\",\n    ID_TOKEN_RESPONSE_TYPE: \"id_token\",\n    SHR_NONCE_VALIDITY: 240,\n    INVALID_INSTANCE: \"invalid_instance\"\n};\nconst HttpStatus = {\n    SUCCESS: 200,\n    SUCCESS_RANGE_START: 200,\n    SUCCESS_RANGE_END: 299,\n    REDIRECT: 302,\n    CLIENT_ERROR: 400,\n    CLIENT_ERROR_RANGE_START: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    NOT_FOUND: 404,\n    REQUEST_TIMEOUT: 408,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_ERROR_RANGE_END: 499,\n    SERVER_ERROR: 500,\n    SERVER_ERROR_RANGE_START: 500,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504,\n    SERVER_ERROR_RANGE_END: 599,\n    MULTI_SIDED_ERROR: 600\n};\nconst OIDC_DEFAULT_SCOPES = [\n    Constants.OPENID_SCOPE,\n    Constants.PROFILE_SCOPE,\n    Constants.OFFLINE_ACCESS_SCOPE\n];\nconst OIDC_SCOPES = [\n    ...OIDC_DEFAULT_SCOPES,\n    Constants.EMAIL_SCOPE\n];\n/**\r\n * Request header names\r\n */ const HeaderNames = {\n    CONTENT_TYPE: \"Content-Type\",\n    CONTENT_LENGTH: \"Content-Length\",\n    RETRY_AFTER: \"Retry-After\",\n    CCS_HEADER: \"X-AnchorMailbox\",\n    WWWAuthenticate: \"WWW-Authenticate\",\n    AuthenticationInfo: \"Authentication-Info\",\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\n    X_MS_HTTP_VERSION: \"x-ms-httpver\"\n};\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */ const PersistentCacheKeys = {\n    ID_TOKEN: \"idtoken\",\n    CLIENT_INFO: \"client.info\",\n    ADAL_ID_TOKEN: \"adal.idtoken\",\n    ERROR: \"error\",\n    ERROR_DESC: \"error.description\",\n    ACTIVE_ACCOUNT: \"active-account\",\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\"\n};\n/**\r\n * String constants related to AAD Authority\r\n */ const AADAuthorityConstants = {\n    COMMON: \"common\",\n    ORGANIZATIONS: \"organizations\",\n    CONSUMERS: \"consumers\"\n};\n/**\r\n * Claims request keys\r\n */ const ClaimsRequestKeys = {\n    ACCESS_TOKEN: \"access_token\",\n    XMS_CC: \"xms_cc\"\n};\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */ const PromptValue = {\n    LOGIN: \"login\",\n    SELECT_ACCOUNT: \"select_account\",\n    CONSENT: \"consent\",\n    NONE: \"none\",\n    CREATE: \"create\",\n    NO_SESSION: \"no_session\"\n};\n/**\r\n * allowed values for codeVerifier\r\n */ const CodeChallengeMethodValues = {\n    PLAIN: \"plain\",\n    S256: \"S256\"\n};\n/**\r\n * allowed values for server response type\r\n */ const ServerResponseType = {\n    QUERY: \"query\",\n    FRAGMENT: \"fragment\"\n};\n/**\r\n * allowed values for response_mode\r\n */ const ResponseMode = {\n    ...ServerResponseType,\n    FORM_POST: \"form_post\"\n};\n/**\r\n * allowed grant_type\r\n */ const GrantType = {\n    IMPLICIT_GRANT: \"implicit\",\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\n    DEVICE_CODE_GRANT: \"device_code\",\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n};\n/**\r\n * Account types in Cache\r\n */ const CacheAccountType = {\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\n    GENERIC_ACCOUNT_TYPE: \"Generic\"\n};\n/**\r\n * Separators used in cache\r\n */ const Separators = {\n    CACHE_KEY_SEPARATOR: \"-\",\n    CLIENT_INFO_SEPARATOR: \".\"\n};\n/**\r\n * Credential Type stored in the cache\r\n */ const CredentialType = {\n    ID_TOKEN: \"IdToken\",\n    ACCESS_TOKEN: \"AccessToken\",\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\n    REFRESH_TOKEN: \"RefreshToken\"\n};\n/**\r\n * Combine all cache types\r\n */ const CacheType = {\n    ADFS: 1001,\n    MSA: 1002,\n    MSSTS: 1003,\n    GENERIC: 1004,\n    ACCESS_TOKEN: 2001,\n    REFRESH_TOKEN: 2002,\n    ID_TOKEN: 2003,\n    APP_METADATA: 3001,\n    UNDEFINED: 9999\n};\n/**\r\n * More Cache related constants\r\n */ const APP_METADATA = \"appmetadata\";\nconst CLIENT_INFO = \"client_info\";\nconst THE_FAMILY_ID = \"1\";\nconst AUTHORITY_METADATA_CONSTANTS = {\n    CACHE_KEY: \"authority-metadata\",\n    REFRESH_TIME_SECONDS: 3600 * 24\n};\nconst AuthorityMetadataSource = {\n    CONFIG: \"config\",\n    CACHE: \"cache\",\n    NETWORK: \"network\",\n    HARDCODED_VALUES: \"hardcoded_values\"\n};\nconst SERVER_TELEM_CONSTANTS = {\n    SCHEMA_VERSION: 5,\n    MAX_CUR_HEADER_BYTES: 80,\n    MAX_LAST_HEADER_BYTES: 330,\n    MAX_CACHED_ERRORS: 50,\n    CACHE_KEY: \"server-telemetry\",\n    CATEGORY_SEPARATOR: \"|\",\n    VALUE_SEPARATOR: \",\",\n    OVERFLOW_TRUE: \"1\",\n    OVERFLOW_FALSE: \"0\",\n    UNKNOWN_ERROR: \"unknown_error\"\n};\n/**\r\n * Type of the authentication request\r\n */ const AuthenticationScheme = {\n    BEARER: \"Bearer\",\n    POP: \"pop\",\n    SSH: \"ssh-cert\"\n};\n/**\r\n * Constants related to throttling\r\n */ const ThrottlingConstants = {\n    // Default time to throttle RequestThumbprint in seconds\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\n    // Default maximum time to throttle in seconds, overrides what the server sends back\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n    // Prefix for storing throttling entries\n    THROTTLING_PREFIX: \"throttling\",\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\nconst Errors = {\n    INVALID_GRANT_ERROR: \"invalid_grant\",\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\"\n};\n/**\r\n * Password grant parameters\r\n */ const PasswordGrantConstants = {\n    username: \"username\",\n    password: \"password\"\n};\n/**\r\n * Response codes\r\n */ const ResponseCodes = {\n    httpSuccess: 200,\n    httpBadRequest: 400\n};\n/**\r\n * Region Discovery Sources\r\n */ const RegionDiscoverySources = {\n    FAILED_AUTO_DETECTION: \"1\",\n    INTERNAL_CACHE: \"2\",\n    ENVIRONMENT_VARIABLE: \"3\",\n    IMDS: \"4\"\n};\n/**\r\n * Region Discovery Outcomes\r\n */ const RegionDiscoveryOutcomes = {\n    CONFIGURED_MATCHES_DETECTED: \"1\",\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\n    CONFIGURED_NOT_DETECTED: \"3\",\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\"\n};\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */ const CacheOutcome = {\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\n    NOT_APPLICABLE: \"0\",\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\n    // When the token request goes to the identity provider because no cached access token exists\n    NO_CACHED_ACCESS_TOKEN: \"2\",\n    // When the token request goes to the identity provider because cached access token expired\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\n    PROACTIVELY_REFRESHED: \"4\"\n};\nconst JsonWebTokenTypes = {\n    Jwt: \"JWT\",\n    Jwk: \"JWK\",\n    Pop: \"pop\"\n};\nconst ONE_DAY_IN_MS = 86400000;\n// Token renewal offset default in seconds\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\n //# sourceMappingURL=Constants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   invokeAsync: () => (/* binding */ invokeAsync)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId)=>{\n    return (...args)=>{\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields({\n                [eventCount]: 1\n            }, correlationId);\n        }\n        try {\n            const result = callback(...args);\n            inProgressEvent?.end({\n                success: true\n            });\n            logger.trace(`Returning result from ${eventName}`);\n            return result;\n        } catch (e) {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false\n            }, e);\n            throw e;\n        }\n    };\n};\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId)=>{\n    return (...args)=>{\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields({\n                [eventCount]: 1\n            }, correlationId);\n        }\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        return callback(...args).then((response)=>{\n            logger.trace(`Returning result from ${eventName}`);\n            inProgressEvent?.end({\n                success: true\n            });\n            return response;\n        }).catch((e)=>{\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end({\n                success: false\n            }, e);\n            throw e;\n        });\n    };\n};\n //# sourceMappingURL=FunctionWrappers.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvRnVuY3Rpb25XcmFwcGVycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Ozs7Ozs7OztDQVVDLEdBQ0QsOERBQThEO0FBQzlELE1BQU1BLFNBQVMsQ0FBQ0MsVUFBVUMsV0FBV0MsUUFBUUMsaUJBQWlCQztJQUMxRCxPQUFPLENBQUMsR0FBR0M7UUFDUEgsT0FBT0ksS0FBSyxDQUFDLENBQUMsbUJBQW1CLEVBQUVMLFVBQVUsQ0FBQztRQUM5QyxNQUFNTSxrQkFBa0JKLGlCQUFpQkssaUJBQWlCUCxXQUFXRztRQUNyRSxJQUFJQSxlQUFlO1lBQ2YsK0RBQStEO1lBQy9ELE1BQU1LLGFBQWFSLFlBQVk7WUFDL0JFLGlCQUFpQk8sZ0JBQWdCO2dCQUFFLENBQUNELFdBQVcsRUFBRTtZQUFFLEdBQUdMO1FBQzFEO1FBQ0EsSUFBSTtZQUNBLE1BQU1PLFNBQVNYLFlBQVlLO1lBQzNCRSxpQkFBaUJLLElBQUk7Z0JBQ2pCQyxTQUFTO1lBQ2I7WUFDQVgsT0FBT0ksS0FBSyxDQUFDLENBQUMsc0JBQXNCLEVBQUVMLFVBQVUsQ0FBQztZQUNqRCxPQUFPVTtRQUNYLEVBQ0EsT0FBT0csR0FBRztZQUNOWixPQUFPSSxLQUFLLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUwsVUFBVSxDQUFDO1lBQzdDLElBQUk7Z0JBQ0FDLE9BQU9JLEtBQUssQ0FBQ1MsS0FBS0MsU0FBUyxDQUFDRjtZQUNoQyxFQUNBLE9BQU9BLEdBQUc7Z0JBQ05aLE9BQU9JLEtBQUssQ0FBQztZQUNqQjtZQUNBQyxpQkFBaUJLLElBQUk7Z0JBQ2pCQyxTQUFTO1lBQ2IsR0FBR0M7WUFDSCxNQUFNQTtRQUNWO0lBQ0o7QUFDSjtBQUNBOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsOERBQThEO0FBQzlELE1BQU1HLGNBQWMsQ0FBQ2pCLFVBQVVDLFdBQVdDLFFBQVFDLGlCQUFpQkM7SUFDL0QsT0FBTyxDQUFDLEdBQUdDO1FBQ1BILE9BQU9JLEtBQUssQ0FBQyxDQUFDLG1CQUFtQixFQUFFTCxVQUFVLENBQUM7UUFDOUMsTUFBTU0sa0JBQWtCSixpQkFBaUJLLGlCQUFpQlAsV0FBV0c7UUFDckUsSUFBSUEsZUFBZTtZQUNmLCtEQUErRDtZQUMvRCxNQUFNSyxhQUFhUixZQUFZO1lBQy9CRSxpQkFBaUJPLGdCQUFnQjtnQkFBRSxDQUFDRCxXQUFXLEVBQUU7WUFBRSxHQUFHTDtRQUMxRDtRQUNBRCxpQkFBaUJlLGdCQUFnQmpCLFdBQVdHO1FBQzVDLE9BQU9KLFlBQVlLLE1BQ2RjLElBQUksQ0FBQyxDQUFDQztZQUNQbEIsT0FBT0ksS0FBSyxDQUFDLENBQUMsc0JBQXNCLEVBQUVMLFVBQVUsQ0FBQztZQUNqRE0saUJBQWlCSyxJQUFJO2dCQUNqQkMsU0FBUztZQUNiO1lBQ0EsT0FBT087UUFDWCxHQUNLQyxLQUFLLENBQUMsQ0FBQ1A7WUFDUlosT0FBT0ksS0FBSyxDQUFDLENBQUMsa0JBQWtCLEVBQUVMLFVBQVUsQ0FBQztZQUM3QyxJQUFJO2dCQUNBQyxPQUFPSSxLQUFLLENBQUNTLEtBQUtDLFNBQVMsQ0FBQ0Y7WUFDaEMsRUFDQSxPQUFPQSxHQUFHO2dCQUNOWixPQUFPSSxLQUFLLENBQUM7WUFDakI7WUFDQUMsaUJBQWlCSyxJQUFJO2dCQUNqQkMsU0FBUztZQUNiLEdBQUdDO1lBQ0gsTUFBTUE7UUFDVjtJQUNKO0FBQ0o7QUFFK0IsQ0FDL0IsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvRnVuY3Rpb25XcmFwcGVycy5tanM/ZDRiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogV3JhcHMgYSBmdW5jdGlvbiB3aXRoIGEgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQuXHJcbiAqIFVzYWdlOiBpbnZva2UoZnVuY3Rpb25Ub0NhbGwsIHBlcmZvcm1hbmNlQ2xpZW50LCBcIkV2ZW50TmFtZVwiLCBcImNvcnJlbGF0aW9uSWRcIikoLi4uYXJnc1RvUGFzc1RvRnVuY3Rpb24pXHJcbiAqIEBwYXJhbSBjYWxsYmFja1xyXG4gKiBAcGFyYW0gZXZlbnROYW1lXHJcbiAqIEBwYXJhbSBsb2dnZXJcclxuICogQHBhcmFtIHRlbGVtZXRyeUNsaWVudFxyXG4gKiBAcGFyYW0gY29ycmVsYXRpb25JZFxyXG4gKiBAcmV0dXJuc1xyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbmNvbnN0IGludm9rZSA9IChjYWxsYmFjaywgZXZlbnROYW1lLCBsb2dnZXIsIHRlbGVtZXRyeUNsaWVudCwgY29ycmVsYXRpb25JZCkgPT4ge1xyXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgbG9nZ2VyLnRyYWNlKGBFeGVjdXRpbmcgZnVuY3Rpb24gJHtldmVudE5hbWV9YCk7XHJcbiAgICAgICAgY29uc3QgaW5Qcm9ncmVzc0V2ZW50ID0gdGVsZW1ldHJ5Q2xpZW50Py5zdGFydE1lYXN1cmVtZW50KGV2ZW50TmFtZSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgaWYgKGNvcnJlbGF0aW9uSWQpIHtcclxuICAgICAgICAgICAgLy8gVHJhY2sgbnVtYmVyIG9mIHRpbWVzIHRoaXMgQVBJIGlzIGNhbGxlZCBpbiBhIHNpbmdsZSByZXF1ZXN0XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50Q291bnQgPSBldmVudE5hbWUgKyBcIkNhbGxDb3VudFwiO1xyXG4gICAgICAgICAgICB0ZWxlbWV0cnlDbGllbnQ/LmluY3JlbWVudEZpZWxkcyh7IFtldmVudENvdW50XTogMSB9LCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2soLi4uYXJncyk7XHJcbiAgICAgICAgICAgIGluUHJvZ3Jlc3NFdmVudD8uZW5kKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsb2dnZXIudHJhY2UoYFJldHVybmluZyByZXN1bHQgZnJvbSAke2V2ZW50TmFtZX1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKGBFcnJvciBvY2N1cnJlZCBpbiAke2V2ZW50TmFtZX1gKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShKU09OLnN0cmluZ2lmeShlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci50cmFjZShcIlVuYWJsZSB0byBwcmludCBlcnJvciBtZXNzYWdlLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpblByb2dyZXNzRXZlbnQ/LmVuZCh7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgICAgfSwgZSk7XHJcbiAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuLyoqXHJcbiAqIFdyYXBzIGFuIGFzeW5jIGZ1bmN0aW9uIHdpdGggYSBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudC5cclxuICogVXNhZ2U6IGludm9rZUFzeW5jKGZ1bmN0aW9uVG9DYWxsLCBwZXJmb3JtYW5jZUNsaWVudCwgXCJFdmVudE5hbWVcIiwgXCJjb3JyZWxhdGlvbklkXCIpKC4uLmFyZ3NUb1Bhc3NUb0Z1bmN0aW9uKVxyXG4gKiBAcGFyYW0gY2FsbGJhY2tcclxuICogQHBhcmFtIGV2ZW50TmFtZVxyXG4gKiBAcGFyYW0gbG9nZ2VyXHJcbiAqIEBwYXJhbSB0ZWxlbWV0cnlDbGllbnRcclxuICogQHBhcmFtIGNvcnJlbGF0aW9uSWRcclxuICogQHJldHVybnNcclxuICogQGludGVybmFsXHJcbiAqXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5jb25zdCBpbnZva2VBc3luYyA9IChjYWxsYmFjaywgZXZlbnROYW1lLCBsb2dnZXIsIHRlbGVtZXRyeUNsaWVudCwgY29ycmVsYXRpb25JZCkgPT4ge1xyXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgbG9nZ2VyLnRyYWNlKGBFeGVjdXRpbmcgZnVuY3Rpb24gJHtldmVudE5hbWV9YCk7XHJcbiAgICAgICAgY29uc3QgaW5Qcm9ncmVzc0V2ZW50ID0gdGVsZW1ldHJ5Q2xpZW50Py5zdGFydE1lYXN1cmVtZW50KGV2ZW50TmFtZSwgY29ycmVsYXRpb25JZCk7XHJcbiAgICAgICAgaWYgKGNvcnJlbGF0aW9uSWQpIHtcclxuICAgICAgICAgICAgLy8gVHJhY2sgbnVtYmVyIG9mIHRpbWVzIHRoaXMgQVBJIGlzIGNhbGxlZCBpbiBhIHNpbmdsZSByZXF1ZXN0XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50Q291bnQgPSBldmVudE5hbWUgKyBcIkNhbGxDb3VudFwiO1xyXG4gICAgICAgICAgICB0ZWxlbWV0cnlDbGllbnQ/LmluY3JlbWVudEZpZWxkcyh7IFtldmVudENvdW50XTogMSB9LCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGVsZW1ldHJ5Q2xpZW50Py5zZXRQcmVRdWV1ZVRpbWUoZXZlbnROYW1lLCBjb3JyZWxhdGlvbklkKTtcclxuICAgICAgICByZXR1cm4gY2FsbGJhY2soLi4uYXJncylcclxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgIGxvZ2dlci50cmFjZShgUmV0dXJuaW5nIHJlc3VsdCBmcm9tICR7ZXZlbnROYW1lfWApO1xyXG4gICAgICAgICAgICBpblByb2dyZXNzRXZlbnQ/LmVuZCh7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xyXG4gICAgICAgICAgICBsb2dnZXIudHJhY2UoYEVycm9yIG9jY3VycmVkIGluICR7ZXZlbnROYW1lfWApO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKEpTT04uc3RyaW5naWZ5KGUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRyYWNlKFwiVW5hYmxlIHRvIHByaW50IGVycm9yIG1lc3NhZ2UuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluUHJvZ3Jlc3NFdmVudD8uZW5kKHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgICB9LCBlKTtcclxuICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn07XG5cbmV4cG9ydCB7IGludm9rZSwgaW52b2tlQXN5bmMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZ1bmN0aW9uV3JhcHBlcnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImludm9rZSIsImNhbGxiYWNrIiwiZXZlbnROYW1lIiwibG9nZ2VyIiwidGVsZW1ldHJ5Q2xpZW50IiwiY29ycmVsYXRpb25JZCIsImFyZ3MiLCJ0cmFjZSIsImluUHJvZ3Jlc3NFdmVudCIsInN0YXJ0TWVhc3VyZW1lbnQiLCJldmVudENvdW50IiwiaW5jcmVtZW50RmllbGRzIiwicmVzdWx0IiwiZW5kIiwic3VjY2VzcyIsImUiLCJKU09OIiwic3RyaW5naWZ5IiwiaW52b2tlQXN5bmMiLCJzZXRQcmVRdWV1ZVRpbWUiLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/utils/FunctionWrappers.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProtocolUtils: () => (/* binding */ ProtocolUtils)\n/* harmony export */ });\n/* harmony import */ var _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */ class ProtocolUtils {\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */ static setRequestState(cryptoObj, userState, meta) {\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\n        return userState ? `${libraryState}${_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM}${userState}` : libraryState;\n    }\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */ static generateLibraryState(cryptoObj, meta) {\n        if (!cryptoObj) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noCryptoObject);\n        }\n        // Create a state object containing a unique id and the timestamp of the request creation\n        const stateObj = {\n            id: cryptoObj.createNewGuid()\n        };\n        if (meta) {\n            stateObj.meta = meta;\n        }\n        const stateString = JSON.stringify(stateObj);\n        return cryptoObj.base64Encode(stateString);\n    }\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */ static parseRequestState(cryptoObj, state) {\n        if (!cryptoObj) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.noCryptoObject);\n        }\n        if (!state) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidState);\n        }\n        try {\n            // Split the state between library state and user passed state and decode them separately\n            const splitState = state.split(_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM);\n            const libraryState = splitState[0];\n            const userState = splitState.length > 1 ? splitState.slice(1).join(_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.RESOURCE_DELIM) : _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING;\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\n            const libraryStateObj = JSON.parse(libraryStateString);\n            return {\n                userRequestState: userState || _Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING,\n                libraryState: libraryStateObj\n            };\n        } catch (e) {\n            throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidState);\n        }\n    }\n}\n //# sourceMappingURL=ProtocolUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvUHJvdG9jb2xVdGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDJDQUEyQyxHQUMzQztBQUM0QztBQUN5QjtBQUNZO0FBRWpGOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTUk7SUFDRjs7OztLQUlDLEdBQ0QsT0FBT0MsZ0JBQWdCQyxTQUFTLEVBQUVDLFNBQVMsRUFBRUMsSUFBSSxFQUFFO1FBQy9DLE1BQU1DLGVBQWVMLGNBQWNNLG9CQUFvQixDQUFDSixXQUFXRTtRQUNuRSxPQUFPRCxZQUNELENBQUMsRUFBRUUsYUFBYSxFQUFFVCxxREFBU0EsQ0FBQ1csY0FBYyxDQUFDLEVBQUVKLFVBQVUsQ0FBQyxHQUN4REU7SUFDVjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPQyxxQkFBcUJKLFNBQVMsRUFBRUUsSUFBSSxFQUFFO1FBQ3pDLElBQUksQ0FBQ0YsV0FBVztZQUNaLE1BQU1MLGlGQUFxQkEsQ0FBQ0MsMkVBQWNBO1FBQzlDO1FBQ0EseUZBQXlGO1FBQ3pGLE1BQU1VLFdBQVc7WUFDYkMsSUFBSVAsVUFBVVEsYUFBYTtRQUMvQjtRQUNBLElBQUlOLE1BQU07WUFDTkksU0FBU0osSUFBSSxHQUFHQTtRQUNwQjtRQUNBLE1BQU1PLGNBQWNDLEtBQUtDLFNBQVMsQ0FBQ0w7UUFDbkMsT0FBT04sVUFBVVksWUFBWSxDQUFDSDtJQUNsQztJQUNBOzs7O0tBSUMsR0FDRCxPQUFPSSxrQkFBa0JiLFNBQVMsRUFBRWMsS0FBSyxFQUFFO1FBQ3ZDLElBQUksQ0FBQ2QsV0FBVztZQUNaLE1BQU1MLGlGQUFxQkEsQ0FBQ0MsMkVBQWNBO1FBQzlDO1FBQ0EsSUFBSSxDQUFDa0IsT0FBTztZQUNSLE1BQU1uQixpRkFBcUJBLENBQUNFLHlFQUFZQTtRQUM1QztRQUNBLElBQUk7WUFDQSx5RkFBeUY7WUFDekYsTUFBTWtCLGFBQWFELE1BQU1FLEtBQUssQ0FBQ3RCLHFEQUFTQSxDQUFDVyxjQUFjO1lBQ3ZELE1BQU1GLGVBQWVZLFVBQVUsQ0FBQyxFQUFFO1lBQ2xDLE1BQU1kLFlBQVljLFdBQVdFLE1BQU0sR0FBRyxJQUNoQ0YsV0FBV0csS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQ3pCLHFEQUFTQSxDQUFDVyxjQUFjLElBQ2pEWCxxREFBU0EsQ0FBQzBCLFlBQVk7WUFDNUIsTUFBTUMscUJBQXFCckIsVUFBVXNCLFlBQVksQ0FBQ25CO1lBQ2xELE1BQU1vQixrQkFBa0JiLEtBQUtjLEtBQUssQ0FBQ0g7WUFDbkMsT0FBTztnQkFDSEksa0JBQWtCeEIsYUFBYVAscURBQVNBLENBQUMwQixZQUFZO2dCQUNyRGpCLGNBQWNvQjtZQUNsQjtRQUNKLEVBQ0EsT0FBT0csR0FBRztZQUNOLE1BQU0vQixpRkFBcUJBLENBQUNFLHlFQUFZQTtRQUM1QztJQUNKO0FBQ0o7QUFFeUIsQ0FDekIsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvUHJvdG9jb2xVdGlscy5tanM/YzBlMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4vQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnRBdXRoRXJyb3IgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3IubWpzJztcbmltcG9ydCB7IG5vQ3J5cHRvT2JqZWN0LCBpbnZhbGlkU3RhdGUgfSBmcm9tICcuLi9lcnJvci9DbGllbnRBdXRoRXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENsYXNzIHdoaWNoIHByb3ZpZGVzIGhlbHBlcnMgZm9yIE9BdXRoIDIuMCBwcm90b2NvbCBzcGVjaWZpYyB2YWx1ZXNcclxuICovXHJcbmNsYXNzIFByb3RvY29sVXRpbHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBlbmRzIHVzZXIgc3RhdGUgd2l0aCByYW5kb20gZ3VpZCwgb3IgcmV0dXJucyByYW5kb20gZ3VpZC5cclxuICAgICAqIEBwYXJhbSB1c2VyU3RhdGVcclxuICAgICAqIEBwYXJhbSByYW5kb21HdWlkXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzZXRSZXF1ZXN0U3RhdGUoY3J5cHRvT2JqLCB1c2VyU3RhdGUsIG1ldGEpIHtcclxuICAgICAgICBjb25zdCBsaWJyYXJ5U3RhdGUgPSBQcm90b2NvbFV0aWxzLmdlbmVyYXRlTGlicmFyeVN0YXRlKGNyeXB0b09iaiwgbWV0YSk7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJTdGF0ZVxyXG4gICAgICAgICAgICA/IGAke2xpYnJhcnlTdGF0ZX0ke0NvbnN0YW50cy5SRVNPVVJDRV9ERUxJTX0ke3VzZXJTdGF0ZX1gXHJcbiAgICAgICAgICAgIDogbGlicmFyeVN0YXRlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgdGhlIHN0YXRlIHZhbHVlIHVzZWQgYnkgdGhlIGNvbW1vbiBsaWJyYXJ5LlxyXG4gICAgICogQHBhcmFtIHJhbmRvbUd1aWRcclxuICAgICAqIEBwYXJhbSBjcnlwdG9PYmpcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdlbmVyYXRlTGlicmFyeVN0YXRlKGNyeXB0b09iaiwgbWV0YSkge1xyXG4gICAgICAgIGlmICghY3J5cHRvT2JqKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihub0NyeXB0b09iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENyZWF0ZSBhIHN0YXRlIG9iamVjdCBjb250YWluaW5nIGEgdW5pcXVlIGlkIGFuZCB0aGUgdGltZXN0YW1wIG9mIHRoZSByZXF1ZXN0IGNyZWF0aW9uXHJcbiAgICAgICAgY29uc3Qgc3RhdGVPYmogPSB7XHJcbiAgICAgICAgICAgIGlkOiBjcnlwdG9PYmouY3JlYXRlTmV3R3VpZCgpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKG1ldGEpIHtcclxuICAgICAgICAgICAgc3RhdGVPYmoubWV0YSA9IG1ldGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHN0YXRlU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoc3RhdGVPYmopO1xyXG4gICAgICAgIHJldHVybiBjcnlwdG9PYmouYmFzZTY0RW5jb2RlKHN0YXRlU3RyaW5nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2VzIHRoZSBzdGF0ZSBpbnRvIHRoZSBSZXF1ZXN0U3RhdGVPYmplY3QsIHdoaWNoIGNvbnRhaW5zIHRoZSBMaWJyYXJ5U3RhdGUgaW5mbyBhbmQgdGhlIHN0YXRlIHBhc3NlZCBieSB0aGUgdXNlci5cclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICogQHBhcmFtIGNyeXB0b09ialxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcGFyc2VSZXF1ZXN0U3RhdGUoY3J5cHRvT2JqLCBzdGF0ZSkge1xyXG4gICAgICAgIGlmICghY3J5cHRvT2JqKSB7XHJcbiAgICAgICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihub0NyeXB0b09iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghc3RhdGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlQ2xpZW50QXV0aEVycm9yKGludmFsaWRTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFNwbGl0IHRoZSBzdGF0ZSBiZXR3ZWVuIGxpYnJhcnkgc3RhdGUgYW5kIHVzZXIgcGFzc2VkIHN0YXRlIGFuZCBkZWNvZGUgdGhlbSBzZXBhcmF0ZWx5XHJcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0U3RhdGUgPSBzdGF0ZS5zcGxpdChDb25zdGFudHMuUkVTT1VSQ0VfREVMSU0pO1xyXG4gICAgICAgICAgICBjb25zdCBsaWJyYXJ5U3RhdGUgPSBzcGxpdFN0YXRlWzBdO1xyXG4gICAgICAgICAgICBjb25zdCB1c2VyU3RhdGUgPSBzcGxpdFN0YXRlLmxlbmd0aCA+IDFcclxuICAgICAgICAgICAgICAgID8gc3BsaXRTdGF0ZS5zbGljZSgxKS5qb2luKENvbnN0YW50cy5SRVNPVVJDRV9ERUxJTSlcclxuICAgICAgICAgICAgICAgIDogQ29uc3RhbnRzLkVNUFRZX1NUUklORztcclxuICAgICAgICAgICAgY29uc3QgbGlicmFyeVN0YXRlU3RyaW5nID0gY3J5cHRvT2JqLmJhc2U2NERlY29kZShsaWJyYXJ5U3RhdGUpO1xyXG4gICAgICAgICAgICBjb25zdCBsaWJyYXJ5U3RhdGVPYmogPSBKU09OLnBhcnNlKGxpYnJhcnlTdGF0ZVN0cmluZyk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB1c2VyUmVxdWVzdFN0YXRlOiB1c2VyU3RhdGUgfHwgQ29uc3RhbnRzLkVNUFRZX1NUUklORyxcclxuICAgICAgICAgICAgICAgIGxpYnJhcnlTdGF0ZTogbGlicmFyeVN0YXRlT2JqLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVDbGllbnRBdXRoRXJyb3IoaW52YWxpZFN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgUHJvdG9jb2xVdGlscyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UHJvdG9jb2xVdGlscy5tanMubWFwXG4iXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwiY3JlYXRlQ2xpZW50QXV0aEVycm9yIiwibm9DcnlwdG9PYmplY3QiLCJpbnZhbGlkU3RhdGUiLCJQcm90b2NvbFV0aWxzIiwic2V0UmVxdWVzdFN0YXRlIiwiY3J5cHRvT2JqIiwidXNlclN0YXRlIiwibWV0YSIsImxpYnJhcnlTdGF0ZSIsImdlbmVyYXRlTGlicmFyeVN0YXRlIiwiUkVTT1VSQ0VfREVMSU0iLCJzdGF0ZU9iaiIsImlkIiwiY3JlYXRlTmV3R3VpZCIsInN0YXRlU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImJhc2U2NEVuY29kZSIsInBhcnNlUmVxdWVzdFN0YXRlIiwic3RhdGUiLCJzcGxpdFN0YXRlIiwic3BsaXQiLCJsZW5ndGgiLCJzbGljZSIsImpvaW4iLCJFTVBUWV9TVFJJTkciLCJsaWJyYXJ5U3RhdGVTdHJpbmciLCJiYXNlNjREZWNvZGUiLCJsaWJyYXJ5U3RhdGVPYmoiLCJwYXJzZSIsInVzZXJSZXF1ZXN0U3RhdGUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/utils/ProtocolUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringUtils: () => (/* binding */ StringUtils)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * @hidden\r\n */ class StringUtils {\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */ static isEmptyObj(strObj) {\n        if (strObj) {\n            try {\n                const obj = JSON.parse(strObj);\n                return Object.keys(obj).length === 0;\n            } catch (e) {}\n        }\n        return true;\n    }\n    static startsWith(str, search) {\n        return str.indexOf(search) === 0;\n    }\n    static endsWith(str, search) {\n        return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n    }\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */ static queryStringToObject(query) {\n        const obj = {};\n        const params = query.split(\"&\");\n        const decode = (s)=>decodeURIComponent(s.replace(/\\+/g, \" \"));\n        params.forEach((pair)=>{\n            if (pair.trim()) {\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\n                if (key && value) {\n                    obj[decode(key)] = decode(value);\n                }\n            }\n        });\n        return obj;\n    }\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */ static trimArrayEntries(arr) {\n        return arr.map((entry)=>entry.trim());\n    }\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */ static removeEmptyStringsFromArray(arr) {\n        return arr.filter((entry)=>{\n            return !!entry;\n        });\n    }\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */ static jsonParseHelper(str) {\n        try {\n            return JSON.parse(str);\n        } catch (e) {\n            return null;\n        }\n    }\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */ static matchPattern(pattern, input) {\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */ // eslint-disable-next-line security/detect-non-literal-regexp\n        const regex = new RegExp(pattern.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\?\"));\n        return regex.test(input);\n    }\n}\n //# sourceMappingURL=StringUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvU3RyaW5nVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDQTs7O0NBR0MsR0FDRDs7Q0FFQyxHQUNELE1BQU1BO0lBQ0Y7OztLQUdDLEdBQ0QsT0FBT0MsV0FBV0MsTUFBTSxFQUFFO1FBQ3RCLElBQUlBLFFBQVE7WUFDUixJQUFJO2dCQUNBLE1BQU1DLE1BQU1DLEtBQUtDLEtBQUssQ0FBQ0g7Z0JBQ3ZCLE9BQU9JLE9BQU9DLElBQUksQ0FBQ0osS0FBS0ssTUFBTSxLQUFLO1lBQ3ZDLEVBQ0EsT0FBT0MsR0FBRyxDQUFFO1FBQ2hCO1FBQ0EsT0FBTztJQUNYO0lBQ0EsT0FBT0MsV0FBV0MsR0FBRyxFQUFFQyxNQUFNLEVBQUU7UUFDM0IsT0FBT0QsSUFBSUUsT0FBTyxDQUFDRCxZQUFZO0lBQ25DO0lBQ0EsT0FBT0UsU0FBU0gsR0FBRyxFQUFFQyxNQUFNLEVBQUU7UUFDekIsT0FBUUQsSUFBSUgsTUFBTSxJQUFJSSxPQUFPSixNQUFNLElBQy9CRyxJQUFJSSxXQUFXLENBQUNILFlBQVlELElBQUlILE1BQU0sR0FBR0ksT0FBT0osTUFBTTtJQUM5RDtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPUSxvQkFBb0JDLEtBQUssRUFBRTtRQUM5QixNQUFNZCxNQUFNLENBQUM7UUFDYixNQUFNZSxTQUFTRCxNQUFNRSxLQUFLLENBQUM7UUFDM0IsTUFBTUMsU0FBUyxDQUFDQyxJQUFNQyxtQkFBbUJELEVBQUVFLE9BQU8sQ0FBQyxPQUFPO1FBQzFETCxPQUFPTSxPQUFPLENBQUMsQ0FBQ0M7WUFDWixJQUFJQSxLQUFLQyxJQUFJLElBQUk7Z0JBQ2IsTUFBTSxDQUFDQyxLQUFLQyxNQUFNLEdBQUdILEtBQUtOLEtBQUssQ0FBQyxVQUFVLElBQUksb0RBQW9EO2dCQUNsRyxJQUFJUSxPQUFPQyxPQUFPO29CQUNkekIsR0FBRyxDQUFDaUIsT0FBT08sS0FBSyxHQUFHUCxPQUFPUTtnQkFDOUI7WUFDSjtRQUNKO1FBQ0EsT0FBT3pCO0lBQ1g7SUFDQTs7OztLQUlDLEdBQ0QsT0FBTzBCLGlCQUFpQkMsR0FBRyxFQUFFO1FBQ3pCLE9BQU9BLElBQUlDLEdBQUcsQ0FBQyxDQUFDQyxRQUFVQSxNQUFNTixJQUFJO0lBQ3hDO0lBQ0E7OztLQUdDLEdBQ0QsT0FBT08sNEJBQTRCSCxHQUFHLEVBQUU7UUFDcEMsT0FBT0EsSUFBSUksTUFBTSxDQUFDLENBQUNGO1lBQ2YsT0FBTyxDQUFDLENBQUNBO1FBQ2I7SUFDSjtJQUNBOzs7S0FHQyxHQUNELE9BQU9HLGdCQUFnQnhCLEdBQUcsRUFBRTtRQUN4QixJQUFJO1lBQ0EsT0FBT1AsS0FBS0MsS0FBSyxDQUFDTTtRQUN0QixFQUNBLE9BQU9GLEdBQUc7WUFDTixPQUFPO1FBQ1g7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPMkIsYUFBYUMsT0FBTyxFQUFFQyxLQUFLLEVBQUU7UUFDaEM7OztTQUdDLEdBQ0QsOERBQThEO1FBQzlELE1BQU1DLFFBQVEsSUFBSUMsT0FBT0gsUUFDcEJkLE9BQU8sQ0FBQyxPQUFPLFFBQ2ZBLE9BQU8sQ0FBQyxPQUFPLFNBQ2ZBLE9BQU8sQ0FBQyxPQUFPO1FBQ3BCLE9BQU9nQixNQUFNRSxJQUFJLENBQUNIO0lBQ3RCO0FBQ0o7QUFFdUIsQ0FDdkIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvU3RyaW5nVXRpbHMubWpzPzgxMmEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLWNvbW1vbiB2MTQuMTYuMCAyMDI0LTExLTA1ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcbmNsYXNzIFN0cmluZ1V0aWxzIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgc3RyaW5naWZpZWQgb2JqZWN0IGlzIGVtcHR5XHJcbiAgICAgKiBAcGFyYW0gc3RyT2JqXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpc0VtcHR5T2JqKHN0ck9iaikge1xyXG4gICAgICAgIGlmIChzdHJPYmopIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9iaiA9IEpTT04ucGFyc2Uoc3RyT2JqKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gpIHtcclxuICAgICAgICByZXR1cm4gc3RyLmluZGV4T2Yoc2VhcmNoKSA9PT0gMDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBlbmRzV2l0aChzdHIsIHNlYXJjaCkge1xyXG4gICAgICAgIHJldHVybiAoc3RyLmxlbmd0aCA+PSBzZWFyY2gubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIHN0ci5sYXN0SW5kZXhPZihzZWFyY2gpID09PSBzdHIubGVuZ3RoIC0gc2VhcmNoLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlcyBzdHJpbmcgaW50byBhbiBvYmplY3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBxdWVyeVN0cmluZ1RvT2JqZWN0KHF1ZXJ5KSB7XHJcbiAgICAgICAgY29uc3Qgb2JqID0ge307XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0gcXVlcnkuc3BsaXQoXCImXCIpO1xyXG4gICAgICAgIGNvbnN0IGRlY29kZSA9IChzKSA9PiBkZWNvZGVVUklDb21wb25lbnQocy5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcclxuICAgICAgICBwYXJhbXMuZm9yRWFjaCgocGFpcikgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGFpci50cmltKCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHBhaXIuc3BsaXQoLz0oLispL2csIDIpOyAvLyBTcGxpdCBvbiB0aGUgZmlyc3Qgb2NjdXJlbmNlIG9mIHRoZSAnPScgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICYmIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW2RlY29kZShrZXkpXSA9IGRlY29kZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmltcyBlbnRyaWVzIGluIGFuIGFycmF5LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhcnJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHRyaW1BcnJheUVudHJpZXMoYXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIGFyci5tYXAoKGVudHJ5KSA9PiBlbnRyeS50cmltKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGVtcHR5IHN0cmluZ3MgZnJvbSBhcnJheVxyXG4gICAgICogQHBhcmFtIGFyclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmVtb3ZlRW1wdHlTdHJpbmdzRnJvbUFycmF5KGFycikge1xyXG4gICAgICAgIHJldHVybiBhcnIuZmlsdGVyKChlbnRyeSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gISFlbnRyeTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQXR0ZW1wdHMgdG8gcGFyc2UgYSBzdHJpbmcgaW50byBKU09OXHJcbiAgICAgKiBAcGFyYW0gc3RyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBqc29uUGFyc2VIZWxwZXIoc3RyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUZXN0cyBpZiBhIGdpdmVuIHN0cmluZyBtYXRjaGVzIGEgZ2l2ZW4gcGF0dGVybiwgd2l0aCBzdXBwb3J0IGZvciB3aWxkY2FyZHMgYW5kIHF1ZXJpZXMuXHJcbiAgICAgKiBAcGFyYW0gcGF0dGVybiBXaWxkY2FyZCBwYXR0ZXJuIHRvIHN0cmluZyBtYXRjaC4gU3VwcG9ydHMgXCIqXCIgZm9yIHdpbGRjYXJkcyBhbmQgXCI/XCIgZm9yIHF1ZXJpZXNcclxuICAgICAqIEBwYXJhbSBpbnB1dCBTdHJpbmcgdG8gbWF0Y2ggYWdhaW5zdFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbWF0Y2hQYXR0ZXJuKHBhdHRlcm4sIGlucHV0KSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2lsZGNhcmQgc3VwcG9ydDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMxMTcyNDgvNDg4ODU1OVxyXG4gICAgICAgICAqIFF1ZXJpZXM6IHJlcGxhY2VzIFwiP1wiIGluIHN0cmluZyB3aXRoIGVzY2FwZWQgXCJcXD9cIiBmb3IgcmVnZXggdGVzdFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWN1cml0eS9kZXRlY3Qtbm9uLWxpdGVyYWwtcmVnZXhwXHJcbiAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm5cclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFwvZywgXCJcXFxcXFxcXFwiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwqL2csIFwiW14gXSpcIilcclxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcPy9nLCBcIlxcXFw/XCIpKTtcclxuICAgICAgICByZXR1cm4gcmVnZXgudGVzdChpbnB1dCk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgU3RyaW5nVXRpbHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0cmluZ1V0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJTdHJpbmdVdGlscyIsImlzRW1wdHlPYmoiLCJzdHJPYmoiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZSIsInN0YXJ0c1dpdGgiLCJzdHIiLCJzZWFyY2giLCJpbmRleE9mIiwiZW5kc1dpdGgiLCJsYXN0SW5kZXhPZiIsInF1ZXJ5U3RyaW5nVG9PYmplY3QiLCJxdWVyeSIsInBhcmFtcyIsInNwbGl0IiwiZGVjb2RlIiwicyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJmb3JFYWNoIiwicGFpciIsInRyaW0iLCJrZXkiLCJ2YWx1ZSIsInRyaW1BcnJheUVudHJpZXMiLCJhcnIiLCJtYXAiLCJlbnRyeSIsInJlbW92ZUVtcHR5U3RyaW5nc0Zyb21BcnJheSIsImZpbHRlciIsImpzb25QYXJzZUhlbHBlciIsIm1hdGNoUGF0dGVybiIsInBhdHRlcm4iLCJpbnB1dCIsInJlZ2V4IiwiUmVnRXhwIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   isTokenExpired: () => (/* binding */ isTokenExpired),\n/* harmony export */   nowSeconds: () => (/* binding */ nowSeconds),\n/* harmony export */   wasClockTurnedBack: () => (/* binding */ wasClockTurnedBack)\n/* harmony export */ });\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Utility functions for managing date and time operations.\r\n */ /**\r\n * return the current time in Unix time (seconds).\r\n */ function nowSeconds() {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n}\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */ function isTokenExpired(expiresOn, offset) {\n    // check for access token expiry\n    const expirationSec = Number(expiresOn) || 0;\n    const offsetCurrentTimeSec = nowSeconds() + offset;\n    // If current time + offset is greater than token expiration time, then token is expired.\n    return offsetCurrentTimeSec > expirationSec;\n}\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */ function wasClockTurnedBack(cachedAt) {\n    const cachedAtSec = Number(cachedAt);\n    return cachedAtSec > nowSeconds();\n}\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */ function delay(t, value) {\n    return new Promise((resolve)=>setTimeout(()=>resolve(value), t));\n}\n //# sourceMappingURL=TimeUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvVGltZVV0aWxzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsMkNBQTJDLEdBQzNDO0FBQ0E7OztDQUdDLEdBQ0Q7O0NBRUMsR0FDRDs7Q0FFQyxHQUNELFNBQVNBO0lBQ0wsMENBQTBDO0lBQzFDLE9BQU9DLEtBQUtDLEtBQUssQ0FBQyxJQUFJQyxPQUFPQyxPQUFPLEtBQUs7QUFDN0M7QUFDQTs7O0NBR0MsR0FDRCxTQUFTQyxlQUFlQyxTQUFTLEVBQUVDLE1BQU07SUFDckMsZ0NBQWdDO0lBQ2hDLE1BQU1DLGdCQUFnQkMsT0FBT0gsY0FBYztJQUMzQyxNQUFNSSx1QkFBdUJWLGVBQWVPO0lBQzVDLHlGQUF5RjtJQUN6RixPQUFPRyx1QkFBdUJGO0FBQ2xDO0FBQ0E7Ozs7O0NBS0MsR0FDRCxTQUFTRyxtQkFBbUJDLFFBQVE7SUFDaEMsTUFBTUMsY0FBY0osT0FBT0c7SUFDM0IsT0FBT0MsY0FBY2I7QUFDekI7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU2MsTUFBTUMsQ0FBQyxFQUFFQyxLQUFLO0lBQ25CLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxVQUFZQyxXQUFXLElBQU1ELFFBQVFGLFFBQVFEO0FBQ3JFO0FBRWlFLENBQ2pFLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3V0aWxzL1RpbWVVdGlscy5tanM/YTc3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtY29tbW9uIHYxNC4xNi4wIDIwMjQtMTEtMDUgKi9cbid1c2Ugc3RyaWN0Jztcbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGRhdGUgYW5kIHRpbWUgb3BlcmF0aW9ucy5cclxuICovXHJcbi8qKlxyXG4gKiByZXR1cm4gdGhlIGN1cnJlbnQgdGltZSBpbiBVbml4IHRpbWUgKHNlY29uZHMpLlxyXG4gKi9cclxuZnVuY3Rpb24gbm93U2Vjb25kcygpIHtcclxuICAgIC8vIERhdGUuZ2V0VGltZSgpIHJldHVybnMgaW4gbWlsbGlzZWNvbmRzLlxyXG4gICAgcmV0dXJuIE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwLjApO1xyXG59XHJcbi8qKlxyXG4gKiBjaGVjayBpZiBhIHRva2VuIGlzIGV4cGlyZWQgYmFzZWQgb24gZ2l2ZW4gVVRDIHRpbWUgaW4gc2Vjb25kcy5cclxuICogQHBhcmFtIGV4cGlyZXNPblxyXG4gKi9cclxuZnVuY3Rpb24gaXNUb2tlbkV4cGlyZWQoZXhwaXJlc09uLCBvZmZzZXQpIHtcclxuICAgIC8vIGNoZWNrIGZvciBhY2Nlc3MgdG9rZW4gZXhwaXJ5XHJcbiAgICBjb25zdCBleHBpcmF0aW9uU2VjID0gTnVtYmVyKGV4cGlyZXNPbikgfHwgMDtcclxuICAgIGNvbnN0IG9mZnNldEN1cnJlbnRUaW1lU2VjID0gbm93U2Vjb25kcygpICsgb2Zmc2V0O1xyXG4gICAgLy8gSWYgY3VycmVudCB0aW1lICsgb2Zmc2V0IGlzIGdyZWF0ZXIgdGhhbiB0b2tlbiBleHBpcmF0aW9uIHRpbWUsIHRoZW4gdG9rZW4gaXMgZXhwaXJlZC5cclxuICAgIHJldHVybiBvZmZzZXRDdXJyZW50VGltZVNlYyA+IGV4cGlyYXRpb25TZWM7XHJcbn1cclxuLyoqXHJcbiAqIElmIHRoZSBjdXJyZW50IHRpbWUgaXMgZWFybGllciB0aGFuIHRoZSB0aW1lIHRoYXQgYSB0b2tlbiB3YXMgY2FjaGVkIGF0LCB3ZSBtdXN0IGRpc2NhcmQgdGhlIHRva2VuXHJcbiAqIGkuZS4gVGhlIHN5c3RlbSBjbG9jayB3YXMgdHVybmVkIGJhY2sgYWZ0ZXIgYWNxdWlyaW5nIHRoZSBjYWNoZWQgdG9rZW5cclxuICogQHBhcmFtIGNhY2hlZEF0XHJcbiAqIEBwYXJhbSBvZmZzZXRcclxuICovXHJcbmZ1bmN0aW9uIHdhc0Nsb2NrVHVybmVkQmFjayhjYWNoZWRBdCkge1xyXG4gICAgY29uc3QgY2FjaGVkQXRTZWMgPSBOdW1iZXIoY2FjaGVkQXQpO1xyXG4gICAgcmV0dXJuIGNhY2hlZEF0U2VjID4gbm93U2Vjb25kcygpO1xyXG59XHJcbi8qKlxyXG4gKiBXYWl0cyBmb3IgdCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzXHJcbiAqIEBwYXJhbSB0IG51bWJlclxyXG4gKiBAcGFyYW0gdmFsdWUgVFxyXG4gKi9cclxuZnVuY3Rpb24gZGVsYXkodCwgdmFsdWUpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHZhbHVlKSwgdCkpO1xyXG59XG5cbmV4cG9ydCB7IGRlbGF5LCBpc1Rva2VuRXhwaXJlZCwgbm93U2Vjb25kcywgd2FzQ2xvY2tUdXJuZWRCYWNrIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaW1lVXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm5vd1NlY29uZHMiLCJNYXRoIiwicm91bmQiLCJEYXRlIiwiZ2V0VGltZSIsImlzVG9rZW5FeHBpcmVkIiwiZXhwaXJlc09uIiwib2Zmc2V0IiwiZXhwaXJhdGlvblNlYyIsIk51bWJlciIsIm9mZnNldEN1cnJlbnRUaW1lU2VjIiwid2FzQ2xvY2tUdXJuZWRCYWNrIiwiY2FjaGVkQXQiLCJjYWNoZWRBdFNlYyIsImRlbGF5IiwidCIsInZhbHVlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDeserializedResponse: () => (/* binding */ getDeserializedResponse),\n/* harmony export */   stripLeadingHashOrQuery: () => (/* binding */ stripLeadingHashOrQuery)\n/* harmony export */ });\n/* harmony import */ var _error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ClientAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/ClientAuthErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/*! @azure/msal-common v14.16.0 2024-11-05 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */ function stripLeadingHashOrQuery(responseString) {\n    if (responseString.startsWith(\"#/\")) {\n        return responseString.substring(2);\n    } else if (responseString.startsWith(\"#\") || responseString.startsWith(\"?\")) {\n        return responseString.substring(1);\n    }\n    return responseString;\n}\n/**\r\n * Returns URL hash as server auth code response object.\r\n */ function getDeserializedResponse(responseString) {\n    // Check if given hash is empty\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\n        return null;\n    }\n    try {\n        // Strip the # or ? symbol if present\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\n        // If # symbol was not present, above will return empty string, so give original hash value\n        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\n        // Check for known response properties\n        if (deserializedHash.code || deserializedHash.error || deserializedHash.error_description || deserializedHash.state) {\n            return deserializedHash;\n        }\n    } catch (e) {\n        throw (0,_error_ClientAuthError_mjs__WEBPACK_IMPORTED_MODULE_0__.createClientAuthError)(_error_ClientAuthErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_1__.hashNotDeserialized);\n    }\n    return null;\n}\n //# sourceMappingURL=UrlUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtY29tbW9uL2Rpc3QvdXRpbHMvVXJsVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSwyQ0FBMkMsR0FDM0M7QUFDcUU7QUFDRztBQUV4RTs7O0NBR0MsR0FDRDs7O0NBR0MsR0FDRCxTQUFTRSx3QkFBd0JDLGNBQWM7SUFDM0MsSUFBSUEsZUFBZUMsVUFBVSxDQUFDLE9BQU87UUFDakMsT0FBT0QsZUFBZUUsU0FBUyxDQUFDO0lBQ3BDLE9BQ0ssSUFBSUYsZUFBZUMsVUFBVSxDQUFDLFFBQy9CRCxlQUFlQyxVQUFVLENBQUMsTUFBTTtRQUNoQyxPQUFPRCxlQUFlRSxTQUFTLENBQUM7SUFDcEM7SUFDQSxPQUFPRjtBQUNYO0FBQ0E7O0NBRUMsR0FDRCxTQUFTRyx3QkFBd0JILGNBQWM7SUFDM0MsK0JBQStCO0lBQy9CLElBQUksQ0FBQ0Esa0JBQWtCQSxlQUFlSSxPQUFPLENBQUMsT0FBTyxHQUFHO1FBQ3BELE9BQU87SUFDWDtJQUNBLElBQUk7UUFDQSxxQ0FBcUM7UUFDckMsTUFBTUMscUJBQXFCTix3QkFBd0JDO1FBQ25ELDJGQUEyRjtRQUMzRixNQUFNTSxtQkFBbUJDLE9BQU9DLFdBQVcsQ0FBQyxJQUFJQyxnQkFBZ0JKO1FBQ2hFLHNDQUFzQztRQUN0QyxJQUFJQyxpQkFBaUJJLElBQUksSUFDckJKLGlCQUFpQkssS0FBSyxJQUN0QkwsaUJBQWlCTSxpQkFBaUIsSUFDbENOLGlCQUFpQk8sS0FBSyxFQUFFO1lBQ3hCLE9BQU9QO1FBQ1g7SUFDSixFQUNBLE9BQU9RLEdBQUc7UUFDTixNQUFNakIsaUZBQXFCQSxDQUFDQyxnRkFBbUJBO0lBQ25EO0lBQ0EsT0FBTztBQUNYO0FBRTRELENBQzVELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLWNvbW1vbi9kaXN0L3V0aWxzL1VybFV0aWxzLm1qcz84YjMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1jb21tb24gdjE0LjE2LjAgMjAyNC0xMS0wNSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50QXV0aEVycm9yIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yLm1qcyc7XG5pbXBvcnQgeyBoYXNoTm90RGVzZXJpYWxpemVkIH0gZnJvbSAnLi4vZXJyb3IvQ2xpZW50QXV0aEVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQYXJzZXMgaGFzaCBzdHJpbmcgZnJvbSBnaXZlbiBzdHJpbmcuIFJldHVybnMgZW1wdHkgc3RyaW5nIGlmIG5vIGhhc2ggc3ltYm9sIGlzIGZvdW5kLlxyXG4gKiBAcGFyYW0gaGFzaFN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nSGFzaE9yUXVlcnkocmVzcG9uc2VTdHJpbmcpIHtcclxuICAgIGlmIChyZXNwb25zZVN0cmluZy5zdGFydHNXaXRoKFwiIy9cIikpIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2VTdHJpbmcuc3Vic3RyaW5nKDIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocmVzcG9uc2VTdHJpbmcuc3RhcnRzV2l0aChcIiNcIikgfHxcclxuICAgICAgICByZXNwb25zZVN0cmluZy5zdGFydHNXaXRoKFwiP1wiKSkge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZVN0cmluZy5zdWJzdHJpbmcoMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzcG9uc2VTdHJpbmc7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgVVJMIGhhc2ggYXMgc2VydmVyIGF1dGggY29kZSByZXNwb25zZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXREZXNlcmlhbGl6ZWRSZXNwb25zZShyZXNwb25zZVN0cmluZykge1xyXG4gICAgLy8gQ2hlY2sgaWYgZ2l2ZW4gaGFzaCBpcyBlbXB0eVxyXG4gICAgaWYgKCFyZXNwb25zZVN0cmluZyB8fCByZXNwb25zZVN0cmluZy5pbmRleE9mKFwiPVwiKSA8IDApIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgLy8gU3RyaXAgdGhlICMgb3IgPyBzeW1ib2wgaWYgcHJlc2VudFxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRSZXNwb25zZSA9IHN0cmlwTGVhZGluZ0hhc2hPclF1ZXJ5KHJlc3BvbnNlU3RyaW5nKTtcclxuICAgICAgICAvLyBJZiAjIHN5bWJvbCB3YXMgbm90IHByZXNlbnQsIGFib3ZlIHdpbGwgcmV0dXJuIGVtcHR5IHN0cmluZywgc28gZ2l2ZSBvcmlnaW5hbCBoYXNoIHZhbHVlXHJcbiAgICAgICAgY29uc3QgZGVzZXJpYWxpemVkSGFzaCA9IE9iamVjdC5mcm9tRW50cmllcyhuZXcgVVJMU2VhcmNoUGFyYW1zKG5vcm1hbGl6ZWRSZXNwb25zZSkpO1xyXG4gICAgICAgIC8vIENoZWNrIGZvciBrbm93biByZXNwb25zZSBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaWYgKGRlc2VyaWFsaXplZEhhc2guY29kZSB8fFxyXG4gICAgICAgICAgICBkZXNlcmlhbGl6ZWRIYXNoLmVycm9yIHx8XHJcbiAgICAgICAgICAgIGRlc2VyaWFsaXplZEhhc2guZXJyb3JfZGVzY3JpcHRpb24gfHxcclxuICAgICAgICAgICAgZGVzZXJpYWxpemVkSGFzaC5zdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzZXJpYWxpemVkSGFzaDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRocm93IGNyZWF0ZUNsaWVudEF1dGhFcnJvcihoYXNoTm90RGVzZXJpYWxpemVkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbmV4cG9ydCB7IGdldERlc2VyaWFsaXplZFJlc3BvbnNlLCBzdHJpcExlYWRpbmdIYXNoT3JRdWVyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXJsVXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudEF1dGhFcnJvciIsImhhc2hOb3REZXNlcmlhbGl6ZWQiLCJzdHJpcExlYWRpbmdIYXNoT3JRdWVyeSIsInJlc3BvbnNlU3RyaW5nIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImdldERlc2VyaWFsaXplZFJlc3BvbnNlIiwiaW5kZXhPZiIsIm5vcm1hbGl6ZWRSZXNwb25zZSIsImRlc2VyaWFsaXplZEhhc2giLCJPYmplY3QiLCJmcm9tRW50cmllcyIsIlVSTFNlYXJjaFBhcmFtcyIsImNvZGUiLCJlcnJvciIsImVycm9yX2Rlc2NyaXB0aW9uIiwic3RhdGUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/cache/NodeStorage.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/cache/NodeStorage.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeStorage: () => (/* binding */ NodeStorage)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/utils/CacheHelpers.mjs\");\n/* harmony import */ var _serializer_Deserializer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer/Deserializer.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Deserializer.mjs\");\n/* harmony import */ var _serializer_Serializer_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serializer/Serializer.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Serializer.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements Storage for node, reading cache from user specified storage location or an  extension library\r\n * @public\r\n */ class NodeStorage extends _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.CacheManager {\n    constructor(logger, clientId, cryptoImpl, staticAuthorityOptions){\n        super(clientId, cryptoImpl, logger, staticAuthorityOptions);\n        this.cache = {};\n        this.changeEmitters = [];\n        this.logger = logger;\n    }\n    /**\r\n     * Queue up callbacks\r\n     * @param func - a callback function for cache change indication\r\n     */ registerChangeEmitter(func) {\n        this.changeEmitters.push(func);\n    }\n    /**\r\n     * Invoke the callback when cache changes\r\n     */ emitChange() {\n        this.changeEmitters.forEach((func)=>func.call(null));\n    }\n    /**\r\n     * Converts cacheKVStore to InMemoryCache\r\n     * @param cache - key value store\r\n     */ cacheToInMemoryCache(cache) {\n        const inMemoryCache = {\n            accounts: {},\n            idTokens: {},\n            accessTokens: {},\n            refreshTokens: {},\n            appMetadata: {}\n        };\n        for(const key in cache){\n            const value = cache[key];\n            if (typeof value !== \"object\") {\n                continue;\n            }\n            if (value instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.AccountEntity) {\n                inMemoryCache.accounts[key] = value;\n            } else if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isIdTokenEntity(value)) {\n                inMemoryCache.idTokens[key] = value;\n            } else if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isAccessTokenEntity(value)) {\n                inMemoryCache.accessTokens[key] = value;\n            } else if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isRefreshTokenEntity(value)) {\n                inMemoryCache.refreshTokens[key] = value;\n            } else if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isAppMetadataEntity(key, value)) {\n                inMemoryCache.appMetadata[key] = value;\n            } else {\n                continue;\n            }\n        }\n        return inMemoryCache;\n    }\n    /**\r\n     * converts inMemoryCache to CacheKVStore\r\n     * @param inMemoryCache - kvstore map for inmemory\r\n     */ inMemoryCacheToCache(inMemoryCache) {\n        // convert in memory cache to a flat Key-Value map\n        let cache = this.getCache();\n        cache = {\n            ...cache,\n            ...inMemoryCache.accounts,\n            ...inMemoryCache.idTokens,\n            ...inMemoryCache.accessTokens,\n            ...inMemoryCache.refreshTokens,\n            ...inMemoryCache.appMetadata\n        };\n        // convert in memory cache to a flat Key-Value map\n        return cache;\n    }\n    /**\r\n     * gets the current in memory cache for the client\r\n     */ getInMemoryCache() {\n        this.logger.trace(\"Getting in-memory cache\");\n        // convert the cache key value store to inMemoryCache\n        const inMemoryCache = this.cacheToInMemoryCache(this.getCache());\n        return inMemoryCache;\n    }\n    /**\r\n     * sets the current in memory cache for the client\r\n     * @param inMemoryCache - key value map in memory\r\n     */ setInMemoryCache(inMemoryCache) {\n        this.logger.trace(\"Setting in-memory cache\");\n        // convert and append the inMemoryCache to cacheKVStore\n        const cache = this.inMemoryCacheToCache(inMemoryCache);\n        this.setCache(cache);\n        this.emitChange();\n    }\n    /**\r\n     * get the current cache key-value store\r\n     */ getCache() {\n        this.logger.trace(\"Getting cache key-value store\");\n        return this.cache;\n    }\n    /**\r\n     * sets the current cache (key value store)\r\n     * @param cacheMap - key value map\r\n     */ setCache(cache) {\n        this.logger.trace(\"Setting cache key value store\");\n        this.cache = cache;\n        // mark change in cache\n        this.emitChange();\n    }\n    /**\r\n     * Gets cache item with given key.\r\n     * @param key - lookup key for the cache entry\r\n     */ getItem(key) {\n        this.logger.tracePii(`Item key: ${key}`);\n        // read cache\n        const cache = this.getCache();\n        return cache[key];\n    }\n    /**\r\n     * Gets cache item with given key-value\r\n     * @param key - lookup key for the cache entry\r\n     * @param value - value of the cache entry\r\n     */ setItem(key, value) {\n        this.logger.tracePii(`Item key: ${key}`);\n        // read cache\n        const cache = this.getCache();\n        cache[key] = value;\n        // write to cache\n        this.setCache(cache);\n    }\n    getAccountKeys() {\n        const inMemoryCache = this.getInMemoryCache();\n        const accountKeys = Object.keys(inMemoryCache.accounts);\n        return accountKeys;\n    }\n    getTokenKeys() {\n        const inMemoryCache = this.getInMemoryCache();\n        const tokenKeys = {\n            idToken: Object.keys(inMemoryCache.idTokens),\n            accessToken: Object.keys(inMemoryCache.accessTokens),\n            refreshToken: Object.keys(inMemoryCache.refreshTokens)\n        };\n        return tokenKeys;\n    }\n    /**\r\n     * fetch the account entity\r\n     * @param accountKey - lookup key to fetch cache type AccountEntity\r\n     */ getAccount(accountKey) {\n        const accountEntity = this.getCachedAccountEntity(accountKey);\n        if (accountEntity && _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.isAccountEntity(accountEntity)) {\n            return this.updateOutdatedCachedAccount(accountKey, accountEntity);\n        }\n        return null;\n    }\n    /**\r\n     * Reads account from cache, builds it into an account entity and returns it.\r\n     * @param accountKey - lookup key to fetch cache type AccountEntity\r\n     * @returns\r\n     */ getCachedAccountEntity(accountKey) {\n        const cachedAccount = this.getItem(accountKey);\n        return cachedAccount ? Object.assign(new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.AccountEntity(), this.getItem(accountKey)) : null;\n    }\n    /**\r\n     * set account entity\r\n     * @param account - cache value to be set of type AccountEntity\r\n     */ setAccount(account) {\n        const accountKey = account.generateAccountKey();\n        this.setItem(accountKey, account);\n    }\n    /**\r\n     * fetch the idToken credential\r\n     * @param idTokenKey - lookup key to fetch cache type IdTokenEntity\r\n     */ getIdTokenCredential(idTokenKey) {\n        const idToken = this.getItem(idTokenKey);\n        if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isIdTokenEntity(idToken)) {\n            return idToken;\n        }\n        return null;\n    }\n    /**\r\n     * set idToken credential\r\n     * @param idToken - cache value to be set of type IdTokenEntity\r\n     */ setIdTokenCredential(idToken) {\n        const idTokenKey = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.generateCredentialKey(idToken);\n        this.setItem(idTokenKey, idToken);\n    }\n    /**\r\n     * fetch the accessToken credential\r\n     * @param accessTokenKey - lookup key to fetch cache type AccessTokenEntity\r\n     */ getAccessTokenCredential(accessTokenKey) {\n        const accessToken = this.getItem(accessTokenKey);\n        if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isAccessTokenEntity(accessToken)) {\n            return accessToken;\n        }\n        return null;\n    }\n    /**\r\n     * set accessToken credential\r\n     * @param accessToken -  cache value to be set of type AccessTokenEntity\r\n     */ setAccessTokenCredential(accessToken) {\n        const accessTokenKey = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.generateCredentialKey(accessToken);\n        this.setItem(accessTokenKey, accessToken);\n    }\n    /**\r\n     * fetch the refreshToken credential\r\n     * @param refreshTokenKey - lookup key to fetch cache type RefreshTokenEntity\r\n     */ getRefreshTokenCredential(refreshTokenKey) {\n        const refreshToken = this.getItem(refreshTokenKey);\n        if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isRefreshTokenEntity(refreshToken)) {\n            return refreshToken;\n        }\n        return null;\n    }\n    /**\r\n     * set refreshToken credential\r\n     * @param refreshToken - cache value to be set of type RefreshTokenEntity\r\n     */ setRefreshTokenCredential(refreshToken) {\n        const refreshTokenKey = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.generateCredentialKey(refreshToken);\n        this.setItem(refreshTokenKey, refreshToken);\n    }\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey - lookup key to fetch cache type AppMetadataEntity\r\n     */ getAppMetadata(appMetadataKey) {\n        const appMetadata = this.getItem(appMetadataKey);\n        if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isAppMetadataEntity(appMetadataKey, appMetadata)) {\n            return appMetadata;\n        }\n        return null;\n    }\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata - cache value to be set of type AppMetadataEntity\r\n     */ setAppMetadata(appMetadata) {\n        const appMetadataKey = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.generateAppMetadataKey(appMetadata);\n        this.setItem(appMetadataKey, appMetadata);\n    }\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetrykey - lookup key to fetch cache type ServerTelemetryEntity\r\n     */ getServerTelemetry(serverTelemetrykey) {\n        const serverTelemetryEntity = this.getItem(serverTelemetrykey);\n        if (serverTelemetryEntity && _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isServerTelemetryEntity(serverTelemetrykey, serverTelemetryEntity)) {\n            return serverTelemetryEntity;\n        }\n        return null;\n    }\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey - lookup key to fetch cache type ServerTelemetryEntity\r\n     * @param serverTelemetry - cache value to be set of type ServerTelemetryEntity\r\n     */ setServerTelemetry(serverTelemetryKey, serverTelemetry) {\n        this.setItem(serverTelemetryKey, serverTelemetry);\n    }\n    /**\r\n     * fetch authority metadata entity from the platform cache\r\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\r\n     */ getAuthorityMetadata(key) {\n        const authorityMetadataEntity = this.getItem(key);\n        if (authorityMetadataEntity && _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isAuthorityMetadataEntity(key, authorityMetadataEntity)) {\n            return authorityMetadataEntity;\n        }\n        return null;\n    }\n    /**\r\n     * Get all authority metadata keys\r\n     */ getAuthorityMetadataKeys() {\n        return this.getKeys().filter((key)=>{\n            return this.isAuthorityMetadata(key);\n        });\n    }\n    /**\r\n     * set authority metadata entity to the platform cache\r\n     * @param key - lookup key to fetch cache type AuthorityMetadataEntity\r\n     * @param metadata - cache value to be set of type AuthorityMetadataEntity\r\n     */ setAuthorityMetadata(key, metadata) {\n        this.setItem(key, metadata);\n    }\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\r\n     */ getThrottlingCache(throttlingCacheKey) {\n        const throttlingCache = this.getItem(throttlingCacheKey);\n        if (throttlingCache && _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isThrottlingEntity(throttlingCacheKey, throttlingCache)) {\n            return throttlingCache;\n        }\n        return null;\n    }\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey - lookup key to fetch cache type ThrottlingEntity\r\n     * @param throttlingCache - cache value to be set of type ThrottlingEntity\r\n     */ setThrottlingCache(throttlingCacheKey, throttlingCache) {\n        this.setItem(throttlingCacheKey, throttlingCache);\n    }\n    /**\r\n     * Removes the cache item from memory with the given key.\r\n     * @param key - lookup key to remove a cache entity\r\n     * @param inMemory - key value map of the cache\r\n     */ removeItem(key) {\n        this.logger.tracePii(`Item key: ${key}`);\n        // read inMemoryCache\n        let result = false;\n        const cache = this.getCache();\n        if (!!cache[key]) {\n            delete cache[key];\n            result = true;\n        }\n        // write to the cache after removal\n        if (result) {\n            this.setCache(cache);\n            this.emitChange();\n        }\n        return result;\n    }\n    /**\r\n     * Remove account entity from the platform cache if it's outdated\r\n     * @param accountKey - lookup key to fetch cache type AccountEntity\r\n     */ removeOutdatedAccount(accountKey) {\n        this.removeItem(accountKey);\n    }\n    /**\r\n     * Checks whether key is in cache.\r\n     * @param key - look up key for a cache entity\r\n     */ containsKey(key) {\n        return this.getKeys().includes(key);\n    }\n    /**\r\n     * Gets all keys in window.\r\n     */ getKeys() {\n        this.logger.trace(\"Retrieving all cache keys\");\n        // read cache\n        const cache = this.getCache();\n        return [\n            ...Object.keys(cache)\n        ];\n    }\n    /**\r\n     * Clears all cache entries created by MSAL (except tokens).\r\n     */ clear() {\n        this.logger.trace(\"Clearing cache entries created by MSAL\");\n        // read inMemoryCache\n        const cacheKeys = this.getKeys();\n        // delete each element\n        cacheKeys.forEach((key)=>{\n            this.removeItem(key);\n        });\n        this.emitChange();\n    }\n    /**\r\n     * Initialize in memory cache from an exisiting cache vault\r\n     * @param cache - blob formatted cache (JSON)\r\n     */ static generateInMemoryCache(cache) {\n        return _serializer_Deserializer_mjs__WEBPACK_IMPORTED_MODULE_0__.Deserializer.deserializeAllCache(_serializer_Deserializer_mjs__WEBPACK_IMPORTED_MODULE_0__.Deserializer.deserializeJSONBlob(cache));\n    }\n    /**\r\n     * retrieves the final JSON\r\n     * @param inMemoryCache - itemised cache read from the JSON\r\n     */ static generateJsonCache(inMemoryCache) {\n        return _serializer_Serializer_mjs__WEBPACK_IMPORTED_MODULE_1__.Serializer.serializeAllCache(inMemoryCache);\n    }\n    /**\r\n     * Updates a credential's cache key if the current cache key is outdated\r\n     */ updateCredentialCacheKey(currentCacheKey, credential) {\n        const updatedCacheKey = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.generateCredentialKey(credential);\n        if (currentCacheKey !== updatedCacheKey) {\n            const cacheItem = this.getItem(currentCacheKey);\n            if (cacheItem) {\n                this.removeItem(currentCacheKey);\n                this.setItem(updatedCacheKey, cacheItem);\n                this.logger.verbose(`Updated an outdated ${credential.credentialType} cache key`);\n                return updatedCacheKey;\n            } else {\n                this.logger.error(`Attempted to update an outdated ${credential.credentialType} cache key but no item matching the outdated key was found in storage`);\n            }\n        }\n        return currentCacheKey;\n    }\n}\n //# sourceMappingURL=NodeStorage.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/cache/NodeStorage.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/cache/TokenCache.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/cache/TokenCache.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenCache: () => (/* binding */ TokenCache)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _serializer_Deserializer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer/Deserializer.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Deserializer.mjs\");\n/* harmony import */ var _serializer_Serializer_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serializer/Serializer.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Serializer.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const defaultSerializedCache = {\n    Account: {},\n    IdToken: {},\n    AccessToken: {},\n    RefreshToken: {},\n    AppMetadata: {}\n};\n/**\r\n * In-memory token cache manager\r\n * @public\r\n */ class TokenCache {\n    constructor(storage, logger, cachePlugin){\n        this.cacheHasChanged = false;\n        this.storage = storage;\n        this.storage.registerChangeEmitter(this.handleChangeEvent.bind(this));\n        if (cachePlugin) {\n            this.persistence = cachePlugin;\n        }\n        this.logger = logger;\n    }\n    /**\r\n     * Set to true if cache state has changed since last time serialize or writeToPersistence was called\r\n     */ hasChanged() {\n        return this.cacheHasChanged;\n    }\n    /**\r\n     * Serializes in memory cache to JSON\r\n     */ serialize() {\n        this.logger.trace(\"Serializing in-memory cache\");\n        let finalState = _serializer_Serializer_mjs__WEBPACK_IMPORTED_MODULE_1__.Serializer.serializeAllCache(this.storage.getInMemoryCache());\n        // if cacheSnapshot not null or empty, merge\n        if (this.cacheSnapshot) {\n            this.logger.trace(\"Reading cache snapshot from disk\");\n            finalState = this.mergeState(JSON.parse(this.cacheSnapshot), finalState);\n        } else {\n            this.logger.trace(\"No cache snapshot to merge\");\n        }\n        this.cacheHasChanged = false;\n        return JSON.stringify(finalState);\n    }\n    /**\r\n     * Deserializes JSON to in-memory cache. JSON should be in MSAL cache schema format\r\n     * @param cache - blob formatted cache\r\n     */ deserialize(cache) {\n        this.logger.trace(\"Deserializing JSON to in-memory cache\");\n        this.cacheSnapshot = cache;\n        if (this.cacheSnapshot) {\n            this.logger.trace(\"Reading cache snapshot from disk\");\n            const deserializedCache = _serializer_Deserializer_mjs__WEBPACK_IMPORTED_MODULE_0__.Deserializer.deserializeAllCache(this.overlayDefaults(JSON.parse(this.cacheSnapshot)));\n            this.storage.setInMemoryCache(deserializedCache);\n        } else {\n            this.logger.trace(\"No cache snapshot to deserialize\");\n        }\n    }\n    /**\r\n     * Fetches the cache key-value map\r\n     */ getKVStore() {\n        return this.storage.getCache();\n    }\n    /**\r\n     * API that retrieves all accounts currently in cache to the user\r\n     */ async getAllAccounts() {\n        this.logger.trace(\"getAllAccounts called\");\n        let cacheContext;\n        try {\n            if (this.persistence) {\n                cacheContext = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.TokenCacheContext(this, false);\n                await this.persistence.beforeCacheAccess(cacheContext);\n            }\n            return this.storage.getAllAccounts();\n        } finally{\n            if (this.persistence && cacheContext) {\n                await this.persistence.afterCacheAccess(cacheContext);\n            }\n        }\n    }\n    /**\r\n     * Returns the signed in account matching homeAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param homeAccountId - unique identifier for an account (uid.utid)\r\n     */ async getAccountByHomeId(homeAccountId) {\n        const allAccounts = await this.getAllAccounts();\n        if (homeAccountId && allAccounts && allAccounts.length) {\n            return allAccounts.filter((accountObj)=>accountObj.homeAccountId === homeAccountId)[0] || null;\n        } else {\n            return null;\n        }\n    }\n    /**\r\n     * Returns the signed in account matching localAccountId.\r\n     * (the account object is created at the time of successful login)\r\n     * or null when no matching account is found\r\n     * @param localAccountId - unique identifier of an account (sub/obj when homeAccountId cannot be populated)\r\n     */ async getAccountByLocalId(localAccountId) {\n        const allAccounts = await this.getAllAccounts();\n        if (localAccountId && allAccounts && allAccounts.length) {\n            return allAccounts.filter((accountObj)=>accountObj.localAccountId === localAccountId)[0] || null;\n        } else {\n            return null;\n        }\n    }\n    /**\r\n     * API to remove a specific account and the relevant data from cache\r\n     * @param account - AccountInfo passed by the user\r\n     */ async removeAccount(account) {\n        this.logger.trace(\"removeAccount called\");\n        let cacheContext;\n        try {\n            if (this.persistence) {\n                cacheContext = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.TokenCacheContext(this, true);\n                await this.persistence.beforeCacheAccess(cacheContext);\n            }\n            await this.storage.removeAccount(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.AccountEntity.generateAccountCacheKey(account));\n        } finally{\n            if (this.persistence && cacheContext) {\n                await this.persistence.afterCacheAccess(cacheContext);\n            }\n        }\n    }\n    /**\r\n     * Called when the cache has changed state.\r\n     */ handleChangeEvent() {\n        this.cacheHasChanged = true;\n    }\n    /**\r\n     * Merge in memory cache with the cache snapshot.\r\n     * @param oldState - cache before changes\r\n     * @param currentState - current cache state in the library\r\n     */ mergeState(oldState, currentState) {\n        this.logger.trace(\"Merging in-memory cache with cache snapshot\");\n        const stateAfterRemoval = this.mergeRemovals(oldState, currentState);\n        return this.mergeUpdates(stateAfterRemoval, currentState);\n    }\n    /**\r\n     * Deep update of oldState based on newState values\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */ mergeUpdates(oldState, newState) {\n        Object.keys(newState).forEach((newKey)=>{\n            const newValue = newState[newKey];\n            // if oldState does not contain value but newValue does, add it\n            if (!oldState.hasOwnProperty(newKey)) {\n                if (newValue !== null) {\n                    oldState[newKey] = newValue;\n                }\n            } else {\n                // both oldState and newState contain the key, do deep update\n                const newValueNotNull = newValue !== null;\n                const newValueIsObject = typeof newValue === \"object\";\n                const newValueIsNotArray = !Array.isArray(newValue);\n                const oldStateNotUndefinedOrNull = typeof oldState[newKey] !== \"undefined\" && oldState[newKey] !== null;\n                if (newValueNotNull && newValueIsObject && newValueIsNotArray && oldStateNotUndefinedOrNull) {\n                    this.mergeUpdates(oldState[newKey], newValue);\n                } else {\n                    oldState[newKey] = newValue;\n                }\n            }\n        });\n        return oldState;\n    }\n    /**\r\n     * Removes entities in oldState that the were removed from newState. If there are any unknown values in root of\r\n     * oldState that are not recognized, they are left untouched.\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */ mergeRemovals(oldState, newState) {\n        this.logger.trace(\"Remove updated entries in cache\");\n        const accounts = oldState.Account ? this.mergeRemovalsDict(oldState.Account, newState.Account) : oldState.Account;\n        const accessTokens = oldState.AccessToken ? this.mergeRemovalsDict(oldState.AccessToken, newState.AccessToken) : oldState.AccessToken;\n        const refreshTokens = oldState.RefreshToken ? this.mergeRemovalsDict(oldState.RefreshToken, newState.RefreshToken) : oldState.RefreshToken;\n        const idTokens = oldState.IdToken ? this.mergeRemovalsDict(oldState.IdToken, newState.IdToken) : oldState.IdToken;\n        const appMetadata = oldState.AppMetadata ? this.mergeRemovalsDict(oldState.AppMetadata, newState.AppMetadata) : oldState.AppMetadata;\n        return {\n            ...oldState,\n            Account: accounts,\n            AccessToken: accessTokens,\n            RefreshToken: refreshTokens,\n            IdToken: idTokens,\n            AppMetadata: appMetadata\n        };\n    }\n    /**\r\n     * Helper to merge new cache with the old one\r\n     * @param oldState - cache before changes\r\n     * @param newState - updated cache\r\n     */ mergeRemovalsDict(oldState, newState) {\n        const finalState = {\n            ...oldState\n        };\n        Object.keys(oldState).forEach((oldKey)=>{\n            if (!newState || !newState.hasOwnProperty(oldKey)) {\n                delete finalState[oldKey];\n            }\n        });\n        return finalState;\n    }\n    /**\r\n     * Helper to overlay as a part of cache merge\r\n     * @param passedInCache - cache read from the blob\r\n     */ overlayDefaults(passedInCache) {\n        this.logger.trace(\"Overlaying input cache with the default cache\");\n        return {\n            Account: {\n                ...defaultSerializedCache.Account,\n                ...passedInCache.Account\n            },\n            IdToken: {\n                ...defaultSerializedCache.IdToken,\n                ...passedInCache.IdToken\n            },\n            AccessToken: {\n                ...defaultSerializedCache.AccessToken,\n                ...passedInCache.AccessToken\n            },\n            RefreshToken: {\n                ...defaultSerializedCache.RefreshToken,\n                ...passedInCache.RefreshToken\n            },\n            AppMetadata: {\n                ...defaultSerializedCache.AppMetadata,\n                ...passedInCache.AppMetadata\n            }\n        };\n    }\n}\n //# sourceMappingURL=TokenCache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/cache/TokenCache.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/cache/distributed/DistributedCachePlugin.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/cache/distributed/DistributedCachePlugin.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DistributedCachePlugin: () => (/* binding */ DistributedCachePlugin)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Cache plugin that serializes data to the cache and deserializes data from the cache\r\n * @public\r\n */ class DistributedCachePlugin {\n    constructor(client, partitionManager){\n        this.client = client;\n        this.partitionManager = partitionManager;\n    }\n    /**\r\n     * Deserializes the cache before accessing it\r\n     * @param cacheContext - TokenCacheContext\r\n     */ async beforeCacheAccess(cacheContext) {\n        const partitionKey = await this.partitionManager.getKey();\n        const cacheData = await this.client.get(partitionKey);\n        cacheContext.tokenCache.deserialize(cacheData);\n    }\n    /**\r\n     * Serializes the cache after accessing it\r\n     * @param cacheContext - TokenCacheContext\r\n     */ async afterCacheAccess(cacheContext) {\n        if (cacheContext.cacheHasChanged) {\n            const kvStore = cacheContext.tokenCache.getKVStore();\n            const accountEntities = Object.values(kvStore).filter((value)=>_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.AccountEntity.isAccountEntity(value));\n            let partitionKey;\n            if (accountEntities.length > 0) {\n                const accountEntity = accountEntities[0];\n                partitionKey = await this.partitionManager.extractKey(accountEntity);\n            } else {\n                partitionKey = await this.partitionManager.getKey();\n            }\n            await this.client.set(partitionKey, cacheContext.tokenCache.serialize());\n        }\n    }\n}\n //# sourceMappingURL=DistributedCachePlugin.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NhY2hlL2Rpc3RyaWJ1dGVkL0Rpc3RyaWJ1dGVkQ2FjaGVQbHVnaW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0NBQXdDLEdBQ3hDO0FBQ3dEO0FBRXhEOzs7Q0FHQyxHQUNEOzs7Q0FHQyxHQUNELE1BQU1DO0lBQ0ZDLFlBQVlDLE1BQU0sRUFBRUMsZ0JBQWdCLENBQUU7UUFDbEMsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0E7SUFDNUI7SUFDQTs7O0tBR0MsR0FDRCxNQUFNQyxrQkFBa0JDLFlBQVksRUFBRTtRQUNsQyxNQUFNQyxlQUFlLE1BQU0sSUFBSSxDQUFDSCxnQkFBZ0IsQ0FBQ0ksTUFBTTtRQUN2RCxNQUFNQyxZQUFZLE1BQU0sSUFBSSxDQUFDTixNQUFNLENBQUNPLEdBQUcsQ0FBQ0g7UUFDeENELGFBQWFLLFVBQVUsQ0FBQ0MsV0FBVyxDQUFDSDtJQUN4QztJQUNBOzs7S0FHQyxHQUNELE1BQU1JLGlCQUFpQlAsWUFBWSxFQUFFO1FBQ2pDLElBQUlBLGFBQWFRLGVBQWUsRUFBRTtZQUM5QixNQUFNQyxVQUFVVCxhQUFhSyxVQUFVLENBQUNLLFVBQVU7WUFDbEQsTUFBTUMsa0JBQWtCQyxPQUFPQyxNQUFNLENBQUNKLFNBQVNLLE1BQU0sQ0FBQyxDQUFDQyxRQUFVckIsa0VBQWFBLENBQUNzQixlQUFlLENBQUNEO1lBQy9GLElBQUlkO1lBQ0osSUFBSVUsZ0JBQWdCTSxNQUFNLEdBQUcsR0FBRztnQkFDNUIsTUFBTUMsZ0JBQWdCUCxlQUFlLENBQUMsRUFBRTtnQkFDeENWLGVBQWUsTUFBTSxJQUFJLENBQUNILGdCQUFnQixDQUFDcUIsVUFBVSxDQUFDRDtZQUMxRCxPQUNLO2dCQUNEakIsZUFBZSxNQUFNLElBQUksQ0FBQ0gsZ0JBQWdCLENBQUNJLE1BQU07WUFDckQ7WUFDQSxNQUFNLElBQUksQ0FBQ0wsTUFBTSxDQUFDdUIsR0FBRyxDQUFDbkIsY0FBY0QsYUFBYUssVUFBVSxDQUFDZ0IsU0FBUztRQUN6RTtJQUNKO0FBQ0o7QUFFa0MsQ0FDbEMsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NhY2hlL2Rpc3RyaWJ1dGVkL0Rpc3RyaWJ1dGVkQ2FjaGVQbHVnaW4ubWpzP2ZiYTUiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLW5vZGUgdjIuMTYuMiAyMDI0LTExLTE5ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBBY2NvdW50RW50aXR5IH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL25vZGUnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENhY2hlIHBsdWdpbiB0aGF0IHNlcmlhbGl6ZXMgZGF0YSB0byB0aGUgY2FjaGUgYW5kIGRlc2VyaWFsaXplcyBkYXRhIGZyb20gdGhlIGNhY2hlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNsYXNzIERpc3RyaWJ1dGVkQ2FjaGVQbHVnaW4ge1xyXG4gICAgY29uc3RydWN0b3IoY2xpZW50LCBwYXJ0aXRpb25NYW5hZ2VyKSB7XHJcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XHJcbiAgICAgICAgdGhpcy5wYXJ0aXRpb25NYW5hZ2VyID0gcGFydGl0aW9uTWFuYWdlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVzZXJpYWxpemVzIHRoZSBjYWNoZSBiZWZvcmUgYWNjZXNzaW5nIGl0XHJcbiAgICAgKiBAcGFyYW0gY2FjaGVDb250ZXh0IC0gVG9rZW5DYWNoZUNvbnRleHRcclxuICAgICAqL1xyXG4gICAgYXN5bmMgYmVmb3JlQ2FjaGVBY2Nlc3MoY2FjaGVDb250ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgcGFydGl0aW9uS2V5ID0gYXdhaXQgdGhpcy5wYXJ0aXRpb25NYW5hZ2VyLmdldEtleSgpO1xyXG4gICAgICAgIGNvbnN0IGNhY2hlRGF0YSA9IGF3YWl0IHRoaXMuY2xpZW50LmdldChwYXJ0aXRpb25LZXkpO1xyXG4gICAgICAgIGNhY2hlQ29udGV4dC50b2tlbkNhY2hlLmRlc2VyaWFsaXplKGNhY2hlRGF0YSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIGNhY2hlIGFmdGVyIGFjY2Vzc2luZyBpdFxyXG4gICAgICogQHBhcmFtIGNhY2hlQ29udGV4dCAtIFRva2VuQ2FjaGVDb250ZXh0XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGFmdGVyQ2FjaGVBY2Nlc3MoY2FjaGVDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKGNhY2hlQ29udGV4dC5jYWNoZUhhc0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qga3ZTdG9yZSA9IGNhY2hlQ29udGV4dC50b2tlbkNhY2hlLmdldEtWU3RvcmUoKTtcclxuICAgICAgICAgICAgY29uc3QgYWNjb3VudEVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhrdlN0b3JlKS5maWx0ZXIoKHZhbHVlKSA9PiBBY2NvdW50RW50aXR5LmlzQWNjb3VudEVudGl0eSh2YWx1ZSkpO1xyXG4gICAgICAgICAgICBsZXQgcGFydGl0aW9uS2V5O1xyXG4gICAgICAgICAgICBpZiAoYWNjb3VudEVudGl0aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRFbnRpdHkgPSBhY2NvdW50RW50aXRpZXNbMF07XHJcbiAgICAgICAgICAgICAgICBwYXJ0aXRpb25LZXkgPSBhd2FpdCB0aGlzLnBhcnRpdGlvbk1hbmFnZXIuZXh0cmFjdEtleShhY2NvdW50RW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcnRpdGlvbktleSA9IGF3YWl0IHRoaXMucGFydGl0aW9uTWFuYWdlci5nZXRLZXkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5zZXQocGFydGl0aW9uS2V5LCBjYWNoZUNvbnRleHQudG9rZW5DYWNoZS5zZXJpYWxpemUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IERpc3RyaWJ1dGVkQ2FjaGVQbHVnaW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURpc3RyaWJ1dGVkQ2FjaGVQbHVnaW4ubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFjY291bnRFbnRpdHkiLCJEaXN0cmlidXRlZENhY2hlUGx1Z2luIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJwYXJ0aXRpb25NYW5hZ2VyIiwiYmVmb3JlQ2FjaGVBY2Nlc3MiLCJjYWNoZUNvbnRleHQiLCJwYXJ0aXRpb25LZXkiLCJnZXRLZXkiLCJjYWNoZURhdGEiLCJnZXQiLCJ0b2tlbkNhY2hlIiwiZGVzZXJpYWxpemUiLCJhZnRlckNhY2hlQWNjZXNzIiwiY2FjaGVIYXNDaGFuZ2VkIiwia3ZTdG9yZSIsImdldEtWU3RvcmUiLCJhY2NvdW50RW50aXRpZXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJ2YWx1ZSIsImlzQWNjb3VudEVudGl0eSIsImxlbmd0aCIsImFjY291bnRFbnRpdHkiLCJleHRyYWN0S2V5Iiwic2V0Iiwic2VyaWFsaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/cache/distributed/DistributedCachePlugin.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Deserializer.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/cache/serializer/Deserializer.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deserializer: () => (/* binding */ Deserializer)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/entities/AccountEntity.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/CacheManager.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class deserializes cache entities read from the file into in-memory object types defined internally\r\n * @internal\r\n */ class Deserializer {\n    /**\r\n     * Parse the JSON blob in memory and deserialize the content\r\n     * @param cachedJson - JSON blob cache\r\n     */ static deserializeJSONBlob(jsonFile) {\n        const deserializedCache = !jsonFile ? {} : JSON.parse(jsonFile);\n        return deserializedCache;\n    }\n    /**\r\n     * Deserializes accounts to AccountEntity objects\r\n     * @param accounts - accounts of type SerializedAccountEntity\r\n     */ static deserializeAccounts(accounts) {\n        const accountObjects = {};\n        if (accounts) {\n            Object.keys(accounts).map(function(key) {\n                const serializedAcc = accounts[key];\n                const mappedAcc = {\n                    homeAccountId: serializedAcc.home_account_id,\n                    environment: serializedAcc.environment,\n                    realm: serializedAcc.realm,\n                    localAccountId: serializedAcc.local_account_id,\n                    username: serializedAcc.username,\n                    authorityType: serializedAcc.authority_type,\n                    name: serializedAcc.name,\n                    clientInfo: serializedAcc.client_info,\n                    lastModificationTime: serializedAcc.last_modification_time,\n                    lastModificationApp: serializedAcc.last_modification_app,\n                    tenantProfiles: serializedAcc.tenantProfiles?.map((serializedTenantProfile)=>{\n                        return JSON.parse(serializedTenantProfile);\n                    })\n                };\n                const account = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.AccountEntity();\n                _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheManager.toObject(account, mappedAcc);\n                accountObjects[key] = account;\n            });\n        }\n        return accountObjects;\n    }\n    /**\r\n     * Deserializes id tokens to IdTokenEntity objects\r\n     * @param idTokens - credentials of type SerializedIdTokenEntity\r\n     */ static deserializeIdTokens(idTokens) {\n        const idObjects = {};\n        if (idTokens) {\n            Object.keys(idTokens).map(function(key) {\n                const serializedIdT = idTokens[key];\n                const idToken = {\n                    homeAccountId: serializedIdT.home_account_id,\n                    environment: serializedIdT.environment,\n                    credentialType: serializedIdT.credential_type,\n                    clientId: serializedIdT.client_id,\n                    secret: serializedIdT.secret,\n                    realm: serializedIdT.realm\n                };\n                idObjects[key] = idToken;\n            });\n        }\n        return idObjects;\n    }\n    /**\r\n     * Deserializes access tokens to AccessTokenEntity objects\r\n     * @param accessTokens - access tokens of type SerializedAccessTokenEntity\r\n     */ static deserializeAccessTokens(accessTokens) {\n        const atObjects = {};\n        if (accessTokens) {\n            Object.keys(accessTokens).map(function(key) {\n                const serializedAT = accessTokens[key];\n                const accessToken = {\n                    homeAccountId: serializedAT.home_account_id,\n                    environment: serializedAT.environment,\n                    credentialType: serializedAT.credential_type,\n                    clientId: serializedAT.client_id,\n                    secret: serializedAT.secret,\n                    realm: serializedAT.realm,\n                    target: serializedAT.target,\n                    cachedAt: serializedAT.cached_at,\n                    expiresOn: serializedAT.expires_on,\n                    extendedExpiresOn: serializedAT.extended_expires_on,\n                    refreshOn: serializedAT.refresh_on,\n                    keyId: serializedAT.key_id,\n                    tokenType: serializedAT.token_type,\n                    requestedClaims: serializedAT.requestedClaims,\n                    requestedClaimsHash: serializedAT.requestedClaimsHash,\n                    userAssertionHash: serializedAT.userAssertionHash\n                };\n                atObjects[key] = accessToken;\n            });\n        }\n        return atObjects;\n    }\n    /**\r\n     * Deserializes refresh tokens to RefreshTokenEntity objects\r\n     * @param refreshTokens - refresh tokens of type SerializedRefreshTokenEntity\r\n     */ static deserializeRefreshTokens(refreshTokens) {\n        const rtObjects = {};\n        if (refreshTokens) {\n            Object.keys(refreshTokens).map(function(key) {\n                const serializedRT = refreshTokens[key];\n                const refreshToken = {\n                    homeAccountId: serializedRT.home_account_id,\n                    environment: serializedRT.environment,\n                    credentialType: serializedRT.credential_type,\n                    clientId: serializedRT.client_id,\n                    secret: serializedRT.secret,\n                    familyId: serializedRT.family_id,\n                    target: serializedRT.target,\n                    realm: serializedRT.realm\n                };\n                rtObjects[key] = refreshToken;\n            });\n        }\n        return rtObjects;\n    }\n    /**\r\n     * Deserializes appMetadata to AppMetaData objects\r\n     * @param appMetadata - app metadata of type SerializedAppMetadataEntity\r\n     */ static deserializeAppMetadata(appMetadata) {\n        const appMetadataObjects = {};\n        if (appMetadata) {\n            Object.keys(appMetadata).map(function(key) {\n                const serializedAmdt = appMetadata[key];\n                appMetadataObjects[key] = {\n                    clientId: serializedAmdt.client_id,\n                    environment: serializedAmdt.environment,\n                    familyId: serializedAmdt.family_id\n                };\n            });\n        }\n        return appMetadataObjects;\n    }\n    /**\r\n     * Deserialize an inMemory Cache\r\n     * @param jsonCache - JSON blob cache\r\n     */ static deserializeAllCache(jsonCache) {\n        return {\n            accounts: jsonCache.Account ? this.deserializeAccounts(jsonCache.Account) : {},\n            idTokens: jsonCache.IdToken ? this.deserializeIdTokens(jsonCache.IdToken) : {},\n            accessTokens: jsonCache.AccessToken ? this.deserializeAccessTokens(jsonCache.AccessToken) : {},\n            refreshTokens: jsonCache.RefreshToken ? this.deserializeRefreshTokens(jsonCache.RefreshToken) : {},\n            appMetadata: jsonCache.AppMetadata ? this.deserializeAppMetadata(jsonCache.AppMetadata) : {}\n        };\n    }\n}\n //# sourceMappingURL=Deserializer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Deserializer.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Serializer.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/cache/serializer/Serializer.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializer: () => (/* binding */ Serializer)\n/* harmony export */ });\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class serializes cache entities to be saved into in-memory object types defined internally\r\n * @internal\r\n */ class Serializer {\n    /**\r\n     * serialize the JSON blob\r\n     * @param data - JSON blob cache\r\n     */ static serializeJSONBlob(data) {\n        return JSON.stringify(data);\n    }\n    /**\r\n     * Serialize Accounts\r\n     * @param accCache - cache of accounts\r\n     */ static serializeAccounts(accCache) {\n        const accounts = {};\n        Object.keys(accCache).map(function(key) {\n            const accountEntity = accCache[key];\n            accounts[key] = {\n                home_account_id: accountEntity.homeAccountId,\n                environment: accountEntity.environment,\n                realm: accountEntity.realm,\n                local_account_id: accountEntity.localAccountId,\n                username: accountEntity.username,\n                authority_type: accountEntity.authorityType,\n                name: accountEntity.name,\n                client_info: accountEntity.clientInfo,\n                last_modification_time: accountEntity.lastModificationTime,\n                last_modification_app: accountEntity.lastModificationApp,\n                tenantProfiles: accountEntity.tenantProfiles?.map((tenantProfile)=>{\n                    return JSON.stringify(tenantProfile);\n                })\n            };\n        });\n        return accounts;\n    }\n    /**\r\n     * Serialize IdTokens\r\n     * @param idTCache - cache of ID tokens\r\n     */ static serializeIdTokens(idTCache) {\n        const idTokens = {};\n        Object.keys(idTCache).map(function(key) {\n            const idTEntity = idTCache[key];\n            idTokens[key] = {\n                home_account_id: idTEntity.homeAccountId,\n                environment: idTEntity.environment,\n                credential_type: idTEntity.credentialType,\n                client_id: idTEntity.clientId,\n                secret: idTEntity.secret,\n                realm: idTEntity.realm\n            };\n        });\n        return idTokens;\n    }\n    /**\r\n     * Serializes AccessTokens\r\n     * @param atCache - cache of access tokens\r\n     */ static serializeAccessTokens(atCache) {\n        const accessTokens = {};\n        Object.keys(atCache).map(function(key) {\n            const atEntity = atCache[key];\n            accessTokens[key] = {\n                home_account_id: atEntity.homeAccountId,\n                environment: atEntity.environment,\n                credential_type: atEntity.credentialType,\n                client_id: atEntity.clientId,\n                secret: atEntity.secret,\n                realm: atEntity.realm,\n                target: atEntity.target,\n                cached_at: atEntity.cachedAt,\n                expires_on: atEntity.expiresOn,\n                extended_expires_on: atEntity.extendedExpiresOn,\n                refresh_on: atEntity.refreshOn,\n                key_id: atEntity.keyId,\n                token_type: atEntity.tokenType,\n                requestedClaims: atEntity.requestedClaims,\n                requestedClaimsHash: atEntity.requestedClaimsHash,\n                userAssertionHash: atEntity.userAssertionHash\n            };\n        });\n        return accessTokens;\n    }\n    /**\r\n     * Serialize refreshTokens\r\n     * @param rtCache - cache of refresh tokens\r\n     */ static serializeRefreshTokens(rtCache) {\n        const refreshTokens = {};\n        Object.keys(rtCache).map(function(key) {\n            const rtEntity = rtCache[key];\n            refreshTokens[key] = {\n                home_account_id: rtEntity.homeAccountId,\n                environment: rtEntity.environment,\n                credential_type: rtEntity.credentialType,\n                client_id: rtEntity.clientId,\n                secret: rtEntity.secret,\n                family_id: rtEntity.familyId,\n                target: rtEntity.target,\n                realm: rtEntity.realm\n            };\n        });\n        return refreshTokens;\n    }\n    /**\r\n     * Serialize amdtCache\r\n     * @param amdtCache - cache of app metadata\r\n     */ static serializeAppMetadata(amdtCache) {\n        const appMetadata = {};\n        Object.keys(amdtCache).map(function(key) {\n            const amdtEntity = amdtCache[key];\n            appMetadata[key] = {\n                client_id: amdtEntity.clientId,\n                environment: amdtEntity.environment,\n                family_id: amdtEntity.familyId\n            };\n        });\n        return appMetadata;\n    }\n    /**\r\n     * Serialize the cache\r\n     * @param inMemCache - itemised cache read from the JSON\r\n     */ static serializeAllCache(inMemCache) {\n        return {\n            Account: this.serializeAccounts(inMemCache.accounts),\n            IdToken: this.serializeIdTokens(inMemCache.idTokens),\n            AccessToken: this.serializeAccessTokens(inMemCache.accessTokens),\n            RefreshToken: this.serializeRefreshTokens(inMemCache.refreshTokens),\n            AppMetadata: this.serializeAppMetadata(inMemCache.appMetadata)\n        };\n    }\n}\n //# sourceMappingURL=Serializer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Serializer.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ClientApplication.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ClientApplication.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientApplication: () => (/* binding */ ClientApplication)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/AuthorizationCodeClient.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/RefreshTokenClient.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/SilentFlowClient.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityFactory.mjs\");\n/* harmony import */ var _config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/Configuration.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/config/Configuration.mjs\");\n/* harmony import */ var _crypto_CryptoProvider_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../crypto/CryptoProvider.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/crypto/CryptoProvider.mjs\");\n/* harmony import */ var _cache_NodeStorage_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cache/NodeStorage.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/NodeStorage.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _cache_TokenCache_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cache/TokenCache.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/TokenCache.mjs\");\n/* harmony import */ var _ClientAssertion_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ClientAssertion.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientAssertion.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/packageMetadata.mjs\");\n/* harmony import */ var _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/NodeAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/NodeAuthError.mjs\");\n/* harmony import */ var _UsernamePasswordClient_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./UsernamePasswordClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/UsernamePasswordClient.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Base abstract class for all ClientApplications - public and confidential\r\n * @public\r\n */ class ClientApplication {\n    /**\r\n     * Constructor for the ClientApplication\r\n     */ constructor(configuration){\n        this.config = (0,_config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_0__.buildAppConfiguration)(configuration);\n        this.cryptoProvider = new _crypto_CryptoProvider_mjs__WEBPACK_IMPORTED_MODULE_1__.CryptoProvider();\n        this.logger = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.Logger(this.config.system.loggerOptions, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_6__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_6__.version);\n        this.storage = new _cache_NodeStorage_mjs__WEBPACK_IMPORTED_MODULE_2__.NodeStorage(this.logger, this.config.auth.clientId, this.cryptoProvider, (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.buildStaticAuthorityOptions)(this.config.auth));\n        this.tokenCache = new _cache_TokenCache_mjs__WEBPACK_IMPORTED_MODULE_4__.TokenCache(this.storage, this.logger, this.config.cache.cachePlugin);\n    }\n    /**\r\n     * Creates the URL of the authorization request, letting the user input credentials and consent to the\r\n     * application. The URL targets the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * `acquireTokenByCode(AuthorizationCodeRequest)`.\r\n     */ async getAuthCodeUrl(request) {\n        this.logger.info(\"getAuthCodeUrl called\", request.correlationId);\n        const validRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request),\n            responseMode: request.responseMode || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.ResponseMode.QUERY,\n            authenticationScheme: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.AuthenticationScheme.BEARER\n        };\n        const authClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, validRequest.redirectUri, undefined, undefined, request.azureCloudOptions);\n        const authorizationCodeClient = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_12__.AuthorizationCodeClient(authClientConfig);\n        this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\n        return authorizationCodeClient.getAuthCodeUrl(validRequest);\n    }\n    /**\r\n     * Acquires a token by exchanging the Authorization Code received from the first step of OAuth2.0\r\n     * Authorization Code flow.\r\n     *\r\n     * `getAuthCodeUrl(AuthorizationCodeUrlRequest)` can be used to create the URL for the first step of OAuth2.0\r\n     * Authorization Code flow. Ensure that values for redirectUri and scopes in AuthorizationCodeUrlRequest and\r\n     * AuthorizationCodeRequest are the same.\r\n     */ async acquireTokenByCode(request, authCodePayLoad) {\n        this.logger.info(\"acquireTokenByCode called\");\n        if (request.state && authCodePayLoad) {\n            this.logger.info(\"acquireTokenByCode - validating state\");\n            this.validateState(request.state, authCodePayLoad.state || \"\");\n            // eslint-disable-next-line no-param-reassign\n            authCodePayLoad = {\n                ...authCodePayLoad,\n                state: \"\"\n            };\n        }\n        const validRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request),\n            authenticationScheme: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.AuthenticationScheme.BEARER\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenByCode, validRequest.correlationId);\n        try {\n            const authClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, validRequest.redirectUri, serverTelemetryManager, undefined, request.azureCloudOptions);\n            const authorizationCodeClient = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_12__.AuthorizationCodeClient(authClientConfig);\n            this.logger.verbose(\"Auth code client created\", validRequest.correlationId);\n            return await authorizationCodeClient.acquireToken(validRequest, authCodePayLoad);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_13__.AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n    /**\r\n     * Acquires a token by exchanging the refresh token provided for a new set of tokens.\r\n     *\r\n     * This API is provided only for scenarios where you would like to migrate from ADAL to MSAL. Otherwise, it is\r\n     * recommended that you use `acquireTokenSilent()` for silent scenarios. When using `acquireTokenSilent()`, MSAL will\r\n     * handle the caching and refreshing of tokens automatically.\r\n     */ async acquireTokenByRefreshToken(request) {\n        this.logger.info(\"acquireTokenByRefreshToken called\", request.correlationId);\n        const validRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request),\n            authenticationScheme: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.AuthenticationScheme.BEARER\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenByRefreshToken, validRequest.correlationId);\n        try {\n            const refreshTokenClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, validRequest.redirectUri || \"\", serverTelemetryManager, undefined, request.azureCloudOptions);\n            const refreshTokenClient = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_14__.RefreshTokenClient(refreshTokenClientConfig);\n            this.logger.verbose(\"Refresh token client created\", validRequest.correlationId);\n            return await refreshTokenClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_13__.AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n    /**\r\n     * Acquires a token silently when a user specifies the account the token is requested for.\r\n     *\r\n     * This API expects the user to provide an account object and looks into the cache to retrieve the token if present.\r\n     * There is also an optional \"forceRefresh\" boolean the user can send to bypass the cache for access_token and id_token.\r\n     * In case the refresh_token is expired or not found, an error is thrown\r\n     * and the guidance is for the user to call any interactive token acquisition API (eg: `acquireTokenByCode()`).\r\n     */ async acquireTokenSilent(request) {\n        const validRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request),\n            forceRefresh: request.forceRefresh || false\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenSilent, validRequest.correlationId, validRequest.forceRefresh);\n        try {\n            const silentFlowClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, validRequest.redirectUri || \"\", serverTelemetryManager, undefined, request.azureCloudOptions);\n            const silentFlowClient = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_15__.SilentFlowClient(silentFlowClientConfig);\n            this.logger.verbose(\"Silent flow client created\", validRequest.correlationId);\n            return await silentFlowClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_13__.AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n    /**\r\n     * Acquires tokens with password grant by exchanging client applications username and password for credentials\r\n     *\r\n     * The latest OAuth 2.0 Security Best Current Practice disallows the password grant entirely.\r\n     * More details on this recommendation at https://tools.ietf.org/html/draft-ietf-oauth-security-topics-13#section-3.4\r\n     * Microsoft's documentation and recommendations are at:\r\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-authentication-flows#usernamepassword\r\n     *\r\n     * @param request - UsenamePasswordRequest\r\n     */ async acquireTokenByUsernamePassword(request) {\n        this.logger.info(\"acquireTokenByUsernamePassword called\", request.correlationId);\n        const validRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request)\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ApiId.acquireTokenByUsernamePassword, validRequest.correlationId);\n        try {\n            const usernamePasswordClientConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, \"\", serverTelemetryManager, undefined, request.azureCloudOptions);\n            const usernamePasswordClient = new _UsernamePasswordClient_mjs__WEBPACK_IMPORTED_MODULE_8__.UsernamePasswordClient(usernamePasswordClientConfig);\n            this.logger.verbose(\"Username password client created\", validRequest.correlationId);\n            return await usernamePasswordClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_13__.AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n    /**\r\n     * Gets the token cache for the application.\r\n     */ getTokenCache() {\n        this.logger.info(\"getTokenCache called\");\n        return this.tokenCache;\n    }\n    /**\r\n     * Validates OIDC state by comparing the user cached state with the state received from the server.\r\n     *\r\n     * This API is provided for scenarios where you would use OAuth2.0 state parameter to mitigate against\r\n     * CSRF attacks.\r\n     * For more information about state, visit https://datatracker.ietf.org/doc/html/rfc6819#section-3.6.\r\n     * @param state - Unique GUID generated by the user that is cached by the user and sent to the server during the first leg of the flow\r\n     * @param cachedState - This string is sent back by the server with the authorization code\r\n     */ validateState(state, cachedState) {\n        if (!state) {\n            throw _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_7__.NodeAuthError.createStateNotFoundError();\n        }\n        if (state !== cachedState) {\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_16__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_17__.stateMismatch);\n        }\n    }\n    /**\r\n     * Returns the logger instance\r\n     */ getLogger() {\n        return this.logger;\n    }\n    /**\r\n     * Replaces the default logger set in configurations with new Logger with new configurations\r\n     * @param logger - Logger instance\r\n     */ setLogger(logger) {\n        this.logger = logger;\n    }\n    /**\r\n     * Builds the common configuration to be passed to the common component based on the platform configurarion\r\n     * @param authority - user passed authority in configuration\r\n     * @param serverTelemetryManager - initializes servertelemetry if passed\r\n     */ async buildOauthClientConfiguration(authority, requestCorrelationId, redirectUri, serverTelemetryManager, azureRegionConfiguration, azureCloudOptions) {\n        this.logger.verbose(\"buildOauthClientConfiguration called\", requestCorrelationId);\n        // precedence - azureCloudInstance + tenant >> authority and request  >> config\n        const userAzureCloudOptions = azureCloudOptions ? azureCloudOptions : this.config.auth.azureCloudOptions;\n        // using null assertion operator as we ensure that all config values have default values in buildConfiguration()\n        const discoveredAuthority = await this.createAuthority(authority, requestCorrelationId, azureRegionConfiguration, userAzureCloudOptions);\n        this.logger.info(`Building oauth client configuration with the following authority: ${discoveredAuthority.tokenEndpoint}.`, requestCorrelationId);\n        serverTelemetryManager?.updateRegionDiscoveryMetadata(discoveredAuthority.regionDiscoveryMetadata);\n        const clientConfiguration = {\n            authOptions: {\n                clientId: this.config.auth.clientId,\n                authority: discoveredAuthority,\n                clientCapabilities: this.config.auth.clientCapabilities,\n                redirectUri\n            },\n            loggerOptions: {\n                logLevel: this.config.system.loggerOptions.logLevel,\n                loggerCallback: this.config.system.loggerOptions.loggerCallback,\n                piiLoggingEnabled: this.config.system.loggerOptions.piiLoggingEnabled,\n                correlationId: requestCorrelationId\n            },\n            cacheOptions: {\n                claimsBasedCachingEnabled: this.config.cache.claimsBasedCachingEnabled\n            },\n            cryptoInterface: this.cryptoProvider,\n            networkInterface: this.config.system.networkClient,\n            storageInterface: this.storage,\n            serverTelemetryManager: serverTelemetryManager,\n            clientCredentials: {\n                clientSecret: this.clientSecret,\n                clientAssertion: await this.getClientAssertion(discoveredAuthority)\n            },\n            libraryInfo: {\n                sku: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.Constants.MSAL_SKU,\n                version: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_6__.version,\n                cpu: process.arch || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.Constants.EMPTY_STRING,\n                os: process.platform || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.Constants.EMPTY_STRING\n            },\n            telemetry: this.config.telemetry,\n            persistencePlugin: this.config.cache.cachePlugin,\n            serializableCache: this.tokenCache\n        };\n        return clientConfiguration;\n    }\n    async getClientAssertion(authority) {\n        if (this.developerProvidedClientAssertion) {\n            this.clientAssertion = _ClientAssertion_mjs__WEBPACK_IMPORTED_MODULE_5__.ClientAssertion.fromAssertion(await (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_18__.getClientAssertion)(this.developerProvidedClientAssertion, this.config.auth.clientId, authority.tokenEndpoint));\n        }\n        return this.clientAssertion && {\n            assertion: this.clientAssertion.getJwt(this.cryptoProvider, this.config.auth.clientId, authority.tokenEndpoint),\n            assertionType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.Constants.JWT_BEARER_ASSERTION_TYPE\n        };\n    }\n    /**\r\n     * Generates a request with the default scopes & generates a correlationId.\r\n     * @param authRequest - BaseAuthRequest for initialization\r\n     */ async initializeBaseRequest(authRequest) {\n        this.logger.verbose(\"initializeRequestScopes called\", authRequest.correlationId);\n        // Default authenticationScheme to Bearer, log that POP isn't supported yet\n        if (authRequest.authenticationScheme && authRequest.authenticationScheme === _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.AuthenticationScheme.POP) {\n            this.logger.verbose(\"Authentication Scheme 'pop' is not supported yet, setting Authentication Scheme to 'Bearer' for request\", authRequest.correlationId);\n        }\n        authRequest.authenticationScheme = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.AuthenticationScheme.BEARER;\n        // Set requested claims hash if claims-based caching is enabled and claims were requested\n        if (this.config.cache.claimsBasedCachingEnabled && authRequest.claims && // Checks for empty stringified object \"{}\" which doesn't qualify as requested claims\n        !_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_19__.StringUtils.isEmptyObj(authRequest.claims)) {\n            authRequest.requestedClaimsHash = await this.cryptoProvider.hashString(authRequest.claims);\n        }\n        return {\n            ...authRequest,\n            scopes: [\n                ...authRequest && authRequest.scopes || [],\n                ..._azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.OIDC_DEFAULT_SCOPES\n            ],\n            correlationId: authRequest && authRequest.correlationId || this.cryptoProvider.createNewGuid(),\n            authority: authRequest.authority || this.config.auth.authority\n        };\n    }\n    /**\r\n     * Initializes the server telemetry payload\r\n     * @param apiId - Id for a specific request\r\n     * @param correlationId - GUID\r\n     * @param forceRefresh - boolean to indicate network call\r\n     */ initializeServerTelemetryManager(apiId, correlationId, forceRefresh) {\n        const telemetryPayload = {\n            clientId: this.config.auth.clientId,\n            correlationId: correlationId,\n            apiId: apiId,\n            forceRefresh: forceRefresh || false\n        };\n        return new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_20__.ServerTelemetryManager(telemetryPayload, this.storage);\n    }\n    /**\r\n     * Create authority instance. If authority not passed in request, default to authority set on the application\r\n     * object. If no authority set in application object, then default to common authority.\r\n     * @param authorityString - authority from user configuration\r\n     */ async createAuthority(authorityString, requestCorrelationId, azureRegionConfiguration, azureCloudOptions) {\n        this.logger.verbose(\"createAuthority called\", requestCorrelationId);\n        // build authority string based on auth params - azureCloudInstance is prioritized if provided\n        const authorityUrl = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.Authority.generateAuthority(authorityString, azureCloudOptions);\n        const authorityOptions = {\n            protocolMode: this.config.auth.protocolMode,\n            knownAuthorities: this.config.auth.knownAuthorities,\n            cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n            authorityMetadata: this.config.auth.authorityMetadata,\n            azureRegionConfiguration,\n            skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache\n        };\n        return _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_21__.createDiscoveredInstance(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger, requestCorrelationId);\n    }\n    /**\r\n     * Clear the cache\r\n     */ clearCache() {\n        this.storage.clear();\n    }\n}\n //# sourceMappingURL=ClientApplication.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ClientApplication.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ClientAssertion.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ClientAssertion.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientAssertion: () => (/* binding */ ClientAssertion)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/EncodingUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/EncodingUtils.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Client assertion of type jwt-bearer used in confidential client flows\r\n * @public\r\n */ class ClientAssertion {\n    /**\r\n     * Initialize the ClientAssertion class from the clientAssertion passed by the user\r\n     * @param assertion - refer https://tools.ietf.org/html/rfc7521\r\n     */ static fromAssertion(assertion) {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.jwt = assertion;\n        return clientAssertion;\n    }\n    /**\r\n     * @deprecated Use fromCertificateWithSha256Thumbprint instead, with a SHA-256 thumprint\r\n     * Initialize the ClientAssertion class from the certificate passed by the user\r\n     * @param thumbprint - identifier of a certificate\r\n     * @param privateKey - secret key\r\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n     */ static fromCertificate(thumbprint, privateKey, publicCertificate) {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.privateKey = privateKey;\n        clientAssertion.thumbprint = thumbprint;\n        clientAssertion.useSha256 = false;\n        if (publicCertificate) {\n            clientAssertion.publicCertificate = this.parseCertificate(publicCertificate);\n        }\n        return clientAssertion;\n    }\n    /**\r\n     * Initialize the ClientAssertion class from the certificate passed by the user\r\n     * @param thumbprint - identifier of a certificate\r\n     * @param privateKey - secret key\r\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n     */ static fromCertificateWithSha256Thumbprint(thumbprint, privateKey, publicCertificate) {\n        const clientAssertion = new ClientAssertion();\n        clientAssertion.privateKey = privateKey;\n        clientAssertion.thumbprint = thumbprint;\n        clientAssertion.useSha256 = true;\n        if (publicCertificate) {\n            clientAssertion.publicCertificate = this.parseCertificate(publicCertificate);\n        }\n        return clientAssertion;\n    }\n    /**\r\n     * Update JWT for certificate based clientAssertion, if passed by the user, uses it as is\r\n     * @param cryptoProvider - library's crypto helper\r\n     * @param issuer - iss claim\r\n     * @param jwtAudience - aud claim\r\n     */ getJwt(cryptoProvider, issuer, jwtAudience) {\n        // if assertion was created from certificate, check if jwt is expired and create new one.\n        if (this.privateKey && this.thumbprint) {\n            if (this.jwt && !this.isExpired() && issuer === this.issuer && jwtAudience === this.jwtAudience) {\n                return this.jwt;\n            }\n            return this.createJwt(cryptoProvider, issuer, jwtAudience);\n        }\n        /*\r\n         * if assertion was created by caller, then we just append it. It is up to the caller to\r\n         * ensure that it contains necessary claims and that it is not expired.\r\n         */ if (this.jwt) {\n            return this.jwt;\n        }\n        throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.invalidAssertion);\n    }\n    /**\r\n     * JWT format and required claims specified: https://tools.ietf.org/html/rfc7523#section-3\r\n     */ createJwt(cryptoProvider, issuer, jwtAudience) {\n        this.issuer = issuer;\n        this.jwtAudience = jwtAudience;\n        const issuedAt = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.nowSeconds();\n        this.expirationTime = issuedAt + 600;\n        const algorithm = this.useSha256 ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.PSS_256 : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.RSA_256;\n        const header = {\n            alg: algorithm\n        };\n        const thumbprintHeader = this.useSha256 ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.X5T_256 : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.X5T;\n        Object.assign(header, {\n            [thumbprintHeader]: _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.EncodingUtils.base64EncodeUrl(this.thumbprint, \"hex\")\n        });\n        if (this.publicCertificate) {\n            Object.assign(header, {\n                [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.X5C]: this.publicCertificate\n            });\n        }\n        const payload = {\n            [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.AUDIENCE]: this.jwtAudience,\n            [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.EXPIRATION_TIME]: this.expirationTime,\n            [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.ISSUER]: this.issuer,\n            [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.SUBJECT]: this.issuer,\n            [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.NOT_BEFORE]: issuedAt,\n            [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.JwtConstants.JWT_ID]: cryptoProvider.createNewGuid()\n        };\n        this.jwt = jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__.sign(payload, this.privateKey, {\n            header\n        });\n        return this.jwt;\n    }\n    /**\r\n     * Utility API to check expiration\r\n     */ isExpired() {\n        return this.expirationTime < _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.nowSeconds();\n    }\n    /**\r\n     * Extracts the raw certs from a given certificate string and returns them in an array.\r\n     * @param publicCertificate - electronic document provided to prove the ownership of the public key\r\n     */ static parseCertificate(publicCertificate) {\n        /**\r\n         * This is regex to identify the certs in a given certificate string.\r\n         * We want to look for the contents between the BEGIN and END certificate strings, without the associated newlines.\r\n         * The information in parens \"(.+?)\" is the capture group to represent the cert we want isolated.\r\n         * \".\" means any string character, \"+\" means match 1 or more times, and \"?\" means the shortest match.\r\n         * The \"g\" at the end of the regex means search the string globally, and the \"s\" enables the \".\" to match newlines.\r\n         */ const regexToFindCerts = /-----BEGIN CERTIFICATE-----\\r*\\n(.+?)\\r*\\n-----END CERTIFICATE-----/gs;\n        const certs = [];\n        let matches;\n        while((matches = regexToFindCerts.exec(publicCertificate)) !== null){\n            // matches[1] represents the first parens capture group in the regex.\n            certs.push(matches[1].replace(/\\r*\\n/g, _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING));\n        }\n        return certs;\n    }\n}\n //# sourceMappingURL=ClientAssertion.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ClientAssertion.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ClientCredentialClient.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ClientCredentialClient.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientCredentialClient: () => (/* binding */ ClientCredentialClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * OAuth2.0 client credential grant\r\n * @public\r\n */ class ClientCredentialClient extends _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration, appTokenProvider){\n        super(configuration);\n        this.appTokenProvider = appTokenProvider;\n    }\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request - CommonClientCredentialRequest provided by the developer\r\n     */ async acquireToken(request) {\n        if (request.skipCache || request.claims) {\n            return this.executeTokenRequest(request, this.authority);\n        }\n        const [cachedAuthenticationResult, lastCacheOutcome] = await this.getCachedAuthenticationResult(request, this.config, this.cryptoUtils, this.authority, this.cacheManager, this.serverTelemetryManager);\n        if (cachedAuthenticationResult) {\n            // if the token is not expired but must be refreshed; get a new one in the background\n            if (lastCacheOutcome === _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED) {\n                this.logger.info(\"ClientCredentialClient:getCachedAuthenticationResult - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\n                // refresh the access token in the background\n                const refreshAccessToken = true;\n                await this.executeTokenRequest(request, this.authority, refreshAccessToken);\n            }\n            // return the cached token\n            return cachedAuthenticationResult;\n        } else {\n            return this.executeTokenRequest(request, this.authority);\n        }\n    }\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */ async getCachedAuthenticationResult(request, config, cryptoUtils, authority, cacheManager, serverTelemetryManager) {\n        const clientConfiguration = config;\n        const managedIdentityConfiguration = config;\n        let lastCacheOutcome = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NOT_APPLICABLE;\n        // read the user-supplied cache into memory, if applicable\n        let cacheContext;\n        if (clientConfiguration.serializableCache && clientConfiguration.persistencePlugin) {\n            cacheContext = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.TokenCacheContext(clientConfiguration.serializableCache, false);\n            await clientConfiguration.persistencePlugin.beforeCacheAccess(cacheContext);\n        }\n        const cachedAccessToken = this.readAccessTokenFromCache(authority, managedIdentityConfiguration.managedIdentityId?.id || clientConfiguration.authOptions.clientId, new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.ScopeSet(request.scopes || []), cacheManager);\n        if (clientConfiguration.serializableCache && clientConfiguration.persistencePlugin && cacheContext) {\n            await clientConfiguration.persistencePlugin.afterCacheAccess(cacheContext);\n        }\n        // must refresh due to non-existent access_token\n        if (!cachedAccessToken) {\n            serverTelemetryManager?.setCacheOutcome(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            return [\n                null,\n                _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.NO_CACHED_ACCESS_TOKEN\n            ];\n        }\n        // must refresh due to the expires_in value\n        if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isTokenExpired(cachedAccessToken.expiresOn, clientConfiguration.systemOptions?.tokenRenewalOffsetSeconds || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_TOKEN_RENEWAL_OFFSET_SEC)) {\n            serverTelemetryManager?.setCacheOutcome(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            return [\n                null,\n                _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED\n            ];\n        }\n        // must refresh (in the background) due to the refresh_in value\n        if (cachedAccessToken.refreshOn && _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.isTokenExpired(cachedAccessToken.refreshOn.toString(), 0)) {\n            lastCacheOutcome = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED;\n            serverTelemetryManager?.setCacheOutcome(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CacheOutcome.PROACTIVELY_REFRESHED);\n        }\n        return [\n            await _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.ResponseHandler.generateAuthenticationResult(cryptoUtils, authority, {\n                account: null,\n                idToken: null,\n                accessToken: cachedAccessToken,\n                refreshToken: null,\n                appMetadata: null\n            }, true, request),\n            lastCacheOutcome\n        ];\n    }\n    /**\r\n     * Reads access token from the cache\r\n     */ readAccessTokenFromCache(authority, id, scopeSet, cacheManager) {\n        const accessTokenFilter = {\n            homeAccountId: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.Constants.EMPTY_STRING,\n            environment: authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.CredentialType.ACCESS_TOKEN,\n            clientId: id,\n            realm: authority.tenant,\n            target: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.ScopeSet.createSearchScopes(scopeSet.asArray())\n        };\n        const accessTokens = cacheManager.getAccessTokensByFilter(accessTokenFilter);\n        if (accessTokens.length < 1) {\n            return null;\n        } else if (accessTokens.length > 1) {\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.multipleMatchingTokens);\n        }\n        return accessTokens[0];\n    }\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request - CommonClientCredentialRequest provided by the developer\r\n     * @param authority - authority object\r\n     */ async executeTokenRequest(request, authority, refreshAccessToken) {\n        let serverTokenResponse;\n        let reqTimestamp;\n        if (this.appTokenProvider) {\n            this.logger.info(\"Using appTokenProvider extensibility.\");\n            const appTokenPropviderParameters = {\n                correlationId: request.correlationId,\n                tenantId: this.config.authOptions.authority.tenant,\n                scopes: request.scopes,\n                claims: request.claims\n            };\n            reqTimestamp = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.nowSeconds();\n            const appTokenProviderResult = await this.appTokenProvider(appTokenPropviderParameters);\n            serverTokenResponse = {\n                access_token: appTokenProviderResult.accessToken,\n                expires_in: appTokenProviderResult.expiresInSeconds,\n                refresh_in: appTokenProviderResult.refreshInSeconds,\n                token_type: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.AuthenticationScheme.BEARER\n            };\n        } else {\n            const queryParametersString = this.createTokenQueryParameters(request);\n            const endpoint = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n            const requestBody = await this.createTokenRequestBody(request);\n            const headers = this.createTokenRequestHeaders();\n            const thumbprint = {\n                clientId: this.config.authOptions.clientId,\n                authority: request.authority,\n                scopes: request.scopes,\n                claims: request.claims,\n                authenticationScheme: request.authenticationScheme,\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                sshKid: request.sshKid\n            };\n            this.logger.info(\"Sending token request to endpoint: \" + authority.tokenEndpoint);\n            reqTimestamp = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.nowSeconds();\n            const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId);\n            serverTokenResponse = response.body;\n            serverTokenResponse.status = response.status;\n        }\n        const responseHandler = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        responseHandler.validateTokenResponse(serverTokenResponse, refreshAccessToken);\n        const tokenResponse = await responseHandler.handleServerTokenResponse(serverTokenResponse, this.authority, reqTimestamp, request);\n        return tokenResponse;\n    }\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request - CommonClientCredentialRequest provided by the developer\r\n     */ async createTokenRequestBody(request) {\n        const parameterBuilder = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.RequestParameterBuilder();\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addScopes(request.scopes, false);\n        parameterBuilder.addGrantType(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.GrantType.CLIENT_CREDENTIALS_GRANT);\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        // Use clientAssertion from request, fallback to client assertion in base configuration\n        const clientAssertion = request.clientAssertion || this.config.clientCredentials.clientAssertion;\n        if (clientAssertion) {\n            parameterBuilder.addClientAssertion(await (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        if (!_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=ClientCredentialClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ClientCredentialClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ConfidentialClientApplication.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ConfidentialClientApplication.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfidentialClientApplication: () => (/* binding */ ConfidentialClientApplication)\n/* harmony export */ });\n/* harmony import */ var _ClientApplication_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ClientApplication.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientApplication.mjs\");\n/* harmony import */ var _ClientAssertion_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ClientAssertion.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientAssertion.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _ClientCredentialClient_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ClientCredentialClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientCredentialClient.mjs\");\n/* harmony import */ var _OnBehalfOfClient_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./OnBehalfOfClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/OnBehalfOfClient.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // AADAuthorityConstants\n/**\r\n *  This class is to be used to acquire tokens for confidential client applications (webApp, webAPI). Confidential client applications\r\n *  will configure application secrets, client certificates/assertions as applicable\r\n * @public\r\n */ class ConfidentialClientApplication extends _ClientApplication_mjs__WEBPACK_IMPORTED_MODULE_0__.ClientApplication {\n    /**\r\n     * Constructor for the ConfidentialClientApplication\r\n     *\r\n     * Required attributes in the Configuration object are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our application registration portal\r\n     * - authority: the authority URL for your application.\r\n     * - client credential: Must set either client secret, certificate, or assertion for confidential clients. You can obtain a client secret from the application registration portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://\\{instance\\}/tfp/\\{tenant\\}/\\{policyName\\}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param Configuration - configuration object for the MSAL ConfidentialClientApplication instance\r\n     */ constructor(configuration){\n        super(configuration);\n        this.setClientCredential();\n        this.appTokenProvider = undefined;\n    }\n    /**\r\n     * This extensibility point only works for the client_credential flow, i.e. acquireTokenByClientCredential and\r\n     * is meant for Azure SDK to enhance Managed Identity support.\r\n     *\r\n     * @param IAppTokenProvider  - Extensibility interface, which allows the app developer to return a token from a custom source.\r\n     */ SetAppTokenProvider(provider) {\n        this.appTokenProvider = provider;\n    }\n    /**\r\n     * Acquires tokens from the authority for the application (not for an end user).\r\n     */ async acquireTokenByClientCredential(request) {\n        this.logger.info(\"acquireTokenByClientCredential called\", request.correlationId);\n        // If there is a client assertion present in the request, it overrides the one present in the client configuration\n        let clientAssertion;\n        if (request.clientAssertion) {\n            clientAssertion = {\n                assertion: await (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.getClientAssertion)(request.clientAssertion, this.config.auth.clientId),\n                assertionType: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.JWT_BEARER_ASSERTION_TYPE\n            };\n        }\n        const baseRequest = await this.initializeBaseRequest(request);\n        // valid base request should not contain oidc scopes in this grant type\n        const validBaseRequest = {\n            ...baseRequest,\n            scopes: baseRequest.scopes.filter((scope)=>!_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.OIDC_DEFAULT_SCOPES.includes(scope))\n        };\n        const validRequest = {\n            ...request,\n            ...validBaseRequest,\n            clientAssertion\n        };\n        /*\r\n         * valid request should not have \"common\" or \"organizations\" in lieu of the tenant_id in the authority in the auth configuration\r\n         * example authority: \"https://login.microsoftonline.com/TenantId\",\r\n         */ const authority = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.UrlString(validRequest.authority);\n        const tenantId = authority.getUrlComponents().PathSegments[0];\n        if (Object.values(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.AADAuthorityConstants).includes(tenantId)) {\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.missingTenantIdError);\n        }\n        /*\r\n         * if this env variable is set, and the developer provided region isn't defined and isn't \"DisableMsalForceRegion\",\r\n         * MSAL shall opt-in to ESTS-R with the value of this variable\r\n         */ const ENV_MSAL_FORCE_REGION = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.MSAL_FORCE_REGION];\n        let region;\n        if (validRequest.azureRegion !== \"DisableMsalForceRegion\") {\n            if (!validRequest.azureRegion && ENV_MSAL_FORCE_REGION) {\n                region = ENV_MSAL_FORCE_REGION;\n            } else {\n                region = validRequest.azureRegion;\n            }\n        }\n        const azureRegionConfiguration = {\n            azureRegion: region,\n            environmentRegion: process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.REGION_ENVIRONMENT_VARIABLE]\n        };\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ApiId.acquireTokenByClientCredential, validRequest.correlationId, validRequest.skipCache);\n        try {\n            const clientCredentialConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, \"\", serverTelemetryManager, azureRegionConfiguration, request.azureCloudOptions);\n            const clientCredentialClient = new _ClientCredentialClient_mjs__WEBPACK_IMPORTED_MODULE_3__.ClientCredentialClient(clientCredentialConfig, this.appTokenProvider);\n            this.logger.verbose(\"Client credential client created\", validRequest.correlationId);\n            return await clientCredentialClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n    /**\r\n     * Acquires tokens from the authority for the application.\r\n     *\r\n     * Used in scenarios where the current app is a middle-tier service which was called with a token\r\n     * representing an end user. The current app can use the token (oboAssertion) to request another\r\n     * token to access downstream web API, on behalf of that user.\r\n     *\r\n     * The current middle-tier app has no user interaction to obtain consent.\r\n     * See how to gain consent upfront for your middle-tier app from this article.\r\n     * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#gaining-consent-for-the-middle-tier-application\r\n     */ async acquireTokenOnBehalfOf(request) {\n        this.logger.info(\"acquireTokenOnBehalfOf called\", request.correlationId);\n        const validRequest = {\n            ...request,\n            ...await this.initializeBaseRequest(request)\n        };\n        try {\n            const onBehalfOfConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, \"\", undefined, undefined, request.azureCloudOptions);\n            const oboClient = new _OnBehalfOfClient_mjs__WEBPACK_IMPORTED_MODULE_4__.OnBehalfOfClient(onBehalfOfConfig);\n            this.logger.verbose(\"On behalf of client created\", validRequest.correlationId);\n            return await oboClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            throw e;\n        }\n    }\n    setClientCredential() {\n        const clientSecretNotEmpty = !!this.config.auth.clientSecret;\n        const clientAssertionNotEmpty = !!this.config.auth.clientAssertion;\n        const certificateNotEmpty = (!!this.config.auth.clientCertificate?.thumbprint || !!this.config.auth.clientCertificate?.thumbprintSha256) && !!this.config.auth.clientCertificate?.privateKey;\n        /*\r\n         * If app developer configures this callback, they don't need a credential\r\n         * i.e. AzureSDK can get token from Managed Identity without a cert / secret\r\n         */ if (this.appTokenProvider) {\n            return;\n        }\n        // Check that at most one credential is set on the application\n        if (clientSecretNotEmpty && clientAssertionNotEmpty || clientAssertionNotEmpty && certificateNotEmpty || clientSecretNotEmpty && certificateNotEmpty) {\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.invalidClientCredential);\n        }\n        if (this.config.auth.clientSecret) {\n            this.clientSecret = this.config.auth.clientSecret;\n            return;\n        }\n        if (this.config.auth.clientAssertion) {\n            this.developerProvidedClientAssertion = this.config.auth.clientAssertion;\n            return;\n        }\n        if (!certificateNotEmpty) {\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.invalidClientCredential);\n        } else {\n            this.clientAssertion = !!this.config.auth.clientCertificate.thumbprintSha256 ? _ClientAssertion_mjs__WEBPACK_IMPORTED_MODULE_1__.ClientAssertion.fromCertificateWithSha256Thumbprint(this.config.auth.clientCertificate.thumbprintSha256, this.config.auth.clientCertificate.privateKey, this.config.auth.clientCertificate.x5c) : _ClientAssertion_mjs__WEBPACK_IMPORTED_MODULE_1__.ClientAssertion.fromCertificate(// guaranteed to be a string, due to prior error checking in this function\n            this.config.auth.clientCertificate.thumbprint, this.config.auth.clientCertificate.privateKey, this.config.auth.clientCertificate.x5c);\n        }\n    }\n}\n //# sourceMappingURL=ConfidentialClientApplication.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ConfidentialClientApplication.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/DeviceCodeClient.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/DeviceCodeClient.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeviceCodeClient: () => (/* binding */ DeviceCodeClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * OAuth2.0 Device code client\r\n * @public\r\n */ class DeviceCodeClient extends _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration){\n        super(configuration);\n    }\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     */ async acquireToken(request) {\n        const deviceCodeResponse = await this.getDeviceCode(request);\n        request.deviceCodeCallback(deviceCodeResponse);\n        const reqTimestamp = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.nowSeconds();\n        const response = await this.acquireTokenWithDeviceCode(request, deviceCodeResponse);\n        const responseHandler = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response);\n        return responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request);\n    }\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     */ async getDeviceCode(request) {\n        const queryParametersString = this.createExtraQueryParameters(request);\n        const endpoint = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(this.authority.deviceCodeEndpoint, queryParametersString);\n        const queryString = this.createQueryString(request);\n        const headers = this.createTokenRequestHeaders();\n        const thumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        return this.executePostRequestToDeviceCodeEndpoint(endpoint, queryString, headers, thumbprint, request.correlationId);\n    }\n    /**\r\n     * Creates query string for the device code request\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     */ createExtraQueryParameters(request) {\n        const parameterBuilder = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.RequestParameterBuilder();\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint - token endpoint\r\n     * @param queryString - string to be used in the body of the request\r\n     * @param headers - headers for the request\r\n     * @param thumbprint - unique request thumbprint\r\n     * @param correlationId - correlation id to be used in the request\r\n     */ async executePostRequestToDeviceCodeEndpoint(deviceCodeEndpoint, queryString, headers, thumbprint, correlationId) {\n        const { body: { user_code: userCode, device_code: deviceCode, verification_uri: verificationUri, expires_in: expiresIn, interval, message } } = await this.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n            body: queryString,\n            headers: headers\n        }, correlationId);\n        return {\n            userCode,\n            deviceCode,\n            verificationUri,\n            expiresIn,\n            interval,\n            message\n        };\n    }\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     */ createQueryString(request) {\n        const parameterBuilder = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.RequestParameterBuilder();\n        parameterBuilder.addScopes(request.scopes);\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        if (request.extraQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n        }\n        if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        return parameterBuilder.createQueryString();\n    }\n    /**\r\n     * Breaks the polling with specific conditions\r\n     * @param deviceCodeExpirationTime - expiration time for the device code request\r\n     * @param userSpecifiedTimeout - developer provided timeout, to be compared against deviceCodeExpirationTime\r\n     * @param userSpecifiedCancelFlag - boolean indicating the developer would like to cancel the request\r\n     */ continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n        if (userSpecifiedCancelFlag) {\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.deviceCodePollingCancelled);\n        } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.nowSeconds() > userSpecifiedTimeout) {\n            this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.userTimeoutReached);\n        } else if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.nowSeconds() > deviceCodeExpirationTime) {\n            if (userSpecifiedTimeout) {\n                this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\n            }\n            this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.deviceCodeExpired);\n        }\n        return true;\n    }\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code response\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse - DeviceCodeResponse returned by the security token service device code endpoint\r\n     */ async acquireTokenWithDeviceCode(request, deviceCodeResponse) {\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(this.authority.tokenEndpoint, queryParametersString);\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n        const headers = this.createTokenRequestHeaders();\n        const userSpecifiedTimeout = request.timeout ? _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.nowSeconds() + request.timeout : undefined;\n        const deviceCodeExpirationTime = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.nowSeconds() + deviceCodeResponse.expiresIn;\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n        /*\r\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\r\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\r\n         */ while(this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)){\n            const thumbprint = {\n                clientId: this.config.authOptions.clientId,\n                authority: request.authority,\n                scopes: request.scopes,\n                claims: request.claims,\n                authenticationScheme: request.authenticationScheme,\n                resourceRequestMethod: request.resourceRequestMethod,\n                resourceRequestUri: request.resourceRequestUri,\n                shrClaims: request.shrClaims,\n                sshKid: request.sshKid\n            };\n            const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId);\n            if (response.body && response.body.error) {\n                // user authorization is pending. Sleep for polling interval and try again\n                if (response.body.error === _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.Constants.AUTHORIZATION_PENDING) {\n                    this.logger.info(\"Authorization pending. Continue polling.\");\n                    await _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.delay(pollingIntervalMilli);\n                } else {\n                    // for any other error, throw\n                    this.logger.info(\"Unexpected error in polling from the server\");\n                    throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.createAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.postRequestFailed, response.body.error);\n                }\n            } else {\n                this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n                return response.body;\n            }\n        }\n        /*\r\n         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n         */ this.logger.error(\"Polling stopped for unknown reasons.\");\n        throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.deviceCodeUnknownError);\n    }\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request - developer provided CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse - DeviceCodeResponse returned by the security token service device code endpoint\r\n     */ createTokenRequestBody(request, deviceCodeResponse) {\n        const requestParameters = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.RequestParameterBuilder();\n        requestParameters.addScopes(request.scopes);\n        requestParameters.addClientId(this.config.authOptions.clientId);\n        requestParameters.addGrantType(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.GrantType.DEVICE_CODE_GRANT);\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        requestParameters.addCorrelationId(correlationId);\n        requestParameters.addClientInfo();\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\n        requestParameters.addApplicationTelemetry(this.config.telemetry.application);\n        requestParameters.addThrottling();\n        if (this.serverTelemetryManager) {\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\n        }\n        if (!_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        return requestParameters.createQueryString();\n    }\n}\n //# sourceMappingURL=DeviceCodeClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/DeviceCodeClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentityApplication.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ManagedIdentityApplication.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ManagedIdentityApplication: () => (/* binding */ ManagedIdentityApplication)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/crypto/ICrypto.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/Authority.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/Configuration.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/config/Configuration.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/packageMetadata.mjs\");\n/* harmony import */ var _crypto_CryptoProvider_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../crypto/CryptoProvider.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/crypto/CryptoProvider.mjs\");\n/* harmony import */ var _ClientCredentialClient_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ClientCredentialClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientCredentialClient.mjs\");\n/* harmony import */ var _ManagedIdentityClient_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ManagedIdentityClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentityClient.mjs\");\n/* harmony import */ var _cache_NodeStorage_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../cache/NodeStorage.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/NodeStorage.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Class to initialize a managed identity and identify the service\r\n * @public\r\n */ class ManagedIdentityApplication {\n    constructor(configuration){\n        // undefined config means the managed identity is system-assigned\n        this.config = (0,_config_Configuration_mjs__WEBPACK_IMPORTED_MODULE_0__.buildManagedIdentityConfiguration)(configuration || {});\n        this.logger = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.Logger(this.config.system.loggerOptions, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_1__.name, _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_1__.version);\n        const fakeStatusAuthorityOptions = {\n            canonicalAuthority: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.Constants.DEFAULT_AUTHORITY\n        };\n        if (!ManagedIdentityApplication.nodeStorage) {\n            ManagedIdentityApplication.nodeStorage = new _cache_NodeStorage_mjs__WEBPACK_IMPORTED_MODULE_5__.NodeStorage(this.logger, this.config.managedIdentityId.id, _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.DEFAULT_CRYPTO_IMPLEMENTATION, fakeStatusAuthorityOptions);\n        }\n        this.networkClient = this.config.system.networkClient;\n        this.cryptoProvider = new _crypto_CryptoProvider_mjs__WEBPACK_IMPORTED_MODULE_2__.CryptoProvider();\n        const fakeAuthorityOptions = {\n            protocolMode: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.ProtocolMode.AAD,\n            knownAuthorities: [\n                _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_AUTHORITY_FOR_MANAGED_IDENTITY\n            ],\n            cloudDiscoveryMetadata: \"\",\n            authorityMetadata: \"\"\n        };\n        this.fakeAuthority = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.Authority(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_AUTHORITY_FOR_MANAGED_IDENTITY, this.networkClient, ManagedIdentityApplication.nodeStorage, fakeAuthorityOptions, this.logger, this.cryptoProvider.createNewGuid(), undefined, true);\n        this.fakeClientCredentialClient = new _ClientCredentialClient_mjs__WEBPACK_IMPORTED_MODULE_3__.ClientCredentialClient({\n            authOptions: {\n                clientId: this.config.managedIdentityId.id,\n                authority: this.fakeAuthority\n            }\n        });\n        this.managedIdentityClient = new _ManagedIdentityClient_mjs__WEBPACK_IMPORTED_MODULE_4__.ManagedIdentityClient(this.logger, ManagedIdentityApplication.nodeStorage, this.networkClient, this.cryptoProvider);\n    }\n    /**\r\n     * Acquire an access token from the cache or the managed identity\r\n     * @param managedIdentityRequest - the ManagedIdentityRequestParams object passed in by the developer\r\n     * @returns the access token\r\n     */ async acquireToken(managedIdentityRequestParams) {\n        if (!managedIdentityRequestParams.resource) {\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_12__.createClientConfigurationError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_13__.urlEmptyError);\n        }\n        const managedIdentityRequest = {\n            forceRefresh: managedIdentityRequestParams.forceRefresh,\n            resource: managedIdentityRequestParams.resource.replace(\"/.default\", \"\"),\n            scopes: [\n                managedIdentityRequestParams.resource.replace(\"/.default\", \"\")\n            ],\n            authority: this.fakeAuthority.canonicalAuthority,\n            correlationId: this.cryptoProvider.createNewGuid()\n        };\n        if (managedIdentityRequestParams.claims || managedIdentityRequest.forceRefresh) {\n            // make a network call to the managed identity source\n            return this.managedIdentityClient.sendManagedIdentityTokenRequest(managedIdentityRequest, this.config.managedIdentityId, this.fakeAuthority);\n        }\n        const [cachedAuthenticationResult, lastCacheOutcome] = await this.fakeClientCredentialClient.getCachedAuthenticationResult(managedIdentityRequest, this.config, this.cryptoProvider, this.fakeAuthority, ManagedIdentityApplication.nodeStorage);\n        if (cachedAuthenticationResult) {\n            // if the token is not expired but must be refreshed; get a new one in the background\n            if (lastCacheOutcome === _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.CacheOutcome.PROACTIVELY_REFRESHED) {\n                this.logger.info(\"ClientCredentialClient:getCachedAuthenticationResult - Cached access token's refreshOn property has been exceeded'. It's not expired, but must be refreshed.\");\n                // make a network call to the managed identity source; refresh the access token in the background\n                const refreshAccessToken = true;\n                await this.managedIdentityClient.sendManagedIdentityTokenRequest(managedIdentityRequest, this.config.managedIdentityId, this.fakeAuthority, refreshAccessToken);\n            }\n            return cachedAuthenticationResult;\n        } else {\n            // make a network call to the managed identity source\n            return this.managedIdentityClient.sendManagedIdentityTokenRequest(managedIdentityRequest, this.config.managedIdentityId, this.fakeAuthority);\n        }\n    }\n    /**\r\n     * Determine the Managed Identity Source based on available environment variables. This API is consumed by Azure Identity SDK.\r\n     * @returns ManagedIdentitySourceNames - The Managed Identity source's name\r\n     */ getManagedIdentitySource() {\n        return _ManagedIdentityClient_mjs__WEBPACK_IMPORTED_MODULE_4__.ManagedIdentityClient.sourceName || this.managedIdentityClient.getManagedIdentitySource();\n    }\n}\n //# sourceMappingURL=ManagedIdentityApplication.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentityApplication.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentityClient.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ManagedIdentityClient.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ManagedIdentityClient: () => (/* binding */ ManagedIdentityClient)\n/* harmony export */ });\n/* harmony import */ var _ManagedIdentitySources_AppService_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ManagedIdentitySources/AppService.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/AppService.mjs\");\n/* harmony import */ var _ManagedIdentitySources_AzureArc_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ManagedIdentitySources/AzureArc.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/AzureArc.mjs\");\n/* harmony import */ var _ManagedIdentitySources_CloudShell_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ManagedIdentitySources/CloudShell.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/CloudShell.mjs\");\n/* harmony import */ var _ManagedIdentitySources_Imds_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ManagedIdentitySources/Imds.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/Imds.mjs\");\n/* harmony import */ var _ManagedIdentitySources_ServiceFabric_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ManagedIdentitySources/ServiceFabric.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/ServiceFabric.mjs\");\n/* harmony import */ var _error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/ManagedIdentityError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../error/ManagedIdentityErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /*\r\n * Class to initialize a managed identity and identify the service.\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/ManagedIdentityClient.cs\r\n */ class ManagedIdentityClient {\n    constructor(logger, nodeStorage, networkClient, cryptoProvider){\n        this.logger = logger;\n        this.nodeStorage = nodeStorage;\n        this.networkClient = networkClient;\n        this.cryptoProvider = cryptoProvider;\n    }\n    async sendManagedIdentityTokenRequest(managedIdentityRequest, managedIdentityId, fakeAuthority, refreshAccessToken) {\n        if (!ManagedIdentityClient.identitySource) {\n            ManagedIdentityClient.identitySource = this.selectManagedIdentitySource(this.logger, this.nodeStorage, this.networkClient, this.cryptoProvider, managedIdentityId);\n        }\n        return ManagedIdentityClient.identitySource.acquireTokenWithManagedIdentity(managedIdentityRequest, managedIdentityId, fakeAuthority, refreshAccessToken);\n    }\n    allEnvironmentVariablesAreDefined(environmentVariables) {\n        return Object.values(environmentVariables).every((environmentVariable)=>{\n            return environmentVariable !== undefined;\n        });\n    }\n    /**\r\n     * Determine the Managed Identity Source based on available environment variables. This API is consumed by ManagedIdentityApplication's getManagedIdentitySource.\r\n     * @returns ManagedIdentitySourceNames - The Managed Identity source's name\r\n     */ getManagedIdentitySource() {\n        ManagedIdentityClient.sourceName = this.allEnvironmentVariablesAreDefined(_ManagedIdentitySources_ServiceFabric_mjs__WEBPACK_IMPORTED_MODULE_4__.ServiceFabric.getEnvironmentVariables()) ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__.ManagedIdentitySourceNames.SERVICE_FABRIC : this.allEnvironmentVariablesAreDefined(_ManagedIdentitySources_AppService_mjs__WEBPACK_IMPORTED_MODULE_0__.AppService.getEnvironmentVariables()) ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__.ManagedIdentitySourceNames.APP_SERVICE : this.allEnvironmentVariablesAreDefined(_ManagedIdentitySources_CloudShell_mjs__WEBPACK_IMPORTED_MODULE_2__.CloudShell.getEnvironmentVariables()) ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__.ManagedIdentitySourceNames.CLOUD_SHELL : this.allEnvironmentVariablesAreDefined(_ManagedIdentitySources_AzureArc_mjs__WEBPACK_IMPORTED_MODULE_1__.AzureArc.getEnvironmentVariables()) ? _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__.ManagedIdentitySourceNames.AZURE_ARC : _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_6__.ManagedIdentitySourceNames.DEFAULT_TO_IMDS;\n        return ManagedIdentityClient.sourceName;\n    }\n    /**\r\n     * Tries to create a managed identity source for all sources\r\n     * @returns the managed identity Source\r\n     */ selectManagedIdentitySource(logger, nodeStorage, networkClient, cryptoProvider, managedIdentityId) {\n        const source = _ManagedIdentitySources_ServiceFabric_mjs__WEBPACK_IMPORTED_MODULE_4__.ServiceFabric.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, managedIdentityId) || _ManagedIdentitySources_AppService_mjs__WEBPACK_IMPORTED_MODULE_0__.AppService.tryCreate(logger, nodeStorage, networkClient, cryptoProvider) || _ManagedIdentitySources_CloudShell_mjs__WEBPACK_IMPORTED_MODULE_2__.CloudShell.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, managedIdentityId) || _ManagedIdentitySources_AzureArc_mjs__WEBPACK_IMPORTED_MODULE_1__.AzureArc.tryCreate(logger, nodeStorage, networkClient, cryptoProvider, managedIdentityId) || _ManagedIdentitySources_Imds_mjs__WEBPACK_IMPORTED_MODULE_3__.Imds.tryCreate(logger, nodeStorage, networkClient, cryptoProvider);\n        if (!source) {\n            throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_5__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_7__.unableToCreateSource);\n        }\n        return source;\n    }\n}\n //# sourceMappingURL=ManagedIdentityClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NsaWVudC9NYW5hZ2VkSWRlbnRpdHlDbGllbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUNxRTtBQUNKO0FBQ0k7QUFDWjtBQUNrQjtBQUNJO0FBQ1g7QUFDVTtBQUU5RTs7O0NBR0MsR0FDRDs7O0NBR0MsR0FDRCxNQUFNUTtJQUNGQyxZQUFZQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxjQUFjLENBQUU7UUFDNUQsSUFBSSxDQUFDSCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtRQUNyQixJQUFJLENBQUNDLGNBQWMsR0FBR0E7SUFDMUI7SUFDQSxNQUFNQyxnQ0FBZ0NDLHNCQUFzQixFQUFFQyxpQkFBaUIsRUFBRUMsYUFBYSxFQUFFQyxrQkFBa0IsRUFBRTtRQUNoSCxJQUFJLENBQUNWLHNCQUFzQlcsY0FBYyxFQUFFO1lBQ3ZDWCxzQkFBc0JXLGNBQWMsR0FDaEMsSUFBSSxDQUFDQywyQkFBMkIsQ0FBQyxJQUFJLENBQUNWLE1BQU0sRUFBRSxJQUFJLENBQUNDLFdBQVcsRUFBRSxJQUFJLENBQUNDLGFBQWEsRUFBRSxJQUFJLENBQUNDLGNBQWMsRUFBRUc7UUFDakg7UUFDQSxPQUFPUixzQkFBc0JXLGNBQWMsQ0FBQ0UsK0JBQStCLENBQUNOLHdCQUF3QkMsbUJBQW1CQyxlQUFlQztJQUMxSTtJQUNBSSxrQ0FBa0NDLG9CQUFvQixFQUFFO1FBQ3BELE9BQU9DLE9BQU9DLE1BQU0sQ0FBQ0Ysc0JBQXNCRyxLQUFLLENBQUMsQ0FBQ0M7WUFDOUMsT0FBT0Esd0JBQXdCQztRQUNuQztJQUNKO0lBQ0E7OztLQUdDLEdBQ0RDLDJCQUEyQjtRQUN2QnJCLHNCQUFzQnNCLFVBQVUsR0FDNUIsSUFBSSxDQUFDUixpQ0FBaUMsQ0FBQ2xCLG9GQUFhQSxDQUFDMkIsdUJBQXVCLE1BQ3RFekIsNEVBQTBCQSxDQUFDMEIsY0FBYyxHQUN6QyxJQUFJLENBQUNWLGlDQUFpQyxDQUFDdEIsOEVBQVVBLENBQUMrQix1QkFBdUIsTUFDckV6Qiw0RUFBMEJBLENBQUMyQixXQUFXLEdBQ3RDLElBQUksQ0FBQ1gsaUNBQWlDLENBQUNwQiw4RUFBVUEsQ0FBQzZCLHVCQUF1QixNQUNyRXpCLDRFQUEwQkEsQ0FBQzRCLFdBQVcsR0FDdEMsSUFBSSxDQUFDWixpQ0FBaUMsQ0FBQ3JCLDBFQUFRQSxDQUFDOEIsdUJBQXVCLE1BQ25FekIsNEVBQTBCQSxDQUFDNkIsU0FBUyxHQUNwQzdCLDRFQUEwQkEsQ0FBQzhCLGVBQWU7UUFDaEUsT0FBTzVCLHNCQUFzQnNCLFVBQVU7SUFDM0M7SUFDQTs7O0tBR0MsR0FDRFYsNEJBQTRCVixNQUFNLEVBQUVDLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxjQUFjLEVBQUVHLGlCQUFpQixFQUFFO1FBQy9GLE1BQU1xQixTQUFTakMsb0ZBQWFBLENBQUNrQyxTQUFTLENBQUM1QixRQUFRQyxhQUFhQyxlQUFlQyxnQkFBZ0JHLHNCQUN2RmhCLDhFQUFVQSxDQUFDc0MsU0FBUyxDQUFDNUIsUUFBUUMsYUFBYUMsZUFBZUMsbUJBQ3pEWCw4RUFBVUEsQ0FBQ29DLFNBQVMsQ0FBQzVCLFFBQVFDLGFBQWFDLGVBQWVDLGdCQUFnQkcsc0JBQ3pFZiwwRUFBUUEsQ0FBQ3FDLFNBQVMsQ0FBQzVCLFFBQVFDLGFBQWFDLGVBQWVDLGdCQUFnQkcsc0JBQ3ZFYixrRUFBSUEsQ0FBQ21DLFNBQVMsQ0FBQzVCLFFBQVFDLGFBQWFDLGVBQWVDO1FBQ3ZELElBQUksQ0FBQ3dCLFFBQVE7WUFDVCxNQUFNaEMsMkZBQTBCQSxDQUFDRSxzRkFBb0JBO1FBQ3pEO1FBQ0EsT0FBTzhCO0lBQ1g7QUFDSjtBQUVpQyxDQUNqQyxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1ub2RlL2Rpc3QvY2xpZW50L01hbmFnZWRJZGVudGl0eUNsaWVudC5tanM/YjBhMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtbm9kZSB2Mi4xNi4yIDIwMjQtMTEtMTkgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEFwcFNlcnZpY2UgfSBmcm9tICcuL01hbmFnZWRJZGVudGl0eVNvdXJjZXMvQXBwU2VydmljZS5tanMnO1xuaW1wb3J0IHsgQXp1cmVBcmMgfSBmcm9tICcuL01hbmFnZWRJZGVudGl0eVNvdXJjZXMvQXp1cmVBcmMubWpzJztcbmltcG9ydCB7IENsb3VkU2hlbGwgfSBmcm9tICcuL01hbmFnZWRJZGVudGl0eVNvdXJjZXMvQ2xvdWRTaGVsbC5tanMnO1xuaW1wb3J0IHsgSW1kcyB9IGZyb20gJy4vTWFuYWdlZElkZW50aXR5U291cmNlcy9JbWRzLm1qcyc7XG5pbXBvcnQgeyBTZXJ2aWNlRmFicmljIH0gZnJvbSAnLi9NYW5hZ2VkSWRlbnRpdHlTb3VyY2VzL1NlcnZpY2VGYWJyaWMubWpzJztcbmltcG9ydCB7IGNyZWF0ZU1hbmFnZWRJZGVudGl0eUVycm9yIH0gZnJvbSAnLi4vZXJyb3IvTWFuYWdlZElkZW50aXR5RXJyb3IubWpzJztcbmltcG9ydCB7IE1hbmFnZWRJZGVudGl0eVNvdXJjZU5hbWVzIH0gZnJvbSAnLi4vdXRpbHMvQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyB1bmFibGVUb0NyZWF0ZVNvdXJjZSB9IGZyb20gJy4uL2Vycm9yL01hbmFnZWRJZGVudGl0eUVycm9yQ29kZXMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qXHJcbiAqIENsYXNzIHRvIGluaXRpYWxpemUgYSBtYW5hZ2VkIGlkZW50aXR5IGFuZCBpZGVudGlmeSB0aGUgc2VydmljZS5cclxuICogT3JpZ2luYWwgc291cmNlIG9mIGNvZGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZS9henVyZS1zZGstZm9yLW5ldC9ibG9iL21haW4vc2RrL2lkZW50aXR5L0F6dXJlLklkZW50aXR5L3NyYy9NYW5hZ2VkSWRlbnRpdHlDbGllbnQuY3NcclxuICovXHJcbmNsYXNzIE1hbmFnZWRJZGVudGl0eUNsaWVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihsb2dnZXIsIG5vZGVTdG9yYWdlLCBuZXR3b3JrQ2xpZW50LCBjcnlwdG9Qcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgICAgIHRoaXMubm9kZVN0b3JhZ2UgPSBub2RlU3RvcmFnZTtcclxuICAgICAgICB0aGlzLm5ldHdvcmtDbGllbnQgPSBuZXR3b3JrQ2xpZW50O1xyXG4gICAgICAgIHRoaXMuY3J5cHRvUHJvdmlkZXIgPSBjcnlwdG9Qcm92aWRlcjtcclxuICAgIH1cclxuICAgIGFzeW5jIHNlbmRNYW5hZ2VkSWRlbnRpdHlUb2tlblJlcXVlc3QobWFuYWdlZElkZW50aXR5UmVxdWVzdCwgbWFuYWdlZElkZW50aXR5SWQsIGZha2VBdXRob3JpdHksIHJlZnJlc2hBY2Nlc3NUb2tlbikge1xyXG4gICAgICAgIGlmICghTWFuYWdlZElkZW50aXR5Q2xpZW50LmlkZW50aXR5U291cmNlKSB7XHJcbiAgICAgICAgICAgIE1hbmFnZWRJZGVudGl0eUNsaWVudC5pZGVudGl0eVNvdXJjZSA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdE1hbmFnZWRJZGVudGl0eVNvdXJjZSh0aGlzLmxvZ2dlciwgdGhpcy5ub2RlU3RvcmFnZSwgdGhpcy5uZXR3b3JrQ2xpZW50LCB0aGlzLmNyeXB0b1Byb3ZpZGVyLCBtYW5hZ2VkSWRlbnRpdHlJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBNYW5hZ2VkSWRlbnRpdHlDbGllbnQuaWRlbnRpdHlTb3VyY2UuYWNxdWlyZVRva2VuV2l0aE1hbmFnZWRJZGVudGl0eShtYW5hZ2VkSWRlbnRpdHlSZXF1ZXN0LCBtYW5hZ2VkSWRlbnRpdHlJZCwgZmFrZUF1dGhvcml0eSwgcmVmcmVzaEFjY2Vzc1Rva2VuKTtcclxuICAgIH1cclxuICAgIGFsbEVudmlyb25tZW50VmFyaWFibGVzQXJlRGVmaW5lZChlbnZpcm9ubWVudFZhcmlhYmxlcykge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKGVudmlyb25tZW50VmFyaWFibGVzKS5ldmVyeSgoZW52aXJvbm1lbnRWYXJpYWJsZSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gZW52aXJvbm1lbnRWYXJpYWJsZSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgdGhlIE1hbmFnZWQgSWRlbnRpdHkgU291cmNlIGJhc2VkIG9uIGF2YWlsYWJsZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMuIFRoaXMgQVBJIGlzIGNvbnN1bWVkIGJ5IE1hbmFnZWRJZGVudGl0eUFwcGxpY2F0aW9uJ3MgZ2V0TWFuYWdlZElkZW50aXR5U291cmNlLlxyXG4gICAgICogQHJldHVybnMgTWFuYWdlZElkZW50aXR5U291cmNlTmFtZXMgLSBUaGUgTWFuYWdlZCBJZGVudGl0eSBzb3VyY2UncyBuYW1lXHJcbiAgICAgKi9cclxuICAgIGdldE1hbmFnZWRJZGVudGl0eVNvdXJjZSgpIHtcclxuICAgICAgICBNYW5hZ2VkSWRlbnRpdHlDbGllbnQuc291cmNlTmFtZSA9XHJcbiAgICAgICAgICAgIHRoaXMuYWxsRW52aXJvbm1lbnRWYXJpYWJsZXNBcmVEZWZpbmVkKFNlcnZpY2VGYWJyaWMuZ2V0RW52aXJvbm1lbnRWYXJpYWJsZXMoKSlcclxuICAgICAgICAgICAgICAgID8gTWFuYWdlZElkZW50aXR5U291cmNlTmFtZXMuU0VSVklDRV9GQUJSSUNcclxuICAgICAgICAgICAgICAgIDogdGhpcy5hbGxFbnZpcm9ubWVudFZhcmlhYmxlc0FyZURlZmluZWQoQXBwU2VydmljZS5nZXRFbnZpcm9ubWVudFZhcmlhYmxlcygpKVxyXG4gICAgICAgICAgICAgICAgICAgID8gTWFuYWdlZElkZW50aXR5U291cmNlTmFtZXMuQVBQX1NFUlZJQ0VcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuYWxsRW52aXJvbm1lbnRWYXJpYWJsZXNBcmVEZWZpbmVkKENsb3VkU2hlbGwuZ2V0RW52aXJvbm1lbnRWYXJpYWJsZXMoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBNYW5hZ2VkSWRlbnRpdHlTb3VyY2VOYW1lcy5DTE9VRF9TSEVMTFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuYWxsRW52aXJvbm1lbnRWYXJpYWJsZXNBcmVEZWZpbmVkKEF6dXJlQXJjLmdldEVudmlyb25tZW50VmFyaWFibGVzKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IE1hbmFnZWRJZGVudGl0eVNvdXJjZU5hbWVzLkFaVVJFX0FSQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBNYW5hZ2VkSWRlbnRpdHlTb3VyY2VOYW1lcy5ERUZBVUxUX1RPX0lNRFM7XHJcbiAgICAgICAgcmV0dXJuIE1hbmFnZWRJZGVudGl0eUNsaWVudC5zb3VyY2VOYW1lO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmllcyB0byBjcmVhdGUgYSBtYW5hZ2VkIGlkZW50aXR5IHNvdXJjZSBmb3IgYWxsIHNvdXJjZXNcclxuICAgICAqIEByZXR1cm5zIHRoZSBtYW5hZ2VkIGlkZW50aXR5IFNvdXJjZVxyXG4gICAgICovXHJcbiAgICBzZWxlY3RNYW5hZ2VkSWRlbnRpdHlTb3VyY2UobG9nZ2VyLCBub2RlU3RvcmFnZSwgbmV0d29ya0NsaWVudCwgY3J5cHRvUHJvdmlkZXIsIG1hbmFnZWRJZGVudGl0eUlkKSB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gU2VydmljZUZhYnJpYy50cnlDcmVhdGUobG9nZ2VyLCBub2RlU3RvcmFnZSwgbmV0d29ya0NsaWVudCwgY3J5cHRvUHJvdmlkZXIsIG1hbmFnZWRJZGVudGl0eUlkKSB8fFxyXG4gICAgICAgICAgICBBcHBTZXJ2aWNlLnRyeUNyZWF0ZShsb2dnZXIsIG5vZGVTdG9yYWdlLCBuZXR3b3JrQ2xpZW50LCBjcnlwdG9Qcm92aWRlcikgfHxcclxuICAgICAgICAgICAgQ2xvdWRTaGVsbC50cnlDcmVhdGUobG9nZ2VyLCBub2RlU3RvcmFnZSwgbmV0d29ya0NsaWVudCwgY3J5cHRvUHJvdmlkZXIsIG1hbmFnZWRJZGVudGl0eUlkKSB8fFxyXG4gICAgICAgICAgICBBenVyZUFyYy50cnlDcmVhdGUobG9nZ2VyLCBub2RlU3RvcmFnZSwgbmV0d29ya0NsaWVudCwgY3J5cHRvUHJvdmlkZXIsIG1hbmFnZWRJZGVudGl0eUlkKSB8fFxyXG4gICAgICAgICAgICBJbWRzLnRyeUNyZWF0ZShsb2dnZXIsIG5vZGVTdG9yYWdlLCBuZXR3b3JrQ2xpZW50LCBjcnlwdG9Qcm92aWRlcik7XHJcbiAgICAgICAgaWYgKCFzb3VyY2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlTWFuYWdlZElkZW50aXR5RXJyb3IodW5hYmxlVG9DcmVhdGVTb3VyY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IE1hbmFnZWRJZGVudGl0eUNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFuYWdlZElkZW50aXR5Q2xpZW50Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBcHBTZXJ2aWNlIiwiQXp1cmVBcmMiLCJDbG91ZFNoZWxsIiwiSW1kcyIsIlNlcnZpY2VGYWJyaWMiLCJjcmVhdGVNYW5hZ2VkSWRlbnRpdHlFcnJvciIsIk1hbmFnZWRJZGVudGl0eVNvdXJjZU5hbWVzIiwidW5hYmxlVG9DcmVhdGVTb3VyY2UiLCJNYW5hZ2VkSWRlbnRpdHlDbGllbnQiLCJjb25zdHJ1Y3RvciIsImxvZ2dlciIsIm5vZGVTdG9yYWdlIiwibmV0d29ya0NsaWVudCIsImNyeXB0b1Byb3ZpZGVyIiwic2VuZE1hbmFnZWRJZGVudGl0eVRva2VuUmVxdWVzdCIsIm1hbmFnZWRJZGVudGl0eVJlcXVlc3QiLCJtYW5hZ2VkSWRlbnRpdHlJZCIsImZha2VBdXRob3JpdHkiLCJyZWZyZXNoQWNjZXNzVG9rZW4iLCJpZGVudGl0eVNvdXJjZSIsInNlbGVjdE1hbmFnZWRJZGVudGl0eVNvdXJjZSIsImFjcXVpcmVUb2tlbldpdGhNYW5hZ2VkSWRlbnRpdHkiLCJhbGxFbnZpcm9ubWVudFZhcmlhYmxlc0FyZURlZmluZWQiLCJlbnZpcm9ubWVudFZhcmlhYmxlcyIsIk9iamVjdCIsInZhbHVlcyIsImV2ZXJ5IiwiZW52aXJvbm1lbnRWYXJpYWJsZSIsInVuZGVmaW5lZCIsImdldE1hbmFnZWRJZGVudGl0eVNvdXJjZSIsInNvdXJjZU5hbWUiLCJnZXRFbnZpcm9ubWVudFZhcmlhYmxlcyIsIlNFUlZJQ0VfRkFCUklDIiwiQVBQX1NFUlZJQ0UiLCJDTE9VRF9TSEVMTCIsIkFaVVJFX0FSQyIsIkRFRkFVTFRfVE9fSU1EUyIsInNvdXJjZSIsInRyeUNyZWF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentityClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/AppService.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/AppService.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppService: () => (/* binding */ AppService)\n/* harmony export */ });\n/* harmony import */ var _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseManagedIdentitySource.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/BaseManagedIdentitySource.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../config/ManagedIdentityRequestParameters.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityRequestParameters.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // MSI Constants. Docs for MSI are available here https://docs.microsoft.com/azure/app-service/overview-managed-identity\nconst APP_SERVICE_MSI_API_VERSION = \"2019-08-01\";\n/**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/AppServiceManagedIdentitySource.cs\r\n */ class AppService extends _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_0__.BaseManagedIdentitySource {\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, identityEndpoint, identityHeader){\n        super(logger, nodeStorage, networkClient, cryptoProvider);\n        this.identityEndpoint = identityEndpoint;\n        this.identityHeader = identityHeader;\n    }\n    static getEnvironmentVariables() {\n        const identityEndpoint = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT];\n        const identityHeader = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.IDENTITY_HEADER];\n        return [\n            identityEndpoint,\n            identityHeader\n        ];\n    }\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider) {\n        const [identityEndpoint, identityHeader] = AppService.getEnvironmentVariables();\n        // if either of the identity endpoint or identity header variables are undefined, this MSI provider is unavailable.\n        if (!identityEndpoint || !identityHeader) {\n            logger.info(`[Managed Identity] ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentitySourceNames.APP_SERVICE} managed identity is unavailable because one or both of the '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.IDENTITY_HEADER}' and '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT}' environment variables are not defined.`);\n            return null;\n        }\n        const validatedIdentityEndpoint = AppService.getValidatedEnvVariableUrlString(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT, identityEndpoint, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentitySourceNames.APP_SERVICE, logger);\n        logger.info(`[Managed Identity] Environment variables validation passed for ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentitySourceNames.APP_SERVICE} managed identity. Endpoint URI: ${validatedIdentityEndpoint}. Creating ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentitySourceNames.APP_SERVICE} managed identity.`);\n        return new AppService(logger, nodeStorage, networkClient, cryptoProvider, identityEndpoint, identityHeader);\n    }\n    createRequest(resource, managedIdentityId) {\n        const request = new _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityRequestParameters(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.HttpMethod.GET, this.identityEndpoint);\n        request.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.APP_SERVICE_SECRET_HEADER_NAME] = this.identityHeader;\n        request.queryParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.API_VERSION_QUERY_PARAMETER_NAME] = APP_SERVICE_MSI_API_VERSION;\n        request.queryParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.RESOURCE_BODY_OR_QUERY_PARAMETER_NAME] = resource;\n        if (managedIdentityId.idType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityIdType.SYSTEM_ASSIGNED) {\n            request.queryParameters[this.getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityId.idType)] = managedIdentityId.id;\n        }\n        // bodyParameters calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity\n        return request;\n    }\n}\n //# sourceMappingURL=AppService.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/AppService.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/AzureArc.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/AzureArc.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARC_API_VERSION: () => (/* binding */ ARC_API_VERSION),\n/* harmony export */   AZURE_ARC_FILE_DETECTION: () => (/* binding */ AZURE_ARC_FILE_DETECTION),\n/* harmony export */   AzureArc: () => (/* binding */ AzureArc),\n/* harmony export */   DEFAULT_AZURE_ARC_IDENTITY_ENDPOINT: () => (/* binding */ DEFAULT_AZURE_ARC_IDENTITY_ENDPOINT),\n/* harmony export */   SUPPORTED_AZURE_ARC_PLATFORMS: () => (/* binding */ SUPPORTED_AZURE_ARC_PLATFORMS)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/ManagedIdentityRequestParameters.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityRequestParameters.mjs\");\n/* harmony import */ var _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseManagedIdentitySource.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/BaseManagedIdentitySource.mjs\");\n/* harmony import */ var _error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/ManagedIdentityError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var _error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../error/ManagedIdentityErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const ARC_API_VERSION = \"2019-11-01\";\nconst DEFAULT_AZURE_ARC_IDENTITY_ENDPOINT = \"http://127.0.0.1:40342/metadata/identity/oauth2/token\";\nconst HIMDS_EXECUTABLE_HELPER_STRING = \"N/A: himds executable exists\";\nconst SUPPORTED_AZURE_ARC_PLATFORMS = {\n    win32: `${process.env[\"ProgramData\"]}\\\\AzureConnectedMachineAgent\\\\Tokens\\\\`,\n    linux: \"/var/opt/azcmagent/tokens/\"\n};\nconst AZURE_ARC_FILE_DETECTION = {\n    win32: `${process.env[\"ProgramFiles\"]}\\\\AzureConnectedMachineAgent\\\\himds.exe`,\n    linux: \"/opt/azcmagent/bin/himds\"\n};\n/**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/AzureArcManagedIdentitySource.cs\r\n */ class AzureArc extends _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_1__.BaseManagedIdentitySource {\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, identityEndpoint){\n        super(logger, nodeStorage, networkClient, cryptoProvider);\n        this.identityEndpoint = identityEndpoint;\n    }\n    static getEnvironmentVariables() {\n        let identityEndpoint = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT];\n        let imdsEndpoint = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT];\n        // if either of the identity or imds endpoints are undefined, check if the himds executable exists\n        if (!identityEndpoint || !imdsEndpoint) {\n            // get the expected Windows or Linux file path of the himds executable\n            const fileDetectionPath = AZURE_ARC_FILE_DETECTION[process.platform];\n            try {\n                /*\r\n                 * check if the himds executable exists and its permissions allow it to be read\r\n                 * returns undefined if true, throws an error otherwise\r\n                 */ (0,fs__WEBPACK_IMPORTED_MODULE_4__.accessSync)(fileDetectionPath, fs__WEBPACK_IMPORTED_MODULE_4__.constants.F_OK | fs__WEBPACK_IMPORTED_MODULE_4__.constants.R_OK);\n                identityEndpoint = DEFAULT_AZURE_ARC_IDENTITY_ENDPOINT;\n                imdsEndpoint = HIMDS_EXECUTABLE_HELPER_STRING;\n            } catch (err) {\n            /*\r\n                 * do nothing\r\n                 * accessSync returns undefined on success, and throws an error on failure\r\n                 */ }\n        }\n        return [\n            identityEndpoint,\n            imdsEndpoint\n        ];\n    }\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, managedIdentityId) {\n        const [identityEndpoint, imdsEndpoint] = AzureArc.getEnvironmentVariables();\n        // if either of the identity or imds endpoints are undefined (even after himds file detection)\n        if (!identityEndpoint || !imdsEndpoint) {\n            logger.info(`[Managed Identity] ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC} managed identity is unavailable through environment variables because one or both of '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT}' and '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT}' are not defined. ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC} managed identity is also unavailable through file detection.`);\n            return null;\n        }\n        // check if the imds endpoint is set to the default for file detection\n        if (imdsEndpoint === HIMDS_EXECUTABLE_HELPER_STRING) {\n            logger.info(`[Managed Identity] ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC} managed identity is available through file detection. Defaulting to known ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC} endpoint: ${DEFAULT_AZURE_ARC_IDENTITY_ENDPOINT}. Creating ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC} managed identity.`);\n        } else {\n            // otherwise, both the identity and imds endpoints are defined without file detection; validate them\n            const validatedIdentityEndpoint = AzureArc.getValidatedEnvVariableUrlString(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT, identityEndpoint, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC, logger);\n            // remove trailing slash\n            validatedIdentityEndpoint.endsWith(\"/\") ? validatedIdentityEndpoint.slice(0, -1) : validatedIdentityEndpoint;\n            AzureArc.getValidatedEnvVariableUrlString(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT, imdsEndpoint, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC, logger);\n            logger.info(`[Managed Identity] Environment variables validation passed for ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC} managed identity. Endpoint URI: ${validatedIdentityEndpoint}. Creating ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentitySourceNames.AZURE_ARC} managed identity.`);\n        }\n        if (managedIdentityId.idType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.ManagedIdentityIdType.SYSTEM_ASSIGNED) {\n            throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.unableToCreateAzureArc);\n        }\n        return new AzureArc(logger, nodeStorage, networkClient, cryptoProvider, identityEndpoint);\n    }\n    createRequest(resource) {\n        const request = new _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityRequestParameters(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.HttpMethod.GET, this.identityEndpoint.replace(\"localhost\", \"127.0.0.1\"));\n        request.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.METADATA_HEADER_NAME] = \"true\";\n        request.queryParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.API_VERSION_QUERY_PARAMETER_NAME] = ARC_API_VERSION;\n        request.queryParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.RESOURCE_BODY_OR_QUERY_PARAMETER_NAME] = resource;\n        // bodyParameters calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity\n        return request;\n    }\n    async getServerTokenResponseAsync(originalResponse, networkClient, networkRequest, networkRequestOptions) {\n        let retryResponse;\n        if (originalResponse.status === _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.HttpStatus.UNAUTHORIZED) {\n            const wwwAuthHeader = originalResponse.headers[\"www-authenticate\"];\n            if (!wwwAuthHeader) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.wwwAuthenticateHeaderMissing);\n            }\n            if (!wwwAuthHeader.includes(\"Basic realm=\")) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.wwwAuthenticateHeaderUnsupportedFormat);\n            }\n            const secretFilePath = wwwAuthHeader.split(\"Basic realm=\")[1];\n            // throw an error if the managed identity application is not being run on Windows or Linux\n            if (!SUPPORTED_AZURE_ARC_PLATFORMS.hasOwnProperty(process.platform)) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.platformNotSupported);\n            }\n            // get the expected Windows or Linux file path\n            const expectedSecretFilePath = SUPPORTED_AZURE_ARC_PLATFORMS[process.platform];\n            // throw an error if the file in the file path is not a .key file\n            const fileName = path__WEBPACK_IMPORTED_MODULE_5__.basename(secretFilePath);\n            if (!fileName.endsWith(\".key\")) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.invalidFileExtension);\n            }\n            /*\r\n             * throw an error if the file path from the www-authenticate header does not match the\r\n             * expected file path for the platform (Windows or Linux) the managed identity application\r\n             * is running on\r\n             */ if (expectedSecretFilePath + fileName !== secretFilePath) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.invalidFilePath);\n            }\n            let secretFileSize;\n            // attempt to get the secret file's size, in bytes\n            try {\n                secretFileSize = await (0,fs__WEBPACK_IMPORTED_MODULE_4__.statSync)(secretFilePath).size;\n            } catch (e) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.unableToReadSecretFile);\n            }\n            // throw an error if the secret file's size is greater than 4096 bytes\n            if (secretFileSize > _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.AZURE_ARC_SECRET_FILE_MAX_SIZE_BYTES) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.invalidSecret);\n            }\n            // attempt to read the contents of the secret file\n            let secret;\n            try {\n                secret = (0,fs__WEBPACK_IMPORTED_MODULE_4__.readFileSync)(secretFilePath, \"utf-8\");\n            } catch (e) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_2__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_6__.unableToReadSecretFile);\n            }\n            const authHeaderValue = `Basic ${secret}`;\n            this.logger.info(`[Managed Identity] Adding authorization header to the request.`);\n            networkRequest.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_3__.AUTHORIZATION_HEADER_NAME] = authHeaderValue;\n            try {\n                retryResponse = await networkClient.sendGetRequestAsync(networkRequest.computeUri(), networkRequestOptions);\n            } catch (error) {\n                if (error instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.AuthError) {\n                    throw error;\n                } else {\n                    throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.networkError);\n                }\n            }\n        }\n        return this.getServerTokenResponse(retryResponse || originalResponse);\n    }\n}\n //# sourceMappingURL=AzureArc.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/AzureArc.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/BaseManagedIdentitySource.mjs":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/BaseManagedIdentitySource.mjs ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseManagedIdentitySource: () => (/* binding */ BaseManagedIdentitySource),\n/* harmony export */   ManagedIdentityUserAssignedIdQueryParameterNames: () => (/* binding */ ManagedIdentityUserAssignedIdQueryParameterNames)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../error/ManagedIdentityError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityError.mjs\");\n/* harmony import */ var _error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../error/ManagedIdentityErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Managed Identity User Assigned Id Query Parameter Names\r\n */ const ManagedIdentityUserAssignedIdQueryParameterNames = {\n    MANAGED_IDENTITY_CLIENT_ID: \"client_id\",\n    MANAGED_IDENTITY_OBJECT_ID: \"object_id\",\n    MANAGED_IDENTITY_RESOURCE_ID: \"mi_res_id\"\n};\nclass BaseManagedIdentitySource {\n    constructor(logger, nodeStorage, networkClient, cryptoProvider){\n        this.logger = logger;\n        this.nodeStorage = nodeStorage;\n        this.networkClient = networkClient;\n        this.cryptoProvider = cryptoProvider;\n    }\n    async getServerTokenResponseAsync(response, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _networkClient, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _networkRequest, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _networkRequestOptions) {\n        return this.getServerTokenResponse(response);\n    }\n    getServerTokenResponse(response) {\n        let refreshIn, expiresIn;\n        if (response.body.expires_on) {\n            expiresIn = response.body.expires_on - _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.nowSeconds();\n            // compute refresh_in as 1/2 of expires_in, but only if expires_in > 2h\n            if (expiresIn > 2 * 3600) {\n                refreshIn = expiresIn / 2;\n            }\n        }\n        const serverTokenResponse = {\n            status: response.status,\n            // success\n            access_token: response.body.access_token,\n            expires_in: expiresIn,\n            scope: response.body.resource,\n            token_type: response.body.token_type,\n            refresh_in: refreshIn,\n            // error\n            correlation_id: response.body.correlation_id || response.body.correlationId,\n            error: typeof response.body.error === \"string\" ? response.body.error : response.body.error?.code,\n            error_description: response.body.message || (typeof response.body.error === \"string\" ? response.body.error_description : response.body.error?.message),\n            error_codes: response.body.error_codes,\n            timestamp: response.body.timestamp,\n            trace_id: response.body.trace_id\n        };\n        return serverTokenResponse;\n    }\n    async acquireTokenWithManagedIdentity(managedIdentityRequest, managedIdentityId, fakeAuthority, refreshAccessToken) {\n        const networkRequest = this.createRequest(managedIdentityRequest.resource, managedIdentityId);\n        const headers = networkRequest.headers;\n        headers[_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HeaderNames.CONTENT_TYPE] = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.Constants.URL_FORM_CONTENT_TYPE;\n        const networkRequestOptions = {\n            headers\n        };\n        if (Object.keys(networkRequest.bodyParameters).length) {\n            networkRequestOptions.body = networkRequest.computeParametersBodyString();\n        }\n        const reqTimestamp = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.nowSeconds();\n        let response;\n        try {\n            // Sources that send POST requests: Cloud Shell\n            if (networkRequest.httpMethod === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.POST) {\n                response = await this.networkClient.sendPostRequestAsync(networkRequest.computeUri(), networkRequestOptions);\n            // Sources that send GET requests: App Service, Azure Arc, IMDS, Service Fabric\n            } else {\n                response = await this.networkClient.sendGetRequestAsync(networkRequest.computeUri(), networkRequestOptions);\n            }\n        } catch (error) {\n            if (error instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.AuthError) {\n                throw error;\n            } else {\n                throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.networkError);\n            }\n        }\n        const responseHandler = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler(managedIdentityId.id, this.nodeStorage, this.cryptoProvider, this.logger, null, null);\n        const serverTokenResponse = await this.getServerTokenResponseAsync(response, this.networkClient, networkRequest, networkRequestOptions);\n        responseHandler.validateTokenResponse(serverTokenResponse, refreshAccessToken);\n        // caches the token\n        return responseHandler.handleServerTokenResponse(serverTokenResponse, fakeAuthority, reqTimestamp, managedIdentityRequest);\n    }\n    getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityIdType) {\n        switch(managedIdentityIdType){\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityIdType.USER_ASSIGNED_CLIENT_ID:\n                this.logger.info(\"[Managed Identity] Adding user assigned client id to the request.\");\n                return ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_CLIENT_ID;\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityIdType.USER_ASSIGNED_RESOURCE_ID:\n                this.logger.info(\"[Managed Identity] Adding user assigned resource id to the request.\");\n                return ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_RESOURCE_ID;\n            case _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityIdType.USER_ASSIGNED_OBJECT_ID:\n                this.logger.info(\"[Managed Identity] Adding user assigned object id to the request.\");\n                return ManagedIdentityUserAssignedIdQueryParameterNames.MANAGED_IDENTITY_OBJECT_ID;\n            default:\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_1__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidManagedIdentityIdType);\n        }\n    }\n}\nBaseManagedIdentitySource.getValidatedEnvVariableUrlString = (envVariableStringName, envVariable, sourceName, logger)=>{\n    try {\n        return new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.UrlString(envVariable).urlString;\n    } catch (error) {\n        logger.info(`[Managed Identity] ${sourceName} managed identity is unavailable because the '${envVariableStringName}' environment variable is malformed.`);\n        throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_1__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.MsiEnvironmentVariableUrlMalformedErrorCodes[envVariableStringName]);\n    }\n};\n //# sourceMappingURL=BaseManagedIdentitySource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/BaseManagedIdentitySource.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/CloudShell.mjs":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/CloudShell.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CloudShell: () => (/* binding */ CloudShell)\n/* harmony export */ });\n/* harmony import */ var _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/ManagedIdentityRequestParameters.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityRequestParameters.mjs\");\n/* harmony import */ var _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseManagedIdentitySource.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/BaseManagedIdentitySource.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../error/ManagedIdentityError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityError.mjs\");\n/* harmony import */ var _error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../error/ManagedIdentityErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/CloudShellManagedIdentitySource.cs\r\n */ class CloudShell extends _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_1__.BaseManagedIdentitySource {\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, msiEndpoint){\n        super(logger, nodeStorage, networkClient, cryptoProvider);\n        this.msiEndpoint = msiEndpoint;\n    }\n    static getEnvironmentVariables() {\n        const msiEndpoint = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT];\n        return [\n            msiEndpoint\n        ];\n    }\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, managedIdentityId) {\n        const [msiEndpoint] = CloudShell.getEnvironmentVariables();\n        // if the msi endpoint environment variable is undefined, this MSI provider is unavailable.\n        if (!msiEndpoint) {\n            logger.info(`[Managed Identity] ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.CLOUD_SHELL} managed identity is unavailable because the '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT} environment variable is not defined.`);\n            return null;\n        }\n        const validatedMsiEndpoint = CloudShell.getValidatedEnvVariableUrlString(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT, msiEndpoint, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.CLOUD_SHELL, logger);\n        logger.info(`[Managed Identity] Environment variable validation passed for ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.CLOUD_SHELL} managed identity. Endpoint URI: ${validatedMsiEndpoint}. Creating ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.CLOUD_SHELL} managed identity.`);\n        if (managedIdentityId.idType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityIdType.SYSTEM_ASSIGNED) {\n            throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_3__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_4__.unableToCreateCloudShell);\n        }\n        return new CloudShell(logger, nodeStorage, networkClient, cryptoProvider, msiEndpoint);\n    }\n    createRequest(resource) {\n        const request = new _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityRequestParameters(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.HttpMethod.POST, this.msiEndpoint);\n        request.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.METADATA_HEADER_NAME] = \"true\";\n        request.bodyParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RESOURCE_BODY_OR_QUERY_PARAMETER_NAME] = resource;\n        return request;\n    }\n}\n //# sourceMappingURL=CloudShell.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NsaWVudC9NYW5hZ2VkSWRlbnRpdHlTb3VyY2VzL0Nsb3VkU2hlbGwubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUNxRztBQUN6QjtBQUNvSTtBQUM5SDtBQUNHO0FBRXJGOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTVUsbUJBQW1CVCxxRkFBeUJBO0lBQzlDVSxZQUFZQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsYUFBYSxFQUFFQyxjQUFjLEVBQUVDLFdBQVcsQ0FBRTtRQUN6RSxLQUFLLENBQUNKLFFBQVFDLGFBQWFDLGVBQWVDO1FBQzFDLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtJQUN2QjtJQUNBLE9BQU9DLDBCQUEwQjtRQUM3QixNQUFNRCxjQUFjRSxRQUFRQyxHQUFHLENBQUNqQix5RkFBdUNBLENBQUNrQixZQUFZLENBQUM7UUFDckYsT0FBTztZQUFDSjtTQUFZO0lBQ3hCO0lBQ0EsT0FBT0ssVUFBVVQsTUFBTSxFQUFFQyxXQUFXLEVBQUVDLGFBQWEsRUFBRUMsY0FBYyxFQUFFTyxpQkFBaUIsRUFBRTtRQUNwRixNQUFNLENBQUNOLFlBQVksR0FBR04sV0FBV08sdUJBQXVCO1FBQ3hELDJGQUEyRjtRQUMzRixJQUFJLENBQUNELGFBQWE7WUFDZEosT0FBT1csSUFBSSxDQUFDLENBQUMsbUJBQW1CLEVBQUVwQiw0RUFBMEJBLENBQUNxQixXQUFXLENBQUMsOENBQThDLEVBQUV0Qix5RkFBdUNBLENBQUNrQixZQUFZLENBQUMscUNBQXFDLENBQUM7WUFDcE4sT0FBTztRQUNYO1FBQ0EsTUFBTUssdUJBQXVCZixXQUFXZ0IsZ0NBQWdDLENBQUN4Qix5RkFBdUNBLENBQUNrQixZQUFZLEVBQUVKLGFBQWFiLDRFQUEwQkEsQ0FBQ3FCLFdBQVcsRUFBRVo7UUFDcExBLE9BQU9XLElBQUksQ0FBQyxDQUFDLDhEQUE4RCxFQUFFcEIsNEVBQTBCQSxDQUFDcUIsV0FBVyxDQUFDLGlDQUFpQyxFQUFFQyxxQkFBcUIsV0FBVyxFQUFFdEIsNEVBQTBCQSxDQUFDcUIsV0FBVyxDQUFDLGtCQUFrQixDQUFDO1FBQ25QLElBQUlGLGtCQUFrQkssTUFBTSxLQUFLdkIsdUVBQXFCQSxDQUFDd0IsZUFBZSxFQUFFO1lBQ3BFLE1BQU1wQiwyRkFBMEJBLENBQUNDLDBGQUF3QkE7UUFDN0Q7UUFDQSxPQUFPLElBQUlDLFdBQVdFLFFBQVFDLGFBQWFDLGVBQWVDLGdCQUFnQkM7SUFDOUU7SUFDQWEsY0FBY0MsUUFBUSxFQUFFO1FBQ3BCLE1BQU1DLFVBQVUsSUFBSS9CLDBHQUFnQ0EsQ0FBQ08sNERBQVVBLENBQUN5QixJQUFJLEVBQUUsSUFBSSxDQUFDaEIsV0FBVztRQUN0RmUsUUFBUUUsT0FBTyxDQUFDNUIsc0VBQW9CQSxDQUFDLEdBQUc7UUFDeEMwQixRQUFRRyxjQUFjLENBQUM1Qix1RkFBcUNBLENBQUMsR0FDekR3QjtRQUNKLE9BQU9DO0lBQ1g7QUFDSjtBQUVzQixDQUN0Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1ub2RlL2Rpc3QvY2xpZW50L01hbmFnZWRJZGVudGl0eVNvdXJjZXMvQ2xvdWRTaGVsbC5tanM/MWIwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtbm9kZSB2Mi4xNi4yIDIwMjQtMTEtMTkgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IE1hbmFnZWRJZGVudGl0eVJlcXVlc3RQYXJhbWV0ZXJzIH0gZnJvbSAnLi4vLi4vY29uZmlnL01hbmFnZWRJZGVudGl0eVJlcXVlc3RQYXJhbWV0ZXJzLm1qcyc7XG5pbXBvcnQgeyBCYXNlTWFuYWdlZElkZW50aXR5U291cmNlIH0gZnJvbSAnLi9CYXNlTWFuYWdlZElkZW50aXR5U291cmNlLm1qcyc7XG5pbXBvcnQgeyBNYW5hZ2VkSWRlbnRpdHlFbnZpcm9ubWVudFZhcmlhYmxlTmFtZXMsIE1hbmFnZWRJZGVudGl0eVNvdXJjZU5hbWVzLCBNYW5hZ2VkSWRlbnRpdHlJZFR5cGUsIE1FVEFEQVRBX0hFQURFUl9OQU1FLCBSRVNPVVJDRV9CT0RZX09SX1FVRVJZX1BBUkFNRVRFUl9OQU1FLCBIdHRwTWV0aG9kIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBjcmVhdGVNYW5hZ2VkSWRlbnRpdHlFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yL01hbmFnZWRJZGVudGl0eUVycm9yLm1qcyc7XG5pbXBvcnQgeyB1bmFibGVUb0NyZWF0ZUNsb3VkU2hlbGwgfSBmcm9tICcuLi8uLi9lcnJvci9NYW5hZ2VkSWRlbnRpdHlFcnJvckNvZGVzLm1qcyc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogT3JpZ2luYWwgc291cmNlIG9mIGNvZGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9BenVyZS9henVyZS1zZGstZm9yLW5ldC9ibG9iL21haW4vc2RrL2lkZW50aXR5L0F6dXJlLklkZW50aXR5L3NyYy9DbG91ZFNoZWxsTWFuYWdlZElkZW50aXR5U291cmNlLmNzXHJcbiAqL1xyXG5jbGFzcyBDbG91ZFNoZWxsIGV4dGVuZHMgQmFzZU1hbmFnZWRJZGVudGl0eVNvdXJjZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihsb2dnZXIsIG5vZGVTdG9yYWdlLCBuZXR3b3JrQ2xpZW50LCBjcnlwdG9Qcm92aWRlciwgbXNpRW5kcG9pbnQpIHtcclxuICAgICAgICBzdXBlcihsb2dnZXIsIG5vZGVTdG9yYWdlLCBuZXR3b3JrQ2xpZW50LCBjcnlwdG9Qcm92aWRlcik7XHJcbiAgICAgICAgdGhpcy5tc2lFbmRwb2ludCA9IG1zaUVuZHBvaW50O1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldEVudmlyb25tZW50VmFyaWFibGVzKCkge1xyXG4gICAgICAgIGNvbnN0IG1zaUVuZHBvaW50ID0gcHJvY2Vzcy5lbnZbTWFuYWdlZElkZW50aXR5RW52aXJvbm1lbnRWYXJpYWJsZU5hbWVzLk1TSV9FTkRQT0lOVF07XHJcbiAgICAgICAgcmV0dXJuIFttc2lFbmRwb2ludF07XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgdHJ5Q3JlYXRlKGxvZ2dlciwgbm9kZVN0b3JhZ2UsIG5ldHdvcmtDbGllbnQsIGNyeXB0b1Byb3ZpZGVyLCBtYW5hZ2VkSWRlbnRpdHlJZCkge1xyXG4gICAgICAgIGNvbnN0IFttc2lFbmRwb2ludF0gPSBDbG91ZFNoZWxsLmdldEVudmlyb25tZW50VmFyaWFibGVzKCk7XHJcbiAgICAgICAgLy8gaWYgdGhlIG1zaSBlbmRwb2ludCBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoaXMgTVNJIHByb3ZpZGVyIGlzIHVuYXZhaWxhYmxlLlxyXG4gICAgICAgIGlmICghbXNpRW5kcG9pbnQpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmluZm8oYFtNYW5hZ2VkIElkZW50aXR5XSAke01hbmFnZWRJZGVudGl0eVNvdXJjZU5hbWVzLkNMT1VEX1NIRUxMfSBtYW5hZ2VkIGlkZW50aXR5IGlzIHVuYXZhaWxhYmxlIGJlY2F1c2UgdGhlICcke01hbmFnZWRJZGVudGl0eUVudmlyb25tZW50VmFyaWFibGVOYW1lcy5NU0lfRU5EUE9JTlR9IGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBkZWZpbmVkLmApO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGVkTXNpRW5kcG9pbnQgPSBDbG91ZFNoZWxsLmdldFZhbGlkYXRlZEVudlZhcmlhYmxlVXJsU3RyaW5nKE1hbmFnZWRJZGVudGl0eUVudmlyb25tZW50VmFyaWFibGVOYW1lcy5NU0lfRU5EUE9JTlQsIG1zaUVuZHBvaW50LCBNYW5hZ2VkSWRlbnRpdHlTb3VyY2VOYW1lcy5DTE9VRF9TSEVMTCwgbG9nZ2VyKTtcclxuICAgICAgICBsb2dnZXIuaW5mbyhgW01hbmFnZWQgSWRlbnRpdHldIEVudmlyb25tZW50IHZhcmlhYmxlIHZhbGlkYXRpb24gcGFzc2VkIGZvciAke01hbmFnZWRJZGVudGl0eVNvdXJjZU5hbWVzLkNMT1VEX1NIRUxMfSBtYW5hZ2VkIGlkZW50aXR5LiBFbmRwb2ludCBVUkk6ICR7dmFsaWRhdGVkTXNpRW5kcG9pbnR9LiBDcmVhdGluZyAke01hbmFnZWRJZGVudGl0eVNvdXJjZU5hbWVzLkNMT1VEX1NIRUxMfSBtYW5hZ2VkIGlkZW50aXR5LmApO1xyXG4gICAgICAgIGlmIChtYW5hZ2VkSWRlbnRpdHlJZC5pZFR5cGUgIT09IE1hbmFnZWRJZGVudGl0eUlkVHlwZS5TWVNURU1fQVNTSUdORUQpIHtcclxuICAgICAgICAgICAgdGhyb3cgY3JlYXRlTWFuYWdlZElkZW50aXR5RXJyb3IodW5hYmxlVG9DcmVhdGVDbG91ZFNoZWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbG91ZFNoZWxsKGxvZ2dlciwgbm9kZVN0b3JhZ2UsIG5ldHdvcmtDbGllbnQsIGNyeXB0b1Byb3ZpZGVyLCBtc2lFbmRwb2ludCk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVSZXF1ZXN0KHJlc291cmNlKSB7XHJcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBNYW5hZ2VkSWRlbnRpdHlSZXF1ZXN0UGFyYW1ldGVycyhIdHRwTWV0aG9kLlBPU1QsIHRoaXMubXNpRW5kcG9pbnQpO1xyXG4gICAgICAgIHJlcXVlc3QuaGVhZGVyc1tNRVRBREFUQV9IRUFERVJfTkFNRV0gPSBcInRydWVcIjtcclxuICAgICAgICByZXF1ZXN0LmJvZHlQYXJhbWV0ZXJzW1JFU09VUkNFX0JPRFlfT1JfUVVFUllfUEFSQU1FVEVSX05BTUVdID1cclxuICAgICAgICAgICAgcmVzb3VyY2U7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgQ2xvdWRTaGVsbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xvdWRTaGVsbC5tanMubWFwXG4iXSwibmFtZXMiOlsiTWFuYWdlZElkZW50aXR5UmVxdWVzdFBhcmFtZXRlcnMiLCJCYXNlTWFuYWdlZElkZW50aXR5U291cmNlIiwiTWFuYWdlZElkZW50aXR5RW52aXJvbm1lbnRWYXJpYWJsZU5hbWVzIiwiTWFuYWdlZElkZW50aXR5U291cmNlTmFtZXMiLCJNYW5hZ2VkSWRlbnRpdHlJZFR5cGUiLCJNRVRBREFUQV9IRUFERVJfTkFNRSIsIlJFU09VUkNFX0JPRFlfT1JfUVVFUllfUEFSQU1FVEVSX05BTUUiLCJIdHRwTWV0aG9kIiwiY3JlYXRlTWFuYWdlZElkZW50aXR5RXJyb3IiLCJ1bmFibGVUb0NyZWF0ZUNsb3VkU2hlbGwiLCJDbG91ZFNoZWxsIiwiY29uc3RydWN0b3IiLCJsb2dnZXIiLCJub2RlU3RvcmFnZSIsIm5ldHdvcmtDbGllbnQiLCJjcnlwdG9Qcm92aWRlciIsIm1zaUVuZHBvaW50IiwiZ2V0RW52aXJvbm1lbnRWYXJpYWJsZXMiLCJwcm9jZXNzIiwiZW52IiwiTVNJX0VORFBPSU5UIiwidHJ5Q3JlYXRlIiwibWFuYWdlZElkZW50aXR5SWQiLCJpbmZvIiwiQ0xPVURfU0hFTEwiLCJ2YWxpZGF0ZWRNc2lFbmRwb2ludCIsImdldFZhbGlkYXRlZEVudlZhcmlhYmxlVXJsU3RyaW5nIiwiaWRUeXBlIiwiU1lTVEVNX0FTU0lHTkVEIiwiY3JlYXRlUmVxdWVzdCIsInJlc291cmNlIiwicmVxdWVzdCIsIlBPU1QiLCJoZWFkZXJzIiwiYm9keVBhcmFtZXRlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/CloudShell.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/Imds.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/Imds.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Imds: () => (/* binding */ Imds)\n/* harmony export */ });\n/* harmony import */ var _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/ManagedIdentityRequestParameters.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityRequestParameters.mjs\");\n/* harmony import */ var _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseManagedIdentitySource.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/BaseManagedIdentitySource.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // IMDS constants. Docs for IMDS are available here https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token#get-a-token-using-http\nconst IMDS_TOKEN_PATH = \"/metadata/identity/oauth2/token\";\nconst DEFAULT_IMDS_ENDPOINT = `http://169.254.169.254${IMDS_TOKEN_PATH}`;\nconst IMDS_API_VERSION = \"2018-02-01\";\n// Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/ImdsManagedIdentitySource.cs\nclass Imds extends _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_1__.BaseManagedIdentitySource {\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, identityEndpoint){\n        super(logger, nodeStorage, networkClient, cryptoProvider);\n        this.identityEndpoint = identityEndpoint;\n    }\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider) {\n        let validatedIdentityEndpoint;\n        if (process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST]) {\n            logger.info(`[Managed Identity] Environment variable ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST} for ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.IMDS} returned endpoint: ${process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST]}`);\n            validatedIdentityEndpoint = Imds.getValidatedEnvVariableUrlString(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST, `${process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST]}${IMDS_TOKEN_PATH}`, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.IMDS, logger);\n        } else {\n            logger.info(`[Managed Identity] Unable to find ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST} environment variable for ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.IMDS}, using the default endpoint.`);\n            validatedIdentityEndpoint = DEFAULT_IMDS_ENDPOINT;\n        }\n        return new Imds(logger, nodeStorage, networkClient, cryptoProvider, validatedIdentityEndpoint);\n    }\n    createRequest(resource, managedIdentityId) {\n        const request = new _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityRequestParameters(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.HttpMethod.GET, this.identityEndpoint);\n        request.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.METADATA_HEADER_NAME] = \"true\";\n        request.queryParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.API_VERSION_QUERY_PARAMETER_NAME] = IMDS_API_VERSION;\n        request.queryParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RESOURCE_BODY_OR_QUERY_PARAMETER_NAME] = resource;\n        if (managedIdentityId.idType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityIdType.SYSTEM_ASSIGNED) {\n            request.queryParameters[this.getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityId.idType)] = managedIdentityId.id;\n        }\n        // bodyParameters calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity\n        return request;\n    }\n}\n //# sourceMappingURL=Imds.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/Imds.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/ServiceFabric.mjs":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/ServiceFabric.mjs ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceFabric: () => (/* binding */ ServiceFabric)\n/* harmony export */ });\n/* harmony import */ var _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/ManagedIdentityRequestParameters.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityRequestParameters.mjs\");\n/* harmony import */ var _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseManagedIdentitySource.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/BaseManagedIdentitySource.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // MSI Constants. Docs for MSI are available here https://docs.microsoft.com/azure/app-service/overview-managed-identity\nconst SERVICE_FABRIC_MSI_API_VERSION = \"2019-07-01-preview\";\n/**\r\n * Original source of code: https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/ServiceFabricManagedIdentitySource.cs\r\n */ class ServiceFabric extends _BaseManagedIdentitySource_mjs__WEBPACK_IMPORTED_MODULE_1__.BaseManagedIdentitySource {\n    constructor(logger, nodeStorage, networkClient, cryptoProvider, identityEndpoint, identityHeader){\n        super(logger, nodeStorage, networkClient, cryptoProvider);\n        this.identityEndpoint = identityEndpoint;\n        this.identityHeader = identityHeader;\n    }\n    static getEnvironmentVariables() {\n        const identityEndpoint = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT];\n        const identityHeader = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.IDENTITY_HEADER];\n        const identityServerThumbprint = process.env[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.IDENTITY_SERVER_THUMBPRINT];\n        return [\n            identityEndpoint,\n            identityHeader,\n            identityServerThumbprint\n        ];\n    }\n    static tryCreate(logger, nodeStorage, networkClient, cryptoProvider, managedIdentityId) {\n        const [identityEndpoint, identityHeader, identityServerThumbprint] = ServiceFabric.getEnvironmentVariables();\n        /*\r\n         * if either of the identity endpoint, identity header, or identity server thumbprint\r\n         * environment variables are undefined, this MSI provider is unavailable.\r\n         */ if (!identityEndpoint || !identityHeader || !identityServerThumbprint) {\n            logger.info(`[Managed Identity] ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.SERVICE_FABRIC} managed identity is unavailable because one or all of the '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.IDENTITY_HEADER}', '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT}' or '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.IDENTITY_SERVER_THUMBPRINT}' environment variables are not defined.`);\n            return null;\n        }\n        const validatedIdentityEndpoint = ServiceFabric.getValidatedEnvVariableUrlString(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT, identityEndpoint, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.SERVICE_FABRIC, logger);\n        logger.info(`[Managed Identity] Environment variables validation passed for ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.SERVICE_FABRIC} managed identity. Endpoint URI: ${validatedIdentityEndpoint}. Creating ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.SERVICE_FABRIC} managed identity.`);\n        if (managedIdentityId.idType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityIdType.SYSTEM_ASSIGNED) {\n            logger.warning(`[Managed Identity] ${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentitySourceNames.SERVICE_FABRIC} user assigned managed identity is configured in the cluster, not during runtime. See also: https://learn.microsoft.com/en-us/azure/service-fabric/configure-existing-cluster-enable-managed-identity-token-service.`);\n        }\n        return new ServiceFabric(logger, nodeStorage, networkClient, cryptoProvider, identityEndpoint, identityHeader);\n    }\n    createRequest(resource, managedIdentityId) {\n        const request = new _config_ManagedIdentityRequestParameters_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityRequestParameters(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.HttpMethod.GET, this.identityEndpoint);\n        request.headers[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.SERVICE_FABRIC_SECRET_HEADER_NAME] = this.identityHeader;\n        request.queryParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.API_VERSION_QUERY_PARAMETER_NAME] = SERVICE_FABRIC_MSI_API_VERSION;\n        request.queryParameters[_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.RESOURCE_BODY_OR_QUERY_PARAMETER_NAME] = resource;\n        if (managedIdentityId.idType !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.ManagedIdentityIdType.SYSTEM_ASSIGNED) {\n            request.queryParameters[this.getManagedIdentityUserAssignedIdQueryParameterKey(managedIdentityId.idType)] = managedIdentityId.id;\n        }\n        // bodyParameters calculated in BaseManagedIdentity.acquireTokenWithManagedIdentity\n        return request;\n    }\n}\n //# sourceMappingURL=ServiceFabric.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentitySources/ServiceFabric.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/OnBehalfOfClient.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/OnBehalfOfClient.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnBehalfOfClient: () => (/* binding */ OnBehalfOfClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/ScopeSet.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/AuthToken.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/EncodingUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/EncodingUtils.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * On-Behalf-Of client\r\n * @public\r\n */ class OnBehalfOfClient extends _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.BaseClient {\n    constructor(configuration){\n        super(configuration);\n    }\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     */ async acquireToken(request) {\n        this.scopeSet = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.ScopeSet(request.scopes || []);\n        // generate the user_assertion_hash for OBOAssertion\n        this.userAssertionHash = await this.cryptoUtils.hashString(request.oboAssertion);\n        if (request.skipCache || request.claims) {\n            return this.executeTokenRequest(request, this.authority, this.userAssertionHash);\n        }\n        try {\n            return await this.getCachedAuthenticationResult(request);\n        } catch (e) {\n            // Any failure falls back to interactive request, once we implement distributed cache, we plan to handle `createRefreshRequiredError` to refresh using the RT\n            return await this.executeTokenRequest(request, this.authority, this.userAssertionHash);\n        }\n    }\n    /**\r\n     * look up cache for tokens\r\n     * Find idtoken in the cache\r\n     * Find accessToken based on user assertion and account info in the cache\r\n     * Please note we are not yet supported OBO tokens refreshed with long lived RT. User will have to send a new assertion if the current access token expires\r\n     * This is to prevent security issues when the assertion changes over time, however, longlived RT helps retaining the session\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     */ async getCachedAuthenticationResult(request) {\n        // look in the cache for the access_token which matches the incoming_assertion\n        const cachedAccessToken = this.readAccessTokenFromCacheForOBO(this.config.authOptions.clientId, request);\n        if (!cachedAccessToken) {\n            // Must refresh due to non-existent access_token.\n            this.serverTelemetryManager?.setCacheOutcome(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n            this.logger.info(\"SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.\");\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.tokenRefreshRequired);\n        } else if (_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n            // Access token expired, will need to renewed\n            this.serverTelemetryManager?.setCacheOutcome(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n            this.logger.info(`OnbehalfofFlow:getCachedAuthenticationResult - Cached access token is expired or will expire within ${this.config.systemOptions.tokenRenewalOffsetSeconds} seconds.`);\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.tokenRefreshRequired);\n        }\n        // fetch the idToken from cache\n        const cachedIdToken = this.readIdTokenFromCacheForOBO(cachedAccessToken.homeAccountId);\n        let idTokenClaims;\n        let cachedAccount = null;\n        if (cachedIdToken) {\n            idTokenClaims = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.extractTokenClaims(cachedIdToken.secret, _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_0__.EncodingUtils.base64Decode);\n            const localAccountId = idTokenClaims.oid || idTokenClaims.sub;\n            const accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.Constants.EMPTY_STRING,\n                localAccountId: localAccountId || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.Constants.EMPTY_STRING\n            };\n            cachedAccount = this.cacheManager.readAccountFromCache(accountInfo);\n        }\n        // increment telemetry cache hit counter\n        if (this.config.serverTelemetryManager) {\n            this.config.serverTelemetryManager.incrementCacheHits();\n        }\n        return _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n            account: cachedAccount,\n            accessToken: cachedAccessToken,\n            idToken: cachedIdToken,\n            refreshToken: null,\n            appMetadata: null\n        }, true, request, idTokenClaims);\n    }\n    /**\r\n     * read idtoken from cache, this is a specific implementation for OBO as the requirements differ from a generic lookup in the cacheManager\r\n     * Certain use cases of OBO flow do not expect an idToken in the cache/or from the service\r\n     * @param atHomeAccountId - account id\r\n     */ readIdTokenFromCacheForOBO(atHomeAccountId) {\n        const idTokenFilter = {\n            homeAccountId: atHomeAccountId,\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n            credentialType: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.CredentialType.ID_TOKEN,\n            clientId: this.config.authOptions.clientId,\n            realm: this.authority.tenant\n        };\n        const idTokenMap = this.cacheManager.getIdTokensByFilter(idTokenFilter);\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\n        if (Object.values(idTokenMap).length < 1) {\n            return null;\n        }\n        return Object.values(idTokenMap)[0];\n    }\n    /**\r\n     * Fetches the cached access token based on incoming assertion\r\n     * @param clientId - client id\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     */ readAccessTokenFromCacheForOBO(clientId, request) {\n        const authScheme = request.authenticationScheme || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.AuthenticationScheme.BEARER;\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */ const credentialType = authScheme && authScheme.toLowerCase() !== _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.AuthenticationScheme.BEARER.toLowerCase() ? _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.CredentialType.ACCESS_TOKEN;\n        const accessTokenFilter = {\n            credentialType: credentialType,\n            clientId,\n            target: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.ScopeSet.createSearchScopes(this.scopeSet.asArray()),\n            tokenType: authScheme,\n            keyId: request.sshKid,\n            requestedClaimsHash: request.requestedClaimsHash,\n            userAssertionHash: this.userAssertionHash\n        };\n        const accessTokens = this.cacheManager.getAccessTokensByFilter(accessTokenFilter);\n        const numAccessTokens = accessTokens.length;\n        if (numAccessTokens < 1) {\n            return null;\n        } else if (numAccessTokens > 1) {\n            throw (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.createClientAuthError)(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.multipleMatchingTokens);\n        }\n        return accessTokens[0];\n    }\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     * @param authority - authority object\r\n     */ async executeTokenRequest(request, authority, userAssertionHash) {\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await this.createTokenRequestBody(request);\n        const headers = this.createTokenRequestHeaders();\n        const thumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: request.authority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const reqTimestamp = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.nowSeconds();\n        const response = await this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId);\n        const responseHandler = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = await responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, userAssertionHash);\n        return tokenResponse;\n    }\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request - developer provided CommonOnBehalfOfRequest\r\n     */ async createTokenRequestBody(request) {\n        const parameterBuilder = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.RequestParameterBuilder();\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addScopes(request.scopes);\n        parameterBuilder.addGrantType(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.GrantType.JWT_BEARER);\n        parameterBuilder.addClientInfo();\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n        parameterBuilder.addRequestTokenUse(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_11__.ON_BEHALF_OF);\n        parameterBuilder.addOboAssertion(request.oboAssertion);\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        const clientAssertion = this.config.clientCredentials.clientAssertion;\n        if (clientAssertion) {\n            parameterBuilder.addClientAssertion(await (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_12__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        if (request.claims || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=OnBehalfOfClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/OnBehalfOfClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/PublicClientApplication.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/PublicClientApplication.mjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PublicClientApplication: () => (/* binding */ PublicClientApplication)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/constants/AADServerParamKeys.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _ClientApplication_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ClientApplication.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientApplication.mjs\");\n/* harmony import */ var _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/NodeAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/NodeAuthError.mjs\");\n/* harmony import */ var _network_LoopbackClient_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../network/LoopbackClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/network/LoopbackClient.mjs\");\n/* harmony import */ var _DeviceCodeClient_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DeviceCodeClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/DeviceCodeClient.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../packageMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/packageMetadata.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class is to be used to acquire tokens for public client applications (desktop, mobile). Public client applications\r\n * are not trusted to safely store application secrets, and therefore can only request tokens in the name of an user.\r\n * @public\r\n */ class PublicClientApplication extends _ClientApplication_mjs__WEBPACK_IMPORTED_MODULE_1__.ClientApplication {\n    /**\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal.\r\n     * - authority: the authority URL for your application.\r\n     *\r\n     * AAD authorities are of the form https://login.microsoftonline.com/\\{Enter_the_Tenant_Info_Here\\}.\r\n     * - If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * - If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * - If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * - To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * Azure B2C authorities are of the form https://\\{instance\\}/\\{tenant\\}/\\{policy\\}. Each policy is considered\r\n     * its own authority. You will have to set the all of the knownAuthorities at the time of the client application\r\n     * construction.\r\n     *\r\n     * ADFS authorities are of the form https://\\{instance\\}/adfs.\r\n     */ constructor(configuration){\n        super(configuration);\n        if (this.config.broker.nativeBrokerPlugin) {\n            if (this.config.broker.nativeBrokerPlugin.isBrokerAvailable) {\n                this.nativeBrokerPlugin = this.config.broker.nativeBrokerPlugin;\n                this.nativeBrokerPlugin.setLogger(this.config.system.loggerOptions);\n            } else {\n                this.logger.warning(\"NativeBroker implementation was provided but the broker is unavailable.\");\n            }\n        }\n        this.skus = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.ServerTelemetryManager.makeExtraSkuString({\n            libraryName: _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.MSAL_SKU,\n            libraryVersion: _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_5__.version\n        });\n    }\n    /**\r\n     * Acquires a token from the authority using OAuth2.0 device code flow.\r\n     * This flow is designed for devices that do not have access to a browser or have input constraints.\r\n     * The authorization server issues a DeviceCode object with a verification code, an end-user code,\r\n     * and the end-user verification URI. The DeviceCode object is provided through a callback, and the end-user should be\r\n     * instructed to use another device to navigate to the verification URI to input credentials.\r\n     * Since the client cannot receive incoming requests, it polls the authorization server repeatedly\r\n     * until the end-user completes input of credentials.\r\n     */ async acquireTokenByDeviceCode(request) {\n        this.logger.info(\"acquireTokenByDeviceCode called\", request.correlationId);\n        const validRequest = Object.assign(request, await this.initializeBaseRequest(request));\n        const serverTelemetryManager = this.initializeServerTelemetryManager(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ApiId.acquireTokenByDeviceCode, validRequest.correlationId);\n        try {\n            const deviceCodeConfig = await this.buildOauthClientConfiguration(validRequest.authority, validRequest.correlationId, \"\", serverTelemetryManager, undefined, request.azureCloudOptions);\n            const deviceCodeClient = new _DeviceCodeClient_mjs__WEBPACK_IMPORTED_MODULE_4__.DeviceCodeClient(deviceCodeConfig);\n            this.logger.verbose(\"Device code client created\", validRequest.correlationId);\n            return await deviceCodeClient.acquireToken(validRequest);\n        } catch (e) {\n            if (e instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.AuthError) {\n                e.setCorrelationId(validRequest.correlationId);\n            }\n            serverTelemetryManager.cacheFailedRequest(e);\n            throw e;\n        }\n    }\n    /**\r\n     * Acquires a token interactively via the browser by requesting an authorization code then exchanging it for a token.\r\n     */ async acquireTokenInteractive(request) {\n        const correlationId = request.correlationId || this.cryptoProvider.createNewGuid();\n        this.logger.trace(\"acquireTokenInteractive called\", correlationId);\n        const { openBrowser, successTemplate, errorTemplate, windowHandle, loopbackClient: customLoopbackClient, ...remainingProperties } = request;\n        if (this.nativeBrokerPlugin) {\n            const brokerRequest = {\n                ...remainingProperties,\n                clientId: this.config.auth.clientId,\n                scopes: request.scopes || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.OIDC_DEFAULT_SCOPES,\n                redirectUri: `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.HTTP_PROTOCOL}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.LOCALHOST}`,\n                authority: request.authority || this.config.auth.authority,\n                correlationId: correlationId,\n                extraParameters: {\n                    ...remainingProperties.extraQueryParameters,\n                    ...remainingProperties.tokenQueryParameters,\n                    [_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.X_CLIENT_EXTRA_SKU]: this.skus\n                },\n                accountId: remainingProperties.account?.nativeAccountId\n            };\n            return this.nativeBrokerPlugin.acquireTokenInteractive(brokerRequest, windowHandle);\n        }\n        const { verifier, challenge } = await this.cryptoProvider.generatePkceCodes();\n        const loopbackClient = customLoopbackClient || new _network_LoopbackClient_mjs__WEBPACK_IMPORTED_MODULE_3__.LoopbackClient();\n        let authCodeResponse = {};\n        let authCodeListenerError = null;\n        try {\n            const authCodeListener = loopbackClient.listenForAuthCode(successTemplate, errorTemplate).then((response)=>{\n                authCodeResponse = response;\n            }).catch((e)=>{\n                // Store the promise instead of throwing so we can control when its thrown\n                authCodeListenerError = e;\n            });\n            // Wait for server to be listening\n            const redirectUri = await this.waitForRedirectUri(loopbackClient);\n            const validRequest = {\n                ...remainingProperties,\n                correlationId: correlationId,\n                scopes: request.scopes || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.OIDC_DEFAULT_SCOPES,\n                redirectUri: redirectUri,\n                responseMode: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.ResponseMode.QUERY,\n                codeChallenge: challenge,\n                codeChallengeMethod: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.CodeChallengeMethodValues.S256\n            };\n            const authCodeUrl = await this.getAuthCodeUrl(validRequest);\n            await openBrowser(authCodeUrl);\n            await authCodeListener;\n            if (authCodeListenerError) {\n                throw authCodeListenerError;\n            }\n            if (authCodeResponse.error) {\n                throw new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_10__.ServerError(authCodeResponse.error, authCodeResponse.error_description, authCodeResponse.suberror);\n            } else if (!authCodeResponse.code) {\n                throw _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.NodeAuthError.createNoAuthCodeInResponseError();\n            }\n            const clientInfo = authCodeResponse.client_info;\n            const tokenRequest = {\n                code: authCodeResponse.code,\n                codeVerifier: verifier,\n                clientInfo: clientInfo || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.Constants.EMPTY_STRING,\n                ...validRequest\n            };\n            return await this.acquireTokenByCode(tokenRequest); // Await this so the server doesn't close prematurely\n        } finally{\n            loopbackClient.closeServer();\n        }\n    }\n    /**\r\n     * Returns a token retrieved either from the cache or by exchanging the refresh token for a fresh access token. If brokering is enabled the token request will be serviced by the broker.\r\n     * @param request - developer provided SilentFlowRequest\r\n     * @returns\r\n     */ async acquireTokenSilent(request) {\n        const correlationId = request.correlationId || this.cryptoProvider.createNewGuid();\n        this.logger.trace(\"acquireTokenSilent called\", correlationId);\n        if (this.nativeBrokerPlugin) {\n            const brokerRequest = {\n                ...request,\n                clientId: this.config.auth.clientId,\n                scopes: request.scopes || _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.OIDC_DEFAULT_SCOPES,\n                redirectUri: `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.HTTP_PROTOCOL}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.LOCALHOST}`,\n                authority: request.authority || this.config.auth.authority,\n                correlationId: correlationId,\n                extraParameters: {\n                    ...request.tokenQueryParameters,\n                    [_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.X_CLIENT_EXTRA_SKU]: this.skus\n                },\n                accountId: request.account.nativeAccountId,\n                forceRefresh: request.forceRefresh || false\n            };\n            return this.nativeBrokerPlugin.acquireTokenSilent(brokerRequest);\n        }\n        return super.acquireTokenSilent(request);\n    }\n    /**\r\n     * Removes cache artifacts associated with the given account\r\n     * @param request - developer provided SignOutRequest\r\n     * @returns\r\n     */ async signOut(request) {\n        if (this.nativeBrokerPlugin && request.account.nativeAccountId) {\n            const signoutRequest = {\n                clientId: this.config.auth.clientId,\n                accountId: request.account.nativeAccountId,\n                correlationId: request.correlationId || this.cryptoProvider.createNewGuid()\n            };\n            await this.nativeBrokerPlugin.signOut(signoutRequest);\n        }\n        await this.getTokenCache().removeAccount(request.account);\n    }\n    /**\r\n     * Returns all cached accounts for this application. If brokering is enabled this request will be serviced by the broker.\r\n     * @returns\r\n     */ async getAllAccounts() {\n        if (this.nativeBrokerPlugin) {\n            const correlationId = this.cryptoProvider.createNewGuid();\n            return this.nativeBrokerPlugin.getAllAccounts(this.config.auth.clientId, correlationId);\n        }\n        return this.getTokenCache().getAllAccounts();\n    }\n    /**\r\n     * Attempts to retrieve the redirectUri from the loopback server. If the loopback server does not start listening for requests within the timeout this will throw.\r\n     * @param loopbackClient - developer provided custom loopback server implementation\r\n     * @returns\r\n     */ async waitForRedirectUri(loopbackClient) {\n        return new Promise((resolve, reject)=>{\n            let ticks = 0;\n            const id = setInterval(()=>{\n                if (_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.LOOPBACK_SERVER_CONSTANTS.TIMEOUT_MS / _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.LOOPBACK_SERVER_CONSTANTS.INTERVAL_MS < ticks) {\n                    clearInterval(id);\n                    reject(_error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.NodeAuthError.createLoopbackServerTimeoutError());\n                    return;\n                }\n                try {\n                    const r = loopbackClient.getRedirectUri();\n                    clearInterval(id);\n                    resolve(r);\n                    return;\n                } catch (e) {\n                    if (e instanceof _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.AuthError && e.errorCode === _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_2__.NodeAuthErrorMessage.noLoopbackServerExists.code) {\n                        // Loopback server is not listening yet\n                        ticks++;\n                        return;\n                    }\n                    clearInterval(id);\n                    reject(e);\n                    return;\n                }\n            }, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.LOOPBACK_SERVER_CONSTANTS.INTERVAL_MS);\n        });\n    }\n}\n //# sourceMappingURL=PublicClientApplication.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/PublicClientApplication.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/client/UsernamePasswordClient.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/client/UsernamePasswordClient.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UsernamePasswordClient: () => (/* binding */ UsernamePasswordClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/client/BaseClient.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/TimeUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/response/ResponseHandler.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/account/CcsCredential.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/ClientAssertionUtils.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/StringUtils.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n * @public\r\n */ class UsernamePasswordClient extends _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.BaseClient {\n    constructor(configuration){\n        super(configuration);\n    }\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request - CommonUsernamePasswordRequest\r\n     */ async acquireToken(request) {\n        this.logger.info(\"in acquireToken call in username-password client\");\n        const reqTimestamp = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.nowSeconds();\n        const response = await this.executeTokenRequest(this.authority, request);\n        const responseHandler = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n        // Validate response. This function throws a server error if an error is returned by the server.\n        responseHandler.validateTokenResponse(response.body);\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n        return tokenResponse;\n    }\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority - authority object\r\n     * @param request - CommonUsernamePasswordRequest provided by the developer\r\n     */ async executeTokenRequest(authority, request) {\n        const queryParametersString = this.createTokenQueryParameters(request);\n        const endpoint = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\n        const requestBody = await this.createTokenRequestBody(request);\n        const headers = this.createTokenRequestHeaders({\n            credential: request.username,\n            type: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.CcsCredentialType.UPN\n        });\n        const thumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint, request.correlationId);\n    }\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request - CommonUsernamePasswordRequest provided by the developer\r\n     */ async createTokenRequestBody(request) {\n        const parameterBuilder = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_5__.RequestParameterBuilder();\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n        parameterBuilder.addUsername(request.username);\n        parameterBuilder.addPassword(request.password);\n        parameterBuilder.addScopes(request.scopes);\n        parameterBuilder.addResponseTypeForTokenAndIdToken();\n        parameterBuilder.addGrantType(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n        parameterBuilder.addClientInfo();\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n        parameterBuilder.addCorrelationId(correlationId);\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n        const clientAssertion = this.config.clientCredentials.clientAssertion;\n        if (clientAssertion) {\n            parameterBuilder.addClientAssertion(await (0,_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.getClientAssertion)(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n        if (!_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\n            parameterBuilder.addCcsUpn(request.username);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=UsernamePasswordClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/client/UsernamePasswordClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/config/Configuration.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/config/Configuration.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildAppConfiguration: () => (/* binding */ buildAppConfiguration),\n/* harmony export */   buildManagedIdentityConfiguration: () => (/* binding */ buildManagedIdentityConfiguration)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _network_HttpClient_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../network/HttpClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/network/HttpClient.mjs\");\n/* harmony import */ var _ManagedIdentityId_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ManagedIdentityId.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityId.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _retry_LinearRetryPolicy_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../retry/LinearRetryPolicy.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/retry/LinearRetryPolicy.mjs\");\n/* harmony import */ var _network_HttpClientWithRetries_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../network/HttpClientWithRetries.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/network/HttpClientWithRetries.mjs\");\n/* harmony import */ var _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../error/NodeAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/NodeAuthError.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const DEFAULT_AUTH_OPTIONS = {\n    clientId: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n    authority: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.DEFAULT_AUTHORITY,\n    clientSecret: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n    clientAssertion: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n    clientCertificate: {\n        thumbprint: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n        thumbprintSha256: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n        privateKey: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n        x5c: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING\n    },\n    knownAuthorities: [],\n    cloudDiscoveryMetadata: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n    authorityMetadata: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n    clientCapabilities: [],\n    protocolMode: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_7__.ProtocolMode.AAD,\n    azureCloudOptions: {\n        azureCloudInstance: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_8__.AzureCloudInstance.None,\n        tenant: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING\n    },\n    skipAuthorityMetadataCache: false\n};\nconst DEFAULT_CACHE_OPTIONS = {\n    claimsBasedCachingEnabled: false\n};\nconst DEFAULT_LOGGER_OPTIONS = {\n    loggerCallback: ()=>{\n    // allow users to not set logger call back\n    },\n    piiLoggingEnabled: false,\n    logLevel: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_9__.LogLevel.Info\n};\nconst DEFAULT_SYSTEM_OPTIONS = {\n    loggerOptions: DEFAULT_LOGGER_OPTIONS,\n    networkClient: new _network_HttpClient_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpClient(),\n    proxyUrl: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n    customAgentOptions: {},\n    disableInternalRetries: false\n};\nconst DEFAULT_TELEMETRY_OPTIONS = {\n    application: {\n        appName: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING,\n        appVersion: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_6__.Constants.EMPTY_STRING\n    }\n};\n/**\r\n * Sets the default options when not explicitly configured from app developer\r\n *\r\n * @param auth - Authentication options\r\n * @param cache - Cache options\r\n * @param system - System options\r\n * @param telemetry - Telemetry options\r\n *\r\n * @returns Configuration\r\n * @internal\r\n */ function buildAppConfiguration({ auth, broker, cache, system, telemetry }) {\n    const systemOptions = {\n        ...DEFAULT_SYSTEM_OPTIONS,\n        networkClient: new _network_HttpClient_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpClient(system?.proxyUrl, system?.customAgentOptions),\n        loggerOptions: system?.loggerOptions || DEFAULT_LOGGER_OPTIONS,\n        disableInternalRetries: system?.disableInternalRetries || false\n    };\n    // if client certificate was provided, ensure that at least one of the SHA-1 or SHA-256 thumbprints were provided\n    if (!!auth.clientCertificate && !!!auth.clientCertificate.thumbprint && !!!auth.clientCertificate.thumbprintSha256) {\n        throw _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_5__.NodeAuthError.createStateNotFoundError();\n    }\n    return {\n        auth: {\n            ...DEFAULT_AUTH_OPTIONS,\n            ...auth\n        },\n        broker: {\n            ...broker\n        },\n        cache: {\n            ...DEFAULT_CACHE_OPTIONS,\n            ...cache\n        },\n        system: {\n            ...systemOptions,\n            ...system\n        },\n        telemetry: {\n            ...DEFAULT_TELEMETRY_OPTIONS,\n            ...telemetry\n        }\n    };\n}\nfunction buildManagedIdentityConfiguration({ managedIdentityIdParams, system }) {\n    const managedIdentityId = new _ManagedIdentityId_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityId(managedIdentityIdParams);\n    const loggerOptions = system?.loggerOptions || DEFAULT_LOGGER_OPTIONS;\n    let networkClient;\n    // use developer provided network client if passed in\n    if (system?.networkClient) {\n        networkClient = system.networkClient;\n    // otherwise, create a new one\n    } else {\n        networkClient = new _network_HttpClient_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpClient(system?.proxyUrl, system?.customAgentOptions);\n    }\n    // wrap the network client with a retry policy if the developer has not disabled the option to do so\n    if (!system?.disableInternalRetries) {\n        const linearRetryPolicy = new _retry_LinearRetryPolicy_mjs__WEBPACK_IMPORTED_MODULE_3__.LinearRetryPolicy(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.MANAGED_IDENTITY_MAX_RETRIES, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.MANAGED_IDENTITY_RETRY_DELAY, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.MANAGED_IDENTITY_HTTP_STATUS_CODES_TO_RETRY_ON);\n        networkClient = new _network_HttpClientWithRetries_mjs__WEBPACK_IMPORTED_MODULE_4__.HttpClientWithRetries(networkClient, linearRetryPolicy);\n    }\n    return {\n        managedIdentityId: managedIdentityId,\n        system: {\n            loggerOptions,\n            networkClient\n        }\n    };\n}\n //# sourceMappingURL=Configuration.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/config/Configuration.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityId.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/config/ManagedIdentityId.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ManagedIdentityId: () => (/* binding */ ManagedIdentityId)\n/* harmony export */ });\n/* harmony import */ var _error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../error/ManagedIdentityError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../error/ManagedIdentityErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class ManagedIdentityId {\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value;\n    }\n    get idType() {\n        return this._idType;\n    }\n    set idType(value) {\n        this._idType = value;\n    }\n    constructor(managedIdentityIdParams){\n        const userAssignedClientId = managedIdentityIdParams?.userAssignedClientId;\n        const userAssignedResourceId = managedIdentityIdParams?.userAssignedResourceId;\n        const userAssignedObjectId = managedIdentityIdParams?.userAssignedObjectId;\n        if (userAssignedClientId) {\n            if (userAssignedResourceId || userAssignedObjectId) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_0__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidManagedIdentityIdType);\n            }\n            this.id = userAssignedClientId;\n            this.idType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityIdType.USER_ASSIGNED_CLIENT_ID;\n        } else if (userAssignedResourceId) {\n            if (userAssignedClientId || userAssignedObjectId) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_0__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidManagedIdentityIdType);\n            }\n            this.id = userAssignedResourceId;\n            this.idType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityIdType.USER_ASSIGNED_RESOURCE_ID;\n        } else if (userAssignedObjectId) {\n            if (userAssignedClientId || userAssignedResourceId) {\n                throw (0,_error_ManagedIdentityError_mjs__WEBPACK_IMPORTED_MODULE_0__.createManagedIdentityError)(_error_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_2__.invalidManagedIdentityIdType);\n            }\n            this.id = userAssignedObjectId;\n            this.idType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityIdType.USER_ASSIGNED_OBJECT_ID;\n        } else {\n            this.id = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MANAGED_IDENTITY_ID;\n            this.idType = _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityIdType.SYSTEM_ASSIGNED;\n        }\n    }\n}\n //# sourceMappingURL=ManagedIdentityId.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NvbmZpZy9NYW5hZ2VkSWRlbnRpdHlJZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUMrRTtBQUNhO0FBQ047QUFFdEY7OztDQUdDLEdBQ0QsTUFBTUk7SUFDRixJQUFJQyxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUNDLEdBQUc7SUFDbkI7SUFDQSxJQUFJRCxHQUFHRSxLQUFLLEVBQUU7UUFDVixJQUFJLENBQUNELEdBQUcsR0FBR0M7SUFDZjtJQUNBLElBQUlDLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQ0MsT0FBTztJQUN2QjtJQUNBLElBQUlELE9BQU9ELEtBQUssRUFBRTtRQUNkLElBQUksQ0FBQ0UsT0FBTyxHQUFHRjtJQUNuQjtJQUNBRyxZQUFZQyx1QkFBdUIsQ0FBRTtRQUNqQyxNQUFNQyx1QkFBdUJELHlCQUF5QkM7UUFDdEQsTUFBTUMseUJBQXlCRix5QkFBeUJFO1FBQ3hELE1BQU1DLHVCQUF1QkgseUJBQXlCRztRQUN0RCxJQUFJRixzQkFBc0I7WUFDdEIsSUFBSUMsMEJBQTBCQyxzQkFBc0I7Z0JBQ2hELE1BQU1kLDJGQUEwQkEsQ0FBQ0csOEZBQTRCQTtZQUNqRTtZQUNBLElBQUksQ0FBQ0UsRUFBRSxHQUFHTztZQUNWLElBQUksQ0FBQ0osTUFBTSxHQUFHUCx1RUFBcUJBLENBQUNjLHVCQUF1QjtRQUMvRCxPQUNLLElBQUlGLHdCQUF3QjtZQUM3QixJQUFJRCx3QkFBd0JFLHNCQUFzQjtnQkFDOUMsTUFBTWQsMkZBQTBCQSxDQUFDRyw4RkFBNEJBO1lBQ2pFO1lBQ0EsSUFBSSxDQUFDRSxFQUFFLEdBQUdRO1lBQ1YsSUFBSSxDQUFDTCxNQUFNLEdBQUdQLHVFQUFxQkEsQ0FBQ2UseUJBQXlCO1FBQ2pFLE9BQ0ssSUFBSUYsc0JBQXNCO1lBQzNCLElBQUlGLHdCQUF3QkMsd0JBQXdCO2dCQUNoRCxNQUFNYiwyRkFBMEJBLENBQUNHLDhGQUE0QkE7WUFDakU7WUFDQSxJQUFJLENBQUNFLEVBQUUsR0FBR1M7WUFDVixJQUFJLENBQUNOLE1BQU0sR0FBR1AsdUVBQXFCQSxDQUFDZ0IsdUJBQXVCO1FBQy9ELE9BQ0s7WUFDRCxJQUFJLENBQUNaLEVBQUUsR0FBR0gsNkVBQTJCQTtZQUNyQyxJQUFJLENBQUNNLE1BQU0sR0FBR1AsdUVBQXFCQSxDQUFDaUIsZUFBZTtRQUN2RDtJQUNKO0FBQ0o7QUFFNkIsQ0FDN0IsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NvbmZpZy9NYW5hZ2VkSWRlbnRpdHlJZC5tanM/OThiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtbm9kZSB2Mi4xNi4yIDIwMjQtMTEtMTkgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGNyZWF0ZU1hbmFnZWRJZGVudGl0eUVycm9yIH0gZnJvbSAnLi4vZXJyb3IvTWFuYWdlZElkZW50aXR5RXJyb3IubWpzJztcbmltcG9ydCB7IE1hbmFnZWRJZGVudGl0eUlkVHlwZSwgREVGQVVMVF9NQU5BR0VEX0lERU5USVRZX0lEIH0gZnJvbSAnLi4vdXRpbHMvQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgeyBpbnZhbGlkTWFuYWdlZElkZW50aXR5SWRUeXBlIH0gZnJvbSAnLi4vZXJyb3IvTWFuYWdlZElkZW50aXR5RXJyb3JDb2Rlcy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgTWFuYWdlZElkZW50aXR5SWQge1xyXG4gICAgZ2V0IGlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH1cclxuICAgIHNldCBpZCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2lkID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXQgaWRUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZFR5cGU7XHJcbiAgICB9XHJcbiAgICBzZXQgaWRUeXBlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5faWRUeXBlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcihtYW5hZ2VkSWRlbnRpdHlJZFBhcmFtcykge1xyXG4gICAgICAgIGNvbnN0IHVzZXJBc3NpZ25lZENsaWVudElkID0gbWFuYWdlZElkZW50aXR5SWRQYXJhbXM/LnVzZXJBc3NpZ25lZENsaWVudElkO1xyXG4gICAgICAgIGNvbnN0IHVzZXJBc3NpZ25lZFJlc291cmNlSWQgPSBtYW5hZ2VkSWRlbnRpdHlJZFBhcmFtcz8udXNlckFzc2lnbmVkUmVzb3VyY2VJZDtcclxuICAgICAgICBjb25zdCB1c2VyQXNzaWduZWRPYmplY3RJZCA9IG1hbmFnZWRJZGVudGl0eUlkUGFyYW1zPy51c2VyQXNzaWduZWRPYmplY3RJZDtcclxuICAgICAgICBpZiAodXNlckFzc2lnbmVkQ2xpZW50SWQpIHtcclxuICAgICAgICAgICAgaWYgKHVzZXJBc3NpZ25lZFJlc291cmNlSWQgfHwgdXNlckFzc2lnbmVkT2JqZWN0SWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZU1hbmFnZWRJZGVudGl0eUVycm9yKGludmFsaWRNYW5hZ2VkSWRlbnRpdHlJZFR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaWQgPSB1c2VyQXNzaWduZWRDbGllbnRJZDtcclxuICAgICAgICAgICAgdGhpcy5pZFR5cGUgPSBNYW5hZ2VkSWRlbnRpdHlJZFR5cGUuVVNFUl9BU1NJR05FRF9DTElFTlRfSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHVzZXJBc3NpZ25lZFJlc291cmNlSWQpIHtcclxuICAgICAgICAgICAgaWYgKHVzZXJBc3NpZ25lZENsaWVudElkIHx8IHVzZXJBc3NpZ25lZE9iamVjdElkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVNYW5hZ2VkSWRlbnRpdHlFcnJvcihpbnZhbGlkTWFuYWdlZElkZW50aXR5SWRUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmlkID0gdXNlckFzc2lnbmVkUmVzb3VyY2VJZDtcclxuICAgICAgICAgICAgdGhpcy5pZFR5cGUgPSBNYW5hZ2VkSWRlbnRpdHlJZFR5cGUuVVNFUl9BU1NJR05FRF9SRVNPVVJDRV9JRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodXNlckFzc2lnbmVkT2JqZWN0SWQpIHtcclxuICAgICAgICAgICAgaWYgKHVzZXJBc3NpZ25lZENsaWVudElkIHx8IHVzZXJBc3NpZ25lZFJlc291cmNlSWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZU1hbmFnZWRJZGVudGl0eUVycm9yKGludmFsaWRNYW5hZ2VkSWRlbnRpdHlJZFR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaWQgPSB1c2VyQXNzaWduZWRPYmplY3RJZDtcclxuICAgICAgICAgICAgdGhpcy5pZFR5cGUgPSBNYW5hZ2VkSWRlbnRpdHlJZFR5cGUuVVNFUl9BU1NJR05FRF9PQkpFQ1RfSUQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlkID0gREVGQVVMVF9NQU5BR0VEX0lERU5USVRZX0lEO1xyXG4gICAgICAgICAgICB0aGlzLmlkVHlwZSA9IE1hbmFnZWRJZGVudGl0eUlkVHlwZS5TWVNURU1fQVNTSUdORUQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IE1hbmFnZWRJZGVudGl0eUlkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NYW5hZ2VkSWRlbnRpdHlJZC5tanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlTWFuYWdlZElkZW50aXR5RXJyb3IiLCJNYW5hZ2VkSWRlbnRpdHlJZFR5cGUiLCJERUZBVUxUX01BTkFHRURfSURFTlRJVFlfSUQiLCJpbnZhbGlkTWFuYWdlZElkZW50aXR5SWRUeXBlIiwiTWFuYWdlZElkZW50aXR5SWQiLCJpZCIsIl9pZCIsInZhbHVlIiwiaWRUeXBlIiwiX2lkVHlwZSIsImNvbnN0cnVjdG9yIiwibWFuYWdlZElkZW50aXR5SWRQYXJhbXMiLCJ1c2VyQXNzaWduZWRDbGllbnRJZCIsInVzZXJBc3NpZ25lZFJlc291cmNlSWQiLCJ1c2VyQXNzaWduZWRPYmplY3RJZCIsIlVTRVJfQVNTSUdORURfQ0xJRU5UX0lEIiwiVVNFUl9BU1NJR05FRF9SRVNPVVJDRV9JRCIsIlVTRVJfQVNTSUdORURfT0JKRUNUX0lEIiwiU1lTVEVNX0FTU0lHTkVEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityId.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityRequestParameters.mjs":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/config/ManagedIdentityRequestParameters.mjs ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ManagedIdentityRequestParameters: () => (/* binding */ ManagedIdentityRequestParameters)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/request/RequestParameterBuilder.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/url/UrlString.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class ManagedIdentityRequestParameters {\n    constructor(httpMethod, endpoint){\n        this.httpMethod = httpMethod;\n        this._baseEndpoint = endpoint;\n        this.headers = {};\n        this.bodyParameters = {};\n        this.queryParameters = {};\n    }\n    computeUri() {\n        const parameterBuilder = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.RequestParameterBuilder();\n        if (this.queryParameters) {\n            parameterBuilder.addExtraQueryParameters(this.queryParameters);\n        }\n        const queryParametersString = parameterBuilder.createQueryString();\n        return _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.UrlString.appendQueryString(this._baseEndpoint, queryParametersString);\n    }\n    computeParametersBodyString() {\n        const parameterBuilder = new _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.RequestParameterBuilder();\n        if (this.bodyParameters) {\n            parameterBuilder.addExtraQueryParameters(this.bodyParameters);\n        }\n        return parameterBuilder.createQueryString();\n    }\n}\n //# sourceMappingURL=ManagedIdentityRequestParameters.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NvbmZpZy9NYW5hZ2VkSWRlbnRpdHlSZXF1ZXN0UGFyYW1ldGVycy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0NBQXdDLEdBQ3hDO0FBQzZFO0FBRTdFOzs7Q0FHQyxHQUNELE1BQU1FO0lBQ0ZDLFlBQVlDLFVBQVUsRUFBRUMsUUFBUSxDQUFFO1FBQzlCLElBQUksQ0FBQ0QsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNFLGFBQWEsR0FBR0Q7UUFDckIsSUFBSSxDQUFDRSxPQUFPLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUNDLGNBQWMsR0FBRyxDQUFDO1FBQ3ZCLElBQUksQ0FBQ0MsZUFBZSxHQUFHLENBQUM7SUFDNUI7SUFDQUMsYUFBYTtRQUNULE1BQU1DLG1CQUFtQixJQUFJWCw0RUFBdUJBO1FBQ3BELElBQUksSUFBSSxDQUFDUyxlQUFlLEVBQUU7WUFDdEJFLGlCQUFpQkMsdUJBQXVCLENBQUMsSUFBSSxDQUFDSCxlQUFlO1FBQ2pFO1FBQ0EsTUFBTUksd0JBQXdCRixpQkFBaUJHLGlCQUFpQjtRQUNoRSxPQUFPYiw4REFBU0EsQ0FBQ2MsaUJBQWlCLENBQUMsSUFBSSxDQUFDVCxhQUFhLEVBQUVPO0lBQzNEO0lBQ0FHLDhCQUE4QjtRQUMxQixNQUFNTCxtQkFBbUIsSUFBSVgsNEVBQXVCQTtRQUNwRCxJQUFJLElBQUksQ0FBQ1EsY0FBYyxFQUFFO1lBQ3JCRyxpQkFBaUJDLHVCQUF1QixDQUFDLElBQUksQ0FBQ0osY0FBYztRQUNoRTtRQUNBLE9BQU9HLGlCQUFpQkcsaUJBQWlCO0lBQzdDO0FBQ0o7QUFFNEMsQ0FDNUMsNkRBQTZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NvbmZpZy9NYW5hZ2VkSWRlbnRpdHlSZXF1ZXN0UGFyYW1ldGVycy5tanM/ZGY3OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtbm9kZSB2Mi4xNi4yIDIwMjQtMTEtMTkgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyLCBVcmxTdHJpbmcgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vbm9kZSc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBNYW5hZ2VkSWRlbnRpdHlSZXF1ZXN0UGFyYW1ldGVycyB7XHJcbiAgICBjb25zdHJ1Y3RvcihodHRwTWV0aG9kLCBlbmRwb2ludCkge1xyXG4gICAgICAgIHRoaXMuaHR0cE1ldGhvZCA9IGh0dHBNZXRob2Q7XHJcbiAgICAgICAgdGhpcy5fYmFzZUVuZHBvaW50ID0gZW5kcG9pbnQ7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzID0ge307XHJcbiAgICAgICAgdGhpcy5ib2R5UGFyYW1ldGVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMucXVlcnlQYXJhbWV0ZXJzID0ge307XHJcbiAgICB9XHJcbiAgICBjb21wdXRlVXJpKCkge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlckJ1aWxkZXIgPSBuZXcgUmVxdWVzdFBhcmFtZXRlckJ1aWxkZXIoKTtcclxuICAgICAgICBpZiAodGhpcy5xdWVyeVBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRFeHRyYVF1ZXJ5UGFyYW1ldGVycyh0aGlzLnF1ZXJ5UGFyYW1ldGVycyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1ldGVyc1N0cmluZyA9IHBhcmFtZXRlckJ1aWxkZXIuY3JlYXRlUXVlcnlTdHJpbmcoKTtcclxuICAgICAgICByZXR1cm4gVXJsU3RyaW5nLmFwcGVuZFF1ZXJ5U3RyaW5nKHRoaXMuX2Jhc2VFbmRwb2ludCwgcXVlcnlQYXJhbWV0ZXJzU3RyaW5nKTtcclxuICAgIH1cclxuICAgIGNvbXB1dGVQYXJhbWV0ZXJzQm9keVN0cmluZygpIHtcclxuICAgICAgICBjb25zdCBwYXJhbWV0ZXJCdWlsZGVyID0gbmV3IFJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuYm9keVBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgcGFyYW1ldGVyQnVpbGRlci5hZGRFeHRyYVF1ZXJ5UGFyYW1ldGVycyh0aGlzLmJvZHlQYXJhbWV0ZXJzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlckJ1aWxkZXIuY3JlYXRlUXVlcnlTdHJpbmcoKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBNYW5hZ2VkSWRlbnRpdHlSZXF1ZXN0UGFyYW1ldGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFuYWdlZElkZW50aXR5UmVxdWVzdFBhcmFtZXRlcnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlcXVlc3RQYXJhbWV0ZXJCdWlsZGVyIiwiVXJsU3RyaW5nIiwiTWFuYWdlZElkZW50aXR5UmVxdWVzdFBhcmFtZXRlcnMiLCJjb25zdHJ1Y3RvciIsImh0dHBNZXRob2QiLCJlbmRwb2ludCIsIl9iYXNlRW5kcG9pbnQiLCJoZWFkZXJzIiwiYm9keVBhcmFtZXRlcnMiLCJxdWVyeVBhcmFtZXRlcnMiLCJjb21wdXRlVXJpIiwicGFyYW1ldGVyQnVpbGRlciIsImFkZEV4dHJhUXVlcnlQYXJhbWV0ZXJzIiwicXVlcnlQYXJhbWV0ZXJzU3RyaW5nIiwiY3JlYXRlUXVlcnlTdHJpbmciLCJhcHBlbmRRdWVyeVN0cmluZyIsImNvbXB1dGVQYXJhbWV0ZXJzQm9keVN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/config/ManagedIdentityRequestParameters.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/crypto/CryptoProvider.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/crypto/CryptoProvider.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CryptoProvider: () => (/* binding */ CryptoProvider)\n/* harmony export */ });\n/* harmony import */ var _GuidGenerator_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GuidGenerator.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/crypto/GuidGenerator.mjs\");\n/* harmony import */ var _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/EncodingUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/EncodingUtils.mjs\");\n/* harmony import */ var _PkceGenerator_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PkceGenerator.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/crypto/PkceGenerator.mjs\");\n/* harmony import */ var _HashUtils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HashUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/crypto/HashUtils.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements MSAL node's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n * @public\r\n */ class CryptoProvider {\n    constructor(){\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.pkceGenerator = new _PkceGenerator_mjs__WEBPACK_IMPORTED_MODULE_2__.PkceGenerator();\n        this.guidGenerator = new _GuidGenerator_mjs__WEBPACK_IMPORTED_MODULE_0__.GuidGenerator();\n        this.hashUtils = new _HashUtils_mjs__WEBPACK_IMPORTED_MODULE_3__.HashUtils();\n    }\n    /**\r\n     * base64 URL safe encoded string\r\n     */ base64UrlEncode() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\r\n     * Stringifies and base64Url encodes input public key\r\n     * @param inputKid - public key id\r\n     * @returns Base64Url encoded public key\r\n     */ encodeKid() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */ createNewGuid() {\n        return this.guidGenerator.generateGuid();\n    }\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input - string to be encoded\r\n     */ base64Encode(input) {\n        return _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.EncodingUtils.base64Encode(input);\n    }\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input - string to be decoded\r\n     */ base64Decode(input) {\n        return _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.EncodingUtils.base64Decode(input);\n    }\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */ generatePkceCodes() {\n        return this.pkceGenerator.generatePkceCodes();\n    }\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint - not yet implemented for node\r\n     */ getPublicKeyThumbprint() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\r\n     * Removes cryptographic keypair from key store matching the keyId passed in\r\n     * @param kid - public key id\r\n     */ removeTokenBindingKey() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\r\n     * Removes all cryptographic keys from Keystore\r\n     */ clearKeystore() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid - currently not implemented for node\r\n     */ signJwt() {\n        throw new Error(\"Method not implemented.\");\n    }\n    /**\r\n     * Returns the SHA-256 hash of an input string\r\n     */ async hashString(plainText) {\n        return _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.EncodingUtils.base64EncodeUrl(this.hashUtils.sha256(plainText).toString(\"base64\"), \"base64\");\n    }\n}\n //# sourceMappingURL=CryptoProvider.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NyeXB0by9DcnlwdG9Qcm92aWRlci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDb0Q7QUFDTztBQUNQO0FBQ1I7QUFFNUM7OztDQUdDLEdBQ0Q7Ozs7Q0FJQyxHQUNELE1BQU1JO0lBQ0ZDLGFBQWM7UUFDVixrRkFBa0Y7UUFDbEYsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSUosNkRBQWFBO1FBQ3RDLElBQUksQ0FBQ0ssYUFBYSxHQUFHLElBQUlQLDZEQUFhQTtRQUN0QyxJQUFJLENBQUNRLFNBQVMsR0FBRyxJQUFJTCxxREFBU0E7SUFDbEM7SUFDQTs7S0FFQyxHQUNETSxrQkFBa0I7UUFDZCxNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQTs7OztLQUlDLEdBQ0RDLFlBQVk7UUFDUixNQUFNLElBQUlELE1BQU07SUFDcEI7SUFDQTs7O0tBR0MsR0FDREUsZ0JBQWdCO1FBQ1osT0FBTyxJQUFJLENBQUNMLGFBQWEsQ0FBQ00sWUFBWTtJQUMxQztJQUNBOzs7S0FHQyxHQUNEQyxhQUFhQyxLQUFLLEVBQUU7UUFDaEIsT0FBT2QsbUVBQWFBLENBQUNhLFlBQVksQ0FBQ0M7SUFDdEM7SUFDQTs7O0tBR0MsR0FDREMsYUFBYUQsS0FBSyxFQUFFO1FBQ2hCLE9BQU9kLG1FQUFhQSxDQUFDZSxZQUFZLENBQUNEO0lBQ3RDO0lBQ0E7O0tBRUMsR0FDREUsb0JBQW9CO1FBQ2hCLE9BQU8sSUFBSSxDQUFDWCxhQUFhLENBQUNXLGlCQUFpQjtJQUMvQztJQUNBOztLQUVDLEdBQ0RDLHlCQUF5QjtRQUNyQixNQUFNLElBQUlSLE1BQU07SUFDcEI7SUFDQTs7O0tBR0MsR0FDRFMsd0JBQXdCO1FBQ3BCLE1BQU0sSUFBSVQsTUFBTTtJQUNwQjtJQUNBOztLQUVDLEdBQ0RVLGdCQUFnQjtRQUNaLE1BQU0sSUFBSVYsTUFBTTtJQUNwQjtJQUNBOztLQUVDLEdBQ0RXLFVBQVU7UUFDTixNQUFNLElBQUlYLE1BQU07SUFDcEI7SUFDQTs7S0FFQyxHQUNELE1BQU1ZLFdBQVdDLFNBQVMsRUFBRTtRQUN4QixPQUFPdEIsbUVBQWFBLENBQUN1QixlQUFlLENBQUMsSUFBSSxDQUFDaEIsU0FBUyxDQUFDaUIsTUFBTSxDQUFDRixXQUFXRyxRQUFRLENBQUMsV0FBVztJQUM5RjtBQUNKO0FBRTBCLENBQzFCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLW5vZGUvZGlzdC9jcnlwdG8vQ3J5cHRvUHJvdmlkZXIubWpzPzdlZDciXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLW5vZGUgdjIuMTYuMiAyMDI0LTExLTE5ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBHdWlkR2VuZXJhdG9yIH0gZnJvbSAnLi9HdWlkR2VuZXJhdG9yLm1qcyc7XG5pbXBvcnQgeyBFbmNvZGluZ1V0aWxzIH0gZnJvbSAnLi4vdXRpbHMvRW5jb2RpbmdVdGlscy5tanMnO1xuaW1wb3J0IHsgUGtjZUdlbmVyYXRvciB9IGZyb20gJy4vUGtjZUdlbmVyYXRvci5tanMnO1xuaW1wb3J0IHsgSGFzaFV0aWxzIH0gZnJvbSAnLi9IYXNoVXRpbHMubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGltcGxlbWVudHMgTVNBTCBub2RlJ3MgY3J5cHRvIGludGVyZmFjZSwgd2hpY2ggYWxsb3dzIGl0IHRvIHBlcmZvcm0gYmFzZTY0IGVuY29kaW5nIGFuZCBkZWNvZGluZywgZ2VuZXJhdGluZyBjcnlwdG9ncmFwaGljYWxseSByYW5kb20gR1VJRHMgYW5kXHJcbiAqIGltcGxlbWVudGluZyBQcm9vZiBLZXkgZm9yIENvZGUgRXhjaGFuZ2Ugc3BlY3MgZm9yIHRoZSBPQXV0aCBBdXRob3JpemF0aW9uIENvZGUgRmxvdyB1c2luZyBQS0NFIChyZmMgaGVyZTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc2MzYpLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jbGFzcyBDcnlwdG9Qcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBCcm93c2VyIGNyeXB0byBuZWVkcyB0byBiZSB2YWxpZGF0ZWQgZmlyc3QgYmVmb3JlIGFueSBvdGhlciBjbGFzc2VzIGNhbiBiZSBzZXQuXHJcbiAgICAgICAgdGhpcy5wa2NlR2VuZXJhdG9yID0gbmV3IFBrY2VHZW5lcmF0b3IoKTtcclxuICAgICAgICB0aGlzLmd1aWRHZW5lcmF0b3IgPSBuZXcgR3VpZEdlbmVyYXRvcigpO1xyXG4gICAgICAgIHRoaXMuaGFzaFV0aWxzID0gbmV3IEhhc2hVdGlscygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBiYXNlNjQgVVJMIHNhZmUgZW5jb2RlZCBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgYmFzZTY0VXJsRW5jb2RlKCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdHJpbmdpZmllcyBhbmQgYmFzZTY0VXJsIGVuY29kZXMgaW5wdXQgcHVibGljIGtleVxyXG4gICAgICogQHBhcmFtIGlucHV0S2lkIC0gcHVibGljIGtleSBpZFxyXG4gICAgICogQHJldHVybnMgQmFzZTY0VXJsIGVuY29kZWQgcHVibGljIGtleVxyXG4gICAgICovXHJcbiAgICBlbmNvZGVLaWQoKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgcmFuZG9tIEdVSUQgLSB1c2VkIHRvIHBvcHVsYXRlIHN0YXRlIGFuZCBub25jZS5cclxuICAgICAqIEByZXR1cm5zIHN0cmluZyAoR1VJRClcclxuICAgICAqL1xyXG4gICAgY3JlYXRlTmV3R3VpZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ndWlkR2VuZXJhdG9yLmdlbmVyYXRlR3VpZCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmNvZGVzIGlucHV0IHN0cmluZyB0byBiYXNlNjQuXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgLSBzdHJpbmcgdG8gYmUgZW5jb2RlZFxyXG4gICAgICovXHJcbiAgICBiYXNlNjRFbmNvZGUoaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gRW5jb2RpbmdVdGlscy5iYXNlNjRFbmNvZGUoaW5wdXQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEZWNvZGVzIGlucHV0IHN0cmluZyBmcm9tIGJhc2U2NC5cclxuICAgICAqIEBwYXJhbSBpbnB1dCAtIHN0cmluZyB0byBiZSBkZWNvZGVkXHJcbiAgICAgKi9cclxuICAgIGJhc2U2NERlY29kZShpbnB1dCkge1xyXG4gICAgICAgIHJldHVybiBFbmNvZGluZ1V0aWxzLmJhc2U2NERlY29kZShpbnB1dCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBQS0NFIGNvZGVzIHVzZWQgaW4gQXV0aG9yaXphdGlvbiBDb2RlIEZsb3cuXHJcbiAgICAgKi9cclxuICAgIGdlbmVyYXRlUGtjZUNvZGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBrY2VHZW5lcmF0b3IuZ2VuZXJhdGVQa2NlQ29kZXMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGEga2V5cGFpciwgc3RvcmVzIGl0IGFuZCByZXR1cm5zIGEgdGh1bWJwcmludCAtIG5vdCB5ZXQgaW1wbGVtZW50ZWQgZm9yIG5vZGVcclxuICAgICAqL1xyXG4gICAgZ2V0UHVibGljS2V5VGh1bWJwcmludCgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBjcnlwdG9ncmFwaGljIGtleXBhaXIgZnJvbSBrZXkgc3RvcmUgbWF0Y2hpbmcgdGhlIGtleUlkIHBhc3NlZCBpblxyXG4gICAgICogQHBhcmFtIGtpZCAtIHB1YmxpYyBrZXkgaWRcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlVG9rZW5CaW5kaW5nS2V5KCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGFsbCBjcnlwdG9ncmFwaGljIGtleXMgZnJvbSBLZXlzdG9yZVxyXG4gICAgICovXHJcbiAgICBjbGVhcktleXN0b3JlKCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTaWducyB0aGUgZ2l2ZW4gb2JqZWN0IGFzIGEgand0IHBheWxvYWQgd2l0aCBwcml2YXRlIGtleSByZXRyaWV2ZWQgYnkgZ2l2ZW4ga2lkIC0gY3VycmVudGx5IG5vdCBpbXBsZW1lbnRlZCBmb3Igbm9kZVxyXG4gICAgICovXHJcbiAgICBzaWduSnd0KCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBTSEEtMjU2IGhhc2ggb2YgYW4gaW5wdXQgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGhhc2hTdHJpbmcocGxhaW5UZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIEVuY29kaW5nVXRpbHMuYmFzZTY0RW5jb2RlVXJsKHRoaXMuaGFzaFV0aWxzLnNoYTI1NihwbGFpblRleHQpLnRvU3RyaW5nKFwiYmFzZTY0XCIpLCBcImJhc2U2NFwiKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBDcnlwdG9Qcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q3J5cHRvUHJvdmlkZXIubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkd1aWRHZW5lcmF0b3IiLCJFbmNvZGluZ1V0aWxzIiwiUGtjZUdlbmVyYXRvciIsIkhhc2hVdGlscyIsIkNyeXB0b1Byb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJwa2NlR2VuZXJhdG9yIiwiZ3VpZEdlbmVyYXRvciIsImhhc2hVdGlscyIsImJhc2U2NFVybEVuY29kZSIsIkVycm9yIiwiZW5jb2RlS2lkIiwiY3JlYXRlTmV3R3VpZCIsImdlbmVyYXRlR3VpZCIsImJhc2U2NEVuY29kZSIsImlucHV0IiwiYmFzZTY0RGVjb2RlIiwiZ2VuZXJhdGVQa2NlQ29kZXMiLCJnZXRQdWJsaWNLZXlUaHVtYnByaW50IiwicmVtb3ZlVG9rZW5CaW5kaW5nS2V5IiwiY2xlYXJLZXlzdG9yZSIsInNpZ25Kd3QiLCJoYXNoU3RyaW5nIiwicGxhaW5UZXh0IiwiYmFzZTY0RW5jb2RlVXJsIiwic2hhMjU2IiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/crypto/CryptoProvider.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/crypto/GuidGenerator.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/crypto/GuidGenerator.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GuidGenerator: () => (/* binding */ GuidGenerator)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class GuidGenerator {\n    /**\r\n     *\r\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or pseudo-random numbers.\r\n     * uuidv4 generates guids from cryprtographically-string random\r\n     */ generateGuid() {\n        return (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    }\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */ isGuid(guid) {\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        return regexGuid.test(guid);\n    }\n}\n //# sourceMappingURL=GuidGenerator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NyeXB0by9HdWlkR2VuZXJhdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUMwQjtBQUUxQjs7O0NBR0MsR0FDRCxNQUFNQztJQUNGOzs7O0tBSUMsR0FDREMsZUFBZTtRQUNYLE9BQU9GLGdEQUFFQTtJQUNiO0lBQ0E7OztLQUdDLEdBQ0RHLE9BQU9DLElBQUksRUFBRTtRQUNULE1BQU1DLFlBQVk7UUFDbEIsT0FBT0EsVUFBVUMsSUFBSSxDQUFDRjtJQUMxQjtBQUNKO0FBRXlCLENBQ3pCLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLW5vZGUvZGlzdC9jcnlwdG8vR3VpZEdlbmVyYXRvci5tanM/YjY3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtbm9kZSB2Mi4xNi4yIDIwMjQtMTEtMTkgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IHY0IH0gZnJvbSAndXVpZCc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBHdWlkR2VuZXJhdG9yIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIFJGQzQxMjI6IFRoZSB2ZXJzaW9uIDQgVVVJRCBpcyBtZWFudCBmb3IgZ2VuZXJhdGluZyBVVUlEcyBmcm9tIHRydWx5LXJhbmRvbSBvciBwc2V1ZG8tcmFuZG9tIG51bWJlcnMuXHJcbiAgICAgKiB1dWlkdjQgZ2VuZXJhdGVzIGd1aWRzIGZyb20gY3J5cHJ0b2dyYXBoaWNhbGx5LXN0cmluZyByYW5kb21cclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVHdWlkKCkge1xyXG4gICAgICAgIHJldHVybiB2NCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiB2ZXJpZmllcyBpZiBhIHN0cmluZyBpcyAgR1VJRFxyXG4gICAgICogQHBhcmFtIGd1aWRcclxuICAgICAqL1xyXG4gICAgaXNHdWlkKGd1aWQpIHtcclxuICAgICAgICBjb25zdCByZWdleEd1aWQgPSAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC9pO1xyXG4gICAgICAgIHJldHVybiByZWdleEd1aWQudGVzdChndWlkKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBHdWlkR2VuZXJhdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HdWlkR2VuZXJhdG9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJ2NCIsIkd1aWRHZW5lcmF0b3IiLCJnZW5lcmF0ZUd1aWQiLCJpc0d1aWQiLCJndWlkIiwicmVnZXhHdWlkIiwidGVzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/crypto/GuidGenerator.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/crypto/HashUtils.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/crypto/HashUtils.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HashUtils: () => (/* binding */ HashUtils)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class HashUtils {\n    /**\r\n     * generate 'SHA256' hash\r\n     * @param buffer\r\n     */ sha256(buffer) {\n        return crypto__WEBPACK_IMPORTED_MODULE_1__.createHash(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Hash.SHA256).update(buffer).digest();\n    }\n}\n //# sourceMappingURL=HashUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NyeXB0by9IYXNoVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUM4QztBQUNsQjtBQUU1Qjs7O0NBR0MsR0FDRCxNQUFNRTtJQUNGOzs7S0FHQyxHQUNEQyxPQUFPQyxNQUFNLEVBQUU7UUFDWCxPQUFPSCw4Q0FBaUIsQ0FBQ0Qsc0RBQUlBLENBQUNNLE1BQU0sRUFBRUMsTUFBTSxDQUFDSCxRQUFRSSxNQUFNO0lBQy9EO0FBQ0o7QUFFcUIsQ0FDckIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NyeXB0by9IYXNoVXRpbHMubWpzPzlmYjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLW5vZGUgdjIuMTYuMiAyMDI0LTExLTE5ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBIYXNoIH0gZnJvbSAnLi4vdXRpbHMvQ29uc3RhbnRzLm1qcyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBIYXNoVXRpbHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBnZW5lcmF0ZSAnU0hBMjU2JyBoYXNoXHJcbiAgICAgKiBAcGFyYW0gYnVmZmVyXHJcbiAgICAgKi9cclxuICAgIHNoYTI1NihidWZmZXIpIHtcclxuICAgICAgICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goSGFzaC5TSEEyNTYpLnVwZGF0ZShidWZmZXIpLmRpZ2VzdCgpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IEhhc2hVdGlscyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SGFzaFV0aWxzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJIYXNoIiwiY3J5cHRvIiwiSGFzaFV0aWxzIiwic2hhMjU2IiwiYnVmZmVyIiwiY3JlYXRlSGFzaCIsIlNIQTI1NiIsInVwZGF0ZSIsImRpZ2VzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/crypto/HashUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/crypto/PkceGenerator.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/crypto/PkceGenerator.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PkceGenerator: () => (/* binding */ PkceGenerator)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/EncodingUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/EncodingUtils.mjs\");\n/* harmony import */ var _HashUtils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HashUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/crypto/HashUtils.mjs\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * https://tools.ietf.org/html/rfc7636#page-8\r\n */ class PkceGenerator {\n    constructor(){\n        this.hashUtils = new _HashUtils_mjs__WEBPACK_IMPORTED_MODULE_2__.HashUtils();\n    }\n    /**\r\n     * generates the codeVerfier and the challenge from the codeVerfier\r\n     * reference: https://tools.ietf.org/html/rfc7636#section-4.1 and https://tools.ietf.org/html/rfc7636#section-4.2\r\n     */ async generatePkceCodes() {\n        const verifier = this.generateCodeVerifier();\n        const challenge = this.generateCodeChallengeFromVerifier(verifier);\n        return {\n            verifier,\n            challenge\n        };\n    }\n    /**\r\n     * generates the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.1\r\n     */ generateCodeVerifier() {\n        const charArr = [];\n        const maxNumber = 256 - 256 % _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CharSet.CV_CHARSET.length;\n        while(charArr.length <= _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.RANDOM_OCTET_SIZE){\n            const byte = crypto__WEBPACK_IMPORTED_MODULE_3__.randomBytes(1)[0];\n            if (byte >= maxNumber) {\n                continue;\n            }\n            const index = byte % _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CharSet.CV_CHARSET.length;\n            charArr.push(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.CharSet.CV_CHARSET[index]);\n        }\n        const verifier = charArr.join(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.Constants.EMPTY_STRING);\n        return _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.EncodingUtils.base64EncodeUrl(verifier);\n    }\n    /**\r\n     * generate the challenge from the codeVerfier; reference: https://tools.ietf.org/html/rfc7636#section-4.2\r\n     * @param codeVerifier\r\n     */ generateCodeChallengeFromVerifier(codeVerifier) {\n        return _utils_EncodingUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.EncodingUtils.base64EncodeUrl(this.hashUtils.sha256(codeVerifier).toString(\"base64\"), \"base64\");\n    }\n}\n //# sourceMappingURL=PkceGenerator.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NyeXB0by9Qa2NlR2VuZXJhdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDb0Q7QUFDZ0I7QUFDVDtBQUNmO0FBQ2hCO0FBRTVCOzs7Q0FHQyxHQUNEOztDQUVDLEdBQ0QsTUFBTU07SUFDRkMsYUFBYztRQUNWLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUlKLHFEQUFTQTtJQUNsQztJQUNBOzs7S0FHQyxHQUNELE1BQU1LLG9CQUFvQjtRQUN0QixNQUFNQyxXQUFXLElBQUksQ0FBQ0Msb0JBQW9CO1FBQzFDLE1BQU1DLFlBQVksSUFBSSxDQUFDQyxpQ0FBaUMsQ0FBQ0g7UUFDekQsT0FBTztZQUFFQTtZQUFVRTtRQUFVO0lBQ2pDO0lBQ0E7O0tBRUMsR0FDREQsdUJBQXVCO1FBQ25CLE1BQU1HLFVBQVUsRUFBRTtRQUNsQixNQUFNQyxZQUFZLE1BQU8sTUFBTWIseURBQU9BLENBQUNjLFVBQVUsQ0FBQ0MsTUFBTTtRQUN4RCxNQUFPSCxRQUFRRyxNQUFNLElBQUloQixtRUFBaUJBLENBQUU7WUFDeEMsTUFBTWlCLE9BQU9iLCtDQUFrQixDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3JDLElBQUlhLFFBQVFILFdBQVc7Z0JBS25CO1lBQ0o7WUFDQSxNQUFNSyxRQUFRRixPQUFPaEIseURBQU9BLENBQUNjLFVBQVUsQ0FBQ0MsTUFBTTtZQUM5Q0gsUUFBUU8sSUFBSSxDQUFDbkIseURBQU9BLENBQUNjLFVBQVUsQ0FBQ0ksTUFBTTtRQUMxQztRQUNBLE1BQU1WLFdBQVdJLFFBQVFRLElBQUksQ0FBQ3RCLDhEQUFTQSxDQUFDdUIsWUFBWTtRQUNwRCxPQUFPcEIsbUVBQWFBLENBQUNxQixlQUFlLENBQUNkO0lBQ3pDO0lBQ0E7OztLQUdDLEdBQ0RHLGtDQUFrQ1ksWUFBWSxFQUFFO1FBQzVDLE9BQU90QixtRUFBYUEsQ0FBQ3FCLGVBQWUsQ0FBQyxJQUFJLENBQUNoQixTQUFTLENBQUNrQixNQUFNLENBQUNELGNBQWNFLFFBQVEsQ0FBQyxXQUFXO0lBQ2pHO0FBQ0o7QUFFeUIsQ0FDekIsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2NyeXB0by9Qa2NlR2VuZXJhdG9yLm1qcz9kYWYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1ub2RlIHYyLjE2LjIgMjAyNC0xMS0xOSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL25vZGUnO1xuaW1wb3J0IHsgUkFORE9NX09DVEVUX1NJWkUsIENoYXJTZXQgfSBmcm9tICcuLi91dGlscy9Db25zdGFudHMubWpzJztcbmltcG9ydCB7IEVuY29kaW5nVXRpbHMgfSBmcm9tICcuLi91dGlscy9FbmNvZGluZ1V0aWxzLm1qcyc7XG5pbXBvcnQgeyBIYXNoVXRpbHMgfSBmcm9tICcuL0hhc2hVdGlscy5tanMnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3NjM2I3BhZ2UtOFxyXG4gKi9cclxuY2xhc3MgUGtjZUdlbmVyYXRvciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmhhc2hVdGlscyA9IG5ldyBIYXNoVXRpbHMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGVzIHRoZSBjb2RlVmVyZmllciBhbmQgdGhlIGNoYWxsZW5nZSBmcm9tIHRoZSBjb2RlVmVyZmllclxyXG4gICAgICogcmVmZXJlbmNlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzYzNiNzZWN0aW9uLTQuMSBhbmQgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc2MzYjc2VjdGlvbi00LjJcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2VuZXJhdGVQa2NlQ29kZXMoKSB7XHJcbiAgICAgICAgY29uc3QgdmVyaWZpZXIgPSB0aGlzLmdlbmVyYXRlQ29kZVZlcmlmaWVyKCk7XHJcbiAgICAgICAgY29uc3QgY2hhbGxlbmdlID0gdGhpcy5nZW5lcmF0ZUNvZGVDaGFsbGVuZ2VGcm9tVmVyaWZpZXIodmVyaWZpZXIpO1xyXG4gICAgICAgIHJldHVybiB7IHZlcmlmaWVyLCBjaGFsbGVuZ2UgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGVzIHRoZSBjb2RlVmVyZmllcjsgcmVmZXJlbmNlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzYzNiNzZWN0aW9uLTQuMVxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZUNvZGVWZXJpZmllcigpIHtcclxuICAgICAgICBjb25zdCBjaGFyQXJyID0gW107XHJcbiAgICAgICAgY29uc3QgbWF4TnVtYmVyID0gMjU2IC0gKDI1NiAlIENoYXJTZXQuQ1ZfQ0hBUlNFVC5sZW5ndGgpO1xyXG4gICAgICAgIHdoaWxlIChjaGFyQXJyLmxlbmd0aCA8PSBSQU5ET01fT0NURVRfU0laRSkge1xyXG4gICAgICAgICAgICBjb25zdCBieXRlID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDEpWzBdO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZSA+PSBtYXhOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgKiBJZ25vcmUgdGhpcyBudW1iZXIgdG8gbWFpbnRhaW4gcmFuZG9tbmVzcy5cclxuICAgICAgICAgICAgICAgICAqIEluY2x1ZGluZyBpdCB3b3VsZCByZXN1bHQgaW4gYW4gdW5lcXVhbCBkaXN0cmlidXRpb24gb2YgY2hhcmFjdGVycyBhZnRlciBkb2luZyB0aGUgbW9kdWxvXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYnl0ZSAlIENoYXJTZXQuQ1ZfQ0hBUlNFVC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNoYXJBcnIucHVzaChDaGFyU2V0LkNWX0NIQVJTRVRbaW5kZXhdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdmVyaWZpZXIgPSBjaGFyQXJyLmpvaW4oQ29uc3RhbnRzLkVNUFRZX1NUUklORyk7XHJcbiAgICAgICAgcmV0dXJuIEVuY29kaW5nVXRpbHMuYmFzZTY0RW5jb2RlVXJsKHZlcmlmaWVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGUgdGhlIGNoYWxsZW5nZSBmcm9tIHRoZSBjb2RlVmVyZmllcjsgcmVmZXJlbmNlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzYzNiNzZWN0aW9uLTQuMlxyXG4gICAgICogQHBhcmFtIGNvZGVWZXJpZmllclxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZUNvZGVDaGFsbGVuZ2VGcm9tVmVyaWZpZXIoY29kZVZlcmlmaWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIEVuY29kaW5nVXRpbHMuYmFzZTY0RW5jb2RlVXJsKHRoaXMuaGFzaFV0aWxzLnNoYTI1Nihjb2RlVmVyaWZpZXIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpLCBcImJhc2U2NFwiKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBQa2NlR2VuZXJhdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qa2NlR2VuZXJhdG9yLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJDb25zdGFudHMiLCJSQU5ET01fT0NURVRfU0laRSIsIkNoYXJTZXQiLCJFbmNvZGluZ1V0aWxzIiwiSGFzaFV0aWxzIiwiY3J5cHRvIiwiUGtjZUdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwiaGFzaFV0aWxzIiwiZ2VuZXJhdGVQa2NlQ29kZXMiLCJ2ZXJpZmllciIsImdlbmVyYXRlQ29kZVZlcmlmaWVyIiwiY2hhbGxlbmdlIiwiZ2VuZXJhdGVDb2RlQ2hhbGxlbmdlRnJvbVZlcmlmaWVyIiwiY2hhckFyciIsIm1heE51bWJlciIsIkNWX0NIQVJTRVQiLCJsZW5ndGgiLCJieXRlIiwicmFuZG9tQnl0ZXMiLCJpbmRleCIsInB1c2giLCJqb2luIiwiRU1QVFlfU1RSSU5HIiwiYmFzZTY0RW5jb2RlVXJsIiwiY29kZVZlcmlmaWVyIiwic2hhMjU2IiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/crypto/PkceGenerator.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityError.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/error/ManagedIdentityError.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ManagedIdentityError: () => (/* binding */ ManagedIdentityError),\n/* harmony export */   ManagedIdentityErrorMessages: () => (/* binding */ ManagedIdentityErrorMessages),\n/* harmony export */   createManagedIdentityError: () => (/* binding */ createManagedIdentityError)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ManagedIdentityErrorCodes.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * ManagedIdentityErrorMessage class containing string constants used by error codes and messages.\r\n */ const ManagedIdentityErrorMessages = {\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidFileExtension]: \"The file path in the WWW-Authenticate header does not contain a .key file.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidFilePath]: \"The file path in the WWW-Authenticate header is not in a valid Windows or Linux Format.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidManagedIdentityIdType]: \"More than one ManagedIdentityIdType was provided.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.invalidSecret]: \"The secret in the file on the file path in the WWW-Authenticate header is greater than 4096 bytes.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.platformNotSupported]: \"The platform is not supported by Azure Arc. Azure Arc only supports Windows and Linux.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.missingId]: \"A ManagedIdentityId id was not provided.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.MsiEnvironmentVariableUrlMalformedErrorCodes.AZURE_POD_IDENTITY_AUTHORITY_HOST]: `The Managed Identity's '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST}' environment variable is malformed.`,\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.MsiEnvironmentVariableUrlMalformedErrorCodes.IDENTITY_ENDPOINT]: `The Managed Identity's '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT}' environment variable is malformed.`,\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.MsiEnvironmentVariableUrlMalformedErrorCodes.IMDS_ENDPOINT]: `The Managed Identity's '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT}' environment variable is malformed.`,\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.MsiEnvironmentVariableUrlMalformedErrorCodes.MSI_ENDPOINT]: `The Managed Identity's '${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_1__.ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT}' environment variable is malformed.`,\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.networkUnavailable]: \"Authentication unavailable. The request to the managed identity endpoint timed out.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToCreateAzureArc]: \"Azure Arc Managed Identities can only be system assigned.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToCreateCloudShell]: \"Cloud Shell Managed Identities can only be system assigned.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToCreateSource]: \"Unable to create a Managed Identity source based on environment variables.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.unableToReadSecretFile]: \"Unable to read the secret file.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.userAssignedNotAvailableAtRuntime]: \"Service Fabric user assigned managed identity ClientId or ResourceId is not configurable at runtime.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.wwwAuthenticateHeaderMissing]: \"A 401 response was received form the Azure Arc Managed Identity, but the www-authenticate header is missing.\",\n    [_ManagedIdentityErrorCodes_mjs__WEBPACK_IMPORTED_MODULE_0__.wwwAuthenticateHeaderUnsupportedFormat]: \"A 401 response was received form the Azure Arc Managed Identity, but the www-authenticate header is in an unsupported format.\"\n};\nclass ManagedIdentityError extends _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_2__.AuthError {\n    constructor(errorCode){\n        super(errorCode, ManagedIdentityErrorMessages[errorCode]);\n        this.name = \"ManagedIdentityError\";\n        Object.setPrototypeOf(this, ManagedIdentityError.prototype);\n    }\n}\nfunction createManagedIdentityError(errorCode) {\n    return new ManagedIdentityError(errorCode);\n}\n //# sourceMappingURL=ManagedIdentityError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MsiEnvironmentVariableUrlMalformedErrorCodes: () => (/* binding */ MsiEnvironmentVariableUrlMalformedErrorCodes),\n/* harmony export */   invalidFileExtension: () => (/* binding */ invalidFileExtension),\n/* harmony export */   invalidFilePath: () => (/* binding */ invalidFilePath),\n/* harmony export */   invalidManagedIdentityIdType: () => (/* binding */ invalidManagedIdentityIdType),\n/* harmony export */   invalidSecret: () => (/* binding */ invalidSecret),\n/* harmony export */   missingId: () => (/* binding */ missingId),\n/* harmony export */   networkUnavailable: () => (/* binding */ networkUnavailable),\n/* harmony export */   platformNotSupported: () => (/* binding */ platformNotSupported),\n/* harmony export */   unableToCreateAzureArc: () => (/* binding */ unableToCreateAzureArc),\n/* harmony export */   unableToCreateCloudShell: () => (/* binding */ unableToCreateCloudShell),\n/* harmony export */   unableToCreateSource: () => (/* binding */ unableToCreateSource),\n/* harmony export */   unableToReadSecretFile: () => (/* binding */ unableToReadSecretFile),\n/* harmony export */   userAssignedNotAvailableAtRuntime: () => (/* binding */ userAssignedNotAvailableAtRuntime),\n/* harmony export */   wwwAuthenticateHeaderMissing: () => (/* binding */ wwwAuthenticateHeaderMissing),\n/* harmony export */   wwwAuthenticateHeaderUnsupportedFormat: () => (/* binding */ wwwAuthenticateHeaderUnsupportedFormat)\n/* harmony export */ });\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ const invalidFileExtension = \"invalid_file_extension\";\nconst invalidFilePath = \"invalid_file_path\";\nconst invalidManagedIdentityIdType = \"invalid_managed_identity_id_type\";\nconst invalidSecret = \"invalid_secret\";\nconst missingId = \"missing_client_id\";\nconst networkUnavailable = \"network_unavailable\";\nconst platformNotSupported = \"platform_not_supported\";\nconst unableToCreateAzureArc = \"unable_to_create_azure_arc\";\nconst unableToCreateCloudShell = \"unable_to_create_cloud_shell\";\nconst unableToCreateSource = \"unable_to_create_source\";\nconst unableToReadSecretFile = \"unable_to_read_secret_file\";\nconst userAssignedNotAvailableAtRuntime = \"user_assigned_not_available_at_runtime\";\nconst wwwAuthenticateHeaderMissing = \"www_authenticate_header_missing\";\nconst wwwAuthenticateHeaderUnsupportedFormat = \"www_authenticate_header_unsupported_format\";\nconst MsiEnvironmentVariableUrlMalformedErrorCodes = {\n    [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityEnvironmentVariableNames.AZURE_POD_IDENTITY_AUTHORITY_HOST]: \"azure_pod_identity_authority_host_url_malformed\",\n    [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityEnvironmentVariableNames.IDENTITY_ENDPOINT]: \"identity_endpoint_url_malformed\",\n    [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityEnvironmentVariableNames.IMDS_ENDPOINT]: \"imds_endpoint_url_malformed\",\n    [_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ManagedIdentityEnvironmentVariableNames.MSI_ENDPOINT]: \"msi_endpoint_url_malformed\"\n};\n //# sourceMappingURL=ManagedIdentityErrorCodes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2Vycm9yL01hbmFnZWRJZGVudGl0eUVycm9yQ29kZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDaUY7QUFFakY7OztDQUdDLEdBQ0QsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQywrQkFBK0I7QUFDckMsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLFlBQVk7QUFDbEIsTUFBTUMscUJBQXFCO0FBQzNCLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyx5QkFBeUI7QUFDL0IsTUFBTUMsMkJBQTJCO0FBQ2pDLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyx5QkFBeUI7QUFDL0IsTUFBTUMsb0NBQW9DO0FBQzFDLE1BQU1DLCtCQUErQjtBQUNyQyxNQUFNQyx5Q0FBeUM7QUFDL0MsTUFBTUMsK0NBQStDO0lBQ2pELENBQUNmLHlGQUF1Q0EsQ0FBQ2dCLGlDQUFpQyxDQUFDLEVBQUU7SUFDN0UsQ0FBQ2hCLHlGQUF1Q0EsQ0FBQ2lCLGlCQUFpQixDQUFDLEVBQUU7SUFDN0QsQ0FBQ2pCLHlGQUF1Q0EsQ0FBQ2tCLGFBQWEsQ0FBQyxFQUFFO0lBQ3pELENBQUNsQix5RkFBdUNBLENBQUNtQixZQUFZLENBQUMsRUFBRTtBQUM1RDtBQUUwWSxDQUMxWSxzREFBc0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1ub2RlL2Rpc3QvZXJyb3IvTWFuYWdlZElkZW50aXR5RXJyb3JDb2Rlcy5tanM/MzdiZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtbm9kZSB2Mi4xNi4yIDIwMjQtMTEtMTkgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IE1hbmFnZWRJZGVudGl0eUVudmlyb25tZW50VmFyaWFibGVOYW1lcyB9IGZyb20gJy4uL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgaW52YWxpZEZpbGVFeHRlbnNpb24gPSBcImludmFsaWRfZmlsZV9leHRlbnNpb25cIjtcclxuY29uc3QgaW52YWxpZEZpbGVQYXRoID0gXCJpbnZhbGlkX2ZpbGVfcGF0aFwiO1xyXG5jb25zdCBpbnZhbGlkTWFuYWdlZElkZW50aXR5SWRUeXBlID0gXCJpbnZhbGlkX21hbmFnZWRfaWRlbnRpdHlfaWRfdHlwZVwiO1xyXG5jb25zdCBpbnZhbGlkU2VjcmV0ID0gXCJpbnZhbGlkX3NlY3JldFwiO1xyXG5jb25zdCBtaXNzaW5nSWQgPSBcIm1pc3NpbmdfY2xpZW50X2lkXCI7XHJcbmNvbnN0IG5ldHdvcmtVbmF2YWlsYWJsZSA9IFwibmV0d29ya191bmF2YWlsYWJsZVwiO1xyXG5jb25zdCBwbGF0Zm9ybU5vdFN1cHBvcnRlZCA9IFwicGxhdGZvcm1fbm90X3N1cHBvcnRlZFwiO1xyXG5jb25zdCB1bmFibGVUb0NyZWF0ZUF6dXJlQXJjID0gXCJ1bmFibGVfdG9fY3JlYXRlX2F6dXJlX2FyY1wiO1xyXG5jb25zdCB1bmFibGVUb0NyZWF0ZUNsb3VkU2hlbGwgPSBcInVuYWJsZV90b19jcmVhdGVfY2xvdWRfc2hlbGxcIjtcclxuY29uc3QgdW5hYmxlVG9DcmVhdGVTb3VyY2UgPSBcInVuYWJsZV90b19jcmVhdGVfc291cmNlXCI7XHJcbmNvbnN0IHVuYWJsZVRvUmVhZFNlY3JldEZpbGUgPSBcInVuYWJsZV90b19yZWFkX3NlY3JldF9maWxlXCI7XHJcbmNvbnN0IHVzZXJBc3NpZ25lZE5vdEF2YWlsYWJsZUF0UnVudGltZSA9IFwidXNlcl9hc3NpZ25lZF9ub3RfYXZhaWxhYmxlX2F0X3J1bnRpbWVcIjtcclxuY29uc3Qgd3d3QXV0aGVudGljYXRlSGVhZGVyTWlzc2luZyA9IFwid3d3X2F1dGhlbnRpY2F0ZV9oZWFkZXJfbWlzc2luZ1wiO1xyXG5jb25zdCB3d3dBdXRoZW50aWNhdGVIZWFkZXJVbnN1cHBvcnRlZEZvcm1hdCA9IFwid3d3X2F1dGhlbnRpY2F0ZV9oZWFkZXJfdW5zdXBwb3J0ZWRfZm9ybWF0XCI7XHJcbmNvbnN0IE1zaUVudmlyb25tZW50VmFyaWFibGVVcmxNYWxmb3JtZWRFcnJvckNvZGVzID0ge1xyXG4gICAgW01hbmFnZWRJZGVudGl0eUVudmlyb25tZW50VmFyaWFibGVOYW1lcy5BWlVSRV9QT0RfSURFTlRJVFlfQVVUSE9SSVRZX0hPU1RdOiBcImF6dXJlX3BvZF9pZGVudGl0eV9hdXRob3JpdHlfaG9zdF91cmxfbWFsZm9ybWVkXCIsXHJcbiAgICBbTWFuYWdlZElkZW50aXR5RW52aXJvbm1lbnRWYXJpYWJsZU5hbWVzLklERU5USVRZX0VORFBPSU5UXTogXCJpZGVudGl0eV9lbmRwb2ludF91cmxfbWFsZm9ybWVkXCIsXHJcbiAgICBbTWFuYWdlZElkZW50aXR5RW52aXJvbm1lbnRWYXJpYWJsZU5hbWVzLklNRFNfRU5EUE9JTlRdOiBcImltZHNfZW5kcG9pbnRfdXJsX21hbGZvcm1lZFwiLFxyXG4gICAgW01hbmFnZWRJZGVudGl0eUVudmlyb25tZW50VmFyaWFibGVOYW1lcy5NU0lfRU5EUE9JTlRdOiBcIm1zaV9lbmRwb2ludF91cmxfbWFsZm9ybWVkXCIsXHJcbn07XG5cbmV4cG9ydCB7IE1zaUVudmlyb25tZW50VmFyaWFibGVVcmxNYWxmb3JtZWRFcnJvckNvZGVzLCBpbnZhbGlkRmlsZUV4dGVuc2lvbiwgaW52YWxpZEZpbGVQYXRoLCBpbnZhbGlkTWFuYWdlZElkZW50aXR5SWRUeXBlLCBpbnZhbGlkU2VjcmV0LCBtaXNzaW5nSWQsIG5ldHdvcmtVbmF2YWlsYWJsZSwgcGxhdGZvcm1Ob3RTdXBwb3J0ZWQsIHVuYWJsZVRvQ3JlYXRlQXp1cmVBcmMsIHVuYWJsZVRvQ3JlYXRlQ2xvdWRTaGVsbCwgdW5hYmxlVG9DcmVhdGVTb3VyY2UsIHVuYWJsZVRvUmVhZFNlY3JldEZpbGUsIHVzZXJBc3NpZ25lZE5vdEF2YWlsYWJsZUF0UnVudGltZSwgd3d3QXV0aGVudGljYXRlSGVhZGVyTWlzc2luZywgd3d3QXV0aGVudGljYXRlSGVhZGVyVW5zdXBwb3J0ZWRGb3JtYXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1hbmFnZWRJZGVudGl0eUVycm9yQ29kZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIk1hbmFnZWRJZGVudGl0eUVudmlyb25tZW50VmFyaWFibGVOYW1lcyIsImludmFsaWRGaWxlRXh0ZW5zaW9uIiwiaW52YWxpZEZpbGVQYXRoIiwiaW52YWxpZE1hbmFnZWRJZGVudGl0eUlkVHlwZSIsImludmFsaWRTZWNyZXQiLCJtaXNzaW5nSWQiLCJuZXR3b3JrVW5hdmFpbGFibGUiLCJwbGF0Zm9ybU5vdFN1cHBvcnRlZCIsInVuYWJsZVRvQ3JlYXRlQXp1cmVBcmMiLCJ1bmFibGVUb0NyZWF0ZUNsb3VkU2hlbGwiLCJ1bmFibGVUb0NyZWF0ZVNvdXJjZSIsInVuYWJsZVRvUmVhZFNlY3JldEZpbGUiLCJ1c2VyQXNzaWduZWROb3RBdmFpbGFibGVBdFJ1bnRpbWUiLCJ3d3dBdXRoZW50aWNhdGVIZWFkZXJNaXNzaW5nIiwid3d3QXV0aGVudGljYXRlSGVhZGVyVW5zdXBwb3J0ZWRGb3JtYXQiLCJNc2lFbnZpcm9ubWVudFZhcmlhYmxlVXJsTWFsZm9ybWVkRXJyb3JDb2RlcyIsIkFaVVJFX1BPRF9JREVOVElUWV9BVVRIT1JJVFlfSE9TVCIsIklERU5USVRZX0VORFBPSU5UIiwiSU1EU19FTkRQT0lOVCIsIk1TSV9FTkRQT0lOVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/error/ManagedIdentityErrorCodes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/error/NodeAuthError.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/error/NodeAuthError.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeAuthError: () => (/* binding */ NodeAuthError),\n/* harmony export */   NodeAuthErrorMessage: () => (/* binding */ NodeAuthErrorMessage)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * NodeAuthErrorMessage class containing string constants used by error codes and messages.\r\n */ const NodeAuthErrorMessage = {\n    invalidLoopbackAddressType: {\n        code: \"invalid_loopback_server_address_type\",\n        desc: \"Loopback server address is not type string. This is unexpected.\"\n    },\n    unableToLoadRedirectUri: {\n        code: \"unable_to_load_redirectUrl\",\n        desc: \"Loopback server callback was invoked without a url. This is unexpected.\"\n    },\n    noAuthCodeInResponse: {\n        code: \"no_auth_code_in_response\",\n        desc: \"No auth code found in the server response. Please check your network trace to determine what happened.\"\n    },\n    noLoopbackServerExists: {\n        code: \"no_loopback_server_exists\",\n        desc: \"No loopback server exists yet.\"\n    },\n    loopbackServerAlreadyExists: {\n        code: \"loopback_server_already_exists\",\n        desc: \"Loopback server already exists. Cannot create another.\"\n    },\n    loopbackServerTimeout: {\n        code: \"loopback_server_timeout\",\n        desc: \"Timed out waiting for auth code listener to be registered.\"\n    },\n    stateNotFoundError: {\n        code: \"state_not_found\",\n        desc: \"State not found. Please verify that the request originated from msal.\"\n    },\n    thumbprintMissing: {\n        code: \"thumbprint_missing_from_client_certificate\",\n        desc: \"Client certificate does not contain a SHA-1 or SHA-256 thumbprint.\"\n    }\n};\nclass NodeAuthError extends _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.AuthError {\n    constructor(errorCode, errorMessage){\n        super(errorCode, errorMessage);\n        this.name = \"NodeAuthError\";\n    }\n    /**\r\n     * Creates an error thrown if loopback server address is of type string.\r\n     */ static createInvalidLoopbackAddressTypeError() {\n        return new NodeAuthError(NodeAuthErrorMessage.invalidLoopbackAddressType.code, `${NodeAuthErrorMessage.invalidLoopbackAddressType.desc}`);\n    }\n    /**\r\n     * Creates an error thrown if the loopback server is unable to get a url.\r\n     */ static createUnableToLoadRedirectUrlError() {\n        return new NodeAuthError(NodeAuthErrorMessage.unableToLoadRedirectUri.code, `${NodeAuthErrorMessage.unableToLoadRedirectUri.desc}`);\n    }\n    /**\r\n     * Creates an error thrown if the server response does not contain an auth code.\r\n     */ static createNoAuthCodeInResponseError() {\n        return new NodeAuthError(NodeAuthErrorMessage.noAuthCodeInResponse.code, `${NodeAuthErrorMessage.noAuthCodeInResponse.desc}`);\n    }\n    /**\r\n     * Creates an error thrown if the loopback server has not been spun up yet.\r\n     */ static createNoLoopbackServerExistsError() {\n        return new NodeAuthError(NodeAuthErrorMessage.noLoopbackServerExists.code, `${NodeAuthErrorMessage.noLoopbackServerExists.desc}`);\n    }\n    /**\r\n     * Creates an error thrown if a loopback server already exists when attempting to create another one.\r\n     */ static createLoopbackServerAlreadyExistsError() {\n        return new NodeAuthError(NodeAuthErrorMessage.loopbackServerAlreadyExists.code, `${NodeAuthErrorMessage.loopbackServerAlreadyExists.desc}`);\n    }\n    /**\r\n     * Creates an error thrown if the loopback server times out registering the auth code listener.\r\n     */ static createLoopbackServerTimeoutError() {\n        return new NodeAuthError(NodeAuthErrorMessage.loopbackServerTimeout.code, `${NodeAuthErrorMessage.loopbackServerTimeout.desc}`);\n    }\n    /**\r\n     * Creates an error thrown when the state is not present.\r\n     */ static createStateNotFoundError() {\n        return new NodeAuthError(NodeAuthErrorMessage.stateNotFoundError.code, NodeAuthErrorMessage.stateNotFoundError.desc);\n    }\n    /**\r\n     * Creates an error thrown when client certificate was provided, but neither the SHA-1 or SHA-256 thumbprints were provided\r\n     */ static createThumbprintMissingError() {\n        return new NodeAuthError(NodeAuthErrorMessage.thumbprintMissing.code, NodeAuthErrorMessage.thumbprintMissing.desc);\n    }\n}\n //# sourceMappingURL=NodeAuthError.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/error/NodeAuthError.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthError: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_15__.AuthError),\n/* harmony export */   AuthErrorCodes: () => (/* reexport module object */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_16__),\n/* harmony export */   AuthErrorMessage: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_15__.AuthErrorMessage),\n/* harmony export */   AzureCloudInstance: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_17__.AzureCloudInstance),\n/* harmony export */   ClientApplication: () => (/* reexport safe */ _client_ClientApplication_mjs__WEBPACK_IMPORTED_MODULE_3__.ClientApplication),\n/* harmony export */   ClientAssertion: () => (/* reexport safe */ _client_ClientAssertion_mjs__WEBPACK_IMPORTED_MODULE_9__.ClientAssertion),\n/* harmony export */   ClientAuthError: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_18__.ClientAuthError),\n/* harmony export */   ClientAuthErrorCodes: () => (/* reexport module object */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_19__),\n/* harmony export */   ClientAuthErrorMessage: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_18__.ClientAuthErrorMessage),\n/* harmony export */   ClientConfigurationError: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_20__.ClientConfigurationError),\n/* harmony export */   ClientConfigurationErrorCodes: () => (/* reexport module object */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_21__),\n/* harmony export */   ClientConfigurationErrorMessage: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_20__.ClientConfigurationErrorMessage),\n/* harmony export */   ClientCredentialClient: () => (/* reexport safe */ _client_ClientCredentialClient_mjs__WEBPACK_IMPORTED_MODULE_4__.ClientCredentialClient),\n/* harmony export */   ConfidentialClientApplication: () => (/* reexport safe */ _client_ConfidentialClientApplication_mjs__WEBPACK_IMPORTED_MODULE_2__.ConfidentialClientApplication),\n/* harmony export */   CryptoProvider: () => (/* reexport safe */ _crypto_CryptoProvider_mjs__WEBPACK_IMPORTED_MODULE_14__.CryptoProvider),\n/* harmony export */   DeviceCodeClient: () => (/* reexport safe */ _client_DeviceCodeClient_mjs__WEBPACK_IMPORTED_MODULE_5__.DeviceCodeClient),\n/* harmony export */   DistributedCachePlugin: () => (/* reexport safe */ _cache_distributed_DistributedCachePlugin_mjs__WEBPACK_IMPORTED_MODULE_12__.DistributedCachePlugin),\n/* harmony export */   InteractionRequiredAuthError: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_22__.InteractionRequiredAuthError),\n/* harmony export */   InteractionRequiredAuthErrorCodes: () => (/* reexport module object */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_23__),\n/* harmony export */   InteractionRequiredAuthErrorMessage: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_22__.InteractionRequiredAuthErrorMessage),\n/* harmony export */   LogLevel: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_24__.LogLevel),\n/* harmony export */   Logger: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_24__.Logger),\n/* harmony export */   ManagedIdentityApplication: () => (/* reexport safe */ _client_ManagedIdentityApplication_mjs__WEBPACK_IMPORTED_MODULE_7__.ManagedIdentityApplication),\n/* harmony export */   ManagedIdentitySourceNames: () => (/* reexport safe */ _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_13__.ManagedIdentitySourceNames),\n/* harmony export */   NodeStorage: () => (/* reexport safe */ _cache_NodeStorage_mjs__WEBPACK_IMPORTED_MODULE_11__.NodeStorage),\n/* harmony export */   OnBehalfOfClient: () => (/* reexport safe */ _client_OnBehalfOfClient_mjs__WEBPACK_IMPORTED_MODULE_6__.OnBehalfOfClient),\n/* harmony export */   PromptValue: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_25__.PromptValue),\n/* harmony export */   ProtocolMode: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_26__.ProtocolMode),\n/* harmony export */   PublicClientApplication: () => (/* reexport safe */ _client_PublicClientApplication_mjs__WEBPACK_IMPORTED_MODULE_1__.PublicClientApplication),\n/* harmony export */   ResponseMode: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_25__.ResponseMode),\n/* harmony export */   ServerError: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_27__.ServerError),\n/* harmony export */   TokenCache: () => (/* reexport safe */ _cache_TokenCache_mjs__WEBPACK_IMPORTED_MODULE_10__.TokenCache),\n/* harmony export */   TokenCacheContext: () => (/* reexport safe */ _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_28__.TokenCacheContext),\n/* harmony export */   UsernamePasswordClient: () => (/* reexport safe */ _client_UsernamePasswordClient_mjs__WEBPACK_IMPORTED_MODULE_8__.UsernamePasswordClient),\n/* harmony export */   internals: () => (/* reexport module object */ _internals_mjs__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   version: () => (/* reexport safe */ _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_29__.version)\n/* harmony export */ });\n/* harmony import */ var _internals_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internals.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/internals.mjs\");\n/* harmony import */ var _client_PublicClientApplication_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client/PublicClientApplication.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/PublicClientApplication.mjs\");\n/* harmony import */ var _client_ConfidentialClientApplication_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./client/ConfidentialClientApplication.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ConfidentialClientApplication.mjs\");\n/* harmony import */ var _client_ClientApplication_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./client/ClientApplication.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientApplication.mjs\");\n/* harmony import */ var _client_ClientCredentialClient_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./client/ClientCredentialClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientCredentialClient.mjs\");\n/* harmony import */ var _client_DeviceCodeClient_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./client/DeviceCodeClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/DeviceCodeClient.mjs\");\n/* harmony import */ var _client_OnBehalfOfClient_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./client/OnBehalfOfClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/OnBehalfOfClient.mjs\");\n/* harmony import */ var _client_ManagedIdentityApplication_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./client/ManagedIdentityApplication.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ManagedIdentityApplication.mjs\");\n/* harmony import */ var _client_UsernamePasswordClient_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./client/UsernamePasswordClient.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/UsernamePasswordClient.mjs\");\n/* harmony import */ var _client_ClientAssertion_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./client/ClientAssertion.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/client/ClientAssertion.mjs\");\n/* harmony import */ var _cache_TokenCache_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cache/TokenCache.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/TokenCache.mjs\");\n/* harmony import */ var _cache_NodeStorage_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cache/NodeStorage.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/NodeStorage.mjs\");\n/* harmony import */ var _cache_distributed_DistributedCachePlugin_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./cache/distributed/DistributedCachePlugin.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/distributed/DistributedCachePlugin.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _crypto_CryptoProvider_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./crypto/CryptoProvider.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/crypto/CryptoProvider.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/AuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/AuthorityOptions.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/logger/Logger.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/authority/ProtocolMode.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/error/ServerError.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs\");\n/* harmony import */ var _packageMetadata_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./packageMetadata.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/packageMetadata.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDNkM7QUFDeEI7QUFDMEQ7QUFDWTtBQUN4QjtBQUNVO0FBQ1o7QUFDQTtBQUNvQjtBQUNSO0FBQ2Q7QUFDWDtBQUNFO0FBQ2tDO0FBQ3JCO0FBQ047QUFDdVk7QUFDcFosQ0FDaEQsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2luZGV4Lm1qcz84MGVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1ub2RlIHYyLjE2LjIgMjAyNC0xMS0xOSAqL1xuJ3VzZSBzdHJpY3QnO1xuaW1wb3J0ICogYXMgaW50ZXJuYWxzIGZyb20gJy4vaW50ZXJuYWxzLm1qcyc7XG5leHBvcnQgeyBpbnRlcm5hbHMgfTtcbmV4cG9ydCB7IFB1YmxpY0NsaWVudEFwcGxpY2F0aW9uIH0gZnJvbSAnLi9jbGllbnQvUHVibGljQ2xpZW50QXBwbGljYXRpb24ubWpzJztcbmV4cG9ydCB7IENvbmZpZGVudGlhbENsaWVudEFwcGxpY2F0aW9uIH0gZnJvbSAnLi9jbGllbnQvQ29uZmlkZW50aWFsQ2xpZW50QXBwbGljYXRpb24ubWpzJztcbmV4cG9ydCB7IENsaWVudEFwcGxpY2F0aW9uIH0gZnJvbSAnLi9jbGllbnQvQ2xpZW50QXBwbGljYXRpb24ubWpzJztcbmV4cG9ydCB7IENsaWVudENyZWRlbnRpYWxDbGllbnQgfSBmcm9tICcuL2NsaWVudC9DbGllbnRDcmVkZW50aWFsQ2xpZW50Lm1qcyc7XG5leHBvcnQgeyBEZXZpY2VDb2RlQ2xpZW50IH0gZnJvbSAnLi9jbGllbnQvRGV2aWNlQ29kZUNsaWVudC5tanMnO1xuZXhwb3J0IHsgT25CZWhhbGZPZkNsaWVudCB9IGZyb20gJy4vY2xpZW50L09uQmVoYWxmT2ZDbGllbnQubWpzJztcbmV4cG9ydCB7IE1hbmFnZWRJZGVudGl0eUFwcGxpY2F0aW9uIH0gZnJvbSAnLi9jbGllbnQvTWFuYWdlZElkZW50aXR5QXBwbGljYXRpb24ubWpzJztcbmV4cG9ydCB7IFVzZXJuYW1lUGFzc3dvcmRDbGllbnQgfSBmcm9tICcuL2NsaWVudC9Vc2VybmFtZVBhc3N3b3JkQ2xpZW50Lm1qcyc7XG5leHBvcnQgeyBDbGllbnRBc3NlcnRpb24gfSBmcm9tICcuL2NsaWVudC9DbGllbnRBc3NlcnRpb24ubWpzJztcbmV4cG9ydCB7IFRva2VuQ2FjaGUgfSBmcm9tICcuL2NhY2hlL1Rva2VuQ2FjaGUubWpzJztcbmV4cG9ydCB7IE5vZGVTdG9yYWdlIH0gZnJvbSAnLi9jYWNoZS9Ob2RlU3RvcmFnZS5tanMnO1xuZXhwb3J0IHsgRGlzdHJpYnV0ZWRDYWNoZVBsdWdpbiB9IGZyb20gJy4vY2FjaGUvZGlzdHJpYnV0ZWQvRGlzdHJpYnV0ZWRDYWNoZVBsdWdpbi5tanMnO1xuZXhwb3J0IHsgTWFuYWdlZElkZW50aXR5U291cmNlTmFtZXMgfSBmcm9tICcuL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuZXhwb3J0IHsgQ3J5cHRvUHJvdmlkZXIgfSBmcm9tICcuL2NyeXB0by9DcnlwdG9Qcm92aWRlci5tanMnO1xuZXhwb3J0IHsgQXV0aEVycm9yLCBBdXRoRXJyb3JDb2RlcywgQXV0aEVycm9yTWVzc2FnZSwgQXp1cmVDbG91ZEluc3RhbmNlLCBDbGllbnRBdXRoRXJyb3IsIENsaWVudEF1dGhFcnJvckNvZGVzLCBDbGllbnRBdXRoRXJyb3JNZXNzYWdlLCBDbGllbnRDb25maWd1cmF0aW9uRXJyb3IsIENsaWVudENvbmZpZ3VyYXRpb25FcnJvckNvZGVzLCBDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yLCBJbnRlcmFjdGlvblJlcXVpcmVkQXV0aEVycm9yQ29kZXMsIEludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JNZXNzYWdlLCBMb2dMZXZlbCwgTG9nZ2VyLCBQcm9tcHRWYWx1ZSwgUHJvdG9jb2xNb2RlLCBSZXNwb25zZU1vZGUsIFNlcnZlckVycm9yLCBUb2tlbkNhY2hlQ29udGV4dCB9IGZyb20gJ0BhenVyZS9tc2FsLWNvbW1vbi9ub2RlJztcbmV4cG9ydCB7IHZlcnNpb24gfSBmcm9tICcuL3BhY2thZ2VNZXRhZGF0YS5tanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbImludGVybmFscyIsIlB1YmxpY0NsaWVudEFwcGxpY2F0aW9uIiwiQ29uZmlkZW50aWFsQ2xpZW50QXBwbGljYXRpb24iLCJDbGllbnRBcHBsaWNhdGlvbiIsIkNsaWVudENyZWRlbnRpYWxDbGllbnQiLCJEZXZpY2VDb2RlQ2xpZW50IiwiT25CZWhhbGZPZkNsaWVudCIsIk1hbmFnZWRJZGVudGl0eUFwcGxpY2F0aW9uIiwiVXNlcm5hbWVQYXNzd29yZENsaWVudCIsIkNsaWVudEFzc2VydGlvbiIsIlRva2VuQ2FjaGUiLCJOb2RlU3RvcmFnZSIsIkRpc3RyaWJ1dGVkQ2FjaGVQbHVnaW4iLCJNYW5hZ2VkSWRlbnRpdHlTb3VyY2VOYW1lcyIsIkNyeXB0b1Byb3ZpZGVyIiwiQXV0aEVycm9yIiwiQXV0aEVycm9yQ29kZXMiLCJBdXRoRXJyb3JNZXNzYWdlIiwiQXp1cmVDbG91ZEluc3RhbmNlIiwiQ2xpZW50QXV0aEVycm9yIiwiQ2xpZW50QXV0aEVycm9yQ29kZXMiLCJDbGllbnRBdXRoRXJyb3JNZXNzYWdlIiwiQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yIiwiQ2xpZW50Q29uZmlndXJhdGlvbkVycm9yQ29kZXMiLCJDbGllbnRDb25maWd1cmF0aW9uRXJyb3JNZXNzYWdlIiwiSW50ZXJhY3Rpb25SZXF1aXJlZEF1dGhFcnJvciIsIkludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JDb2RlcyIsIkludGVyYWN0aW9uUmVxdWlyZWRBdXRoRXJyb3JNZXNzYWdlIiwiTG9nTGV2ZWwiLCJMb2dnZXIiLCJQcm9tcHRWYWx1ZSIsIlByb3RvY29sTW9kZSIsIlJlc3BvbnNlTW9kZSIsIlNlcnZlckVycm9yIiwiVG9rZW5DYWNoZUNvbnRleHQiLCJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/internals.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/internals.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deserializer: () => (/* reexport safe */ _cache_serializer_Deserializer_mjs__WEBPACK_IMPORTED_MODULE_1__.Deserializer),\n/* harmony export */   Serializer: () => (/* reexport safe */ _cache_serializer_Serializer_mjs__WEBPACK_IMPORTED_MODULE_0__.Serializer)\n/* harmony export */ });\n/* harmony import */ var _cache_serializer_Serializer_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache/serializer/Serializer.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Serializer.mjs\");\n/* harmony import */ var _cache_serializer_Deserializer_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache/serializer/Deserializer.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/cache/serializer/Deserializer.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n /*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */  /**\r\n * Warning: This set of exports is purely intended to be used by other MSAL libraries, and should be considered potentially unstable. We strongly discourage using them directly, you do so at your own risk.\r\n * Breaking changes to these APIs will be shipped under a minor version, instead of a major version.\r\n */  //# sourceMappingURL=internals.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L2ludGVybmFscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUMrRDtBQUNJLENBRW5FOzs7Q0FHQyxJQUNEOzs7Q0FHQyxJQUNELHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLW5vZGUvZGlzdC9pbnRlcm5hbHMubWpzP2YxNjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLW5vZGUgdjIuMTYuMiAyMDI0LTExLTE5ICovXG4ndXNlIHN0cmljdCc7XG5leHBvcnQgeyBTZXJpYWxpemVyIH0gZnJvbSAnLi9jYWNoZS9zZXJpYWxpemVyL1NlcmlhbGl6ZXIubWpzJztcbmV4cG9ydCB7IERlc2VyaWFsaXplciB9IGZyb20gJy4vY2FjaGUvc2VyaWFsaXplci9EZXNlcmlhbGl6ZXIubWpzJztcblxuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBXYXJuaW5nOiBUaGlzIHNldCBvZiBleHBvcnRzIGlzIHB1cmVseSBpbnRlbmRlZCB0byBiZSB1c2VkIGJ5IG90aGVyIE1TQUwgbGlicmFyaWVzLCBhbmQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgcG90ZW50aWFsbHkgdW5zdGFibGUuIFdlIHN0cm9uZ2x5IGRpc2NvdXJhZ2UgdXNpbmcgdGhlbSBkaXJlY3RseSwgeW91IGRvIHNvIGF0IHlvdXIgb3duIHJpc2suXHJcbiAqIEJyZWFraW5nIGNoYW5nZXMgdG8gdGhlc2UgQVBJcyB3aWxsIGJlIHNoaXBwZWQgdW5kZXIgYSBtaW5vciB2ZXJzaW9uLCBpbnN0ZWFkIG9mIGEgbWFqb3IgdmVyc2lvbi5cclxuICovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlNlcmlhbGl6ZXIiLCJEZXNlcmlhbGl6ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/internals.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/network/HttpClient.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/network/HttpClient.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpClient: () => (/* binding */ HttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_NetworkUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/NetworkUtils.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/NetworkUtils.mjs\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! https */ \"https\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ /**\r\n * This class implements the API for network requests.\r\n */ class HttpClient {\n    constructor(proxyUrl, customAgentOptions){\n        this.proxyUrl = proxyUrl || \"\";\n        this.customAgentOptions = customAgentOptions || {};\n    }\n    /**\r\n     * Http Get request\r\n     * @param url\r\n     * @param options\r\n     */ async sendGetRequestAsync(url, options, timeout) {\n        if (this.proxyUrl) {\n            return networkRequestViaProxy(url, this.proxyUrl, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.GET, options, this.customAgentOptions, timeout);\n        } else {\n            return networkRequestViaHttps(url, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.GET, options, this.customAgentOptions, timeout);\n        }\n    }\n    /**\r\n     * Http Post request\r\n     * @param url\r\n     * @param options\r\n     */ async sendPostRequestAsync(url, options) {\n        if (this.proxyUrl) {\n            return networkRequestViaProxy(url, this.proxyUrl, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.POST, options, this.customAgentOptions);\n        } else {\n            return networkRequestViaHttps(url, _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.POST, options, this.customAgentOptions);\n        }\n    }\n}\nconst networkRequestViaProxy = (destinationUrlString, proxyUrlString, httpMethod, options, agentOptions, timeout)=>{\n    const destinationUrl = new URL(destinationUrlString);\n    const proxyUrl = new URL(proxyUrlString);\n    // \"method: connect\" must be used to establish a connection to the proxy\n    const headers = options?.headers || {};\n    const tunnelRequestOptions = {\n        host: proxyUrl.hostname,\n        port: proxyUrl.port,\n        method: \"CONNECT\",\n        path: destinationUrl.hostname,\n        headers: headers\n    };\n    if (agentOptions && Object.keys(agentOptions).length) {\n        tunnelRequestOptions.agent = new http__WEBPACK_IMPORTED_MODULE_2__.Agent(agentOptions);\n    }\n    // compose a request string for the socket\n    let postRequestStringContent = \"\";\n    if (httpMethod === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.POST) {\n        const body = options?.body || \"\";\n        postRequestStringContent = \"Content-Type: application/x-www-form-urlencoded\\r\\n\" + `Content-Length: ${body.length}\\r\\n` + `\\r\\n${body}`;\n    } else {\n        // optional timeout is only for get requests (regionDiscovery, for example)\n        if (timeout) {\n            tunnelRequestOptions.timeout = timeout;\n        }\n    }\n    const outgoingRequestString = `${httpMethod.toUpperCase()} ${destinationUrl.href} HTTP/1.1\\r\\n` + `Host: ${destinationUrl.host}\\r\\n` + \"Connection: close\\r\\n\" + postRequestStringContent + \"\\r\\n\";\n    return new Promise((resolve, reject)=>{\n        const request = http__WEBPACK_IMPORTED_MODULE_2__.request(tunnelRequestOptions);\n        if (timeout) {\n            request.on(\"timeout\", ()=>{\n                request.destroy();\n                reject(new Error(\"Request time out\"));\n            });\n        }\n        request.end();\n        // establish connection to the proxy\n        request.on(\"connect\", (response, socket)=>{\n            const proxyStatusCode = response?.statusCode || _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ProxyStatus.SERVER_ERROR;\n            if (proxyStatusCode < _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ProxyStatus.SUCCESS_RANGE_START || proxyStatusCode > _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.ProxyStatus.SUCCESS_RANGE_END) {\n                request.destroy();\n                socket.destroy();\n                reject(new Error(`Error connecting to proxy. Http status code: ${response.statusCode}. Http status message: ${response?.statusMessage || \"Unknown\"}`));\n            }\n            // make a request over an HTTP tunnel\n            socket.write(outgoingRequestString);\n            const data = [];\n            socket.on(\"data\", (chunk)=>{\n                data.push(chunk);\n            });\n            socket.on(\"end\", ()=>{\n                // combine all received buffer streams into one buffer, and then into a string\n                const dataString = Buffer.concat([\n                    ...data\n                ]).toString();\n                // separate each line into it's own entry in an arry\n                const dataStringArray = dataString.split(\"\\r\\n\");\n                // the first entry will contain the statusCode and statusMessage\n                const httpStatusCode = parseInt(dataStringArray[0].split(\" \")[1]);\n                // remove \"HTTP/1.1\" and the status code to get the status message\n                const statusMessage = dataStringArray[0].split(\" \").slice(2).join(\" \");\n                // the last entry will contain the body\n                const body = dataStringArray[dataStringArray.length - 1];\n                // everything in between the first and last entries are the headers\n                const headersArray = dataStringArray.slice(1, dataStringArray.length - 2);\n                // build an object out of all the headers\n                const entries = new Map();\n                headersArray.forEach((header)=>{\n                    /**\r\n                     * the header might look like \"Content-Length: 1531\", but that is just a string\r\n                     * it needs to be converted to a key/value pair\r\n                     * split the string at the first instance of \":\"\r\n                     * there may be more than one \":\" if the value of the header is supposed to be a JSON object\r\n                     */ const headerKeyValue = header.split(new RegExp(/:\\s(.*)/s));\n                    const headerKey = headerKeyValue[0];\n                    let headerValue = headerKeyValue[1];\n                    // check if the value of the header is supposed to be a JSON object\n                    try {\n                        const object = JSON.parse(headerValue);\n                        // if it is, then convert it from a string to a JSON object\n                        if (object && typeof object === \"object\") {\n                            headerValue = object;\n                        }\n                    } catch (e) {\n                    // otherwise, leave it as a string\n                    }\n                    entries.set(headerKey, headerValue);\n                });\n                const headers = Object.fromEntries(entries);\n                const parsedHeaders = headers;\n                const networkResponse = _utils_NetworkUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.NetworkUtils.getNetworkResponse(parsedHeaders, parseBody(httpStatusCode, statusMessage, parsedHeaders, body), httpStatusCode);\n                if ((httpStatusCode < _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SUCCESS_RANGE_START || httpStatusCode > _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SUCCESS_RANGE_END) && // do not destroy the request for the device code flow\n                networkResponse.body[\"error\"] !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.AUTHORIZATION_PENDING) {\n                    request.destroy();\n                }\n                resolve(networkResponse);\n            });\n            socket.on(\"error\", (chunk)=>{\n                request.destroy();\n                socket.destroy();\n                reject(new Error(chunk.toString()));\n            });\n        });\n        request.on(\"error\", (chunk)=>{\n            request.destroy();\n            reject(new Error(chunk.toString()));\n        });\n    });\n};\nconst networkRequestViaHttps = (urlString, httpMethod, options, agentOptions, timeout)=>{\n    const isPostRequest = httpMethod === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.POST;\n    const body = options?.body || \"\";\n    const url = new URL(urlString);\n    const headers = options?.headers || {};\n    const customOptions = {\n        method: httpMethod,\n        headers: headers,\n        ..._utils_NetworkUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.NetworkUtils.urlToHttpOptions(url)\n    };\n    if (agentOptions && Object.keys(agentOptions).length) {\n        customOptions.agent = new https__WEBPACK_IMPORTED_MODULE_3__.Agent(agentOptions);\n    }\n    if (isPostRequest) {\n        // needed for post request to work\n        customOptions.headers = {\n            ...customOptions.headers,\n            \"Content-Length\": body.length\n        };\n    } else {\n        // optional timeout is only for get requests (regionDiscovery, for example)\n        if (timeout) {\n            customOptions.timeout = timeout;\n        }\n    }\n    return new Promise((resolve, reject)=>{\n        let request;\n        // managed identity sources use http instead of https\n        if (customOptions.protocol === \"http:\") {\n            request = http__WEBPACK_IMPORTED_MODULE_2__.request(customOptions);\n        } else {\n            request = https__WEBPACK_IMPORTED_MODULE_3__.request(customOptions);\n        }\n        if (isPostRequest) {\n            request.write(body);\n        }\n        if (timeout) {\n            request.on(\"timeout\", ()=>{\n                request.destroy();\n                reject(new Error(\"Request time out\"));\n            });\n        }\n        request.end();\n        request.on(\"response\", (response)=>{\n            const headers = response.headers;\n            const statusCode = response.statusCode;\n            const statusMessage = response.statusMessage;\n            const data = [];\n            response.on(\"data\", (chunk)=>{\n                data.push(chunk);\n            });\n            response.on(\"end\", ()=>{\n                // combine all received buffer streams into one buffer, and then into a string\n                const body = Buffer.concat([\n                    ...data\n                ]).toString();\n                const parsedHeaders = headers;\n                const networkResponse = _utils_NetworkUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.NetworkUtils.getNetworkResponse(parsedHeaders, parseBody(statusCode, statusMessage, parsedHeaders, body), statusCode);\n                if ((statusCode < _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SUCCESS_RANGE_START || statusCode > _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SUCCESS_RANGE_END) && // do not destroy the request for the device code flow\n                networkResponse.body[\"error\"] !== _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.Constants.AUTHORIZATION_PENDING) {\n                    request.destroy();\n                }\n                resolve(networkResponse);\n            });\n        });\n        request.on(\"error\", (chunk)=>{\n            request.destroy();\n            reject(new Error(chunk.toString()));\n        });\n    });\n};\n/**\r\n * Check if extra parsing is needed on the repsonse from the server\r\n * @param statusCode {number} the status code of the response from the server\r\n * @param statusMessage {string | undefined} the status message of the response from the server\r\n * @param headers {Record<string, string>} the headers of the response from the server\r\n * @param body {string} the body from the response of the server\r\n * @returns {Object} JSON parsed body or error object\r\n */ const parseBody = (statusCode, statusMessage, headers, body)=>{\n    /*\r\n     * Informational responses (100 – 199)\r\n     * Successful responses (200 – 299)\r\n     * Redirection messages (300 – 399)\r\n     * Client error responses (400 – 499)\r\n     * Server error responses (500 – 599)\r\n     */ let parsedBody;\n    try {\n        parsedBody = JSON.parse(body);\n    } catch (error) {\n        let errorType;\n        let errorDescriptionHelper;\n        if (statusCode >= _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.CLIENT_ERROR_RANGE_START && statusCode <= _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.CLIENT_ERROR_RANGE_END) {\n            errorType = \"client_error\";\n            errorDescriptionHelper = \"A client\";\n        } else if (statusCode >= _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SERVER_ERROR_RANGE_START && statusCode <= _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.HttpStatus.SERVER_ERROR_RANGE_END) {\n            errorType = \"server_error\";\n            errorDescriptionHelper = \"A server\";\n        } else {\n            errorType = \"unknown_error\";\n            errorDescriptionHelper = \"An unknown\";\n        }\n        parsedBody = {\n            error: errorType,\n            error_description: `${errorDescriptionHelper} error occured.\\nHttp status code: ${statusCode}\\nHttp status message: ${statusMessage || \"Unknown\"}\\nHeaders: ${JSON.stringify(headers)}`\n        };\n    }\n    return parsedBody;\n};\n //# sourceMappingURL=HttpClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/network/HttpClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/network/HttpClientWithRetries.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/network/HttpClientWithRetries.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpClientWithRetries: () => (/* binding */ HttpClientWithRetries)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class HttpClientWithRetries {\n    constructor(httpClientNoRetries, retryPolicy){\n        this.httpClientNoRetries = httpClientNoRetries;\n        this.retryPolicy = retryPolicy;\n    }\n    async sendNetworkRequestAsyncHelper(httpMethod, url, options) {\n        if (httpMethod === _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.GET) {\n            return this.httpClientNoRetries.sendGetRequestAsync(url, options);\n        } else {\n            return this.httpClientNoRetries.sendPostRequestAsync(url, options);\n        }\n    }\n    async sendNetworkRequestAsync(httpMethod, url, options) {\n        // the underlying network module (custom or HttpClient) will make the call\n        let response = await this.sendNetworkRequestAsyncHelper(httpMethod, url, options);\n        let currentRetry = 0;\n        while(await this.retryPolicy.pauseForRetry(response.status, currentRetry, response.headers[_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_1__.HeaderNames.RETRY_AFTER])){\n            response = await this.sendNetworkRequestAsyncHelper(httpMethod, url, options);\n            currentRetry++;\n        }\n        return response;\n    }\n    async sendGetRequestAsync(url, options) {\n        return this.sendNetworkRequestAsync(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.GET, url, options);\n    }\n    async sendPostRequestAsync(url, options) {\n        return this.sendNetworkRequestAsync(_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_0__.HttpMethod.POST, url, options);\n    }\n}\n //# sourceMappingURL=HttpClientWithRetries.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L25ldHdvcmsvSHR0cENsaWVudFdpdGhSZXRyaWVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDc0Q7QUFDRjtBQUVwRDs7O0NBR0MsR0FDRCxNQUFNRTtJQUNGQyxZQUFZQyxtQkFBbUIsRUFBRUMsV0FBVyxDQUFFO1FBQzFDLElBQUksQ0FBQ0QsbUJBQW1CLEdBQUdBO1FBQzNCLElBQUksQ0FBQ0MsV0FBVyxHQUFHQTtJQUN2QjtJQUNBLE1BQU1DLDhCQUE4QkMsVUFBVSxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUMxRCxJQUFJRixlQUFlTiw0REFBVUEsQ0FBQ1MsR0FBRyxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDTixtQkFBbUIsQ0FBQ08sbUJBQW1CLENBQUNILEtBQUtDO1FBQzdELE9BQ0s7WUFDRCxPQUFPLElBQUksQ0FBQ0wsbUJBQW1CLENBQUNRLG9CQUFvQixDQUFDSixLQUFLQztRQUM5RDtJQUNKO0lBQ0EsTUFBTUksd0JBQXdCTixVQUFVLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO1FBQ3BELDBFQUEwRTtRQUMxRSxJQUFJSyxXQUFXLE1BQU0sSUFBSSxDQUFDUiw2QkFBNkIsQ0FBQ0MsWUFBWUMsS0FBS0M7UUFDekUsSUFBSU0sZUFBZTtRQUNuQixNQUFPLE1BQU0sSUFBSSxDQUFDVixXQUFXLENBQUNXLGFBQWEsQ0FBQ0YsU0FBU0csTUFBTSxFQUFFRixjQUFjRCxTQUFTSSxPQUFPLENBQUNsQixnRUFBV0EsQ0FBQ21CLFdBQVcsQ0FBQyxFQUFHO1lBQ25ITCxXQUFXLE1BQU0sSUFBSSxDQUFDUiw2QkFBNkIsQ0FBQ0MsWUFBWUMsS0FBS0M7WUFDckVNO1FBQ0o7UUFDQSxPQUFPRDtJQUNYO0lBQ0EsTUFBTUgsb0JBQW9CSCxHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUNwQyxPQUFPLElBQUksQ0FBQ0ksdUJBQXVCLENBQUNaLDREQUFVQSxDQUFDUyxHQUFHLEVBQUVGLEtBQUtDO0lBQzdEO0lBQ0EsTUFBTUcscUJBQXFCSixHQUFHLEVBQUVDLE9BQU8sRUFBRTtRQUNyQyxPQUFPLElBQUksQ0FBQ0ksdUJBQXVCLENBQUNaLDREQUFVQSxDQUFDbUIsSUFBSSxFQUFFWixLQUFLQztJQUM5RDtBQUNKO0FBRWlDLENBQ2pDLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb3NvZGlmeS1iYWNrZW5kLy4vbm9kZV9tb2R1bGVzL0BhenVyZS9tc2FsLW5vZGUvZGlzdC9uZXR3b3JrL0h0dHBDbGllbnRXaXRoUmV0cmllcy5tanM/M2U1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgQGF6dXJlL21zYWwtbm9kZSB2Mi4xNi4yIDIwMjQtMTEtMTkgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IEhlYWRlck5hbWVzIH0gZnJvbSAnQGF6dXJlL21zYWwtY29tbW9uL25vZGUnO1xuaW1wb3J0IHsgSHR0cE1ldGhvZCB9IGZyb20gJy4uL3V0aWxzL0NvbnN0YW50cy5tanMnO1xuXG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgSHR0cENsaWVudFdpdGhSZXRyaWVzIHtcclxuICAgIGNvbnN0cnVjdG9yKGh0dHBDbGllbnROb1JldHJpZXMsIHJldHJ5UG9saWN5KSB7XHJcbiAgICAgICAgdGhpcy5odHRwQ2xpZW50Tm9SZXRyaWVzID0gaHR0cENsaWVudE5vUmV0cmllcztcclxuICAgICAgICB0aGlzLnJldHJ5UG9saWN5ID0gcmV0cnlQb2xpY3k7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZW5kTmV0d29ya1JlcXVlc3RBc3luY0hlbHBlcihodHRwTWV0aG9kLCB1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoaHR0cE1ldGhvZCA9PT0gSHR0cE1ldGhvZC5HRVQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudE5vUmV0cmllcy5zZW5kR2V0UmVxdWVzdEFzeW5jKHVybCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50Tm9SZXRyaWVzLnNlbmRQb3N0UmVxdWVzdEFzeW5jKHVybCwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXN5bmMgc2VuZE5ldHdvcmtSZXF1ZXN0QXN5bmMoaHR0cE1ldGhvZCwgdXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgLy8gdGhlIHVuZGVybHlpbmcgbmV0d29yayBtb2R1bGUgKGN1c3RvbSBvciBIdHRwQ2xpZW50KSB3aWxsIG1ha2UgdGhlIGNhbGxcclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnNlbmROZXR3b3JrUmVxdWVzdEFzeW5jSGVscGVyKGh0dHBNZXRob2QsIHVybCwgb3B0aW9ucyk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRSZXRyeSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGF3YWl0IHRoaXMucmV0cnlQb2xpY3kucGF1c2VGb3JSZXRyeShyZXNwb25zZS5zdGF0dXMsIGN1cnJlbnRSZXRyeSwgcmVzcG9uc2UuaGVhZGVyc1tIZWFkZXJOYW1lcy5SRVRSWV9BRlRFUl0pKSB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5zZW5kTmV0d29ya1JlcXVlc3RBc3luY0hlbHBlcihodHRwTWV0aG9kLCB1cmwsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBjdXJyZW50UmV0cnkrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgc2VuZEdldFJlcXVlc3RBc3luYyh1cmwsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kTmV0d29ya1JlcXVlc3RBc3luYyhIdHRwTWV0aG9kLkdFVCwgdXJsLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGFzeW5jIHNlbmRQb3N0UmVxdWVzdEFzeW5jKHVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmROZXR3b3JrUmVxdWVzdEFzeW5jKEh0dHBNZXRob2QuUE9TVCwgdXJsLCBvcHRpb25zKTtcclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBIdHRwQ2xpZW50V2l0aFJldHJpZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUh0dHBDbGllbnRXaXRoUmV0cmllcy5tanMubWFwXG4iXSwibmFtZXMiOlsiSGVhZGVyTmFtZXMiLCJIdHRwTWV0aG9kIiwiSHR0cENsaWVudFdpdGhSZXRyaWVzIiwiY29uc3RydWN0b3IiLCJodHRwQ2xpZW50Tm9SZXRyaWVzIiwicmV0cnlQb2xpY3kiLCJzZW5kTmV0d29ya1JlcXVlc3RBc3luY0hlbHBlciIsImh0dHBNZXRob2QiLCJ1cmwiLCJvcHRpb25zIiwiR0VUIiwic2VuZEdldFJlcXVlc3RBc3luYyIsInNlbmRQb3N0UmVxdWVzdEFzeW5jIiwic2VuZE5ldHdvcmtSZXF1ZXN0QXN5bmMiLCJyZXNwb25zZSIsImN1cnJlbnRSZXRyeSIsInBhdXNlRm9yUmV0cnkiLCJzdGF0dXMiLCJoZWFkZXJzIiwiUkVUUllfQUZURVIiLCJQT1NUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/network/HttpClientWithRetries.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/network/LoopbackClient.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/network/LoopbackClient.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LoopbackClient: () => (/* binding */ LoopbackClient)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/UrlUtils.mjs\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../error/NodeAuthError.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/error/NodeAuthError.mjs\");\n/* harmony import */ var _utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Constants.mjs */ \"(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n\n\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class LoopbackClient {\n    /**\r\n     * Spins up a loopback server which returns the server response when the localhost redirectUri is hit\r\n     * @param successTemplate\r\n     * @param errorTemplate\r\n     * @returns\r\n     */ async listenForAuthCode(successTemplate, errorTemplate) {\n        if (this.server) {\n            throw _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.NodeAuthError.createLoopbackServerAlreadyExistsError();\n        }\n        return new Promise((resolve, reject)=>{\n            this.server = http__WEBPACK_IMPORTED_MODULE_0__.createServer((req, res)=>{\n                const url = req.url;\n                if (!url) {\n                    res.end(errorTemplate || \"Error occurred loading redirectUrl\");\n                    reject(_error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.NodeAuthError.createUnableToLoadRedirectUrlError());\n                    return;\n                } else if (url === _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.Constants.FORWARD_SLASH) {\n                    res.end(successTemplate || \"Auth code was successfully acquired. You can close this window now.\");\n                    return;\n                }\n                const redirectUri = this.getRedirectUri();\n                const parsedUrl = new URL(url, redirectUri);\n                const authCodeResponse = _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_4__.getDeserializedResponse(parsedUrl.search) || {};\n                if (authCodeResponse.code) {\n                    res.writeHead(_azure_msal_common_node__WEBPACK_IMPORTED_MODULE_3__.HttpStatus.REDIRECT, {\n                        location: redirectUri\n                    }); // Prevent auth code from being saved in the browser history\n                    res.end();\n                }\n                if (authCodeResponse.error) {\n                    res.end(errorTemplate || `Error occurred: ${authCodeResponse.error}`);\n                }\n                resolve(authCodeResponse);\n            });\n            this.server.listen(0, \"127.0.0.1\"); // Listen on any available port\n        });\n    }\n    /**\r\n     * Get the port that the loopback server is running on\r\n     * @returns\r\n     */ getRedirectUri() {\n        if (!this.server || !this.server.listening) {\n            throw _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.NodeAuthError.createNoLoopbackServerExistsError();\n        }\n        const address = this.server.address();\n        if (!address || typeof address === \"string\" || !address.port) {\n            this.closeServer();\n            throw _error_NodeAuthError_mjs__WEBPACK_IMPORTED_MODULE_1__.NodeAuthError.createInvalidLoopbackAddressTypeError();\n        }\n        const port = address && address.port;\n        return `${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.HTTP_PROTOCOL}${_utils_Constants_mjs__WEBPACK_IMPORTED_MODULE_2__.Constants.LOCALHOST}:${port}`;\n    }\n    /**\r\n     * Close the loopback server\r\n     */ closeServer() {\n        if (this.server) {\n            // Only stops accepting new connections, server will close once open/idle connections are closed.\n            this.server.close();\n            if (typeof this.server.closeAllConnections === \"function\") {\n                /*\r\n                 * Close open/idle connections. This API is available in Node versions 18.2 and higher\r\n                 */ this.server.closeAllConnections();\n            }\n            this.server.unref();\n            this.server = undefined;\n        }\n    }\n}\n //# sourceMappingURL=LoopbackClient.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/network/LoopbackClient.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/packageMetadata.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/packageMetadata.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n/* eslint-disable header/header */ const name = \"@azure/msal-node\";\nconst version = \"2.16.2\";\n //# sourceMappingURL=packageMetadata.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L3BhY2thZ2VNZXRhZGF0YS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3Q0FBd0MsR0FDeEM7QUFDQSxnQ0FBZ0MsR0FDaEMsTUFBTUEsT0FBTztBQUNiLE1BQU1DLFVBQVU7QUFFUyxDQUN6Qiw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1ub2RlL2Rpc3QvcGFja2FnZU1ldGFkYXRhLm1qcz9hNGE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1ub2RlIHYyLjE2LjIgMjAyNC0xMS0xOSAqL1xuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgaGVhZGVyL2hlYWRlciAqL1xyXG5jb25zdCBuYW1lID0gXCJAYXp1cmUvbXNhbC1ub2RlXCI7XHJcbmNvbnN0IHZlcnNpb24gPSBcIjIuMTYuMlwiO1xuXG5leHBvcnQgeyBuYW1lLCB2ZXJzaW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWNrYWdlTWV0YWRhdGEubWpzLm1hcFxuIl0sIm5hbWVzIjpbIm5hbWUiLCJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/packageMetadata.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/retry/LinearRetryPolicy.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/retry/LinearRetryPolicy.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LinearRetryPolicy: () => (/* binding */ LinearRetryPolicy)\n/* harmony export */ });\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class LinearRetryPolicy {\n    constructor(maxRetries, retryDelay, httpStatusCodesToRetryOn){\n        this.maxRetries = maxRetries;\n        this.retryDelay = retryDelay;\n        this.httpStatusCodesToRetryOn = httpStatusCodesToRetryOn;\n    }\n    retryAfterMillisecondsToSleep(retryHeader) {\n        if (!retryHeader) {\n            return 0;\n        }\n        // retry-after header is in seconds\n        let millisToSleep = Math.round(parseFloat(retryHeader) * 1000);\n        /*\r\n         * retry-after header is in HTTP Date format\r\n         * <day-name>, <day> <month> <year> <hour>:<minute>:<second> GMT\r\n         */ if (isNaN(millisToSleep)) {\n            millisToSleep = Math.max(0, // .valueOf() is needed to subtract dates in TypeScript\n            new Date(retryHeader).valueOf() - new Date().valueOf());\n        }\n        return millisToSleep;\n    }\n    async pauseForRetry(httpStatusCode, currentRetry, retryAfterHeader) {\n        if (this.httpStatusCodesToRetryOn.includes(httpStatusCode) && currentRetry < this.maxRetries) {\n            const retryAfterDelay = this.retryAfterMillisecondsToSleep(retryAfterHeader);\n            await new Promise((resolve)=>{\n                // retryAfterHeader value of 0 evaluates to false, and this.retryDelay will be used\n                return setTimeout(resolve, retryAfterDelay || this.retryDelay);\n            });\n            return true;\n        }\n        return false;\n    }\n}\n //# sourceMappingURL=LinearRetryPolicy.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L3JldHJ5L0xpbmVhclJldHJ5UG9saWN5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsd0NBQXdDLEdBQ3hDO0FBQ0E7OztDQUdDLEdBQ0QsTUFBTUE7SUFDRkMsWUFBWUMsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLHdCQUF3QixDQUFFO1FBQzFELElBQUksQ0FBQ0YsVUFBVSxHQUFHQTtRQUNsQixJQUFJLENBQUNDLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyx3QkFBd0IsR0FBR0E7SUFDcEM7SUFDQUMsOEJBQThCQyxXQUFXLEVBQUU7UUFDdkMsSUFBSSxDQUFDQSxhQUFhO1lBQ2QsT0FBTztRQUNYO1FBQ0EsbUNBQW1DO1FBQ25DLElBQUlDLGdCQUFnQkMsS0FBS0MsS0FBSyxDQUFDQyxXQUFXSixlQUFlO1FBQ3pEOzs7U0FHQyxHQUNELElBQUlLLE1BQU1KLGdCQUFnQjtZQUN0QkEsZ0JBQWdCQyxLQUFLSSxHQUFHLENBQUMsR0FDekIsdURBQXVEO1lBQ3ZELElBQUlDLEtBQUtQLGFBQWFRLE9BQU8sS0FBSyxJQUFJRCxPQUFPQyxPQUFPO1FBQ3hEO1FBQ0EsT0FBT1A7SUFDWDtJQUNBLE1BQU1RLGNBQWNDLGNBQWMsRUFBRUMsWUFBWSxFQUFFQyxnQkFBZ0IsRUFBRTtRQUNoRSxJQUFJLElBQUksQ0FBQ2Qsd0JBQXdCLENBQUNlLFFBQVEsQ0FBQ0gsbUJBQ3ZDQyxlQUFlLElBQUksQ0FBQ2YsVUFBVSxFQUFFO1lBQ2hDLE1BQU1rQixrQkFBa0IsSUFBSSxDQUFDZiw2QkFBNkIsQ0FBQ2E7WUFDM0QsTUFBTSxJQUFJRyxRQUFRLENBQUNDO2dCQUNmLG1GQUFtRjtnQkFDbkYsT0FBT0MsV0FBV0QsU0FBU0YsbUJBQW1CLElBQUksQ0FBQ2pCLFVBQVU7WUFDakU7WUFDQSxPQUFPO1FBQ1g7UUFDQSxPQUFPO0lBQ1g7QUFDSjtBQUU2QixDQUM3Qiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1ub2RlL2Rpc3QvcmV0cnkvTGluZWFyUmV0cnlQb2xpY3kubWpzPzQ4MGEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLW5vZGUgdjIuMTYuMiAyMDI0LTExLTE5ICovXG4ndXNlIHN0cmljdCc7XG4vKlxyXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgTGluZWFyUmV0cnlQb2xpY3kge1xyXG4gICAgY29uc3RydWN0b3IobWF4UmV0cmllcywgcmV0cnlEZWxheSwgaHR0cFN0YXR1c0NvZGVzVG9SZXRyeU9uKSB7XHJcbiAgICAgICAgdGhpcy5tYXhSZXRyaWVzID0gbWF4UmV0cmllcztcclxuICAgICAgICB0aGlzLnJldHJ5RGVsYXkgPSByZXRyeURlbGF5O1xyXG4gICAgICAgIHRoaXMuaHR0cFN0YXR1c0NvZGVzVG9SZXRyeU9uID0gaHR0cFN0YXR1c0NvZGVzVG9SZXRyeU9uO1xyXG4gICAgfVxyXG4gICAgcmV0cnlBZnRlck1pbGxpc2Vjb25kc1RvU2xlZXAocmV0cnlIZWFkZXIpIHtcclxuICAgICAgICBpZiAoIXJldHJ5SGVhZGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyByZXRyeS1hZnRlciBoZWFkZXIgaXMgaW4gc2Vjb25kc1xyXG4gICAgICAgIGxldCBtaWxsaXNUb1NsZWVwID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KHJldHJ5SGVhZGVyKSAqIDEwMDApO1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogcmV0cnktYWZ0ZXIgaGVhZGVyIGlzIGluIEhUVFAgRGF0ZSBmb3JtYXRcclxuICAgICAgICAgKiA8ZGF5LW5hbWU+LCA8ZGF5PiA8bW9udGg+IDx5ZWFyPiA8aG91cj46PG1pbnV0ZT46PHNlY29uZD4gR01UXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKGlzTmFOKG1pbGxpc1RvU2xlZXApKSB7XHJcbiAgICAgICAgICAgIG1pbGxpc1RvU2xlZXAgPSBNYXRoLm1heCgwLCBcclxuICAgICAgICAgICAgLy8gLnZhbHVlT2YoKSBpcyBuZWVkZWQgdG8gc3VidHJhY3QgZGF0ZXMgaW4gVHlwZVNjcmlwdFxyXG4gICAgICAgICAgICBuZXcgRGF0ZShyZXRyeUhlYWRlcikudmFsdWVPZigpIC0gbmV3IERhdGUoKS52YWx1ZU9mKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWlsbGlzVG9TbGVlcDtcclxuICAgIH1cclxuICAgIGFzeW5jIHBhdXNlRm9yUmV0cnkoaHR0cFN0YXR1c0NvZGUsIGN1cnJlbnRSZXRyeSwgcmV0cnlBZnRlckhlYWRlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmh0dHBTdGF0dXNDb2Rlc1RvUmV0cnlPbi5pbmNsdWRlcyhodHRwU3RhdHVzQ29kZSkgJiZcclxuICAgICAgICAgICAgY3VycmVudFJldHJ5IDwgdGhpcy5tYXhSZXRyaWVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXJEZWxheSA9IHRoaXMucmV0cnlBZnRlck1pbGxpc2Vjb25kc1RvU2xlZXAocmV0cnlBZnRlckhlYWRlcik7XHJcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXRyeUFmdGVySGVhZGVyIHZhbHVlIG9mIDAgZXZhbHVhdGVzIHRvIGZhbHNlLCBhbmQgdGhpcy5yZXRyeURlbGF5IHdpbGwgYmUgdXNlZFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgcmV0cnlBZnRlckRlbGF5IHx8IHRoaXMucmV0cnlEZWxheSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IExpbmVhclJldHJ5UG9saWN5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaW5lYXJSZXRyeVBvbGljeS5tanMubWFwXG4iXSwibmFtZXMiOlsiTGluZWFyUmV0cnlQb2xpY3kiLCJjb25zdHJ1Y3RvciIsIm1heFJldHJpZXMiLCJyZXRyeURlbGF5IiwiaHR0cFN0YXR1c0NvZGVzVG9SZXRyeU9uIiwicmV0cnlBZnRlck1pbGxpc2Vjb25kc1RvU2xlZXAiLCJyZXRyeUhlYWRlciIsIm1pbGxpc1RvU2xlZXAiLCJNYXRoIiwicm91bmQiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJtYXgiLCJEYXRlIiwidmFsdWVPZiIsInBhdXNlRm9yUmV0cnkiLCJodHRwU3RhdHVzQ29kZSIsImN1cnJlbnRSZXRyeSIsInJldHJ5QWZ0ZXJIZWFkZXIiLCJpbmNsdWRlcyIsInJldHJ5QWZ0ZXJEZWxheSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/retry/LinearRetryPolicy.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/utils/Constants.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_VERSION_QUERY_PARAMETER_NAME: () => (/* binding */ API_VERSION_QUERY_PARAMETER_NAME),\n/* harmony export */   APP_SERVICE_SECRET_HEADER_NAME: () => (/* binding */ APP_SERVICE_SECRET_HEADER_NAME),\n/* harmony export */   AUTHORIZATION_HEADER_NAME: () => (/* binding */ AUTHORIZATION_HEADER_NAME),\n/* harmony export */   AZURE_ARC_SECRET_FILE_MAX_SIZE_BYTES: () => (/* binding */ AZURE_ARC_SECRET_FILE_MAX_SIZE_BYTES),\n/* harmony export */   ApiId: () => (/* binding */ ApiId),\n/* harmony export */   CharSet: () => (/* binding */ CharSet),\n/* harmony export */   Constants: () => (/* binding */ Constants),\n/* harmony export */   DEFAULT_AUTHORITY_FOR_MANAGED_IDENTITY: () => (/* binding */ DEFAULT_AUTHORITY_FOR_MANAGED_IDENTITY),\n/* harmony export */   DEFAULT_MANAGED_IDENTITY_ID: () => (/* binding */ DEFAULT_MANAGED_IDENTITY_ID),\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   HttpMethod: () => (/* binding */ HttpMethod),\n/* harmony export */   JwtConstants: () => (/* binding */ JwtConstants),\n/* harmony export */   LOOPBACK_SERVER_CONSTANTS: () => (/* binding */ LOOPBACK_SERVER_CONSTANTS),\n/* harmony export */   MANAGED_IDENTITY_DEFAULT_TENANT: () => (/* binding */ MANAGED_IDENTITY_DEFAULT_TENANT),\n/* harmony export */   MANAGED_IDENTITY_HTTP_STATUS_CODES_TO_RETRY_ON: () => (/* binding */ MANAGED_IDENTITY_HTTP_STATUS_CODES_TO_RETRY_ON),\n/* harmony export */   MANAGED_IDENTITY_MAX_RETRIES: () => (/* binding */ MANAGED_IDENTITY_MAX_RETRIES),\n/* harmony export */   MANAGED_IDENTITY_RETRY_DELAY: () => (/* binding */ MANAGED_IDENTITY_RETRY_DELAY),\n/* harmony export */   METADATA_HEADER_NAME: () => (/* binding */ METADATA_HEADER_NAME),\n/* harmony export */   MSAL_FORCE_REGION: () => (/* binding */ MSAL_FORCE_REGION),\n/* harmony export */   ManagedIdentityEnvironmentVariableNames: () => (/* binding */ ManagedIdentityEnvironmentVariableNames),\n/* harmony export */   ManagedIdentityIdType: () => (/* binding */ ManagedIdentityIdType),\n/* harmony export */   ManagedIdentitySourceNames: () => (/* binding */ ManagedIdentitySourceNames),\n/* harmony export */   ProxyStatus: () => (/* binding */ ProxyStatus),\n/* harmony export */   RANDOM_OCTET_SIZE: () => (/* binding */ RANDOM_OCTET_SIZE),\n/* harmony export */   REGION_ENVIRONMENT_VARIABLE: () => (/* binding */ REGION_ENVIRONMENT_VARIABLE),\n/* harmony export */   RESOURCE_BODY_OR_QUERY_PARAMETER_NAME: () => (/* binding */ RESOURCE_BODY_OR_QUERY_PARAMETER_NAME),\n/* harmony export */   SERVICE_FABRIC_SECRET_HEADER_NAME: () => (/* binding */ SERVICE_FABRIC_SECRET_HEADER_NAME)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ // MSI Constants. Docs for MSI are available here https://docs.microsoft.com/azure/app-service/overview-managed-identity\nconst AUTHORIZATION_HEADER_NAME = \"Authorization\";\nconst METADATA_HEADER_NAME = \"Metadata\";\nconst APP_SERVICE_SECRET_HEADER_NAME = \"X-IDENTITY-HEADER\";\nconst SERVICE_FABRIC_SECRET_HEADER_NAME = \"secret\";\nconst API_VERSION_QUERY_PARAMETER_NAME = \"api-version\";\nconst RESOURCE_BODY_OR_QUERY_PARAMETER_NAME = \"resource\";\nconst DEFAULT_MANAGED_IDENTITY_ID = \"system_assigned_managed_identity\";\nconst MANAGED_IDENTITY_DEFAULT_TENANT = \"managed_identity\";\nconst DEFAULT_AUTHORITY_FOR_MANAGED_IDENTITY = `https://login.microsoftonline.com/${MANAGED_IDENTITY_DEFAULT_TENANT}/`;\n/**\r\n * Managed Identity Environment Variable Names\r\n */ const ManagedIdentityEnvironmentVariableNames = {\n    AZURE_POD_IDENTITY_AUTHORITY_HOST: \"AZURE_POD_IDENTITY_AUTHORITY_HOST\",\n    IDENTITY_ENDPOINT: \"IDENTITY_ENDPOINT\",\n    IDENTITY_HEADER: \"IDENTITY_HEADER\",\n    IDENTITY_SERVER_THUMBPRINT: \"IDENTITY_SERVER_THUMBPRINT\",\n    IMDS_ENDPOINT: \"IMDS_ENDPOINT\",\n    MSI_ENDPOINT: \"MSI_ENDPOINT\"\n};\n/**\r\n * Managed Identity Source Names\r\n * @public\r\n */ const ManagedIdentitySourceNames = {\n    APP_SERVICE: \"AppService\",\n    AZURE_ARC: \"AzureArc\",\n    CLOUD_SHELL: \"CloudShell\",\n    DEFAULT_TO_IMDS: \"DefaultToImds\",\n    IMDS: \"Imds\",\n    SERVICE_FABRIC: \"ServiceFabric\"\n};\n/**\r\n * Managed Identity Ids\r\n */ const ManagedIdentityIdType = {\n    SYSTEM_ASSIGNED: \"system-assigned\",\n    USER_ASSIGNED_CLIENT_ID: \"user-assigned-client-id\",\n    USER_ASSIGNED_RESOURCE_ID: \"user-assigned-resource-id\",\n    USER_ASSIGNED_OBJECT_ID: \"user-assigned-object-id\"\n};\n/**\r\n * http methods\r\n */ const HttpMethod = {\n    GET: \"get\",\n    POST: \"post\"\n};\nconst ProxyStatus = {\n    SUCCESS: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.SUCCESS,\n    SUCCESS_RANGE_START: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.SUCCESS_RANGE_START,\n    SUCCESS_RANGE_END: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.SUCCESS_RANGE_END,\n    SERVER_ERROR: _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.SERVER_ERROR\n};\n/**\r\n * Constants used for region discovery\r\n */ const REGION_ENVIRONMENT_VARIABLE = \"REGION_NAME\";\nconst MSAL_FORCE_REGION = \"MSAL_FORCE_REGION\";\n/**\r\n * Constant used for PKCE\r\n */ const RANDOM_OCTET_SIZE = 32;\n/**\r\n * Constants used in PKCE\r\n */ const Hash = {\n    SHA256: \"sha256\"\n};\n/**\r\n * Constants for encoding schemes\r\n */ const CharSet = {\n    CV_CHARSET: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\"\n};\n/**\r\n * Constants\r\n */ const Constants = {\n    MSAL_SKU: \"msal.js.node\",\n    JWT_BEARER_ASSERTION_TYPE: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n    AUTHORIZATION_PENDING: \"authorization_pending\",\n    HTTP_PROTOCOL: \"http://\",\n    LOCALHOST: \"localhost\"\n};\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 600-699 Device Code Flow\r\n * 800-899 Auth Code Flow\r\n */ const ApiId = {\n    acquireTokenSilent: 62,\n    acquireTokenByUsernamePassword: 371,\n    acquireTokenByDeviceCode: 671,\n    acquireTokenByClientCredential: 771,\n    acquireTokenByCode: 871,\n    acquireTokenByRefreshToken: 872\n};\n/**\r\n * JWT  constants\r\n */ const JwtConstants = {\n    ALGORITHM: \"alg\",\n    RSA_256: \"RS256\",\n    PSS_256: \"PS256\",\n    X5T_256: \"x5t#S256\",\n    X5T: \"x5t\",\n    X5C: \"x5c\",\n    AUDIENCE: \"aud\",\n    EXPIRATION_TIME: \"exp\",\n    ISSUER: \"iss\",\n    SUBJECT: \"sub\",\n    NOT_BEFORE: \"nbf\",\n    JWT_ID: \"jti\"\n};\nconst LOOPBACK_SERVER_CONSTANTS = {\n    INTERVAL_MS: 100,\n    TIMEOUT_MS: 5000\n};\nconst AZURE_ARC_SECRET_FILE_MAX_SIZE_BYTES = 4096; // 4 KB\nconst MANAGED_IDENTITY_MAX_RETRIES = 3;\nconst MANAGED_IDENTITY_RETRY_DELAY = 1000;\nconst MANAGED_IDENTITY_HTTP_STATUS_CODES_TO_RETRY_ON = [\n    _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.NOT_FOUND,\n    _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.REQUEST_TIMEOUT,\n    _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.TOO_MANY_REQUESTS,\n    _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.SERVER_ERROR,\n    _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.SERVICE_UNAVAILABLE,\n    _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.HttpStatus.GATEWAY_TIMEOUT\n];\n //# sourceMappingURL=Constants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/utils/Constants.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/utils/EncodingUtils.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/utils/EncodingUtils.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncodingUtils: () => (/* binding */ EncodingUtils)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-common/node */ \"(rsc)/./node_modules/@azure/msal-common/dist/utils/Constants.mjs\");\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class EncodingUtils {\n    /**\r\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\r\n     * 'base64': Base64 encoding.\r\n     *\r\n     * @param str text\r\n     */ static base64Encode(str, encoding) {\n        return Buffer.from(str, encoding).toString(\"base64\");\n    }\n    /**\r\n     * encode a URL\r\n     * @param str\r\n     */ static base64EncodeUrl(str, encoding) {\n        return EncodingUtils.base64Encode(str, encoding).replace(/=/g, _azure_msal_common_node__WEBPACK_IMPORTED_MODULE_0__.Constants.EMPTY_STRING).replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    }\n    /**\r\n     * 'utf8': Multibyte encoded Unicode characters. Many web pages and other document formats use UTF-8.\r\n     * 'base64': Base64 encoding.\r\n     *\r\n     * @param base64Str Base64 encoded text\r\n     */ static base64Decode(base64Str) {\n        return Buffer.from(base64Str, \"base64\").toString(\"utf8\");\n    }\n    /**\r\n     * @param base64Str Base64 encoded Url\r\n     */ static base64DecodeUrl(base64Str) {\n        let str = base64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        while(str.length % 4){\n            str += \"=\";\n        }\n        return EncodingUtils.base64Decode(str);\n    }\n}\n //# sourceMappingURL=EncodingUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L3V0aWxzL0VuY29kaW5nVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0NBQXdDLEdBQ3hDO0FBQ29EO0FBRXBEOzs7Q0FHQyxHQUNELE1BQU1DO0lBQ0Y7Ozs7O0tBS0MsR0FDRCxPQUFPQyxhQUFhQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtRQUMvQixPQUFPQyxPQUFPQyxJQUFJLENBQUNILEtBQUtDLFVBQVVHLFFBQVEsQ0FBQztJQUMvQztJQUNBOzs7S0FHQyxHQUNELE9BQU9DLGdCQUFnQkwsR0FBRyxFQUFFQyxRQUFRLEVBQUU7UUFDbEMsT0FBT0gsY0FBY0MsWUFBWSxDQUFDQyxLQUFLQyxVQUNsQ0ssT0FBTyxDQUFDLE1BQU1ULDhEQUFTQSxDQUFDVSxZQUFZLEVBQ3BDRCxPQUFPLENBQUMsT0FBTyxLQUNmQSxPQUFPLENBQUMsT0FBTztJQUN4QjtJQUNBOzs7OztLQUtDLEdBQ0QsT0FBT0UsYUFBYUMsU0FBUyxFQUFFO1FBQzNCLE9BQU9QLE9BQU9DLElBQUksQ0FBQ00sV0FBVyxVQUFVTCxRQUFRLENBQUM7SUFDckQ7SUFDQTs7S0FFQyxHQUNELE9BQU9NLGdCQUFnQkQsU0FBUyxFQUFFO1FBQzlCLElBQUlULE1BQU1TLFVBQVVILE9BQU8sQ0FBQyxNQUFNLEtBQUtBLE9BQU8sQ0FBQyxNQUFNO1FBQ3JELE1BQU9OLElBQUlXLE1BQU0sR0FBRyxFQUFHO1lBQ25CWCxPQUFPO1FBQ1g7UUFDQSxPQUFPRixjQUFjVSxZQUFZLENBQUNSO0lBQ3RDO0FBQ0o7QUFFeUIsQ0FDekIsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvc29kaWZ5LWJhY2tlbmQvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L3V0aWxzL0VuY29kaW5nVXRpbHMubWpzP2UxZjMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohIEBhenVyZS9tc2FsLW5vZGUgdjIuMTYuMiAyMDI0LTExLTE5ICovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICdAYXp1cmUvbXNhbC1jb21tb24vbm9kZSc7XG5cbi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBFbmNvZGluZ1V0aWxzIHtcclxuICAgIC8qKlxyXG4gICAgICogJ3V0ZjgnOiBNdWx0aWJ5dGUgZW5jb2RlZCBVbmljb2RlIGNoYXJhY3RlcnMuIE1hbnkgd2ViIHBhZ2VzIGFuZCBvdGhlciBkb2N1bWVudCBmb3JtYXRzIHVzZSBVVEYtOC5cclxuICAgICAqICdiYXNlNjQnOiBCYXNlNjQgZW5jb2RpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHN0ciB0ZXh0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBiYXNlNjRFbmNvZGUoc3RyLCBlbmNvZGluZykge1xyXG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShzdHIsIGVuY29kaW5nKS50b1N0cmluZyhcImJhc2U2NFwiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZW5jb2RlIGEgVVJMXHJcbiAgICAgKiBAcGFyYW0gc3RyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBiYXNlNjRFbmNvZGVVcmwoc3RyLCBlbmNvZGluZykge1xyXG4gICAgICAgIHJldHVybiBFbmNvZGluZ1V0aWxzLmJhc2U2NEVuY29kZShzdHIsIGVuY29kaW5nKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvPS9nLCBDb25zdGFudHMuRU1QVFlfU1RSSU5HKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csIFwiX1wiKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogJ3V0ZjgnOiBNdWx0aWJ5dGUgZW5jb2RlZCBVbmljb2RlIGNoYXJhY3RlcnMuIE1hbnkgd2ViIHBhZ2VzIGFuZCBvdGhlciBkb2N1bWVudCBmb3JtYXRzIHVzZSBVVEYtOC5cclxuICAgICAqICdiYXNlNjQnOiBCYXNlNjQgZW5jb2RpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGJhc2U2NFN0ciBCYXNlNjQgZW5jb2RlZCB0ZXh0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBiYXNlNjREZWNvZGUoYmFzZTY0U3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJhc2U2NFN0ciwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJ1dGY4XCIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gYmFzZTY0U3RyIEJhc2U2NCBlbmNvZGVkIFVybFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYmFzZTY0RGVjb2RlVXJsKGJhc2U2NFN0cikge1xyXG4gICAgICAgIGxldCBzdHIgPSBiYXNlNjRTdHIucmVwbGFjZSgvLS9nLCBcIitcIikucmVwbGFjZSgvXy9nLCBcIi9cIik7XHJcbiAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggJSA0KSB7XHJcbiAgICAgICAgICAgIHN0ciArPSBcIj1cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEVuY29kaW5nVXRpbHMuYmFzZTY0RGVjb2RlKHN0cik7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgRW5jb2RpbmdVdGlscyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RW5jb2RpbmdVdGlscy5tanMubWFwXG4iXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwiRW5jb2RpbmdVdGlscyIsImJhc2U2NEVuY29kZSIsInN0ciIsImVuY29kaW5nIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwiYmFzZTY0RW5jb2RlVXJsIiwicmVwbGFjZSIsIkVNUFRZX1NUUklORyIsImJhc2U2NERlY29kZSIsImJhc2U2NFN0ciIsImJhc2U2NERlY29kZVVybCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/utils/EncodingUtils.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/msal-node/dist/utils/NetworkUtils.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/msal-node/dist/utils/NetworkUtils.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NetworkUtils: () => (/* binding */ NetworkUtils)\n/* harmony export */ });\n/*! @azure/msal-node v2.16.2 2024-11-19 */ \n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */ class NetworkUtils {\n    static getNetworkResponse(headers, body, statusCode) {\n        return {\n            headers: headers,\n            body: body,\n            status: statusCode\n        };\n    }\n    /*\r\n     * Utility function that converts a URL object into an ordinary options object as expected by the\r\n     * http.request and https.request APIs.\r\n     * https://github.com/nodejs/node/blob/main/lib/internal/url.js#L1090\r\n     */ static urlToHttpOptions(url) {\n        const options = {\n            protocol: url.protocol,\n            hostname: url.hostname && url.hostname.startsWith(\"[\") ? url.hostname.slice(1, -1) : url.hostname,\n            hash: url.hash,\n            search: url.search,\n            pathname: url.pathname,\n            path: `${url.pathname || \"\"}${url.search || \"\"}`,\n            href: url.href\n        };\n        if (url.port !== \"\") {\n            options.port = Number(url.port);\n        }\n        if (url.username || url.password) {\n            options.auth = `${decodeURIComponent(url.username)}:${decodeURIComponent(url.password)}`;\n        }\n        return options;\n    }\n}\n //# sourceMappingURL=NetworkUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL21zYWwtbm9kZS9kaXN0L3V0aWxzL05ldHdvcmtVdGlscy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHdDQUF3QyxHQUN4QztBQUNBOzs7Q0FHQyxHQUNELE1BQU1BO0lBQ0YsT0FBT0MsbUJBQW1CQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsVUFBVSxFQUFFO1FBQ2pELE9BQU87WUFDSEYsU0FBU0E7WUFDVEMsTUFBTUE7WUFDTkUsUUFBUUQ7UUFDWjtJQUNKO0lBQ0E7Ozs7S0FJQyxHQUNELE9BQU9FLGlCQUFpQkMsR0FBRyxFQUFFO1FBQ3pCLE1BQU1DLFVBQVU7WUFDWkMsVUFBVUYsSUFBSUUsUUFBUTtZQUN0QkMsVUFBVUgsSUFBSUcsUUFBUSxJQUFJSCxJQUFJRyxRQUFRLENBQUNDLFVBQVUsQ0FBQyxPQUM1Q0osSUFBSUcsUUFBUSxDQUFDRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQ3ZCTCxJQUFJRyxRQUFRO1lBQ2xCRyxNQUFNTixJQUFJTSxJQUFJO1lBQ2RDLFFBQVFQLElBQUlPLE1BQU07WUFDbEJDLFVBQVVSLElBQUlRLFFBQVE7WUFDdEJDLE1BQU0sQ0FBQyxFQUFFVCxJQUFJUSxRQUFRLElBQUksR0FBRyxFQUFFUixJQUFJTyxNQUFNLElBQUksR0FBRyxDQUFDO1lBQ2hERyxNQUFNVixJQUFJVSxJQUFJO1FBQ2xCO1FBQ0EsSUFBSVYsSUFBSVcsSUFBSSxLQUFLLElBQUk7WUFDakJWLFFBQVFVLElBQUksR0FBR0MsT0FBT1osSUFBSVcsSUFBSTtRQUNsQztRQUNBLElBQUlYLElBQUlhLFFBQVEsSUFBSWIsSUFBSWMsUUFBUSxFQUFFO1lBQzlCYixRQUFRYyxJQUFJLEdBQUcsQ0FBQyxFQUFFQyxtQkFBbUJoQixJQUFJYSxRQUFRLEVBQUUsQ0FBQyxFQUFFRyxtQkFBbUJoQixJQUFJYyxRQUFRLEVBQUUsQ0FBQztRQUM1RjtRQUNBLE9BQU9iO0lBQ1g7QUFDSjtBQUV3QixDQUN4Qix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9zb2RpZnktYmFja2VuZC8uL25vZGVfbW9kdWxlcy9AYXp1cmUvbXNhbC1ub2RlL2Rpc3QvdXRpbHMvTmV0d29ya1V0aWxzLm1qcz82YTU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBAYXp1cmUvbXNhbC1ub2RlIHYyLjE2LjIgMjAyNC0xMS0xOSAqL1xuJ3VzZSBzdHJpY3QnO1xuLypcclxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIE5ldHdvcmtVdGlscyB7XHJcbiAgICBzdGF0aWMgZ2V0TmV0d29ya1Jlc3BvbnNlKGhlYWRlcnMsIGJvZHksIHN0YXR1c0NvZGUpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxyXG4gICAgICAgICAgICBib2R5OiBib2R5LFxyXG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1c0NvZGUsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qXHJcbiAgICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRoYXQgY29udmVydHMgYSBVUkwgb2JqZWN0IGludG8gYW4gb3JkaW5hcnkgb3B0aW9ucyBvYmplY3QgYXMgZXhwZWN0ZWQgYnkgdGhlXHJcbiAgICAgKiBodHRwLnJlcXVlc3QgYW5kIGh0dHBzLnJlcXVlc3QgQVBJcy5cclxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL21haW4vbGliL2ludGVybmFsL3VybC5qcyNMMTA5MFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdXJsVG9IdHRwT3B0aW9ucyh1cmwpIHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBwcm90b2NvbDogdXJsLnByb3RvY29sLFxyXG4gICAgICAgICAgICBob3N0bmFtZTogdXJsLmhvc3RuYW1lICYmIHVybC5ob3N0bmFtZS5zdGFydHNXaXRoKFwiW1wiKVxyXG4gICAgICAgICAgICAgICAgPyB1cmwuaG9zdG5hbWUuc2xpY2UoMSwgLTEpXHJcbiAgICAgICAgICAgICAgICA6IHVybC5ob3N0bmFtZSxcclxuICAgICAgICAgICAgaGFzaDogdXJsLmhhc2gsXHJcbiAgICAgICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaCxcclxuICAgICAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZSxcclxuICAgICAgICAgICAgcGF0aDogYCR7dXJsLnBhdGhuYW1lIHx8IFwiXCJ9JHt1cmwuc2VhcmNoIHx8IFwiXCJ9YCxcclxuICAgICAgICAgICAgaHJlZjogdXJsLmhyZWYsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodXJsLnBvcnQgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5wb3J0ID0gTnVtYmVyKHVybC5wb3J0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVybC51c2VybmFtZSB8fCB1cmwucGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5hdXRoID0gYCR7ZGVjb2RlVVJJQ29tcG9uZW50KHVybC51c2VybmFtZSl9OiR7ZGVjb2RlVVJJQ29tcG9uZW50KHVybC5wYXNzd29yZCl9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgTmV0d29ya1V0aWxzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OZXR3b3JrVXRpbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIk5ldHdvcmtVdGlscyIsImdldE5ldHdvcmtSZXNwb25zZSIsImhlYWRlcnMiLCJib2R5Iiwic3RhdHVzQ29kZSIsInN0YXR1cyIsInVybFRvSHR0cE9wdGlvbnMiLCJ1cmwiLCJvcHRpb25zIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInN0YXJ0c1dpdGgiLCJzbGljZSIsImhhc2giLCJzZWFyY2giLCJwYXRobmFtZSIsInBhdGgiLCJocmVmIiwicG9ydCIsIk51bWJlciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhdXRoIiwiZGVjb2RlVVJJQ29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/msal-node/dist/utils/NetworkUtils.mjs\n");

/***/ })

};
;